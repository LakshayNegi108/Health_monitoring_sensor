
HMS_TRY_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000edec  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c4c  0800eeb0  0800eeb0  0001eeb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fafc  0800fafc  00020230  2**0
                  CONTENTS
  4 .ARM          00000000  0800fafc  0800fafc  00020230  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fafc  0800fafc  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fafc  0800fafc  0001fafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb00  0800fb00  0001fb00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  0800fb04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000151c  20000230  0800fd34  00020230  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000174c  0800fd34  0002174c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fbdf  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031b8  00000000  00000000  0002fe37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  00032ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d18  00000000  00000000  00033e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014c5d  00000000  00000000  00034ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ad6  00000000  00000000  00049805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068dc3  00000000  00000000  0005c2db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c509e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049ec  00000000  00000000  000c50f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000230 	.word	0x20000230
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ee94 	.word	0x0800ee94

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000234 	.word	0x20000234
 8000104:	0800ee94 	.word	0x0800ee94

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fe81 	bl	8002144 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fdd1 	bl	8001ff4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fe73 	bl	8002144 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fe69 	bl	8002144 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fdf9 	bl	8002078 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fdef 	bl	8002078 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fbc5 	bl	8000c40 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fb51 	bl	8000b68 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fbb7 	bl	8000c40 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fbad 	bl	8000c40 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fb5d 	bl	8000bb4 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fb53 	bl	8000bb4 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_d2uiz>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	2200      	movs	r2, #0
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <__aeabi_d2uiz+0x38>)
 8000522:	0004      	movs	r4, r0
 8000524:	000d      	movs	r5, r1
 8000526:	f7ff ffb5 	bl	8000494 <__aeabi_dcmpge>
 800052a:	2800      	cmp	r0, #0
 800052c:	d104      	bne.n	8000538 <__aeabi_d2uiz+0x1c>
 800052e:	0020      	movs	r0, r4
 8000530:	0029      	movs	r1, r5
 8000532:	f002 fc87 	bl	8002e44 <__aeabi_d2iz>
 8000536:	bd70      	pop	{r4, r5, r6, pc}
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <__aeabi_d2uiz+0x38>)
 800053a:	2200      	movs	r2, #0
 800053c:	0020      	movs	r0, r4
 800053e:	0029      	movs	r1, r5
 8000540:	f002 f8d0 	bl	80026e4 <__aeabi_dsub>
 8000544:	f002 fc7e 	bl	8002e44 <__aeabi_d2iz>
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	061b      	lsls	r3, r3, #24
 800054c:	469c      	mov	ip, r3
 800054e:	4460      	add	r0, ip
 8000550:	e7f1      	b.n	8000536 <__aeabi_d2uiz+0x1a>
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	41e00000 	.word	0x41e00000

08000558 <__aeabi_d2lz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	0005      	movs	r5, r0
 800055c:	000c      	movs	r4, r1
 800055e:	2200      	movs	r2, #0
 8000560:	2300      	movs	r3, #0
 8000562:	0028      	movs	r0, r5
 8000564:	0021      	movs	r1, r4
 8000566:	f7ff ff77 	bl	8000458 <__aeabi_dcmplt>
 800056a:	2800      	cmp	r0, #0
 800056c:	d108      	bne.n	8000580 <__aeabi_d2lz+0x28>
 800056e:	0028      	movs	r0, r5
 8000570:	0021      	movs	r1, r4
 8000572:	f000 f80f 	bl	8000594 <__aeabi_d2ulz>
 8000576:	0002      	movs	r2, r0
 8000578:	000b      	movs	r3, r1
 800057a:	0010      	movs	r0, r2
 800057c:	0019      	movs	r1, r3
 800057e:	bd70      	pop	{r4, r5, r6, pc}
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	061b      	lsls	r3, r3, #24
 8000584:	18e1      	adds	r1, r4, r3
 8000586:	0028      	movs	r0, r5
 8000588:	f000 f804 	bl	8000594 <__aeabi_d2ulz>
 800058c:	2300      	movs	r3, #0
 800058e:	4242      	negs	r2, r0
 8000590:	418b      	sbcs	r3, r1
 8000592:	e7f2      	b.n	800057a <__aeabi_d2lz+0x22>

08000594 <__aeabi_d2ulz>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	2200      	movs	r2, #0
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <__aeabi_d2ulz+0x34>)
 800059a:	000d      	movs	r5, r1
 800059c:	0004      	movs	r4, r0
 800059e:	f001 fe35 	bl	800220c <__aeabi_dmul>
 80005a2:	f7ff ffbb 	bl	800051c <__aeabi_d2uiz>
 80005a6:	0006      	movs	r6, r0
 80005a8:	f002 fcb2 	bl	8002f10 <__aeabi_ui2d>
 80005ac:	2200      	movs	r2, #0
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <__aeabi_d2ulz+0x38>)
 80005b0:	f001 fe2c 	bl	800220c <__aeabi_dmul>
 80005b4:	0002      	movs	r2, r0
 80005b6:	000b      	movs	r3, r1
 80005b8:	0020      	movs	r0, r4
 80005ba:	0029      	movs	r1, r5
 80005bc:	f002 f892 	bl	80026e4 <__aeabi_dsub>
 80005c0:	f7ff ffac 	bl	800051c <__aeabi_d2uiz>
 80005c4:	0031      	movs	r1, r6
 80005c6:	bd70      	pop	{r4, r5, r6, pc}
 80005c8:	3df00000 	.word	0x3df00000
 80005cc:	41f00000 	.word	0x41f00000

080005d0 <__aeabi_l2d>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	0006      	movs	r6, r0
 80005d4:	0008      	movs	r0, r1
 80005d6:	f002 fc6b 	bl	8002eb0 <__aeabi_i2d>
 80005da:	2200      	movs	r2, #0
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <__aeabi_l2d+0x28>)
 80005de:	f001 fe15 	bl	800220c <__aeabi_dmul>
 80005e2:	000d      	movs	r5, r1
 80005e4:	0004      	movs	r4, r0
 80005e6:	0030      	movs	r0, r6
 80005e8:	f002 fc92 	bl	8002f10 <__aeabi_ui2d>
 80005ec:	002b      	movs	r3, r5
 80005ee:	0022      	movs	r2, r4
 80005f0:	f000 fece 	bl	8001390 <__aeabi_dadd>
 80005f4:	bd70      	pop	{r4, r5, r6, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	41f00000 	.word	0x41f00000

080005fc <__aeabi_fadd>:
 80005fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fe:	46c6      	mov	lr, r8
 8000600:	0243      	lsls	r3, r0, #9
 8000602:	0a5b      	lsrs	r3, r3, #9
 8000604:	024e      	lsls	r6, r1, #9
 8000606:	0045      	lsls	r5, r0, #1
 8000608:	004f      	lsls	r7, r1, #1
 800060a:	00da      	lsls	r2, r3, #3
 800060c:	0fc4      	lsrs	r4, r0, #31
 800060e:	469c      	mov	ip, r3
 8000610:	0a70      	lsrs	r0, r6, #9
 8000612:	4690      	mov	r8, r2
 8000614:	b500      	push	{lr}
 8000616:	0e2d      	lsrs	r5, r5, #24
 8000618:	0e3f      	lsrs	r7, r7, #24
 800061a:	0fc9      	lsrs	r1, r1, #31
 800061c:	09b6      	lsrs	r6, r6, #6
 800061e:	428c      	cmp	r4, r1
 8000620:	d04b      	beq.n	80006ba <__aeabi_fadd+0xbe>
 8000622:	1bea      	subs	r2, r5, r7
 8000624:	2a00      	cmp	r2, #0
 8000626:	dd36      	ble.n	8000696 <__aeabi_fadd+0x9a>
 8000628:	2f00      	cmp	r7, #0
 800062a:	d061      	beq.n	80006f0 <__aeabi_fadd+0xf4>
 800062c:	2dff      	cmp	r5, #255	; 0xff
 800062e:	d100      	bne.n	8000632 <__aeabi_fadd+0x36>
 8000630:	e0ad      	b.n	800078e <__aeabi_fadd+0x192>
 8000632:	2380      	movs	r3, #128	; 0x80
 8000634:	04db      	lsls	r3, r3, #19
 8000636:	431e      	orrs	r6, r3
 8000638:	2a1b      	cmp	r2, #27
 800063a:	dc00      	bgt.n	800063e <__aeabi_fadd+0x42>
 800063c:	e0d3      	b.n	80007e6 <__aeabi_fadd+0x1ea>
 800063e:	2001      	movs	r0, #1
 8000640:	4643      	mov	r3, r8
 8000642:	1a18      	subs	r0, r3, r0
 8000644:	0143      	lsls	r3, r0, #5
 8000646:	d400      	bmi.n	800064a <__aeabi_fadd+0x4e>
 8000648:	e08c      	b.n	8000764 <__aeabi_fadd+0x168>
 800064a:	0180      	lsls	r0, r0, #6
 800064c:	0987      	lsrs	r7, r0, #6
 800064e:	0038      	movs	r0, r7
 8000650:	f002 fd54 	bl	80030fc <__clzsi2>
 8000654:	3805      	subs	r0, #5
 8000656:	4087      	lsls	r7, r0
 8000658:	4285      	cmp	r5, r0
 800065a:	dc00      	bgt.n	800065e <__aeabi_fadd+0x62>
 800065c:	e0b6      	b.n	80007cc <__aeabi_fadd+0x1d0>
 800065e:	1a2d      	subs	r5, r5, r0
 8000660:	48b3      	ldr	r0, [pc, #716]	; (8000930 <__aeabi_fadd+0x334>)
 8000662:	4038      	ands	r0, r7
 8000664:	0743      	lsls	r3, r0, #29
 8000666:	d004      	beq.n	8000672 <__aeabi_fadd+0x76>
 8000668:	230f      	movs	r3, #15
 800066a:	4003      	ands	r3, r0
 800066c:	2b04      	cmp	r3, #4
 800066e:	d000      	beq.n	8000672 <__aeabi_fadd+0x76>
 8000670:	3004      	adds	r0, #4
 8000672:	0143      	lsls	r3, r0, #5
 8000674:	d400      	bmi.n	8000678 <__aeabi_fadd+0x7c>
 8000676:	e078      	b.n	800076a <__aeabi_fadd+0x16e>
 8000678:	1c6a      	adds	r2, r5, #1
 800067a:	2dfe      	cmp	r5, #254	; 0xfe
 800067c:	d065      	beq.n	800074a <__aeabi_fadd+0x14e>
 800067e:	0180      	lsls	r0, r0, #6
 8000680:	0a43      	lsrs	r3, r0, #9
 8000682:	469c      	mov	ip, r3
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	4663      	mov	r3, ip
 8000688:	05d0      	lsls	r0, r2, #23
 800068a:	4318      	orrs	r0, r3
 800068c:	07e4      	lsls	r4, r4, #31
 800068e:	4320      	orrs	r0, r4
 8000690:	bc80      	pop	{r7}
 8000692:	46b8      	mov	r8, r7
 8000694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000696:	2a00      	cmp	r2, #0
 8000698:	d035      	beq.n	8000706 <__aeabi_fadd+0x10a>
 800069a:	1b7a      	subs	r2, r7, r5
 800069c:	2d00      	cmp	r5, #0
 800069e:	d000      	beq.n	80006a2 <__aeabi_fadd+0xa6>
 80006a0:	e0af      	b.n	8000802 <__aeabi_fadd+0x206>
 80006a2:	4643      	mov	r3, r8
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d100      	bne.n	80006aa <__aeabi_fadd+0xae>
 80006a8:	e0a7      	b.n	80007fa <__aeabi_fadd+0x1fe>
 80006aa:	1e53      	subs	r3, r2, #1
 80006ac:	2a01      	cmp	r2, #1
 80006ae:	d100      	bne.n	80006b2 <__aeabi_fadd+0xb6>
 80006b0:	e12f      	b.n	8000912 <__aeabi_fadd+0x316>
 80006b2:	2aff      	cmp	r2, #255	; 0xff
 80006b4:	d069      	beq.n	800078a <__aeabi_fadd+0x18e>
 80006b6:	001a      	movs	r2, r3
 80006b8:	e0aa      	b.n	8000810 <__aeabi_fadd+0x214>
 80006ba:	1be9      	subs	r1, r5, r7
 80006bc:	2900      	cmp	r1, #0
 80006be:	dd70      	ble.n	80007a2 <__aeabi_fadd+0x1a6>
 80006c0:	2f00      	cmp	r7, #0
 80006c2:	d037      	beq.n	8000734 <__aeabi_fadd+0x138>
 80006c4:	2dff      	cmp	r5, #255	; 0xff
 80006c6:	d062      	beq.n	800078e <__aeabi_fadd+0x192>
 80006c8:	2380      	movs	r3, #128	; 0x80
 80006ca:	04db      	lsls	r3, r3, #19
 80006cc:	431e      	orrs	r6, r3
 80006ce:	291b      	cmp	r1, #27
 80006d0:	dc00      	bgt.n	80006d4 <__aeabi_fadd+0xd8>
 80006d2:	e0b0      	b.n	8000836 <__aeabi_fadd+0x23a>
 80006d4:	2001      	movs	r0, #1
 80006d6:	4440      	add	r0, r8
 80006d8:	0143      	lsls	r3, r0, #5
 80006da:	d543      	bpl.n	8000764 <__aeabi_fadd+0x168>
 80006dc:	3501      	adds	r5, #1
 80006de:	2dff      	cmp	r5, #255	; 0xff
 80006e0:	d033      	beq.n	800074a <__aeabi_fadd+0x14e>
 80006e2:	2301      	movs	r3, #1
 80006e4:	4a93      	ldr	r2, [pc, #588]	; (8000934 <__aeabi_fadd+0x338>)
 80006e6:	4003      	ands	r3, r0
 80006e8:	0840      	lsrs	r0, r0, #1
 80006ea:	4010      	ands	r0, r2
 80006ec:	4318      	orrs	r0, r3
 80006ee:	e7b9      	b.n	8000664 <__aeabi_fadd+0x68>
 80006f0:	2e00      	cmp	r6, #0
 80006f2:	d100      	bne.n	80006f6 <__aeabi_fadd+0xfa>
 80006f4:	e083      	b.n	80007fe <__aeabi_fadd+0x202>
 80006f6:	1e51      	subs	r1, r2, #1
 80006f8:	2a01      	cmp	r2, #1
 80006fa:	d100      	bne.n	80006fe <__aeabi_fadd+0x102>
 80006fc:	e0d8      	b.n	80008b0 <__aeabi_fadd+0x2b4>
 80006fe:	2aff      	cmp	r2, #255	; 0xff
 8000700:	d045      	beq.n	800078e <__aeabi_fadd+0x192>
 8000702:	000a      	movs	r2, r1
 8000704:	e798      	b.n	8000638 <__aeabi_fadd+0x3c>
 8000706:	27fe      	movs	r7, #254	; 0xfe
 8000708:	1c6a      	adds	r2, r5, #1
 800070a:	4217      	tst	r7, r2
 800070c:	d000      	beq.n	8000710 <__aeabi_fadd+0x114>
 800070e:	e086      	b.n	800081e <__aeabi_fadd+0x222>
 8000710:	2d00      	cmp	r5, #0
 8000712:	d000      	beq.n	8000716 <__aeabi_fadd+0x11a>
 8000714:	e0b7      	b.n	8000886 <__aeabi_fadd+0x28a>
 8000716:	4643      	mov	r3, r8
 8000718:	2b00      	cmp	r3, #0
 800071a:	d100      	bne.n	800071e <__aeabi_fadd+0x122>
 800071c:	e0f3      	b.n	8000906 <__aeabi_fadd+0x30a>
 800071e:	2200      	movs	r2, #0
 8000720:	2e00      	cmp	r6, #0
 8000722:	d0b0      	beq.n	8000686 <__aeabi_fadd+0x8a>
 8000724:	1b98      	subs	r0, r3, r6
 8000726:	0143      	lsls	r3, r0, #5
 8000728:	d400      	bmi.n	800072c <__aeabi_fadd+0x130>
 800072a:	e0fa      	b.n	8000922 <__aeabi_fadd+0x326>
 800072c:	4643      	mov	r3, r8
 800072e:	000c      	movs	r4, r1
 8000730:	1af0      	subs	r0, r6, r3
 8000732:	e797      	b.n	8000664 <__aeabi_fadd+0x68>
 8000734:	2e00      	cmp	r6, #0
 8000736:	d100      	bne.n	800073a <__aeabi_fadd+0x13e>
 8000738:	e0c8      	b.n	80008cc <__aeabi_fadd+0x2d0>
 800073a:	1e4a      	subs	r2, r1, #1
 800073c:	2901      	cmp	r1, #1
 800073e:	d100      	bne.n	8000742 <__aeabi_fadd+0x146>
 8000740:	e0ae      	b.n	80008a0 <__aeabi_fadd+0x2a4>
 8000742:	29ff      	cmp	r1, #255	; 0xff
 8000744:	d023      	beq.n	800078e <__aeabi_fadd+0x192>
 8000746:	0011      	movs	r1, r2
 8000748:	e7c1      	b.n	80006ce <__aeabi_fadd+0xd2>
 800074a:	2300      	movs	r3, #0
 800074c:	22ff      	movs	r2, #255	; 0xff
 800074e:	469c      	mov	ip, r3
 8000750:	e799      	b.n	8000686 <__aeabi_fadd+0x8a>
 8000752:	21fe      	movs	r1, #254	; 0xfe
 8000754:	1c6a      	adds	r2, r5, #1
 8000756:	4211      	tst	r1, r2
 8000758:	d077      	beq.n	800084a <__aeabi_fadd+0x24e>
 800075a:	2aff      	cmp	r2, #255	; 0xff
 800075c:	d0f5      	beq.n	800074a <__aeabi_fadd+0x14e>
 800075e:	0015      	movs	r5, r2
 8000760:	4446      	add	r6, r8
 8000762:	0870      	lsrs	r0, r6, #1
 8000764:	0743      	lsls	r3, r0, #29
 8000766:	d000      	beq.n	800076a <__aeabi_fadd+0x16e>
 8000768:	e77e      	b.n	8000668 <__aeabi_fadd+0x6c>
 800076a:	08c3      	lsrs	r3, r0, #3
 800076c:	2dff      	cmp	r5, #255	; 0xff
 800076e:	d00e      	beq.n	800078e <__aeabi_fadd+0x192>
 8000770:	025b      	lsls	r3, r3, #9
 8000772:	0a5b      	lsrs	r3, r3, #9
 8000774:	469c      	mov	ip, r3
 8000776:	b2ea      	uxtb	r2, r5
 8000778:	e785      	b.n	8000686 <__aeabi_fadd+0x8a>
 800077a:	2e00      	cmp	r6, #0
 800077c:	d007      	beq.n	800078e <__aeabi_fadd+0x192>
 800077e:	2280      	movs	r2, #128	; 0x80
 8000780:	03d2      	lsls	r2, r2, #15
 8000782:	4213      	tst	r3, r2
 8000784:	d003      	beq.n	800078e <__aeabi_fadd+0x192>
 8000786:	4210      	tst	r0, r2
 8000788:	d101      	bne.n	800078e <__aeabi_fadd+0x192>
 800078a:	000c      	movs	r4, r1
 800078c:	0003      	movs	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d0db      	beq.n	800074a <__aeabi_fadd+0x14e>
 8000792:	2080      	movs	r0, #128	; 0x80
 8000794:	03c0      	lsls	r0, r0, #15
 8000796:	4318      	orrs	r0, r3
 8000798:	0240      	lsls	r0, r0, #9
 800079a:	0a43      	lsrs	r3, r0, #9
 800079c:	469c      	mov	ip, r3
 800079e:	22ff      	movs	r2, #255	; 0xff
 80007a0:	e771      	b.n	8000686 <__aeabi_fadd+0x8a>
 80007a2:	2900      	cmp	r1, #0
 80007a4:	d0d5      	beq.n	8000752 <__aeabi_fadd+0x156>
 80007a6:	1b7a      	subs	r2, r7, r5
 80007a8:	2d00      	cmp	r5, #0
 80007aa:	d160      	bne.n	800086e <__aeabi_fadd+0x272>
 80007ac:	4643      	mov	r3, r8
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d024      	beq.n	80007fc <__aeabi_fadd+0x200>
 80007b2:	1e53      	subs	r3, r2, #1
 80007b4:	2a01      	cmp	r2, #1
 80007b6:	d073      	beq.n	80008a0 <__aeabi_fadd+0x2a4>
 80007b8:	2aff      	cmp	r2, #255	; 0xff
 80007ba:	d0e7      	beq.n	800078c <__aeabi_fadd+0x190>
 80007bc:	001a      	movs	r2, r3
 80007be:	2a1b      	cmp	r2, #27
 80007c0:	dc00      	bgt.n	80007c4 <__aeabi_fadd+0x1c8>
 80007c2:	e085      	b.n	80008d0 <__aeabi_fadd+0x2d4>
 80007c4:	2001      	movs	r0, #1
 80007c6:	003d      	movs	r5, r7
 80007c8:	1980      	adds	r0, r0, r6
 80007ca:	e785      	b.n	80006d8 <__aeabi_fadd+0xdc>
 80007cc:	2320      	movs	r3, #32
 80007ce:	003a      	movs	r2, r7
 80007d0:	1b45      	subs	r5, r0, r5
 80007d2:	0038      	movs	r0, r7
 80007d4:	3501      	adds	r5, #1
 80007d6:	40ea      	lsrs	r2, r5
 80007d8:	1b5d      	subs	r5, r3, r5
 80007da:	40a8      	lsls	r0, r5
 80007dc:	1e43      	subs	r3, r0, #1
 80007de:	4198      	sbcs	r0, r3
 80007e0:	2500      	movs	r5, #0
 80007e2:	4310      	orrs	r0, r2
 80007e4:	e73e      	b.n	8000664 <__aeabi_fadd+0x68>
 80007e6:	2320      	movs	r3, #32
 80007e8:	0030      	movs	r0, r6
 80007ea:	1a9b      	subs	r3, r3, r2
 80007ec:	0031      	movs	r1, r6
 80007ee:	4098      	lsls	r0, r3
 80007f0:	40d1      	lsrs	r1, r2
 80007f2:	1e43      	subs	r3, r0, #1
 80007f4:	4198      	sbcs	r0, r3
 80007f6:	4308      	orrs	r0, r1
 80007f8:	e722      	b.n	8000640 <__aeabi_fadd+0x44>
 80007fa:	000c      	movs	r4, r1
 80007fc:	0003      	movs	r3, r0
 80007fe:	0015      	movs	r5, r2
 8000800:	e7b4      	b.n	800076c <__aeabi_fadd+0x170>
 8000802:	2fff      	cmp	r7, #255	; 0xff
 8000804:	d0c1      	beq.n	800078a <__aeabi_fadd+0x18e>
 8000806:	2380      	movs	r3, #128	; 0x80
 8000808:	4640      	mov	r0, r8
 800080a:	04db      	lsls	r3, r3, #19
 800080c:	4318      	orrs	r0, r3
 800080e:	4680      	mov	r8, r0
 8000810:	2a1b      	cmp	r2, #27
 8000812:	dd51      	ble.n	80008b8 <__aeabi_fadd+0x2bc>
 8000814:	2001      	movs	r0, #1
 8000816:	000c      	movs	r4, r1
 8000818:	003d      	movs	r5, r7
 800081a:	1a30      	subs	r0, r6, r0
 800081c:	e712      	b.n	8000644 <__aeabi_fadd+0x48>
 800081e:	4643      	mov	r3, r8
 8000820:	1b9f      	subs	r7, r3, r6
 8000822:	017b      	lsls	r3, r7, #5
 8000824:	d42b      	bmi.n	800087e <__aeabi_fadd+0x282>
 8000826:	2f00      	cmp	r7, #0
 8000828:	d000      	beq.n	800082c <__aeabi_fadd+0x230>
 800082a:	e710      	b.n	800064e <__aeabi_fadd+0x52>
 800082c:	2300      	movs	r3, #0
 800082e:	2400      	movs	r4, #0
 8000830:	2200      	movs	r2, #0
 8000832:	469c      	mov	ip, r3
 8000834:	e727      	b.n	8000686 <__aeabi_fadd+0x8a>
 8000836:	2320      	movs	r3, #32
 8000838:	0032      	movs	r2, r6
 800083a:	0030      	movs	r0, r6
 800083c:	40ca      	lsrs	r2, r1
 800083e:	1a59      	subs	r1, r3, r1
 8000840:	4088      	lsls	r0, r1
 8000842:	1e43      	subs	r3, r0, #1
 8000844:	4198      	sbcs	r0, r3
 8000846:	4310      	orrs	r0, r2
 8000848:	e745      	b.n	80006d6 <__aeabi_fadd+0xda>
 800084a:	2d00      	cmp	r5, #0
 800084c:	d14a      	bne.n	80008e4 <__aeabi_fadd+0x2e8>
 800084e:	4643      	mov	r3, r8
 8000850:	2b00      	cmp	r3, #0
 8000852:	d063      	beq.n	800091c <__aeabi_fadd+0x320>
 8000854:	2200      	movs	r2, #0
 8000856:	2e00      	cmp	r6, #0
 8000858:	d100      	bne.n	800085c <__aeabi_fadd+0x260>
 800085a:	e714      	b.n	8000686 <__aeabi_fadd+0x8a>
 800085c:	0030      	movs	r0, r6
 800085e:	4440      	add	r0, r8
 8000860:	0143      	lsls	r3, r0, #5
 8000862:	d400      	bmi.n	8000866 <__aeabi_fadd+0x26a>
 8000864:	e77e      	b.n	8000764 <__aeabi_fadd+0x168>
 8000866:	4b32      	ldr	r3, [pc, #200]	; (8000930 <__aeabi_fadd+0x334>)
 8000868:	3501      	adds	r5, #1
 800086a:	4018      	ands	r0, r3
 800086c:	e77a      	b.n	8000764 <__aeabi_fadd+0x168>
 800086e:	2fff      	cmp	r7, #255	; 0xff
 8000870:	d08c      	beq.n	800078c <__aeabi_fadd+0x190>
 8000872:	2380      	movs	r3, #128	; 0x80
 8000874:	4641      	mov	r1, r8
 8000876:	04db      	lsls	r3, r3, #19
 8000878:	4319      	orrs	r1, r3
 800087a:	4688      	mov	r8, r1
 800087c:	e79f      	b.n	80007be <__aeabi_fadd+0x1c2>
 800087e:	4643      	mov	r3, r8
 8000880:	000c      	movs	r4, r1
 8000882:	1af7      	subs	r7, r6, r3
 8000884:	e6e3      	b.n	800064e <__aeabi_fadd+0x52>
 8000886:	4642      	mov	r2, r8
 8000888:	2a00      	cmp	r2, #0
 800088a:	d000      	beq.n	800088e <__aeabi_fadd+0x292>
 800088c:	e775      	b.n	800077a <__aeabi_fadd+0x17e>
 800088e:	2e00      	cmp	r6, #0
 8000890:	d000      	beq.n	8000894 <__aeabi_fadd+0x298>
 8000892:	e77a      	b.n	800078a <__aeabi_fadd+0x18e>
 8000894:	2380      	movs	r3, #128	; 0x80
 8000896:	03db      	lsls	r3, r3, #15
 8000898:	2400      	movs	r4, #0
 800089a:	469c      	mov	ip, r3
 800089c:	22ff      	movs	r2, #255	; 0xff
 800089e:	e6f2      	b.n	8000686 <__aeabi_fadd+0x8a>
 80008a0:	0030      	movs	r0, r6
 80008a2:	4440      	add	r0, r8
 80008a4:	2501      	movs	r5, #1
 80008a6:	0143      	lsls	r3, r0, #5
 80008a8:	d400      	bmi.n	80008ac <__aeabi_fadd+0x2b0>
 80008aa:	e75b      	b.n	8000764 <__aeabi_fadd+0x168>
 80008ac:	2502      	movs	r5, #2
 80008ae:	e718      	b.n	80006e2 <__aeabi_fadd+0xe6>
 80008b0:	4643      	mov	r3, r8
 80008b2:	2501      	movs	r5, #1
 80008b4:	1b98      	subs	r0, r3, r6
 80008b6:	e6c5      	b.n	8000644 <__aeabi_fadd+0x48>
 80008b8:	2320      	movs	r3, #32
 80008ba:	4644      	mov	r4, r8
 80008bc:	4640      	mov	r0, r8
 80008be:	40d4      	lsrs	r4, r2
 80008c0:	1a9a      	subs	r2, r3, r2
 80008c2:	4090      	lsls	r0, r2
 80008c4:	1e43      	subs	r3, r0, #1
 80008c6:	4198      	sbcs	r0, r3
 80008c8:	4320      	orrs	r0, r4
 80008ca:	e7a4      	b.n	8000816 <__aeabi_fadd+0x21a>
 80008cc:	000d      	movs	r5, r1
 80008ce:	e74d      	b.n	800076c <__aeabi_fadd+0x170>
 80008d0:	2320      	movs	r3, #32
 80008d2:	4641      	mov	r1, r8
 80008d4:	4640      	mov	r0, r8
 80008d6:	40d1      	lsrs	r1, r2
 80008d8:	1a9a      	subs	r2, r3, r2
 80008da:	4090      	lsls	r0, r2
 80008dc:	1e43      	subs	r3, r0, #1
 80008de:	4198      	sbcs	r0, r3
 80008e0:	4308      	orrs	r0, r1
 80008e2:	e770      	b.n	80007c6 <__aeabi_fadd+0x1ca>
 80008e4:	4642      	mov	r2, r8
 80008e6:	2a00      	cmp	r2, #0
 80008e8:	d100      	bne.n	80008ec <__aeabi_fadd+0x2f0>
 80008ea:	e74f      	b.n	800078c <__aeabi_fadd+0x190>
 80008ec:	2e00      	cmp	r6, #0
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fadd+0x2f6>
 80008f0:	e74d      	b.n	800078e <__aeabi_fadd+0x192>
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	03d2      	lsls	r2, r2, #15
 80008f6:	4213      	tst	r3, r2
 80008f8:	d100      	bne.n	80008fc <__aeabi_fadd+0x300>
 80008fa:	e748      	b.n	800078e <__aeabi_fadd+0x192>
 80008fc:	4210      	tst	r0, r2
 80008fe:	d000      	beq.n	8000902 <__aeabi_fadd+0x306>
 8000900:	e745      	b.n	800078e <__aeabi_fadd+0x192>
 8000902:	0003      	movs	r3, r0
 8000904:	e743      	b.n	800078e <__aeabi_fadd+0x192>
 8000906:	2e00      	cmp	r6, #0
 8000908:	d090      	beq.n	800082c <__aeabi_fadd+0x230>
 800090a:	000c      	movs	r4, r1
 800090c:	4684      	mov	ip, r0
 800090e:	2200      	movs	r2, #0
 8000910:	e6b9      	b.n	8000686 <__aeabi_fadd+0x8a>
 8000912:	4643      	mov	r3, r8
 8000914:	000c      	movs	r4, r1
 8000916:	1af0      	subs	r0, r6, r3
 8000918:	3501      	adds	r5, #1
 800091a:	e693      	b.n	8000644 <__aeabi_fadd+0x48>
 800091c:	4684      	mov	ip, r0
 800091e:	2200      	movs	r2, #0
 8000920:	e6b1      	b.n	8000686 <__aeabi_fadd+0x8a>
 8000922:	2800      	cmp	r0, #0
 8000924:	d000      	beq.n	8000928 <__aeabi_fadd+0x32c>
 8000926:	e71d      	b.n	8000764 <__aeabi_fadd+0x168>
 8000928:	2300      	movs	r3, #0
 800092a:	2400      	movs	r4, #0
 800092c:	469c      	mov	ip, r3
 800092e:	e6aa      	b.n	8000686 <__aeabi_fadd+0x8a>
 8000930:	fbffffff 	.word	0xfbffffff
 8000934:	7dffffff 	.word	0x7dffffff

08000938 <__aeabi_fdiv>:
 8000938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093a:	464f      	mov	r7, r9
 800093c:	4646      	mov	r6, r8
 800093e:	46d6      	mov	lr, sl
 8000940:	0245      	lsls	r5, r0, #9
 8000942:	b5c0      	push	{r6, r7, lr}
 8000944:	0047      	lsls	r7, r0, #1
 8000946:	1c0c      	adds	r4, r1, #0
 8000948:	0a6d      	lsrs	r5, r5, #9
 800094a:	0e3f      	lsrs	r7, r7, #24
 800094c:	0fc6      	lsrs	r6, r0, #31
 800094e:	2f00      	cmp	r7, #0
 8000950:	d100      	bne.n	8000954 <__aeabi_fdiv+0x1c>
 8000952:	e070      	b.n	8000a36 <__aeabi_fdiv+0xfe>
 8000954:	2fff      	cmp	r7, #255	; 0xff
 8000956:	d100      	bne.n	800095a <__aeabi_fdiv+0x22>
 8000958:	e075      	b.n	8000a46 <__aeabi_fdiv+0x10e>
 800095a:	00eb      	lsls	r3, r5, #3
 800095c:	2580      	movs	r5, #128	; 0x80
 800095e:	04ed      	lsls	r5, r5, #19
 8000960:	431d      	orrs	r5, r3
 8000962:	2300      	movs	r3, #0
 8000964:	4699      	mov	r9, r3
 8000966:	469a      	mov	sl, r3
 8000968:	3f7f      	subs	r7, #127	; 0x7f
 800096a:	0260      	lsls	r0, r4, #9
 800096c:	0a43      	lsrs	r3, r0, #9
 800096e:	4698      	mov	r8, r3
 8000970:	0063      	lsls	r3, r4, #1
 8000972:	0e1b      	lsrs	r3, r3, #24
 8000974:	0fe4      	lsrs	r4, r4, #31
 8000976:	2b00      	cmp	r3, #0
 8000978:	d04e      	beq.n	8000a18 <__aeabi_fdiv+0xe0>
 800097a:	2bff      	cmp	r3, #255	; 0xff
 800097c:	d046      	beq.n	8000a0c <__aeabi_fdiv+0xd4>
 800097e:	4642      	mov	r2, r8
 8000980:	00d0      	lsls	r0, r2, #3
 8000982:	2280      	movs	r2, #128	; 0x80
 8000984:	04d2      	lsls	r2, r2, #19
 8000986:	4302      	orrs	r2, r0
 8000988:	4690      	mov	r8, r2
 800098a:	2200      	movs	r2, #0
 800098c:	3b7f      	subs	r3, #127	; 0x7f
 800098e:	0031      	movs	r1, r6
 8000990:	1aff      	subs	r7, r7, r3
 8000992:	464b      	mov	r3, r9
 8000994:	4061      	eors	r1, r4
 8000996:	b2c9      	uxtb	r1, r1
 8000998:	4313      	orrs	r3, r2
 800099a:	2b0f      	cmp	r3, #15
 800099c:	d900      	bls.n	80009a0 <__aeabi_fdiv+0x68>
 800099e:	e0b5      	b.n	8000b0c <__aeabi_fdiv+0x1d4>
 80009a0:	486e      	ldr	r0, [pc, #440]	; (8000b5c <__aeabi_fdiv+0x224>)
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	58c3      	ldr	r3, [r0, r3]
 80009a6:	469f      	mov	pc, r3
 80009a8:	2300      	movs	r3, #0
 80009aa:	4698      	mov	r8, r3
 80009ac:	0026      	movs	r6, r4
 80009ae:	4645      	mov	r5, r8
 80009b0:	4692      	mov	sl, r2
 80009b2:	4653      	mov	r3, sl
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d100      	bne.n	80009ba <__aeabi_fdiv+0x82>
 80009b8:	e089      	b.n	8000ace <__aeabi_fdiv+0x196>
 80009ba:	2b03      	cmp	r3, #3
 80009bc:	d100      	bne.n	80009c0 <__aeabi_fdiv+0x88>
 80009be:	e09e      	b.n	8000afe <__aeabi_fdiv+0x1c6>
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d018      	beq.n	80009f6 <__aeabi_fdiv+0xbe>
 80009c4:	003b      	movs	r3, r7
 80009c6:	337f      	adds	r3, #127	; 0x7f
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	dd69      	ble.n	8000aa0 <__aeabi_fdiv+0x168>
 80009cc:	076a      	lsls	r2, r5, #29
 80009ce:	d004      	beq.n	80009da <__aeabi_fdiv+0xa2>
 80009d0:	220f      	movs	r2, #15
 80009d2:	402a      	ands	r2, r5
 80009d4:	2a04      	cmp	r2, #4
 80009d6:	d000      	beq.n	80009da <__aeabi_fdiv+0xa2>
 80009d8:	3504      	adds	r5, #4
 80009da:	012a      	lsls	r2, r5, #4
 80009dc:	d503      	bpl.n	80009e6 <__aeabi_fdiv+0xae>
 80009de:	4b60      	ldr	r3, [pc, #384]	; (8000b60 <__aeabi_fdiv+0x228>)
 80009e0:	401d      	ands	r5, r3
 80009e2:	003b      	movs	r3, r7
 80009e4:	3380      	adds	r3, #128	; 0x80
 80009e6:	2bfe      	cmp	r3, #254	; 0xfe
 80009e8:	dd00      	ble.n	80009ec <__aeabi_fdiv+0xb4>
 80009ea:	e070      	b.n	8000ace <__aeabi_fdiv+0x196>
 80009ec:	01ad      	lsls	r5, r5, #6
 80009ee:	0a6d      	lsrs	r5, r5, #9
 80009f0:	b2d8      	uxtb	r0, r3
 80009f2:	e002      	b.n	80009fa <__aeabi_fdiv+0xc2>
 80009f4:	000e      	movs	r6, r1
 80009f6:	2000      	movs	r0, #0
 80009f8:	2500      	movs	r5, #0
 80009fa:	05c0      	lsls	r0, r0, #23
 80009fc:	4328      	orrs	r0, r5
 80009fe:	07f6      	lsls	r6, r6, #31
 8000a00:	4330      	orrs	r0, r6
 8000a02:	bce0      	pop	{r5, r6, r7}
 8000a04:	46ba      	mov	sl, r7
 8000a06:	46b1      	mov	r9, r6
 8000a08:	46a8      	mov	r8, r5
 8000a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0c:	4643      	mov	r3, r8
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d13f      	bne.n	8000a92 <__aeabi_fdiv+0x15a>
 8000a12:	2202      	movs	r2, #2
 8000a14:	3fff      	subs	r7, #255	; 0xff
 8000a16:	e003      	b.n	8000a20 <__aeabi_fdiv+0xe8>
 8000a18:	4643      	mov	r3, r8
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d12d      	bne.n	8000a7a <__aeabi_fdiv+0x142>
 8000a1e:	2201      	movs	r2, #1
 8000a20:	0031      	movs	r1, r6
 8000a22:	464b      	mov	r3, r9
 8000a24:	4061      	eors	r1, r4
 8000a26:	b2c9      	uxtb	r1, r1
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	2b0f      	cmp	r3, #15
 8000a2c:	d834      	bhi.n	8000a98 <__aeabi_fdiv+0x160>
 8000a2e:	484d      	ldr	r0, [pc, #308]	; (8000b64 <__aeabi_fdiv+0x22c>)
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	58c3      	ldr	r3, [r0, r3]
 8000a34:	469f      	mov	pc, r3
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	d113      	bne.n	8000a62 <__aeabi_fdiv+0x12a>
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	4699      	mov	r9, r3
 8000a3e:	3b03      	subs	r3, #3
 8000a40:	2700      	movs	r7, #0
 8000a42:	469a      	mov	sl, r3
 8000a44:	e791      	b.n	800096a <__aeabi_fdiv+0x32>
 8000a46:	2d00      	cmp	r5, #0
 8000a48:	d105      	bne.n	8000a56 <__aeabi_fdiv+0x11e>
 8000a4a:	2308      	movs	r3, #8
 8000a4c:	4699      	mov	r9, r3
 8000a4e:	3b06      	subs	r3, #6
 8000a50:	27ff      	movs	r7, #255	; 0xff
 8000a52:	469a      	mov	sl, r3
 8000a54:	e789      	b.n	800096a <__aeabi_fdiv+0x32>
 8000a56:	230c      	movs	r3, #12
 8000a58:	4699      	mov	r9, r3
 8000a5a:	3b09      	subs	r3, #9
 8000a5c:	27ff      	movs	r7, #255	; 0xff
 8000a5e:	469a      	mov	sl, r3
 8000a60:	e783      	b.n	800096a <__aeabi_fdiv+0x32>
 8000a62:	0028      	movs	r0, r5
 8000a64:	f002 fb4a 	bl	80030fc <__clzsi2>
 8000a68:	2776      	movs	r7, #118	; 0x76
 8000a6a:	1f43      	subs	r3, r0, #5
 8000a6c:	409d      	lsls	r5, r3
 8000a6e:	2300      	movs	r3, #0
 8000a70:	427f      	negs	r7, r7
 8000a72:	4699      	mov	r9, r3
 8000a74:	469a      	mov	sl, r3
 8000a76:	1a3f      	subs	r7, r7, r0
 8000a78:	e777      	b.n	800096a <__aeabi_fdiv+0x32>
 8000a7a:	4640      	mov	r0, r8
 8000a7c:	f002 fb3e 	bl	80030fc <__clzsi2>
 8000a80:	4642      	mov	r2, r8
 8000a82:	1f43      	subs	r3, r0, #5
 8000a84:	409a      	lsls	r2, r3
 8000a86:	2376      	movs	r3, #118	; 0x76
 8000a88:	425b      	negs	r3, r3
 8000a8a:	4690      	mov	r8, r2
 8000a8c:	1a1b      	subs	r3, r3, r0
 8000a8e:	2200      	movs	r2, #0
 8000a90:	e77d      	b.n	800098e <__aeabi_fdiv+0x56>
 8000a92:	23ff      	movs	r3, #255	; 0xff
 8000a94:	2203      	movs	r2, #3
 8000a96:	e77a      	b.n	800098e <__aeabi_fdiv+0x56>
 8000a98:	000e      	movs	r6, r1
 8000a9a:	20ff      	movs	r0, #255	; 0xff
 8000a9c:	2500      	movs	r5, #0
 8000a9e:	e7ac      	b.n	80009fa <__aeabi_fdiv+0xc2>
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	1ac0      	subs	r0, r0, r3
 8000aa4:	281b      	cmp	r0, #27
 8000aa6:	dca6      	bgt.n	80009f6 <__aeabi_fdiv+0xbe>
 8000aa8:	379e      	adds	r7, #158	; 0x9e
 8000aaa:	002a      	movs	r2, r5
 8000aac:	40bd      	lsls	r5, r7
 8000aae:	40c2      	lsrs	r2, r0
 8000ab0:	1e6b      	subs	r3, r5, #1
 8000ab2:	419d      	sbcs	r5, r3
 8000ab4:	4315      	orrs	r5, r2
 8000ab6:	076b      	lsls	r3, r5, #29
 8000ab8:	d004      	beq.n	8000ac4 <__aeabi_fdiv+0x18c>
 8000aba:	230f      	movs	r3, #15
 8000abc:	402b      	ands	r3, r5
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	d000      	beq.n	8000ac4 <__aeabi_fdiv+0x18c>
 8000ac2:	3504      	adds	r5, #4
 8000ac4:	016b      	lsls	r3, r5, #5
 8000ac6:	d544      	bpl.n	8000b52 <__aeabi_fdiv+0x21a>
 8000ac8:	2001      	movs	r0, #1
 8000aca:	2500      	movs	r5, #0
 8000acc:	e795      	b.n	80009fa <__aeabi_fdiv+0xc2>
 8000ace:	20ff      	movs	r0, #255	; 0xff
 8000ad0:	2500      	movs	r5, #0
 8000ad2:	e792      	b.n	80009fa <__aeabi_fdiv+0xc2>
 8000ad4:	2580      	movs	r5, #128	; 0x80
 8000ad6:	2600      	movs	r6, #0
 8000ad8:	20ff      	movs	r0, #255	; 0xff
 8000ada:	03ed      	lsls	r5, r5, #15
 8000adc:	e78d      	b.n	80009fa <__aeabi_fdiv+0xc2>
 8000ade:	2300      	movs	r3, #0
 8000ae0:	4698      	mov	r8, r3
 8000ae2:	2080      	movs	r0, #128	; 0x80
 8000ae4:	03c0      	lsls	r0, r0, #15
 8000ae6:	4205      	tst	r5, r0
 8000ae8:	d009      	beq.n	8000afe <__aeabi_fdiv+0x1c6>
 8000aea:	4643      	mov	r3, r8
 8000aec:	4203      	tst	r3, r0
 8000aee:	d106      	bne.n	8000afe <__aeabi_fdiv+0x1c6>
 8000af0:	4645      	mov	r5, r8
 8000af2:	4305      	orrs	r5, r0
 8000af4:	026d      	lsls	r5, r5, #9
 8000af6:	0026      	movs	r6, r4
 8000af8:	20ff      	movs	r0, #255	; 0xff
 8000afa:	0a6d      	lsrs	r5, r5, #9
 8000afc:	e77d      	b.n	80009fa <__aeabi_fdiv+0xc2>
 8000afe:	2080      	movs	r0, #128	; 0x80
 8000b00:	03c0      	lsls	r0, r0, #15
 8000b02:	4305      	orrs	r5, r0
 8000b04:	026d      	lsls	r5, r5, #9
 8000b06:	20ff      	movs	r0, #255	; 0xff
 8000b08:	0a6d      	lsrs	r5, r5, #9
 8000b0a:	e776      	b.n	80009fa <__aeabi_fdiv+0xc2>
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	016b      	lsls	r3, r5, #5
 8000b10:	0150      	lsls	r0, r2, #5
 8000b12:	4283      	cmp	r3, r0
 8000b14:	d219      	bcs.n	8000b4a <__aeabi_fdiv+0x212>
 8000b16:	221b      	movs	r2, #27
 8000b18:	2500      	movs	r5, #0
 8000b1a:	3f01      	subs	r7, #1
 8000b1c:	2601      	movs	r6, #1
 8000b1e:	001c      	movs	r4, r3
 8000b20:	006d      	lsls	r5, r5, #1
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	2c00      	cmp	r4, #0
 8000b26:	db01      	blt.n	8000b2c <__aeabi_fdiv+0x1f4>
 8000b28:	4298      	cmp	r0, r3
 8000b2a:	d801      	bhi.n	8000b30 <__aeabi_fdiv+0x1f8>
 8000b2c:	1a1b      	subs	r3, r3, r0
 8000b2e:	4335      	orrs	r5, r6
 8000b30:	3a01      	subs	r2, #1
 8000b32:	2a00      	cmp	r2, #0
 8000b34:	d1f3      	bne.n	8000b1e <__aeabi_fdiv+0x1e6>
 8000b36:	1e5a      	subs	r2, r3, #1
 8000b38:	4193      	sbcs	r3, r2
 8000b3a:	431d      	orrs	r5, r3
 8000b3c:	003b      	movs	r3, r7
 8000b3e:	337f      	adds	r3, #127	; 0x7f
 8000b40:	000e      	movs	r6, r1
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_fdiv+0x210>
 8000b46:	e741      	b.n	80009cc <__aeabi_fdiv+0x94>
 8000b48:	e7aa      	b.n	8000aa0 <__aeabi_fdiv+0x168>
 8000b4a:	221a      	movs	r2, #26
 8000b4c:	2501      	movs	r5, #1
 8000b4e:	1a1b      	subs	r3, r3, r0
 8000b50:	e7e4      	b.n	8000b1c <__aeabi_fdiv+0x1e4>
 8000b52:	01ad      	lsls	r5, r5, #6
 8000b54:	2000      	movs	r0, #0
 8000b56:	0a6d      	lsrs	r5, r5, #9
 8000b58:	e74f      	b.n	80009fa <__aeabi_fdiv+0xc2>
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	0800f04c 	.word	0x0800f04c
 8000b60:	f7ffffff 	.word	0xf7ffffff
 8000b64:	0800f08c 	.word	0x0800f08c

08000b68 <__eqsf2>:
 8000b68:	b570      	push	{r4, r5, r6, lr}
 8000b6a:	0042      	lsls	r2, r0, #1
 8000b6c:	0245      	lsls	r5, r0, #9
 8000b6e:	024e      	lsls	r6, r1, #9
 8000b70:	004c      	lsls	r4, r1, #1
 8000b72:	0fc3      	lsrs	r3, r0, #31
 8000b74:	0a6d      	lsrs	r5, r5, #9
 8000b76:	2001      	movs	r0, #1
 8000b78:	0e12      	lsrs	r2, r2, #24
 8000b7a:	0a76      	lsrs	r6, r6, #9
 8000b7c:	0e24      	lsrs	r4, r4, #24
 8000b7e:	0fc9      	lsrs	r1, r1, #31
 8000b80:	2aff      	cmp	r2, #255	; 0xff
 8000b82:	d006      	beq.n	8000b92 <__eqsf2+0x2a>
 8000b84:	2cff      	cmp	r4, #255	; 0xff
 8000b86:	d003      	beq.n	8000b90 <__eqsf2+0x28>
 8000b88:	42a2      	cmp	r2, r4
 8000b8a:	d101      	bne.n	8000b90 <__eqsf2+0x28>
 8000b8c:	42b5      	cmp	r5, r6
 8000b8e:	d006      	beq.n	8000b9e <__eqsf2+0x36>
 8000b90:	bd70      	pop	{r4, r5, r6, pc}
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	d1fc      	bne.n	8000b90 <__eqsf2+0x28>
 8000b96:	2cff      	cmp	r4, #255	; 0xff
 8000b98:	d1fa      	bne.n	8000b90 <__eqsf2+0x28>
 8000b9a:	2e00      	cmp	r6, #0
 8000b9c:	d1f8      	bne.n	8000b90 <__eqsf2+0x28>
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d006      	beq.n	8000bb0 <__eqsf2+0x48>
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	2a00      	cmp	r2, #0
 8000ba6:	d1f3      	bne.n	8000b90 <__eqsf2+0x28>
 8000ba8:	0028      	movs	r0, r5
 8000baa:	1e43      	subs	r3, r0, #1
 8000bac:	4198      	sbcs	r0, r3
 8000bae:	e7ef      	b.n	8000b90 <__eqsf2+0x28>
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	e7ed      	b.n	8000b90 <__eqsf2+0x28>

08000bb4 <__gesf2>:
 8000bb4:	b570      	push	{r4, r5, r6, lr}
 8000bb6:	0042      	lsls	r2, r0, #1
 8000bb8:	0245      	lsls	r5, r0, #9
 8000bba:	024e      	lsls	r6, r1, #9
 8000bbc:	004c      	lsls	r4, r1, #1
 8000bbe:	0fc3      	lsrs	r3, r0, #31
 8000bc0:	0a6d      	lsrs	r5, r5, #9
 8000bc2:	0e12      	lsrs	r2, r2, #24
 8000bc4:	0a76      	lsrs	r6, r6, #9
 8000bc6:	0e24      	lsrs	r4, r4, #24
 8000bc8:	0fc8      	lsrs	r0, r1, #31
 8000bca:	2aff      	cmp	r2, #255	; 0xff
 8000bcc:	d01b      	beq.n	8000c06 <__gesf2+0x52>
 8000bce:	2cff      	cmp	r4, #255	; 0xff
 8000bd0:	d00e      	beq.n	8000bf0 <__gesf2+0x3c>
 8000bd2:	2a00      	cmp	r2, #0
 8000bd4:	d11b      	bne.n	8000c0e <__gesf2+0x5a>
 8000bd6:	2c00      	cmp	r4, #0
 8000bd8:	d101      	bne.n	8000bde <__gesf2+0x2a>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	d01c      	beq.n	8000c18 <__gesf2+0x64>
 8000bde:	2d00      	cmp	r5, #0
 8000be0:	d00c      	beq.n	8000bfc <__gesf2+0x48>
 8000be2:	4283      	cmp	r3, r0
 8000be4:	d01c      	beq.n	8000c20 <__gesf2+0x6c>
 8000be6:	2102      	movs	r1, #2
 8000be8:	1e58      	subs	r0, r3, #1
 8000bea:	4008      	ands	r0, r1
 8000bec:	3801      	subs	r0, #1
 8000bee:	bd70      	pop	{r4, r5, r6, pc}
 8000bf0:	2e00      	cmp	r6, #0
 8000bf2:	d122      	bne.n	8000c3a <__gesf2+0x86>
 8000bf4:	2a00      	cmp	r2, #0
 8000bf6:	d1f4      	bne.n	8000be2 <__gesf2+0x2e>
 8000bf8:	2d00      	cmp	r5, #0
 8000bfa:	d1f2      	bne.n	8000be2 <__gesf2+0x2e>
 8000bfc:	2800      	cmp	r0, #0
 8000bfe:	d1f6      	bne.n	8000bee <__gesf2+0x3a>
 8000c00:	2001      	movs	r0, #1
 8000c02:	4240      	negs	r0, r0
 8000c04:	e7f3      	b.n	8000bee <__gesf2+0x3a>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	d117      	bne.n	8000c3a <__gesf2+0x86>
 8000c0a:	2cff      	cmp	r4, #255	; 0xff
 8000c0c:	d0f0      	beq.n	8000bf0 <__gesf2+0x3c>
 8000c0e:	2c00      	cmp	r4, #0
 8000c10:	d1e7      	bne.n	8000be2 <__gesf2+0x2e>
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	d1e5      	bne.n	8000be2 <__gesf2+0x2e>
 8000c16:	e7e6      	b.n	8000be6 <__gesf2+0x32>
 8000c18:	2000      	movs	r0, #0
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d0e7      	beq.n	8000bee <__gesf2+0x3a>
 8000c1e:	e7e2      	b.n	8000be6 <__gesf2+0x32>
 8000c20:	42a2      	cmp	r2, r4
 8000c22:	dc05      	bgt.n	8000c30 <__gesf2+0x7c>
 8000c24:	dbea      	blt.n	8000bfc <__gesf2+0x48>
 8000c26:	42b5      	cmp	r5, r6
 8000c28:	d802      	bhi.n	8000c30 <__gesf2+0x7c>
 8000c2a:	d3e7      	bcc.n	8000bfc <__gesf2+0x48>
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	e7de      	b.n	8000bee <__gesf2+0x3a>
 8000c30:	4243      	negs	r3, r0
 8000c32:	4158      	adcs	r0, r3
 8000c34:	0040      	lsls	r0, r0, #1
 8000c36:	3801      	subs	r0, #1
 8000c38:	e7d9      	b.n	8000bee <__gesf2+0x3a>
 8000c3a:	2002      	movs	r0, #2
 8000c3c:	4240      	negs	r0, r0
 8000c3e:	e7d6      	b.n	8000bee <__gesf2+0x3a>

08000c40 <__lesf2>:
 8000c40:	b570      	push	{r4, r5, r6, lr}
 8000c42:	0042      	lsls	r2, r0, #1
 8000c44:	0245      	lsls	r5, r0, #9
 8000c46:	024e      	lsls	r6, r1, #9
 8000c48:	004c      	lsls	r4, r1, #1
 8000c4a:	0fc3      	lsrs	r3, r0, #31
 8000c4c:	0a6d      	lsrs	r5, r5, #9
 8000c4e:	0e12      	lsrs	r2, r2, #24
 8000c50:	0a76      	lsrs	r6, r6, #9
 8000c52:	0e24      	lsrs	r4, r4, #24
 8000c54:	0fc8      	lsrs	r0, r1, #31
 8000c56:	2aff      	cmp	r2, #255	; 0xff
 8000c58:	d00b      	beq.n	8000c72 <__lesf2+0x32>
 8000c5a:	2cff      	cmp	r4, #255	; 0xff
 8000c5c:	d00d      	beq.n	8000c7a <__lesf2+0x3a>
 8000c5e:	2a00      	cmp	r2, #0
 8000c60:	d11f      	bne.n	8000ca2 <__lesf2+0x62>
 8000c62:	2c00      	cmp	r4, #0
 8000c64:	d116      	bne.n	8000c94 <__lesf2+0x54>
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d114      	bne.n	8000c94 <__lesf2+0x54>
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	2d00      	cmp	r5, #0
 8000c6e:	d010      	beq.n	8000c92 <__lesf2+0x52>
 8000c70:	e009      	b.n	8000c86 <__lesf2+0x46>
 8000c72:	2d00      	cmp	r5, #0
 8000c74:	d10c      	bne.n	8000c90 <__lesf2+0x50>
 8000c76:	2cff      	cmp	r4, #255	; 0xff
 8000c78:	d113      	bne.n	8000ca2 <__lesf2+0x62>
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	d108      	bne.n	8000c90 <__lesf2+0x50>
 8000c7e:	2a00      	cmp	r2, #0
 8000c80:	d008      	beq.n	8000c94 <__lesf2+0x54>
 8000c82:	4283      	cmp	r3, r0
 8000c84:	d012      	beq.n	8000cac <__lesf2+0x6c>
 8000c86:	2102      	movs	r1, #2
 8000c88:	1e58      	subs	r0, r3, #1
 8000c8a:	4008      	ands	r0, r1
 8000c8c:	3801      	subs	r0, #1
 8000c8e:	e000      	b.n	8000c92 <__lesf2+0x52>
 8000c90:	2002      	movs	r0, #2
 8000c92:	bd70      	pop	{r4, r5, r6, pc}
 8000c94:	2d00      	cmp	r5, #0
 8000c96:	d1f4      	bne.n	8000c82 <__lesf2+0x42>
 8000c98:	2800      	cmp	r0, #0
 8000c9a:	d1fa      	bne.n	8000c92 <__lesf2+0x52>
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	e7f7      	b.n	8000c92 <__lesf2+0x52>
 8000ca2:	2c00      	cmp	r4, #0
 8000ca4:	d1ed      	bne.n	8000c82 <__lesf2+0x42>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d1eb      	bne.n	8000c82 <__lesf2+0x42>
 8000caa:	e7ec      	b.n	8000c86 <__lesf2+0x46>
 8000cac:	42a2      	cmp	r2, r4
 8000cae:	dc05      	bgt.n	8000cbc <__lesf2+0x7c>
 8000cb0:	dbf2      	blt.n	8000c98 <__lesf2+0x58>
 8000cb2:	42b5      	cmp	r5, r6
 8000cb4:	d802      	bhi.n	8000cbc <__lesf2+0x7c>
 8000cb6:	d3ef      	bcc.n	8000c98 <__lesf2+0x58>
 8000cb8:	2000      	movs	r0, #0
 8000cba:	e7ea      	b.n	8000c92 <__lesf2+0x52>
 8000cbc:	4243      	negs	r3, r0
 8000cbe:	4158      	adcs	r0, r3
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	e7e5      	b.n	8000c92 <__lesf2+0x52>
 8000cc6:	46c0      	nop			; (mov r8, r8)

08000cc8 <__aeabi_fmul>:
 8000cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cca:	464f      	mov	r7, r9
 8000ccc:	4646      	mov	r6, r8
 8000cce:	46d6      	mov	lr, sl
 8000cd0:	0244      	lsls	r4, r0, #9
 8000cd2:	0045      	lsls	r5, r0, #1
 8000cd4:	b5c0      	push	{r6, r7, lr}
 8000cd6:	0a64      	lsrs	r4, r4, #9
 8000cd8:	1c0f      	adds	r7, r1, #0
 8000cda:	0e2d      	lsrs	r5, r5, #24
 8000cdc:	0fc6      	lsrs	r6, r0, #31
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_fmul+0x1c>
 8000ce2:	e08d      	b.n	8000e00 <__aeabi_fmul+0x138>
 8000ce4:	2dff      	cmp	r5, #255	; 0xff
 8000ce6:	d100      	bne.n	8000cea <__aeabi_fmul+0x22>
 8000ce8:	e092      	b.n	8000e10 <__aeabi_fmul+0x148>
 8000cea:	2300      	movs	r3, #0
 8000cec:	2080      	movs	r0, #128	; 0x80
 8000cee:	4699      	mov	r9, r3
 8000cf0:	469a      	mov	sl, r3
 8000cf2:	00e4      	lsls	r4, r4, #3
 8000cf4:	04c0      	lsls	r0, r0, #19
 8000cf6:	4304      	orrs	r4, r0
 8000cf8:	3d7f      	subs	r5, #127	; 0x7f
 8000cfa:	0278      	lsls	r0, r7, #9
 8000cfc:	0a43      	lsrs	r3, r0, #9
 8000cfe:	4698      	mov	r8, r3
 8000d00:	007b      	lsls	r3, r7, #1
 8000d02:	0e1b      	lsrs	r3, r3, #24
 8000d04:	0fff      	lsrs	r7, r7, #31
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d100      	bne.n	8000d0c <__aeabi_fmul+0x44>
 8000d0a:	e070      	b.n	8000dee <__aeabi_fmul+0x126>
 8000d0c:	2bff      	cmp	r3, #255	; 0xff
 8000d0e:	d100      	bne.n	8000d12 <__aeabi_fmul+0x4a>
 8000d10:	e086      	b.n	8000e20 <__aeabi_fmul+0x158>
 8000d12:	4642      	mov	r2, r8
 8000d14:	00d0      	lsls	r0, r2, #3
 8000d16:	2280      	movs	r2, #128	; 0x80
 8000d18:	3b7f      	subs	r3, #127	; 0x7f
 8000d1a:	18ed      	adds	r5, r5, r3
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	04d2      	lsls	r2, r2, #19
 8000d20:	4302      	orrs	r2, r0
 8000d22:	4690      	mov	r8, r2
 8000d24:	469c      	mov	ip, r3
 8000d26:	0031      	movs	r1, r6
 8000d28:	464b      	mov	r3, r9
 8000d2a:	4079      	eors	r1, r7
 8000d2c:	1c68      	adds	r0, r5, #1
 8000d2e:	2b0f      	cmp	r3, #15
 8000d30:	d81c      	bhi.n	8000d6c <__aeabi_fmul+0xa4>
 8000d32:	4a76      	ldr	r2, [pc, #472]	; (8000f0c <__aeabi_fmul+0x244>)
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	58d3      	ldr	r3, [r2, r3]
 8000d38:	469f      	mov	pc, r3
 8000d3a:	0039      	movs	r1, r7
 8000d3c:	4644      	mov	r4, r8
 8000d3e:	46e2      	mov	sl, ip
 8000d40:	4653      	mov	r3, sl
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d00f      	beq.n	8000d66 <__aeabi_fmul+0x9e>
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	d100      	bne.n	8000d4c <__aeabi_fmul+0x84>
 8000d4a:	e0d7      	b.n	8000efc <__aeabi_fmul+0x234>
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d137      	bne.n	8000dc0 <__aeabi_fmul+0xf8>
 8000d50:	2000      	movs	r0, #0
 8000d52:	2400      	movs	r4, #0
 8000d54:	05c0      	lsls	r0, r0, #23
 8000d56:	4320      	orrs	r0, r4
 8000d58:	07c9      	lsls	r1, r1, #31
 8000d5a:	4308      	orrs	r0, r1
 8000d5c:	bce0      	pop	{r5, r6, r7}
 8000d5e:	46ba      	mov	sl, r7
 8000d60:	46b1      	mov	r9, r6
 8000d62:	46a8      	mov	r8, r5
 8000d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d66:	20ff      	movs	r0, #255	; 0xff
 8000d68:	2400      	movs	r4, #0
 8000d6a:	e7f3      	b.n	8000d54 <__aeabi_fmul+0x8c>
 8000d6c:	0c26      	lsrs	r6, r4, #16
 8000d6e:	0424      	lsls	r4, r4, #16
 8000d70:	0c22      	lsrs	r2, r4, #16
 8000d72:	4644      	mov	r4, r8
 8000d74:	0424      	lsls	r4, r4, #16
 8000d76:	0c24      	lsrs	r4, r4, #16
 8000d78:	4643      	mov	r3, r8
 8000d7a:	0027      	movs	r7, r4
 8000d7c:	0c1b      	lsrs	r3, r3, #16
 8000d7e:	4357      	muls	r7, r2
 8000d80:	4374      	muls	r4, r6
 8000d82:	435a      	muls	r2, r3
 8000d84:	435e      	muls	r6, r3
 8000d86:	1912      	adds	r2, r2, r4
 8000d88:	0c3b      	lsrs	r3, r7, #16
 8000d8a:	189b      	adds	r3, r3, r2
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	d903      	bls.n	8000d98 <__aeabi_fmul+0xd0>
 8000d90:	2280      	movs	r2, #128	; 0x80
 8000d92:	0252      	lsls	r2, r2, #9
 8000d94:	4694      	mov	ip, r2
 8000d96:	4466      	add	r6, ip
 8000d98:	043f      	lsls	r7, r7, #16
 8000d9a:	041a      	lsls	r2, r3, #16
 8000d9c:	0c3f      	lsrs	r7, r7, #16
 8000d9e:	19d2      	adds	r2, r2, r7
 8000da0:	0194      	lsls	r4, r2, #6
 8000da2:	1e67      	subs	r7, r4, #1
 8000da4:	41bc      	sbcs	r4, r7
 8000da6:	0c1b      	lsrs	r3, r3, #16
 8000da8:	0e92      	lsrs	r2, r2, #26
 8000daa:	199b      	adds	r3, r3, r6
 8000dac:	4314      	orrs	r4, r2
 8000dae:	019b      	lsls	r3, r3, #6
 8000db0:	431c      	orrs	r4, r3
 8000db2:	011b      	lsls	r3, r3, #4
 8000db4:	d400      	bmi.n	8000db8 <__aeabi_fmul+0xf0>
 8000db6:	e09b      	b.n	8000ef0 <__aeabi_fmul+0x228>
 8000db8:	2301      	movs	r3, #1
 8000dba:	0862      	lsrs	r2, r4, #1
 8000dbc:	401c      	ands	r4, r3
 8000dbe:	4314      	orrs	r4, r2
 8000dc0:	0002      	movs	r2, r0
 8000dc2:	327f      	adds	r2, #127	; 0x7f
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	dd64      	ble.n	8000e92 <__aeabi_fmul+0x1ca>
 8000dc8:	0763      	lsls	r3, r4, #29
 8000dca:	d004      	beq.n	8000dd6 <__aeabi_fmul+0x10e>
 8000dcc:	230f      	movs	r3, #15
 8000dce:	4023      	ands	r3, r4
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	d000      	beq.n	8000dd6 <__aeabi_fmul+0x10e>
 8000dd4:	3404      	adds	r4, #4
 8000dd6:	0123      	lsls	r3, r4, #4
 8000dd8:	d503      	bpl.n	8000de2 <__aeabi_fmul+0x11a>
 8000dda:	0002      	movs	r2, r0
 8000ddc:	4b4c      	ldr	r3, [pc, #304]	; (8000f10 <__aeabi_fmul+0x248>)
 8000dde:	3280      	adds	r2, #128	; 0x80
 8000de0:	401c      	ands	r4, r3
 8000de2:	2afe      	cmp	r2, #254	; 0xfe
 8000de4:	dcbf      	bgt.n	8000d66 <__aeabi_fmul+0x9e>
 8000de6:	01a4      	lsls	r4, r4, #6
 8000de8:	0a64      	lsrs	r4, r4, #9
 8000dea:	b2d0      	uxtb	r0, r2
 8000dec:	e7b2      	b.n	8000d54 <__aeabi_fmul+0x8c>
 8000dee:	4643      	mov	r3, r8
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d13d      	bne.n	8000e70 <__aeabi_fmul+0x1a8>
 8000df4:	464a      	mov	r2, r9
 8000df6:	3301      	adds	r3, #1
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	4691      	mov	r9, r2
 8000dfc:	469c      	mov	ip, r3
 8000dfe:	e792      	b.n	8000d26 <__aeabi_fmul+0x5e>
 8000e00:	2c00      	cmp	r4, #0
 8000e02:	d129      	bne.n	8000e58 <__aeabi_fmul+0x190>
 8000e04:	2304      	movs	r3, #4
 8000e06:	4699      	mov	r9, r3
 8000e08:	3b03      	subs	r3, #3
 8000e0a:	2500      	movs	r5, #0
 8000e0c:	469a      	mov	sl, r3
 8000e0e:	e774      	b.n	8000cfa <__aeabi_fmul+0x32>
 8000e10:	2c00      	cmp	r4, #0
 8000e12:	d11b      	bne.n	8000e4c <__aeabi_fmul+0x184>
 8000e14:	2308      	movs	r3, #8
 8000e16:	4699      	mov	r9, r3
 8000e18:	3b06      	subs	r3, #6
 8000e1a:	25ff      	movs	r5, #255	; 0xff
 8000e1c:	469a      	mov	sl, r3
 8000e1e:	e76c      	b.n	8000cfa <__aeabi_fmul+0x32>
 8000e20:	4643      	mov	r3, r8
 8000e22:	35ff      	adds	r5, #255	; 0xff
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d10b      	bne.n	8000e40 <__aeabi_fmul+0x178>
 8000e28:	2302      	movs	r3, #2
 8000e2a:	464a      	mov	r2, r9
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	4691      	mov	r9, r2
 8000e30:	469c      	mov	ip, r3
 8000e32:	e778      	b.n	8000d26 <__aeabi_fmul+0x5e>
 8000e34:	4653      	mov	r3, sl
 8000e36:	0031      	movs	r1, r6
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d000      	beq.n	8000e3e <__aeabi_fmul+0x176>
 8000e3c:	e783      	b.n	8000d46 <__aeabi_fmul+0x7e>
 8000e3e:	e792      	b.n	8000d66 <__aeabi_fmul+0x9e>
 8000e40:	2303      	movs	r3, #3
 8000e42:	464a      	mov	r2, r9
 8000e44:	431a      	orrs	r2, r3
 8000e46:	4691      	mov	r9, r2
 8000e48:	469c      	mov	ip, r3
 8000e4a:	e76c      	b.n	8000d26 <__aeabi_fmul+0x5e>
 8000e4c:	230c      	movs	r3, #12
 8000e4e:	4699      	mov	r9, r3
 8000e50:	3b09      	subs	r3, #9
 8000e52:	25ff      	movs	r5, #255	; 0xff
 8000e54:	469a      	mov	sl, r3
 8000e56:	e750      	b.n	8000cfa <__aeabi_fmul+0x32>
 8000e58:	0020      	movs	r0, r4
 8000e5a:	f002 f94f 	bl	80030fc <__clzsi2>
 8000e5e:	2576      	movs	r5, #118	; 0x76
 8000e60:	1f43      	subs	r3, r0, #5
 8000e62:	409c      	lsls	r4, r3
 8000e64:	2300      	movs	r3, #0
 8000e66:	426d      	negs	r5, r5
 8000e68:	4699      	mov	r9, r3
 8000e6a:	469a      	mov	sl, r3
 8000e6c:	1a2d      	subs	r5, r5, r0
 8000e6e:	e744      	b.n	8000cfa <__aeabi_fmul+0x32>
 8000e70:	4640      	mov	r0, r8
 8000e72:	f002 f943 	bl	80030fc <__clzsi2>
 8000e76:	4642      	mov	r2, r8
 8000e78:	1f43      	subs	r3, r0, #5
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	1a2d      	subs	r5, r5, r0
 8000e80:	4690      	mov	r8, r2
 8000e82:	469c      	mov	ip, r3
 8000e84:	3d76      	subs	r5, #118	; 0x76
 8000e86:	e74e      	b.n	8000d26 <__aeabi_fmul+0x5e>
 8000e88:	2480      	movs	r4, #128	; 0x80
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	20ff      	movs	r0, #255	; 0xff
 8000e8e:	03e4      	lsls	r4, r4, #15
 8000e90:	e760      	b.n	8000d54 <__aeabi_fmul+0x8c>
 8000e92:	2301      	movs	r3, #1
 8000e94:	1a9b      	subs	r3, r3, r2
 8000e96:	2b1b      	cmp	r3, #27
 8000e98:	dd00      	ble.n	8000e9c <__aeabi_fmul+0x1d4>
 8000e9a:	e759      	b.n	8000d50 <__aeabi_fmul+0x88>
 8000e9c:	0022      	movs	r2, r4
 8000e9e:	309e      	adds	r0, #158	; 0x9e
 8000ea0:	40da      	lsrs	r2, r3
 8000ea2:	4084      	lsls	r4, r0
 8000ea4:	0013      	movs	r3, r2
 8000ea6:	1e62      	subs	r2, r4, #1
 8000ea8:	4194      	sbcs	r4, r2
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	0763      	lsls	r3, r4, #29
 8000eae:	d004      	beq.n	8000eba <__aeabi_fmul+0x1f2>
 8000eb0:	230f      	movs	r3, #15
 8000eb2:	4023      	ands	r3, r4
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	d000      	beq.n	8000eba <__aeabi_fmul+0x1f2>
 8000eb8:	3404      	adds	r4, #4
 8000eba:	0163      	lsls	r3, r4, #5
 8000ebc:	d51a      	bpl.n	8000ef4 <__aeabi_fmul+0x22c>
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	2400      	movs	r4, #0
 8000ec2:	e747      	b.n	8000d54 <__aeabi_fmul+0x8c>
 8000ec4:	2080      	movs	r0, #128	; 0x80
 8000ec6:	03c0      	lsls	r0, r0, #15
 8000ec8:	4204      	tst	r4, r0
 8000eca:	d009      	beq.n	8000ee0 <__aeabi_fmul+0x218>
 8000ecc:	4643      	mov	r3, r8
 8000ece:	4203      	tst	r3, r0
 8000ed0:	d106      	bne.n	8000ee0 <__aeabi_fmul+0x218>
 8000ed2:	4644      	mov	r4, r8
 8000ed4:	4304      	orrs	r4, r0
 8000ed6:	0264      	lsls	r4, r4, #9
 8000ed8:	0039      	movs	r1, r7
 8000eda:	20ff      	movs	r0, #255	; 0xff
 8000edc:	0a64      	lsrs	r4, r4, #9
 8000ede:	e739      	b.n	8000d54 <__aeabi_fmul+0x8c>
 8000ee0:	2080      	movs	r0, #128	; 0x80
 8000ee2:	03c0      	lsls	r0, r0, #15
 8000ee4:	4304      	orrs	r4, r0
 8000ee6:	0264      	lsls	r4, r4, #9
 8000ee8:	0031      	movs	r1, r6
 8000eea:	20ff      	movs	r0, #255	; 0xff
 8000eec:	0a64      	lsrs	r4, r4, #9
 8000eee:	e731      	b.n	8000d54 <__aeabi_fmul+0x8c>
 8000ef0:	0028      	movs	r0, r5
 8000ef2:	e765      	b.n	8000dc0 <__aeabi_fmul+0xf8>
 8000ef4:	01a4      	lsls	r4, r4, #6
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0a64      	lsrs	r4, r4, #9
 8000efa:	e72b      	b.n	8000d54 <__aeabi_fmul+0x8c>
 8000efc:	2080      	movs	r0, #128	; 0x80
 8000efe:	03c0      	lsls	r0, r0, #15
 8000f00:	4304      	orrs	r4, r0
 8000f02:	0264      	lsls	r4, r4, #9
 8000f04:	20ff      	movs	r0, #255	; 0xff
 8000f06:	0a64      	lsrs	r4, r4, #9
 8000f08:	e724      	b.n	8000d54 <__aeabi_fmul+0x8c>
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	0800f0cc 	.word	0x0800f0cc
 8000f10:	f7ffffff 	.word	0xf7ffffff

08000f14 <__aeabi_fsub>:
 8000f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f16:	46ce      	mov	lr, r9
 8000f18:	4647      	mov	r7, r8
 8000f1a:	0243      	lsls	r3, r0, #9
 8000f1c:	0a5b      	lsrs	r3, r3, #9
 8000f1e:	024e      	lsls	r6, r1, #9
 8000f20:	00da      	lsls	r2, r3, #3
 8000f22:	4694      	mov	ip, r2
 8000f24:	0a72      	lsrs	r2, r6, #9
 8000f26:	4691      	mov	r9, r2
 8000f28:	0045      	lsls	r5, r0, #1
 8000f2a:	004a      	lsls	r2, r1, #1
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	0e2d      	lsrs	r5, r5, #24
 8000f30:	001f      	movs	r7, r3
 8000f32:	0fc4      	lsrs	r4, r0, #31
 8000f34:	0e12      	lsrs	r2, r2, #24
 8000f36:	0fc9      	lsrs	r1, r1, #31
 8000f38:	09b6      	lsrs	r6, r6, #6
 8000f3a:	2aff      	cmp	r2, #255	; 0xff
 8000f3c:	d05b      	beq.n	8000ff6 <__aeabi_fsub+0xe2>
 8000f3e:	2001      	movs	r0, #1
 8000f40:	4041      	eors	r1, r0
 8000f42:	428c      	cmp	r4, r1
 8000f44:	d039      	beq.n	8000fba <__aeabi_fsub+0xa6>
 8000f46:	1aa8      	subs	r0, r5, r2
 8000f48:	2800      	cmp	r0, #0
 8000f4a:	dd5a      	ble.n	8001002 <__aeabi_fsub+0xee>
 8000f4c:	2a00      	cmp	r2, #0
 8000f4e:	d06a      	beq.n	8001026 <__aeabi_fsub+0x112>
 8000f50:	2dff      	cmp	r5, #255	; 0xff
 8000f52:	d100      	bne.n	8000f56 <__aeabi_fsub+0x42>
 8000f54:	e0d9      	b.n	800110a <__aeabi_fsub+0x1f6>
 8000f56:	2280      	movs	r2, #128	; 0x80
 8000f58:	04d2      	lsls	r2, r2, #19
 8000f5a:	4316      	orrs	r6, r2
 8000f5c:	281b      	cmp	r0, #27
 8000f5e:	dc00      	bgt.n	8000f62 <__aeabi_fsub+0x4e>
 8000f60:	e0e9      	b.n	8001136 <__aeabi_fsub+0x222>
 8000f62:	2001      	movs	r0, #1
 8000f64:	4663      	mov	r3, ip
 8000f66:	1a18      	subs	r0, r3, r0
 8000f68:	0143      	lsls	r3, r0, #5
 8000f6a:	d400      	bmi.n	8000f6e <__aeabi_fsub+0x5a>
 8000f6c:	e0b4      	b.n	80010d8 <__aeabi_fsub+0x1c4>
 8000f6e:	0180      	lsls	r0, r0, #6
 8000f70:	0987      	lsrs	r7, r0, #6
 8000f72:	0038      	movs	r0, r7
 8000f74:	f002 f8c2 	bl	80030fc <__clzsi2>
 8000f78:	3805      	subs	r0, #5
 8000f7a:	4087      	lsls	r7, r0
 8000f7c:	4285      	cmp	r5, r0
 8000f7e:	dc00      	bgt.n	8000f82 <__aeabi_fsub+0x6e>
 8000f80:	e0cc      	b.n	800111c <__aeabi_fsub+0x208>
 8000f82:	1a2d      	subs	r5, r5, r0
 8000f84:	48b5      	ldr	r0, [pc, #724]	; (800125c <__aeabi_fsub+0x348>)
 8000f86:	4038      	ands	r0, r7
 8000f88:	0743      	lsls	r3, r0, #29
 8000f8a:	d004      	beq.n	8000f96 <__aeabi_fsub+0x82>
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	4003      	ands	r3, r0
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d000      	beq.n	8000f96 <__aeabi_fsub+0x82>
 8000f94:	3004      	adds	r0, #4
 8000f96:	0143      	lsls	r3, r0, #5
 8000f98:	d400      	bmi.n	8000f9c <__aeabi_fsub+0x88>
 8000f9a:	e0a0      	b.n	80010de <__aeabi_fsub+0x1ca>
 8000f9c:	1c6a      	adds	r2, r5, #1
 8000f9e:	2dfe      	cmp	r5, #254	; 0xfe
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_fsub+0x90>
 8000fa2:	e08d      	b.n	80010c0 <__aeabi_fsub+0x1ac>
 8000fa4:	0180      	lsls	r0, r0, #6
 8000fa6:	0a47      	lsrs	r7, r0, #9
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	05d0      	lsls	r0, r2, #23
 8000fac:	4338      	orrs	r0, r7
 8000fae:	07e4      	lsls	r4, r4, #31
 8000fb0:	4320      	orrs	r0, r4
 8000fb2:	bcc0      	pop	{r6, r7}
 8000fb4:	46b9      	mov	r9, r7
 8000fb6:	46b0      	mov	r8, r6
 8000fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fba:	1aa8      	subs	r0, r5, r2
 8000fbc:	4680      	mov	r8, r0
 8000fbe:	2800      	cmp	r0, #0
 8000fc0:	dd45      	ble.n	800104e <__aeabi_fsub+0x13a>
 8000fc2:	2a00      	cmp	r2, #0
 8000fc4:	d070      	beq.n	80010a8 <__aeabi_fsub+0x194>
 8000fc6:	2dff      	cmp	r5, #255	; 0xff
 8000fc8:	d100      	bne.n	8000fcc <__aeabi_fsub+0xb8>
 8000fca:	e09e      	b.n	800110a <__aeabi_fsub+0x1f6>
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	04db      	lsls	r3, r3, #19
 8000fd0:	431e      	orrs	r6, r3
 8000fd2:	4643      	mov	r3, r8
 8000fd4:	2b1b      	cmp	r3, #27
 8000fd6:	dc00      	bgt.n	8000fda <__aeabi_fsub+0xc6>
 8000fd8:	e0d2      	b.n	8001180 <__aeabi_fsub+0x26c>
 8000fda:	2001      	movs	r0, #1
 8000fdc:	4460      	add	r0, ip
 8000fde:	0143      	lsls	r3, r0, #5
 8000fe0:	d57a      	bpl.n	80010d8 <__aeabi_fsub+0x1c4>
 8000fe2:	3501      	adds	r5, #1
 8000fe4:	2dff      	cmp	r5, #255	; 0xff
 8000fe6:	d06b      	beq.n	80010c0 <__aeabi_fsub+0x1ac>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	4a9d      	ldr	r2, [pc, #628]	; (8001260 <__aeabi_fsub+0x34c>)
 8000fec:	4003      	ands	r3, r0
 8000fee:	0840      	lsrs	r0, r0, #1
 8000ff0:	4010      	ands	r0, r2
 8000ff2:	4318      	orrs	r0, r3
 8000ff4:	e7c8      	b.n	8000f88 <__aeabi_fsub+0x74>
 8000ff6:	2e00      	cmp	r6, #0
 8000ff8:	d020      	beq.n	800103c <__aeabi_fsub+0x128>
 8000ffa:	428c      	cmp	r4, r1
 8000ffc:	d023      	beq.n	8001046 <__aeabi_fsub+0x132>
 8000ffe:	0028      	movs	r0, r5
 8001000:	38ff      	subs	r0, #255	; 0xff
 8001002:	2800      	cmp	r0, #0
 8001004:	d039      	beq.n	800107a <__aeabi_fsub+0x166>
 8001006:	1b57      	subs	r7, r2, r5
 8001008:	2d00      	cmp	r5, #0
 800100a:	d000      	beq.n	800100e <__aeabi_fsub+0xfa>
 800100c:	e09d      	b.n	800114a <__aeabi_fsub+0x236>
 800100e:	4663      	mov	r3, ip
 8001010:	2b00      	cmp	r3, #0
 8001012:	d100      	bne.n	8001016 <__aeabi_fsub+0x102>
 8001014:	e0db      	b.n	80011ce <__aeabi_fsub+0x2ba>
 8001016:	1e7b      	subs	r3, r7, #1
 8001018:	2f01      	cmp	r7, #1
 800101a:	d100      	bne.n	800101e <__aeabi_fsub+0x10a>
 800101c:	e10d      	b.n	800123a <__aeabi_fsub+0x326>
 800101e:	2fff      	cmp	r7, #255	; 0xff
 8001020:	d071      	beq.n	8001106 <__aeabi_fsub+0x1f2>
 8001022:	001f      	movs	r7, r3
 8001024:	e098      	b.n	8001158 <__aeabi_fsub+0x244>
 8001026:	2e00      	cmp	r6, #0
 8001028:	d100      	bne.n	800102c <__aeabi_fsub+0x118>
 800102a:	e0a7      	b.n	800117c <__aeabi_fsub+0x268>
 800102c:	1e42      	subs	r2, r0, #1
 800102e:	2801      	cmp	r0, #1
 8001030:	d100      	bne.n	8001034 <__aeabi_fsub+0x120>
 8001032:	e0e6      	b.n	8001202 <__aeabi_fsub+0x2ee>
 8001034:	28ff      	cmp	r0, #255	; 0xff
 8001036:	d068      	beq.n	800110a <__aeabi_fsub+0x1f6>
 8001038:	0010      	movs	r0, r2
 800103a:	e78f      	b.n	8000f5c <__aeabi_fsub+0x48>
 800103c:	2001      	movs	r0, #1
 800103e:	4041      	eors	r1, r0
 8001040:	42a1      	cmp	r1, r4
 8001042:	d000      	beq.n	8001046 <__aeabi_fsub+0x132>
 8001044:	e77f      	b.n	8000f46 <__aeabi_fsub+0x32>
 8001046:	20ff      	movs	r0, #255	; 0xff
 8001048:	4240      	negs	r0, r0
 800104a:	4680      	mov	r8, r0
 800104c:	44a8      	add	r8, r5
 800104e:	4640      	mov	r0, r8
 8001050:	2800      	cmp	r0, #0
 8001052:	d038      	beq.n	80010c6 <__aeabi_fsub+0x1b2>
 8001054:	1b51      	subs	r1, r2, r5
 8001056:	2d00      	cmp	r5, #0
 8001058:	d100      	bne.n	800105c <__aeabi_fsub+0x148>
 800105a:	e0ae      	b.n	80011ba <__aeabi_fsub+0x2a6>
 800105c:	2aff      	cmp	r2, #255	; 0xff
 800105e:	d100      	bne.n	8001062 <__aeabi_fsub+0x14e>
 8001060:	e0df      	b.n	8001222 <__aeabi_fsub+0x30e>
 8001062:	2380      	movs	r3, #128	; 0x80
 8001064:	4660      	mov	r0, ip
 8001066:	04db      	lsls	r3, r3, #19
 8001068:	4318      	orrs	r0, r3
 800106a:	4684      	mov	ip, r0
 800106c:	291b      	cmp	r1, #27
 800106e:	dc00      	bgt.n	8001072 <__aeabi_fsub+0x15e>
 8001070:	e0d9      	b.n	8001226 <__aeabi_fsub+0x312>
 8001072:	2001      	movs	r0, #1
 8001074:	0015      	movs	r5, r2
 8001076:	1980      	adds	r0, r0, r6
 8001078:	e7b1      	b.n	8000fde <__aeabi_fsub+0xca>
 800107a:	20fe      	movs	r0, #254	; 0xfe
 800107c:	1c6a      	adds	r2, r5, #1
 800107e:	4210      	tst	r0, r2
 8001080:	d171      	bne.n	8001166 <__aeabi_fsub+0x252>
 8001082:	2d00      	cmp	r5, #0
 8001084:	d000      	beq.n	8001088 <__aeabi_fsub+0x174>
 8001086:	e0a6      	b.n	80011d6 <__aeabi_fsub+0x2c2>
 8001088:	4663      	mov	r3, ip
 800108a:	2b00      	cmp	r3, #0
 800108c:	d100      	bne.n	8001090 <__aeabi_fsub+0x17c>
 800108e:	e0d9      	b.n	8001244 <__aeabi_fsub+0x330>
 8001090:	2200      	movs	r2, #0
 8001092:	2e00      	cmp	r6, #0
 8001094:	d100      	bne.n	8001098 <__aeabi_fsub+0x184>
 8001096:	e788      	b.n	8000faa <__aeabi_fsub+0x96>
 8001098:	1b98      	subs	r0, r3, r6
 800109a:	0143      	lsls	r3, r0, #5
 800109c:	d400      	bmi.n	80010a0 <__aeabi_fsub+0x18c>
 800109e:	e0e1      	b.n	8001264 <__aeabi_fsub+0x350>
 80010a0:	4663      	mov	r3, ip
 80010a2:	000c      	movs	r4, r1
 80010a4:	1af0      	subs	r0, r6, r3
 80010a6:	e76f      	b.n	8000f88 <__aeabi_fsub+0x74>
 80010a8:	2e00      	cmp	r6, #0
 80010aa:	d100      	bne.n	80010ae <__aeabi_fsub+0x19a>
 80010ac:	e0b7      	b.n	800121e <__aeabi_fsub+0x30a>
 80010ae:	0002      	movs	r2, r0
 80010b0:	3a01      	subs	r2, #1
 80010b2:	2801      	cmp	r0, #1
 80010b4:	d100      	bne.n	80010b8 <__aeabi_fsub+0x1a4>
 80010b6:	e09c      	b.n	80011f2 <__aeabi_fsub+0x2de>
 80010b8:	28ff      	cmp	r0, #255	; 0xff
 80010ba:	d026      	beq.n	800110a <__aeabi_fsub+0x1f6>
 80010bc:	4690      	mov	r8, r2
 80010be:	e788      	b.n	8000fd2 <__aeabi_fsub+0xbe>
 80010c0:	22ff      	movs	r2, #255	; 0xff
 80010c2:	2700      	movs	r7, #0
 80010c4:	e771      	b.n	8000faa <__aeabi_fsub+0x96>
 80010c6:	20fe      	movs	r0, #254	; 0xfe
 80010c8:	1c6a      	adds	r2, r5, #1
 80010ca:	4210      	tst	r0, r2
 80010cc:	d064      	beq.n	8001198 <__aeabi_fsub+0x284>
 80010ce:	2aff      	cmp	r2, #255	; 0xff
 80010d0:	d0f6      	beq.n	80010c0 <__aeabi_fsub+0x1ac>
 80010d2:	0015      	movs	r5, r2
 80010d4:	4466      	add	r6, ip
 80010d6:	0870      	lsrs	r0, r6, #1
 80010d8:	0743      	lsls	r3, r0, #29
 80010da:	d000      	beq.n	80010de <__aeabi_fsub+0x1ca>
 80010dc:	e756      	b.n	8000f8c <__aeabi_fsub+0x78>
 80010de:	08c3      	lsrs	r3, r0, #3
 80010e0:	2dff      	cmp	r5, #255	; 0xff
 80010e2:	d012      	beq.n	800110a <__aeabi_fsub+0x1f6>
 80010e4:	025b      	lsls	r3, r3, #9
 80010e6:	0a5f      	lsrs	r7, r3, #9
 80010e8:	b2ea      	uxtb	r2, r5
 80010ea:	e75e      	b.n	8000faa <__aeabi_fsub+0x96>
 80010ec:	4662      	mov	r2, ip
 80010ee:	2a00      	cmp	r2, #0
 80010f0:	d100      	bne.n	80010f4 <__aeabi_fsub+0x1e0>
 80010f2:	e096      	b.n	8001222 <__aeabi_fsub+0x30e>
 80010f4:	2e00      	cmp	r6, #0
 80010f6:	d008      	beq.n	800110a <__aeabi_fsub+0x1f6>
 80010f8:	2280      	movs	r2, #128	; 0x80
 80010fa:	03d2      	lsls	r2, r2, #15
 80010fc:	4213      	tst	r3, r2
 80010fe:	d004      	beq.n	800110a <__aeabi_fsub+0x1f6>
 8001100:	4648      	mov	r0, r9
 8001102:	4210      	tst	r0, r2
 8001104:	d101      	bne.n	800110a <__aeabi_fsub+0x1f6>
 8001106:	000c      	movs	r4, r1
 8001108:	464b      	mov	r3, r9
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0d8      	beq.n	80010c0 <__aeabi_fsub+0x1ac>
 800110e:	2780      	movs	r7, #128	; 0x80
 8001110:	03ff      	lsls	r7, r7, #15
 8001112:	431f      	orrs	r7, r3
 8001114:	027f      	lsls	r7, r7, #9
 8001116:	22ff      	movs	r2, #255	; 0xff
 8001118:	0a7f      	lsrs	r7, r7, #9
 800111a:	e746      	b.n	8000faa <__aeabi_fsub+0x96>
 800111c:	2320      	movs	r3, #32
 800111e:	003a      	movs	r2, r7
 8001120:	1b45      	subs	r5, r0, r5
 8001122:	0038      	movs	r0, r7
 8001124:	3501      	adds	r5, #1
 8001126:	40ea      	lsrs	r2, r5
 8001128:	1b5d      	subs	r5, r3, r5
 800112a:	40a8      	lsls	r0, r5
 800112c:	1e43      	subs	r3, r0, #1
 800112e:	4198      	sbcs	r0, r3
 8001130:	2500      	movs	r5, #0
 8001132:	4310      	orrs	r0, r2
 8001134:	e728      	b.n	8000f88 <__aeabi_fsub+0x74>
 8001136:	2320      	movs	r3, #32
 8001138:	1a1b      	subs	r3, r3, r0
 800113a:	0032      	movs	r2, r6
 800113c:	409e      	lsls	r6, r3
 800113e:	40c2      	lsrs	r2, r0
 8001140:	0030      	movs	r0, r6
 8001142:	1e43      	subs	r3, r0, #1
 8001144:	4198      	sbcs	r0, r3
 8001146:	4310      	orrs	r0, r2
 8001148:	e70c      	b.n	8000f64 <__aeabi_fsub+0x50>
 800114a:	2aff      	cmp	r2, #255	; 0xff
 800114c:	d0db      	beq.n	8001106 <__aeabi_fsub+0x1f2>
 800114e:	2380      	movs	r3, #128	; 0x80
 8001150:	4660      	mov	r0, ip
 8001152:	04db      	lsls	r3, r3, #19
 8001154:	4318      	orrs	r0, r3
 8001156:	4684      	mov	ip, r0
 8001158:	2f1b      	cmp	r7, #27
 800115a:	dd56      	ble.n	800120a <__aeabi_fsub+0x2f6>
 800115c:	2001      	movs	r0, #1
 800115e:	000c      	movs	r4, r1
 8001160:	0015      	movs	r5, r2
 8001162:	1a30      	subs	r0, r6, r0
 8001164:	e700      	b.n	8000f68 <__aeabi_fsub+0x54>
 8001166:	4663      	mov	r3, ip
 8001168:	1b9f      	subs	r7, r3, r6
 800116a:	017b      	lsls	r3, r7, #5
 800116c:	d43d      	bmi.n	80011ea <__aeabi_fsub+0x2d6>
 800116e:	2f00      	cmp	r7, #0
 8001170:	d000      	beq.n	8001174 <__aeabi_fsub+0x260>
 8001172:	e6fe      	b.n	8000f72 <__aeabi_fsub+0x5e>
 8001174:	2400      	movs	r4, #0
 8001176:	2200      	movs	r2, #0
 8001178:	2700      	movs	r7, #0
 800117a:	e716      	b.n	8000faa <__aeabi_fsub+0x96>
 800117c:	0005      	movs	r5, r0
 800117e:	e7af      	b.n	80010e0 <__aeabi_fsub+0x1cc>
 8001180:	0032      	movs	r2, r6
 8001182:	4643      	mov	r3, r8
 8001184:	4641      	mov	r1, r8
 8001186:	40da      	lsrs	r2, r3
 8001188:	2320      	movs	r3, #32
 800118a:	1a5b      	subs	r3, r3, r1
 800118c:	409e      	lsls	r6, r3
 800118e:	0030      	movs	r0, r6
 8001190:	1e43      	subs	r3, r0, #1
 8001192:	4198      	sbcs	r0, r3
 8001194:	4310      	orrs	r0, r2
 8001196:	e721      	b.n	8000fdc <__aeabi_fsub+0xc8>
 8001198:	2d00      	cmp	r5, #0
 800119a:	d1a7      	bne.n	80010ec <__aeabi_fsub+0x1d8>
 800119c:	4663      	mov	r3, ip
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d059      	beq.n	8001256 <__aeabi_fsub+0x342>
 80011a2:	2200      	movs	r2, #0
 80011a4:	2e00      	cmp	r6, #0
 80011a6:	d100      	bne.n	80011aa <__aeabi_fsub+0x296>
 80011a8:	e6ff      	b.n	8000faa <__aeabi_fsub+0x96>
 80011aa:	0030      	movs	r0, r6
 80011ac:	4460      	add	r0, ip
 80011ae:	0143      	lsls	r3, r0, #5
 80011b0:	d592      	bpl.n	80010d8 <__aeabi_fsub+0x1c4>
 80011b2:	4b2a      	ldr	r3, [pc, #168]	; (800125c <__aeabi_fsub+0x348>)
 80011b4:	3501      	adds	r5, #1
 80011b6:	4018      	ands	r0, r3
 80011b8:	e78e      	b.n	80010d8 <__aeabi_fsub+0x1c4>
 80011ba:	4663      	mov	r3, ip
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d047      	beq.n	8001250 <__aeabi_fsub+0x33c>
 80011c0:	1e4b      	subs	r3, r1, #1
 80011c2:	2901      	cmp	r1, #1
 80011c4:	d015      	beq.n	80011f2 <__aeabi_fsub+0x2de>
 80011c6:	29ff      	cmp	r1, #255	; 0xff
 80011c8:	d02b      	beq.n	8001222 <__aeabi_fsub+0x30e>
 80011ca:	0019      	movs	r1, r3
 80011cc:	e74e      	b.n	800106c <__aeabi_fsub+0x158>
 80011ce:	000c      	movs	r4, r1
 80011d0:	464b      	mov	r3, r9
 80011d2:	003d      	movs	r5, r7
 80011d4:	e784      	b.n	80010e0 <__aeabi_fsub+0x1cc>
 80011d6:	4662      	mov	r2, ip
 80011d8:	2a00      	cmp	r2, #0
 80011da:	d18b      	bne.n	80010f4 <__aeabi_fsub+0x1e0>
 80011dc:	2e00      	cmp	r6, #0
 80011de:	d192      	bne.n	8001106 <__aeabi_fsub+0x1f2>
 80011e0:	2780      	movs	r7, #128	; 0x80
 80011e2:	2400      	movs	r4, #0
 80011e4:	22ff      	movs	r2, #255	; 0xff
 80011e6:	03ff      	lsls	r7, r7, #15
 80011e8:	e6df      	b.n	8000faa <__aeabi_fsub+0x96>
 80011ea:	4663      	mov	r3, ip
 80011ec:	000c      	movs	r4, r1
 80011ee:	1af7      	subs	r7, r6, r3
 80011f0:	e6bf      	b.n	8000f72 <__aeabi_fsub+0x5e>
 80011f2:	0030      	movs	r0, r6
 80011f4:	4460      	add	r0, ip
 80011f6:	2501      	movs	r5, #1
 80011f8:	0143      	lsls	r3, r0, #5
 80011fa:	d400      	bmi.n	80011fe <__aeabi_fsub+0x2ea>
 80011fc:	e76c      	b.n	80010d8 <__aeabi_fsub+0x1c4>
 80011fe:	2502      	movs	r5, #2
 8001200:	e6f2      	b.n	8000fe8 <__aeabi_fsub+0xd4>
 8001202:	4663      	mov	r3, ip
 8001204:	2501      	movs	r5, #1
 8001206:	1b98      	subs	r0, r3, r6
 8001208:	e6ae      	b.n	8000f68 <__aeabi_fsub+0x54>
 800120a:	2320      	movs	r3, #32
 800120c:	4664      	mov	r4, ip
 800120e:	4660      	mov	r0, ip
 8001210:	40fc      	lsrs	r4, r7
 8001212:	1bdf      	subs	r7, r3, r7
 8001214:	40b8      	lsls	r0, r7
 8001216:	1e43      	subs	r3, r0, #1
 8001218:	4198      	sbcs	r0, r3
 800121a:	4320      	orrs	r0, r4
 800121c:	e79f      	b.n	800115e <__aeabi_fsub+0x24a>
 800121e:	0005      	movs	r5, r0
 8001220:	e75e      	b.n	80010e0 <__aeabi_fsub+0x1cc>
 8001222:	464b      	mov	r3, r9
 8001224:	e771      	b.n	800110a <__aeabi_fsub+0x1f6>
 8001226:	2320      	movs	r3, #32
 8001228:	4665      	mov	r5, ip
 800122a:	4660      	mov	r0, ip
 800122c:	40cd      	lsrs	r5, r1
 800122e:	1a59      	subs	r1, r3, r1
 8001230:	4088      	lsls	r0, r1
 8001232:	1e43      	subs	r3, r0, #1
 8001234:	4198      	sbcs	r0, r3
 8001236:	4328      	orrs	r0, r5
 8001238:	e71c      	b.n	8001074 <__aeabi_fsub+0x160>
 800123a:	4663      	mov	r3, ip
 800123c:	000c      	movs	r4, r1
 800123e:	2501      	movs	r5, #1
 8001240:	1af0      	subs	r0, r6, r3
 8001242:	e691      	b.n	8000f68 <__aeabi_fsub+0x54>
 8001244:	2e00      	cmp	r6, #0
 8001246:	d095      	beq.n	8001174 <__aeabi_fsub+0x260>
 8001248:	000c      	movs	r4, r1
 800124a:	464f      	mov	r7, r9
 800124c:	2200      	movs	r2, #0
 800124e:	e6ac      	b.n	8000faa <__aeabi_fsub+0x96>
 8001250:	464b      	mov	r3, r9
 8001252:	000d      	movs	r5, r1
 8001254:	e744      	b.n	80010e0 <__aeabi_fsub+0x1cc>
 8001256:	464f      	mov	r7, r9
 8001258:	2200      	movs	r2, #0
 800125a:	e6a6      	b.n	8000faa <__aeabi_fsub+0x96>
 800125c:	fbffffff 	.word	0xfbffffff
 8001260:	7dffffff 	.word	0x7dffffff
 8001264:	2800      	cmp	r0, #0
 8001266:	d000      	beq.n	800126a <__aeabi_fsub+0x356>
 8001268:	e736      	b.n	80010d8 <__aeabi_fsub+0x1c4>
 800126a:	2400      	movs	r4, #0
 800126c:	2700      	movs	r7, #0
 800126e:	e69c      	b.n	8000faa <__aeabi_fsub+0x96>

08001270 <__aeabi_i2f>:
 8001270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001272:	2800      	cmp	r0, #0
 8001274:	d013      	beq.n	800129e <__aeabi_i2f+0x2e>
 8001276:	17c3      	asrs	r3, r0, #31
 8001278:	18c6      	adds	r6, r0, r3
 800127a:	405e      	eors	r6, r3
 800127c:	0fc4      	lsrs	r4, r0, #31
 800127e:	0030      	movs	r0, r6
 8001280:	f001 ff3c 	bl	80030fc <__clzsi2>
 8001284:	239e      	movs	r3, #158	; 0x9e
 8001286:	0005      	movs	r5, r0
 8001288:	1a1b      	subs	r3, r3, r0
 800128a:	2b96      	cmp	r3, #150	; 0x96
 800128c:	dc0f      	bgt.n	80012ae <__aeabi_i2f+0x3e>
 800128e:	2808      	cmp	r0, #8
 8001290:	dd01      	ble.n	8001296 <__aeabi_i2f+0x26>
 8001292:	3d08      	subs	r5, #8
 8001294:	40ae      	lsls	r6, r5
 8001296:	0276      	lsls	r6, r6, #9
 8001298:	0a76      	lsrs	r6, r6, #9
 800129a:	b2d8      	uxtb	r0, r3
 800129c:	e002      	b.n	80012a4 <__aeabi_i2f+0x34>
 800129e:	2400      	movs	r4, #0
 80012a0:	2000      	movs	r0, #0
 80012a2:	2600      	movs	r6, #0
 80012a4:	05c0      	lsls	r0, r0, #23
 80012a6:	4330      	orrs	r0, r6
 80012a8:	07e4      	lsls	r4, r4, #31
 80012aa:	4320      	orrs	r0, r4
 80012ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012ae:	2b99      	cmp	r3, #153	; 0x99
 80012b0:	dd0c      	ble.n	80012cc <__aeabi_i2f+0x5c>
 80012b2:	2205      	movs	r2, #5
 80012b4:	0031      	movs	r1, r6
 80012b6:	1a12      	subs	r2, r2, r0
 80012b8:	40d1      	lsrs	r1, r2
 80012ba:	000a      	movs	r2, r1
 80012bc:	0001      	movs	r1, r0
 80012be:	0030      	movs	r0, r6
 80012c0:	311b      	adds	r1, #27
 80012c2:	4088      	lsls	r0, r1
 80012c4:	1e41      	subs	r1, r0, #1
 80012c6:	4188      	sbcs	r0, r1
 80012c8:	4302      	orrs	r2, r0
 80012ca:	0016      	movs	r6, r2
 80012cc:	2d05      	cmp	r5, #5
 80012ce:	dc12      	bgt.n	80012f6 <__aeabi_i2f+0x86>
 80012d0:	0031      	movs	r1, r6
 80012d2:	4f0d      	ldr	r7, [pc, #52]	; (8001308 <__aeabi_i2f+0x98>)
 80012d4:	4039      	ands	r1, r7
 80012d6:	0772      	lsls	r2, r6, #29
 80012d8:	d009      	beq.n	80012ee <__aeabi_i2f+0x7e>
 80012da:	200f      	movs	r0, #15
 80012dc:	4030      	ands	r0, r6
 80012de:	2804      	cmp	r0, #4
 80012e0:	d005      	beq.n	80012ee <__aeabi_i2f+0x7e>
 80012e2:	3104      	adds	r1, #4
 80012e4:	014a      	lsls	r2, r1, #5
 80012e6:	d502      	bpl.n	80012ee <__aeabi_i2f+0x7e>
 80012e8:	239f      	movs	r3, #159	; 0x9f
 80012ea:	4039      	ands	r1, r7
 80012ec:	1b5b      	subs	r3, r3, r5
 80012ee:	0189      	lsls	r1, r1, #6
 80012f0:	0a4e      	lsrs	r6, r1, #9
 80012f2:	b2d8      	uxtb	r0, r3
 80012f4:	e7d6      	b.n	80012a4 <__aeabi_i2f+0x34>
 80012f6:	1f6a      	subs	r2, r5, #5
 80012f8:	4096      	lsls	r6, r2
 80012fa:	0031      	movs	r1, r6
 80012fc:	4f02      	ldr	r7, [pc, #8]	; (8001308 <__aeabi_i2f+0x98>)
 80012fe:	4039      	ands	r1, r7
 8001300:	0772      	lsls	r2, r6, #29
 8001302:	d0f4      	beq.n	80012ee <__aeabi_i2f+0x7e>
 8001304:	e7e9      	b.n	80012da <__aeabi_i2f+0x6a>
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	fbffffff 	.word	0xfbffffff

0800130c <__aeabi_ui2f>:
 800130c:	b570      	push	{r4, r5, r6, lr}
 800130e:	1e05      	subs	r5, r0, #0
 8001310:	d00e      	beq.n	8001330 <__aeabi_ui2f+0x24>
 8001312:	f001 fef3 	bl	80030fc <__clzsi2>
 8001316:	239e      	movs	r3, #158	; 0x9e
 8001318:	0004      	movs	r4, r0
 800131a:	1a1b      	subs	r3, r3, r0
 800131c:	2b96      	cmp	r3, #150	; 0x96
 800131e:	dc0c      	bgt.n	800133a <__aeabi_ui2f+0x2e>
 8001320:	2808      	cmp	r0, #8
 8001322:	dd01      	ble.n	8001328 <__aeabi_ui2f+0x1c>
 8001324:	3c08      	subs	r4, #8
 8001326:	40a5      	lsls	r5, r4
 8001328:	026d      	lsls	r5, r5, #9
 800132a:	0a6d      	lsrs	r5, r5, #9
 800132c:	b2d8      	uxtb	r0, r3
 800132e:	e001      	b.n	8001334 <__aeabi_ui2f+0x28>
 8001330:	2000      	movs	r0, #0
 8001332:	2500      	movs	r5, #0
 8001334:	05c0      	lsls	r0, r0, #23
 8001336:	4328      	orrs	r0, r5
 8001338:	bd70      	pop	{r4, r5, r6, pc}
 800133a:	2b99      	cmp	r3, #153	; 0x99
 800133c:	dd09      	ble.n	8001352 <__aeabi_ui2f+0x46>
 800133e:	0002      	movs	r2, r0
 8001340:	0029      	movs	r1, r5
 8001342:	321b      	adds	r2, #27
 8001344:	4091      	lsls	r1, r2
 8001346:	1e4a      	subs	r2, r1, #1
 8001348:	4191      	sbcs	r1, r2
 800134a:	2205      	movs	r2, #5
 800134c:	1a12      	subs	r2, r2, r0
 800134e:	40d5      	lsrs	r5, r2
 8001350:	430d      	orrs	r5, r1
 8001352:	2c05      	cmp	r4, #5
 8001354:	dc12      	bgt.n	800137c <__aeabi_ui2f+0x70>
 8001356:	0029      	movs	r1, r5
 8001358:	4e0c      	ldr	r6, [pc, #48]	; (800138c <__aeabi_ui2f+0x80>)
 800135a:	4031      	ands	r1, r6
 800135c:	076a      	lsls	r2, r5, #29
 800135e:	d009      	beq.n	8001374 <__aeabi_ui2f+0x68>
 8001360:	200f      	movs	r0, #15
 8001362:	4028      	ands	r0, r5
 8001364:	2804      	cmp	r0, #4
 8001366:	d005      	beq.n	8001374 <__aeabi_ui2f+0x68>
 8001368:	3104      	adds	r1, #4
 800136a:	014a      	lsls	r2, r1, #5
 800136c:	d502      	bpl.n	8001374 <__aeabi_ui2f+0x68>
 800136e:	239f      	movs	r3, #159	; 0x9f
 8001370:	4031      	ands	r1, r6
 8001372:	1b1b      	subs	r3, r3, r4
 8001374:	0189      	lsls	r1, r1, #6
 8001376:	0a4d      	lsrs	r5, r1, #9
 8001378:	b2d8      	uxtb	r0, r3
 800137a:	e7db      	b.n	8001334 <__aeabi_ui2f+0x28>
 800137c:	1f62      	subs	r2, r4, #5
 800137e:	4095      	lsls	r5, r2
 8001380:	0029      	movs	r1, r5
 8001382:	4e02      	ldr	r6, [pc, #8]	; (800138c <__aeabi_ui2f+0x80>)
 8001384:	4031      	ands	r1, r6
 8001386:	076a      	lsls	r2, r5, #29
 8001388:	d0f4      	beq.n	8001374 <__aeabi_ui2f+0x68>
 800138a:	e7e9      	b.n	8001360 <__aeabi_ui2f+0x54>
 800138c:	fbffffff 	.word	0xfbffffff

08001390 <__aeabi_dadd>:
 8001390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001392:	464f      	mov	r7, r9
 8001394:	4646      	mov	r6, r8
 8001396:	46d6      	mov	lr, sl
 8001398:	000d      	movs	r5, r1
 800139a:	0004      	movs	r4, r0
 800139c:	b5c0      	push	{r6, r7, lr}
 800139e:	001f      	movs	r7, r3
 80013a0:	0011      	movs	r1, r2
 80013a2:	0328      	lsls	r0, r5, #12
 80013a4:	0f62      	lsrs	r2, r4, #29
 80013a6:	0a40      	lsrs	r0, r0, #9
 80013a8:	4310      	orrs	r0, r2
 80013aa:	007a      	lsls	r2, r7, #1
 80013ac:	0d52      	lsrs	r2, r2, #21
 80013ae:	00e3      	lsls	r3, r4, #3
 80013b0:	033c      	lsls	r4, r7, #12
 80013b2:	4691      	mov	r9, r2
 80013b4:	0a64      	lsrs	r4, r4, #9
 80013b6:	0ffa      	lsrs	r2, r7, #31
 80013b8:	0f4f      	lsrs	r7, r1, #29
 80013ba:	006e      	lsls	r6, r5, #1
 80013bc:	4327      	orrs	r7, r4
 80013be:	4692      	mov	sl, r2
 80013c0:	46b8      	mov	r8, r7
 80013c2:	0d76      	lsrs	r6, r6, #21
 80013c4:	0fed      	lsrs	r5, r5, #31
 80013c6:	00c9      	lsls	r1, r1, #3
 80013c8:	4295      	cmp	r5, r2
 80013ca:	d100      	bne.n	80013ce <__aeabi_dadd+0x3e>
 80013cc:	e099      	b.n	8001502 <__aeabi_dadd+0x172>
 80013ce:	464c      	mov	r4, r9
 80013d0:	1b34      	subs	r4, r6, r4
 80013d2:	46a4      	mov	ip, r4
 80013d4:	2c00      	cmp	r4, #0
 80013d6:	dc00      	bgt.n	80013da <__aeabi_dadd+0x4a>
 80013d8:	e07c      	b.n	80014d4 <__aeabi_dadd+0x144>
 80013da:	464a      	mov	r2, r9
 80013dc:	2a00      	cmp	r2, #0
 80013de:	d100      	bne.n	80013e2 <__aeabi_dadd+0x52>
 80013e0:	e0b8      	b.n	8001554 <__aeabi_dadd+0x1c4>
 80013e2:	4ac5      	ldr	r2, [pc, #788]	; (80016f8 <__aeabi_dadd+0x368>)
 80013e4:	4296      	cmp	r6, r2
 80013e6:	d100      	bne.n	80013ea <__aeabi_dadd+0x5a>
 80013e8:	e11c      	b.n	8001624 <__aeabi_dadd+0x294>
 80013ea:	2280      	movs	r2, #128	; 0x80
 80013ec:	003c      	movs	r4, r7
 80013ee:	0412      	lsls	r2, r2, #16
 80013f0:	4314      	orrs	r4, r2
 80013f2:	46a0      	mov	r8, r4
 80013f4:	4662      	mov	r2, ip
 80013f6:	2a38      	cmp	r2, #56	; 0x38
 80013f8:	dd00      	ble.n	80013fc <__aeabi_dadd+0x6c>
 80013fa:	e161      	b.n	80016c0 <__aeabi_dadd+0x330>
 80013fc:	2a1f      	cmp	r2, #31
 80013fe:	dd00      	ble.n	8001402 <__aeabi_dadd+0x72>
 8001400:	e1cc      	b.n	800179c <__aeabi_dadd+0x40c>
 8001402:	4664      	mov	r4, ip
 8001404:	2220      	movs	r2, #32
 8001406:	1b12      	subs	r2, r2, r4
 8001408:	4644      	mov	r4, r8
 800140a:	4094      	lsls	r4, r2
 800140c:	000f      	movs	r7, r1
 800140e:	46a1      	mov	r9, r4
 8001410:	4664      	mov	r4, ip
 8001412:	4091      	lsls	r1, r2
 8001414:	40e7      	lsrs	r7, r4
 8001416:	464c      	mov	r4, r9
 8001418:	1e4a      	subs	r2, r1, #1
 800141a:	4191      	sbcs	r1, r2
 800141c:	433c      	orrs	r4, r7
 800141e:	4642      	mov	r2, r8
 8001420:	4321      	orrs	r1, r4
 8001422:	4664      	mov	r4, ip
 8001424:	40e2      	lsrs	r2, r4
 8001426:	1a80      	subs	r0, r0, r2
 8001428:	1a5c      	subs	r4, r3, r1
 800142a:	42a3      	cmp	r3, r4
 800142c:	419b      	sbcs	r3, r3
 800142e:	425f      	negs	r7, r3
 8001430:	1bc7      	subs	r7, r0, r7
 8001432:	023b      	lsls	r3, r7, #8
 8001434:	d400      	bmi.n	8001438 <__aeabi_dadd+0xa8>
 8001436:	e0d0      	b.n	80015da <__aeabi_dadd+0x24a>
 8001438:	027f      	lsls	r7, r7, #9
 800143a:	0a7f      	lsrs	r7, r7, #9
 800143c:	2f00      	cmp	r7, #0
 800143e:	d100      	bne.n	8001442 <__aeabi_dadd+0xb2>
 8001440:	e0ff      	b.n	8001642 <__aeabi_dadd+0x2b2>
 8001442:	0038      	movs	r0, r7
 8001444:	f001 fe5a 	bl	80030fc <__clzsi2>
 8001448:	0001      	movs	r1, r0
 800144a:	3908      	subs	r1, #8
 800144c:	2320      	movs	r3, #32
 800144e:	0022      	movs	r2, r4
 8001450:	1a5b      	subs	r3, r3, r1
 8001452:	408f      	lsls	r7, r1
 8001454:	40da      	lsrs	r2, r3
 8001456:	408c      	lsls	r4, r1
 8001458:	4317      	orrs	r7, r2
 800145a:	42b1      	cmp	r1, r6
 800145c:	da00      	bge.n	8001460 <__aeabi_dadd+0xd0>
 800145e:	e0ff      	b.n	8001660 <__aeabi_dadd+0x2d0>
 8001460:	1b89      	subs	r1, r1, r6
 8001462:	1c4b      	adds	r3, r1, #1
 8001464:	2b1f      	cmp	r3, #31
 8001466:	dd00      	ble.n	800146a <__aeabi_dadd+0xda>
 8001468:	e0a8      	b.n	80015bc <__aeabi_dadd+0x22c>
 800146a:	2220      	movs	r2, #32
 800146c:	0039      	movs	r1, r7
 800146e:	1ad2      	subs	r2, r2, r3
 8001470:	0020      	movs	r0, r4
 8001472:	4094      	lsls	r4, r2
 8001474:	4091      	lsls	r1, r2
 8001476:	40d8      	lsrs	r0, r3
 8001478:	1e62      	subs	r2, r4, #1
 800147a:	4194      	sbcs	r4, r2
 800147c:	40df      	lsrs	r7, r3
 800147e:	2600      	movs	r6, #0
 8001480:	4301      	orrs	r1, r0
 8001482:	430c      	orrs	r4, r1
 8001484:	0763      	lsls	r3, r4, #29
 8001486:	d009      	beq.n	800149c <__aeabi_dadd+0x10c>
 8001488:	230f      	movs	r3, #15
 800148a:	4023      	ands	r3, r4
 800148c:	2b04      	cmp	r3, #4
 800148e:	d005      	beq.n	800149c <__aeabi_dadd+0x10c>
 8001490:	1d23      	adds	r3, r4, #4
 8001492:	42a3      	cmp	r3, r4
 8001494:	41a4      	sbcs	r4, r4
 8001496:	4264      	negs	r4, r4
 8001498:	193f      	adds	r7, r7, r4
 800149a:	001c      	movs	r4, r3
 800149c:	023b      	lsls	r3, r7, #8
 800149e:	d400      	bmi.n	80014a2 <__aeabi_dadd+0x112>
 80014a0:	e09e      	b.n	80015e0 <__aeabi_dadd+0x250>
 80014a2:	4b95      	ldr	r3, [pc, #596]	; (80016f8 <__aeabi_dadd+0x368>)
 80014a4:	3601      	adds	r6, #1
 80014a6:	429e      	cmp	r6, r3
 80014a8:	d100      	bne.n	80014ac <__aeabi_dadd+0x11c>
 80014aa:	e0b7      	b.n	800161c <__aeabi_dadd+0x28c>
 80014ac:	4a93      	ldr	r2, [pc, #588]	; (80016fc <__aeabi_dadd+0x36c>)
 80014ae:	08e4      	lsrs	r4, r4, #3
 80014b0:	4017      	ands	r7, r2
 80014b2:	077b      	lsls	r3, r7, #29
 80014b4:	0571      	lsls	r1, r6, #21
 80014b6:	027f      	lsls	r7, r7, #9
 80014b8:	4323      	orrs	r3, r4
 80014ba:	0b3f      	lsrs	r7, r7, #12
 80014bc:	0d4a      	lsrs	r2, r1, #21
 80014be:	0512      	lsls	r2, r2, #20
 80014c0:	433a      	orrs	r2, r7
 80014c2:	07ed      	lsls	r5, r5, #31
 80014c4:	432a      	orrs	r2, r5
 80014c6:	0018      	movs	r0, r3
 80014c8:	0011      	movs	r1, r2
 80014ca:	bce0      	pop	{r5, r6, r7}
 80014cc:	46ba      	mov	sl, r7
 80014ce:	46b1      	mov	r9, r6
 80014d0:	46a8      	mov	r8, r5
 80014d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d4:	2c00      	cmp	r4, #0
 80014d6:	d04b      	beq.n	8001570 <__aeabi_dadd+0x1e0>
 80014d8:	464c      	mov	r4, r9
 80014da:	1ba4      	subs	r4, r4, r6
 80014dc:	46a4      	mov	ip, r4
 80014de:	2e00      	cmp	r6, #0
 80014e0:	d000      	beq.n	80014e4 <__aeabi_dadd+0x154>
 80014e2:	e123      	b.n	800172c <__aeabi_dadd+0x39c>
 80014e4:	0004      	movs	r4, r0
 80014e6:	431c      	orrs	r4, r3
 80014e8:	d100      	bne.n	80014ec <__aeabi_dadd+0x15c>
 80014ea:	e1af      	b.n	800184c <__aeabi_dadd+0x4bc>
 80014ec:	4662      	mov	r2, ip
 80014ee:	1e54      	subs	r4, r2, #1
 80014f0:	2a01      	cmp	r2, #1
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dadd+0x166>
 80014f4:	e215      	b.n	8001922 <__aeabi_dadd+0x592>
 80014f6:	4d80      	ldr	r5, [pc, #512]	; (80016f8 <__aeabi_dadd+0x368>)
 80014f8:	45ac      	cmp	ip, r5
 80014fa:	d100      	bne.n	80014fe <__aeabi_dadd+0x16e>
 80014fc:	e1c8      	b.n	8001890 <__aeabi_dadd+0x500>
 80014fe:	46a4      	mov	ip, r4
 8001500:	e11b      	b.n	800173a <__aeabi_dadd+0x3aa>
 8001502:	464a      	mov	r2, r9
 8001504:	1ab2      	subs	r2, r6, r2
 8001506:	4694      	mov	ip, r2
 8001508:	2a00      	cmp	r2, #0
 800150a:	dc00      	bgt.n	800150e <__aeabi_dadd+0x17e>
 800150c:	e0ac      	b.n	8001668 <__aeabi_dadd+0x2d8>
 800150e:	464a      	mov	r2, r9
 8001510:	2a00      	cmp	r2, #0
 8001512:	d043      	beq.n	800159c <__aeabi_dadd+0x20c>
 8001514:	4a78      	ldr	r2, [pc, #480]	; (80016f8 <__aeabi_dadd+0x368>)
 8001516:	4296      	cmp	r6, r2
 8001518:	d100      	bne.n	800151c <__aeabi_dadd+0x18c>
 800151a:	e1af      	b.n	800187c <__aeabi_dadd+0x4ec>
 800151c:	2280      	movs	r2, #128	; 0x80
 800151e:	003c      	movs	r4, r7
 8001520:	0412      	lsls	r2, r2, #16
 8001522:	4314      	orrs	r4, r2
 8001524:	46a0      	mov	r8, r4
 8001526:	4662      	mov	r2, ip
 8001528:	2a38      	cmp	r2, #56	; 0x38
 800152a:	dc67      	bgt.n	80015fc <__aeabi_dadd+0x26c>
 800152c:	2a1f      	cmp	r2, #31
 800152e:	dc00      	bgt.n	8001532 <__aeabi_dadd+0x1a2>
 8001530:	e15f      	b.n	80017f2 <__aeabi_dadd+0x462>
 8001532:	4647      	mov	r7, r8
 8001534:	3a20      	subs	r2, #32
 8001536:	40d7      	lsrs	r7, r2
 8001538:	4662      	mov	r2, ip
 800153a:	2a20      	cmp	r2, #32
 800153c:	d005      	beq.n	800154a <__aeabi_dadd+0x1ba>
 800153e:	4664      	mov	r4, ip
 8001540:	2240      	movs	r2, #64	; 0x40
 8001542:	1b12      	subs	r2, r2, r4
 8001544:	4644      	mov	r4, r8
 8001546:	4094      	lsls	r4, r2
 8001548:	4321      	orrs	r1, r4
 800154a:	1e4a      	subs	r2, r1, #1
 800154c:	4191      	sbcs	r1, r2
 800154e:	000c      	movs	r4, r1
 8001550:	433c      	orrs	r4, r7
 8001552:	e057      	b.n	8001604 <__aeabi_dadd+0x274>
 8001554:	003a      	movs	r2, r7
 8001556:	430a      	orrs	r2, r1
 8001558:	d100      	bne.n	800155c <__aeabi_dadd+0x1cc>
 800155a:	e105      	b.n	8001768 <__aeabi_dadd+0x3d8>
 800155c:	0022      	movs	r2, r4
 800155e:	3a01      	subs	r2, #1
 8001560:	2c01      	cmp	r4, #1
 8001562:	d100      	bne.n	8001566 <__aeabi_dadd+0x1d6>
 8001564:	e182      	b.n	800186c <__aeabi_dadd+0x4dc>
 8001566:	4c64      	ldr	r4, [pc, #400]	; (80016f8 <__aeabi_dadd+0x368>)
 8001568:	45a4      	cmp	ip, r4
 800156a:	d05b      	beq.n	8001624 <__aeabi_dadd+0x294>
 800156c:	4694      	mov	ip, r2
 800156e:	e741      	b.n	80013f4 <__aeabi_dadd+0x64>
 8001570:	4c63      	ldr	r4, [pc, #396]	; (8001700 <__aeabi_dadd+0x370>)
 8001572:	1c77      	adds	r7, r6, #1
 8001574:	4227      	tst	r7, r4
 8001576:	d000      	beq.n	800157a <__aeabi_dadd+0x1ea>
 8001578:	e0c4      	b.n	8001704 <__aeabi_dadd+0x374>
 800157a:	0004      	movs	r4, r0
 800157c:	431c      	orrs	r4, r3
 800157e:	2e00      	cmp	r6, #0
 8001580:	d000      	beq.n	8001584 <__aeabi_dadd+0x1f4>
 8001582:	e169      	b.n	8001858 <__aeabi_dadd+0x4c8>
 8001584:	2c00      	cmp	r4, #0
 8001586:	d100      	bne.n	800158a <__aeabi_dadd+0x1fa>
 8001588:	e1bf      	b.n	800190a <__aeabi_dadd+0x57a>
 800158a:	4644      	mov	r4, r8
 800158c:	430c      	orrs	r4, r1
 800158e:	d000      	beq.n	8001592 <__aeabi_dadd+0x202>
 8001590:	e1d0      	b.n	8001934 <__aeabi_dadd+0x5a4>
 8001592:	0742      	lsls	r2, r0, #29
 8001594:	08db      	lsrs	r3, r3, #3
 8001596:	4313      	orrs	r3, r2
 8001598:	08c0      	lsrs	r0, r0, #3
 800159a:	e029      	b.n	80015f0 <__aeabi_dadd+0x260>
 800159c:	003a      	movs	r2, r7
 800159e:	430a      	orrs	r2, r1
 80015a0:	d100      	bne.n	80015a4 <__aeabi_dadd+0x214>
 80015a2:	e170      	b.n	8001886 <__aeabi_dadd+0x4f6>
 80015a4:	4662      	mov	r2, ip
 80015a6:	4664      	mov	r4, ip
 80015a8:	3a01      	subs	r2, #1
 80015aa:	2c01      	cmp	r4, #1
 80015ac:	d100      	bne.n	80015b0 <__aeabi_dadd+0x220>
 80015ae:	e0e0      	b.n	8001772 <__aeabi_dadd+0x3e2>
 80015b0:	4c51      	ldr	r4, [pc, #324]	; (80016f8 <__aeabi_dadd+0x368>)
 80015b2:	45a4      	cmp	ip, r4
 80015b4:	d100      	bne.n	80015b8 <__aeabi_dadd+0x228>
 80015b6:	e161      	b.n	800187c <__aeabi_dadd+0x4ec>
 80015b8:	4694      	mov	ip, r2
 80015ba:	e7b4      	b.n	8001526 <__aeabi_dadd+0x196>
 80015bc:	003a      	movs	r2, r7
 80015be:	391f      	subs	r1, #31
 80015c0:	40ca      	lsrs	r2, r1
 80015c2:	0011      	movs	r1, r2
 80015c4:	2b20      	cmp	r3, #32
 80015c6:	d003      	beq.n	80015d0 <__aeabi_dadd+0x240>
 80015c8:	2240      	movs	r2, #64	; 0x40
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	409f      	lsls	r7, r3
 80015ce:	433c      	orrs	r4, r7
 80015d0:	1e63      	subs	r3, r4, #1
 80015d2:	419c      	sbcs	r4, r3
 80015d4:	2700      	movs	r7, #0
 80015d6:	2600      	movs	r6, #0
 80015d8:	430c      	orrs	r4, r1
 80015da:	0763      	lsls	r3, r4, #29
 80015dc:	d000      	beq.n	80015e0 <__aeabi_dadd+0x250>
 80015de:	e753      	b.n	8001488 <__aeabi_dadd+0xf8>
 80015e0:	46b4      	mov	ip, r6
 80015e2:	08e4      	lsrs	r4, r4, #3
 80015e4:	077b      	lsls	r3, r7, #29
 80015e6:	4323      	orrs	r3, r4
 80015e8:	08f8      	lsrs	r0, r7, #3
 80015ea:	4a43      	ldr	r2, [pc, #268]	; (80016f8 <__aeabi_dadd+0x368>)
 80015ec:	4594      	cmp	ip, r2
 80015ee:	d01d      	beq.n	800162c <__aeabi_dadd+0x29c>
 80015f0:	4662      	mov	r2, ip
 80015f2:	0307      	lsls	r7, r0, #12
 80015f4:	0552      	lsls	r2, r2, #21
 80015f6:	0b3f      	lsrs	r7, r7, #12
 80015f8:	0d52      	lsrs	r2, r2, #21
 80015fa:	e760      	b.n	80014be <__aeabi_dadd+0x12e>
 80015fc:	4644      	mov	r4, r8
 80015fe:	430c      	orrs	r4, r1
 8001600:	1e62      	subs	r2, r4, #1
 8001602:	4194      	sbcs	r4, r2
 8001604:	18e4      	adds	r4, r4, r3
 8001606:	429c      	cmp	r4, r3
 8001608:	419b      	sbcs	r3, r3
 800160a:	425f      	negs	r7, r3
 800160c:	183f      	adds	r7, r7, r0
 800160e:	023b      	lsls	r3, r7, #8
 8001610:	d5e3      	bpl.n	80015da <__aeabi_dadd+0x24a>
 8001612:	4b39      	ldr	r3, [pc, #228]	; (80016f8 <__aeabi_dadd+0x368>)
 8001614:	3601      	adds	r6, #1
 8001616:	429e      	cmp	r6, r3
 8001618:	d000      	beq.n	800161c <__aeabi_dadd+0x28c>
 800161a:	e0b5      	b.n	8001788 <__aeabi_dadd+0x3f8>
 800161c:	0032      	movs	r2, r6
 800161e:	2700      	movs	r7, #0
 8001620:	2300      	movs	r3, #0
 8001622:	e74c      	b.n	80014be <__aeabi_dadd+0x12e>
 8001624:	0742      	lsls	r2, r0, #29
 8001626:	08db      	lsrs	r3, r3, #3
 8001628:	4313      	orrs	r3, r2
 800162a:	08c0      	lsrs	r0, r0, #3
 800162c:	001a      	movs	r2, r3
 800162e:	4302      	orrs	r2, r0
 8001630:	d100      	bne.n	8001634 <__aeabi_dadd+0x2a4>
 8001632:	e1e1      	b.n	80019f8 <__aeabi_dadd+0x668>
 8001634:	2780      	movs	r7, #128	; 0x80
 8001636:	033f      	lsls	r7, r7, #12
 8001638:	4307      	orrs	r7, r0
 800163a:	033f      	lsls	r7, r7, #12
 800163c:	4a2e      	ldr	r2, [pc, #184]	; (80016f8 <__aeabi_dadd+0x368>)
 800163e:	0b3f      	lsrs	r7, r7, #12
 8001640:	e73d      	b.n	80014be <__aeabi_dadd+0x12e>
 8001642:	0020      	movs	r0, r4
 8001644:	f001 fd5a 	bl	80030fc <__clzsi2>
 8001648:	0001      	movs	r1, r0
 800164a:	3118      	adds	r1, #24
 800164c:	291f      	cmp	r1, #31
 800164e:	dc00      	bgt.n	8001652 <__aeabi_dadd+0x2c2>
 8001650:	e6fc      	b.n	800144c <__aeabi_dadd+0xbc>
 8001652:	3808      	subs	r0, #8
 8001654:	4084      	lsls	r4, r0
 8001656:	0027      	movs	r7, r4
 8001658:	2400      	movs	r4, #0
 800165a:	42b1      	cmp	r1, r6
 800165c:	db00      	blt.n	8001660 <__aeabi_dadd+0x2d0>
 800165e:	e6ff      	b.n	8001460 <__aeabi_dadd+0xd0>
 8001660:	4a26      	ldr	r2, [pc, #152]	; (80016fc <__aeabi_dadd+0x36c>)
 8001662:	1a76      	subs	r6, r6, r1
 8001664:	4017      	ands	r7, r2
 8001666:	e70d      	b.n	8001484 <__aeabi_dadd+0xf4>
 8001668:	2a00      	cmp	r2, #0
 800166a:	d02f      	beq.n	80016cc <__aeabi_dadd+0x33c>
 800166c:	464a      	mov	r2, r9
 800166e:	1b92      	subs	r2, r2, r6
 8001670:	4694      	mov	ip, r2
 8001672:	2e00      	cmp	r6, #0
 8001674:	d100      	bne.n	8001678 <__aeabi_dadd+0x2e8>
 8001676:	e0ad      	b.n	80017d4 <__aeabi_dadd+0x444>
 8001678:	4a1f      	ldr	r2, [pc, #124]	; (80016f8 <__aeabi_dadd+0x368>)
 800167a:	4591      	cmp	r9, r2
 800167c:	d100      	bne.n	8001680 <__aeabi_dadd+0x2f0>
 800167e:	e10f      	b.n	80018a0 <__aeabi_dadd+0x510>
 8001680:	2280      	movs	r2, #128	; 0x80
 8001682:	0412      	lsls	r2, r2, #16
 8001684:	4310      	orrs	r0, r2
 8001686:	4662      	mov	r2, ip
 8001688:	2a38      	cmp	r2, #56	; 0x38
 800168a:	dd00      	ble.n	800168e <__aeabi_dadd+0x2fe>
 800168c:	e10f      	b.n	80018ae <__aeabi_dadd+0x51e>
 800168e:	2a1f      	cmp	r2, #31
 8001690:	dd00      	ble.n	8001694 <__aeabi_dadd+0x304>
 8001692:	e180      	b.n	8001996 <__aeabi_dadd+0x606>
 8001694:	4664      	mov	r4, ip
 8001696:	2220      	movs	r2, #32
 8001698:	001e      	movs	r6, r3
 800169a:	1b12      	subs	r2, r2, r4
 800169c:	4667      	mov	r7, ip
 800169e:	0004      	movs	r4, r0
 80016a0:	4093      	lsls	r3, r2
 80016a2:	4094      	lsls	r4, r2
 80016a4:	40fe      	lsrs	r6, r7
 80016a6:	1e5a      	subs	r2, r3, #1
 80016a8:	4193      	sbcs	r3, r2
 80016aa:	40f8      	lsrs	r0, r7
 80016ac:	4334      	orrs	r4, r6
 80016ae:	431c      	orrs	r4, r3
 80016b0:	4480      	add	r8, r0
 80016b2:	1864      	adds	r4, r4, r1
 80016b4:	428c      	cmp	r4, r1
 80016b6:	41bf      	sbcs	r7, r7
 80016b8:	427f      	negs	r7, r7
 80016ba:	464e      	mov	r6, r9
 80016bc:	4447      	add	r7, r8
 80016be:	e7a6      	b.n	800160e <__aeabi_dadd+0x27e>
 80016c0:	4642      	mov	r2, r8
 80016c2:	430a      	orrs	r2, r1
 80016c4:	0011      	movs	r1, r2
 80016c6:	1e4a      	subs	r2, r1, #1
 80016c8:	4191      	sbcs	r1, r2
 80016ca:	e6ad      	b.n	8001428 <__aeabi_dadd+0x98>
 80016cc:	4c0c      	ldr	r4, [pc, #48]	; (8001700 <__aeabi_dadd+0x370>)
 80016ce:	1c72      	adds	r2, r6, #1
 80016d0:	4222      	tst	r2, r4
 80016d2:	d000      	beq.n	80016d6 <__aeabi_dadd+0x346>
 80016d4:	e0a1      	b.n	800181a <__aeabi_dadd+0x48a>
 80016d6:	0002      	movs	r2, r0
 80016d8:	431a      	orrs	r2, r3
 80016da:	2e00      	cmp	r6, #0
 80016dc:	d000      	beq.n	80016e0 <__aeabi_dadd+0x350>
 80016de:	e0fa      	b.n	80018d6 <__aeabi_dadd+0x546>
 80016e0:	2a00      	cmp	r2, #0
 80016e2:	d100      	bne.n	80016e6 <__aeabi_dadd+0x356>
 80016e4:	e145      	b.n	8001972 <__aeabi_dadd+0x5e2>
 80016e6:	003a      	movs	r2, r7
 80016e8:	430a      	orrs	r2, r1
 80016ea:	d000      	beq.n	80016ee <__aeabi_dadd+0x35e>
 80016ec:	e146      	b.n	800197c <__aeabi_dadd+0x5ec>
 80016ee:	0742      	lsls	r2, r0, #29
 80016f0:	08db      	lsrs	r3, r3, #3
 80016f2:	4313      	orrs	r3, r2
 80016f4:	08c0      	lsrs	r0, r0, #3
 80016f6:	e77b      	b.n	80015f0 <__aeabi_dadd+0x260>
 80016f8:	000007ff 	.word	0x000007ff
 80016fc:	ff7fffff 	.word	0xff7fffff
 8001700:	000007fe 	.word	0x000007fe
 8001704:	4647      	mov	r7, r8
 8001706:	1a5c      	subs	r4, r3, r1
 8001708:	1bc2      	subs	r2, r0, r7
 800170a:	42a3      	cmp	r3, r4
 800170c:	41bf      	sbcs	r7, r7
 800170e:	427f      	negs	r7, r7
 8001710:	46b9      	mov	r9, r7
 8001712:	0017      	movs	r7, r2
 8001714:	464a      	mov	r2, r9
 8001716:	1abf      	subs	r7, r7, r2
 8001718:	023a      	lsls	r2, r7, #8
 800171a:	d500      	bpl.n	800171e <__aeabi_dadd+0x38e>
 800171c:	e08d      	b.n	800183a <__aeabi_dadd+0x4aa>
 800171e:	0023      	movs	r3, r4
 8001720:	433b      	orrs	r3, r7
 8001722:	d000      	beq.n	8001726 <__aeabi_dadd+0x396>
 8001724:	e68a      	b.n	800143c <__aeabi_dadd+0xac>
 8001726:	2000      	movs	r0, #0
 8001728:	2500      	movs	r5, #0
 800172a:	e761      	b.n	80015f0 <__aeabi_dadd+0x260>
 800172c:	4cb4      	ldr	r4, [pc, #720]	; (8001a00 <__aeabi_dadd+0x670>)
 800172e:	45a1      	cmp	r9, r4
 8001730:	d100      	bne.n	8001734 <__aeabi_dadd+0x3a4>
 8001732:	e0ad      	b.n	8001890 <__aeabi_dadd+0x500>
 8001734:	2480      	movs	r4, #128	; 0x80
 8001736:	0424      	lsls	r4, r4, #16
 8001738:	4320      	orrs	r0, r4
 800173a:	4664      	mov	r4, ip
 800173c:	2c38      	cmp	r4, #56	; 0x38
 800173e:	dc3d      	bgt.n	80017bc <__aeabi_dadd+0x42c>
 8001740:	4662      	mov	r2, ip
 8001742:	2c1f      	cmp	r4, #31
 8001744:	dd00      	ble.n	8001748 <__aeabi_dadd+0x3b8>
 8001746:	e0b7      	b.n	80018b8 <__aeabi_dadd+0x528>
 8001748:	2520      	movs	r5, #32
 800174a:	001e      	movs	r6, r3
 800174c:	1b2d      	subs	r5, r5, r4
 800174e:	0004      	movs	r4, r0
 8001750:	40ab      	lsls	r3, r5
 8001752:	40ac      	lsls	r4, r5
 8001754:	40d6      	lsrs	r6, r2
 8001756:	40d0      	lsrs	r0, r2
 8001758:	4642      	mov	r2, r8
 800175a:	1e5d      	subs	r5, r3, #1
 800175c:	41ab      	sbcs	r3, r5
 800175e:	4334      	orrs	r4, r6
 8001760:	1a12      	subs	r2, r2, r0
 8001762:	4690      	mov	r8, r2
 8001764:	4323      	orrs	r3, r4
 8001766:	e02c      	b.n	80017c2 <__aeabi_dadd+0x432>
 8001768:	0742      	lsls	r2, r0, #29
 800176a:	08db      	lsrs	r3, r3, #3
 800176c:	4313      	orrs	r3, r2
 800176e:	08c0      	lsrs	r0, r0, #3
 8001770:	e73b      	b.n	80015ea <__aeabi_dadd+0x25a>
 8001772:	185c      	adds	r4, r3, r1
 8001774:	429c      	cmp	r4, r3
 8001776:	419b      	sbcs	r3, r3
 8001778:	4440      	add	r0, r8
 800177a:	425b      	negs	r3, r3
 800177c:	18c7      	adds	r7, r0, r3
 800177e:	2601      	movs	r6, #1
 8001780:	023b      	lsls	r3, r7, #8
 8001782:	d400      	bmi.n	8001786 <__aeabi_dadd+0x3f6>
 8001784:	e729      	b.n	80015da <__aeabi_dadd+0x24a>
 8001786:	2602      	movs	r6, #2
 8001788:	4a9e      	ldr	r2, [pc, #632]	; (8001a04 <__aeabi_dadd+0x674>)
 800178a:	0863      	lsrs	r3, r4, #1
 800178c:	4017      	ands	r7, r2
 800178e:	2201      	movs	r2, #1
 8001790:	4014      	ands	r4, r2
 8001792:	431c      	orrs	r4, r3
 8001794:	07fb      	lsls	r3, r7, #31
 8001796:	431c      	orrs	r4, r3
 8001798:	087f      	lsrs	r7, r7, #1
 800179a:	e673      	b.n	8001484 <__aeabi_dadd+0xf4>
 800179c:	4644      	mov	r4, r8
 800179e:	3a20      	subs	r2, #32
 80017a0:	40d4      	lsrs	r4, r2
 80017a2:	4662      	mov	r2, ip
 80017a4:	2a20      	cmp	r2, #32
 80017a6:	d005      	beq.n	80017b4 <__aeabi_dadd+0x424>
 80017a8:	4667      	mov	r7, ip
 80017aa:	2240      	movs	r2, #64	; 0x40
 80017ac:	1bd2      	subs	r2, r2, r7
 80017ae:	4647      	mov	r7, r8
 80017b0:	4097      	lsls	r7, r2
 80017b2:	4339      	orrs	r1, r7
 80017b4:	1e4a      	subs	r2, r1, #1
 80017b6:	4191      	sbcs	r1, r2
 80017b8:	4321      	orrs	r1, r4
 80017ba:	e635      	b.n	8001428 <__aeabi_dadd+0x98>
 80017bc:	4303      	orrs	r3, r0
 80017be:	1e58      	subs	r0, r3, #1
 80017c0:	4183      	sbcs	r3, r0
 80017c2:	1acc      	subs	r4, r1, r3
 80017c4:	42a1      	cmp	r1, r4
 80017c6:	41bf      	sbcs	r7, r7
 80017c8:	4643      	mov	r3, r8
 80017ca:	427f      	negs	r7, r7
 80017cc:	4655      	mov	r5, sl
 80017ce:	464e      	mov	r6, r9
 80017d0:	1bdf      	subs	r7, r3, r7
 80017d2:	e62e      	b.n	8001432 <__aeabi_dadd+0xa2>
 80017d4:	0002      	movs	r2, r0
 80017d6:	431a      	orrs	r2, r3
 80017d8:	d100      	bne.n	80017dc <__aeabi_dadd+0x44c>
 80017da:	e0bd      	b.n	8001958 <__aeabi_dadd+0x5c8>
 80017dc:	4662      	mov	r2, ip
 80017de:	4664      	mov	r4, ip
 80017e0:	3a01      	subs	r2, #1
 80017e2:	2c01      	cmp	r4, #1
 80017e4:	d100      	bne.n	80017e8 <__aeabi_dadd+0x458>
 80017e6:	e0e5      	b.n	80019b4 <__aeabi_dadd+0x624>
 80017e8:	4c85      	ldr	r4, [pc, #532]	; (8001a00 <__aeabi_dadd+0x670>)
 80017ea:	45a4      	cmp	ip, r4
 80017ec:	d058      	beq.n	80018a0 <__aeabi_dadd+0x510>
 80017ee:	4694      	mov	ip, r2
 80017f0:	e749      	b.n	8001686 <__aeabi_dadd+0x2f6>
 80017f2:	4664      	mov	r4, ip
 80017f4:	2220      	movs	r2, #32
 80017f6:	1b12      	subs	r2, r2, r4
 80017f8:	4644      	mov	r4, r8
 80017fa:	4094      	lsls	r4, r2
 80017fc:	000f      	movs	r7, r1
 80017fe:	46a1      	mov	r9, r4
 8001800:	4664      	mov	r4, ip
 8001802:	4091      	lsls	r1, r2
 8001804:	40e7      	lsrs	r7, r4
 8001806:	464c      	mov	r4, r9
 8001808:	1e4a      	subs	r2, r1, #1
 800180a:	4191      	sbcs	r1, r2
 800180c:	433c      	orrs	r4, r7
 800180e:	4642      	mov	r2, r8
 8001810:	430c      	orrs	r4, r1
 8001812:	4661      	mov	r1, ip
 8001814:	40ca      	lsrs	r2, r1
 8001816:	1880      	adds	r0, r0, r2
 8001818:	e6f4      	b.n	8001604 <__aeabi_dadd+0x274>
 800181a:	4c79      	ldr	r4, [pc, #484]	; (8001a00 <__aeabi_dadd+0x670>)
 800181c:	42a2      	cmp	r2, r4
 800181e:	d100      	bne.n	8001822 <__aeabi_dadd+0x492>
 8001820:	e6fd      	b.n	800161e <__aeabi_dadd+0x28e>
 8001822:	1859      	adds	r1, r3, r1
 8001824:	4299      	cmp	r1, r3
 8001826:	419b      	sbcs	r3, r3
 8001828:	4440      	add	r0, r8
 800182a:	425f      	negs	r7, r3
 800182c:	19c7      	adds	r7, r0, r7
 800182e:	07fc      	lsls	r4, r7, #31
 8001830:	0849      	lsrs	r1, r1, #1
 8001832:	0016      	movs	r6, r2
 8001834:	430c      	orrs	r4, r1
 8001836:	087f      	lsrs	r7, r7, #1
 8001838:	e6cf      	b.n	80015da <__aeabi_dadd+0x24a>
 800183a:	1acc      	subs	r4, r1, r3
 800183c:	42a1      	cmp	r1, r4
 800183e:	41bf      	sbcs	r7, r7
 8001840:	4643      	mov	r3, r8
 8001842:	427f      	negs	r7, r7
 8001844:	1a18      	subs	r0, r3, r0
 8001846:	4655      	mov	r5, sl
 8001848:	1bc7      	subs	r7, r0, r7
 800184a:	e5f7      	b.n	800143c <__aeabi_dadd+0xac>
 800184c:	08c9      	lsrs	r1, r1, #3
 800184e:	077b      	lsls	r3, r7, #29
 8001850:	4655      	mov	r5, sl
 8001852:	430b      	orrs	r3, r1
 8001854:	08f8      	lsrs	r0, r7, #3
 8001856:	e6c8      	b.n	80015ea <__aeabi_dadd+0x25a>
 8001858:	2c00      	cmp	r4, #0
 800185a:	d000      	beq.n	800185e <__aeabi_dadd+0x4ce>
 800185c:	e081      	b.n	8001962 <__aeabi_dadd+0x5d2>
 800185e:	4643      	mov	r3, r8
 8001860:	430b      	orrs	r3, r1
 8001862:	d115      	bne.n	8001890 <__aeabi_dadd+0x500>
 8001864:	2080      	movs	r0, #128	; 0x80
 8001866:	2500      	movs	r5, #0
 8001868:	0300      	lsls	r0, r0, #12
 800186a:	e6e3      	b.n	8001634 <__aeabi_dadd+0x2a4>
 800186c:	1a5c      	subs	r4, r3, r1
 800186e:	42a3      	cmp	r3, r4
 8001870:	419b      	sbcs	r3, r3
 8001872:	1bc7      	subs	r7, r0, r7
 8001874:	425b      	negs	r3, r3
 8001876:	2601      	movs	r6, #1
 8001878:	1aff      	subs	r7, r7, r3
 800187a:	e5da      	b.n	8001432 <__aeabi_dadd+0xa2>
 800187c:	0742      	lsls	r2, r0, #29
 800187e:	08db      	lsrs	r3, r3, #3
 8001880:	4313      	orrs	r3, r2
 8001882:	08c0      	lsrs	r0, r0, #3
 8001884:	e6d2      	b.n	800162c <__aeabi_dadd+0x29c>
 8001886:	0742      	lsls	r2, r0, #29
 8001888:	08db      	lsrs	r3, r3, #3
 800188a:	4313      	orrs	r3, r2
 800188c:	08c0      	lsrs	r0, r0, #3
 800188e:	e6ac      	b.n	80015ea <__aeabi_dadd+0x25a>
 8001890:	4643      	mov	r3, r8
 8001892:	4642      	mov	r2, r8
 8001894:	08c9      	lsrs	r1, r1, #3
 8001896:	075b      	lsls	r3, r3, #29
 8001898:	4655      	mov	r5, sl
 800189a:	430b      	orrs	r3, r1
 800189c:	08d0      	lsrs	r0, r2, #3
 800189e:	e6c5      	b.n	800162c <__aeabi_dadd+0x29c>
 80018a0:	4643      	mov	r3, r8
 80018a2:	4642      	mov	r2, r8
 80018a4:	075b      	lsls	r3, r3, #29
 80018a6:	08c9      	lsrs	r1, r1, #3
 80018a8:	430b      	orrs	r3, r1
 80018aa:	08d0      	lsrs	r0, r2, #3
 80018ac:	e6be      	b.n	800162c <__aeabi_dadd+0x29c>
 80018ae:	4303      	orrs	r3, r0
 80018b0:	001c      	movs	r4, r3
 80018b2:	1e63      	subs	r3, r4, #1
 80018b4:	419c      	sbcs	r4, r3
 80018b6:	e6fc      	b.n	80016b2 <__aeabi_dadd+0x322>
 80018b8:	0002      	movs	r2, r0
 80018ba:	3c20      	subs	r4, #32
 80018bc:	40e2      	lsrs	r2, r4
 80018be:	0014      	movs	r4, r2
 80018c0:	4662      	mov	r2, ip
 80018c2:	2a20      	cmp	r2, #32
 80018c4:	d003      	beq.n	80018ce <__aeabi_dadd+0x53e>
 80018c6:	2540      	movs	r5, #64	; 0x40
 80018c8:	1aad      	subs	r5, r5, r2
 80018ca:	40a8      	lsls	r0, r5
 80018cc:	4303      	orrs	r3, r0
 80018ce:	1e58      	subs	r0, r3, #1
 80018d0:	4183      	sbcs	r3, r0
 80018d2:	4323      	orrs	r3, r4
 80018d4:	e775      	b.n	80017c2 <__aeabi_dadd+0x432>
 80018d6:	2a00      	cmp	r2, #0
 80018d8:	d0e2      	beq.n	80018a0 <__aeabi_dadd+0x510>
 80018da:	003a      	movs	r2, r7
 80018dc:	430a      	orrs	r2, r1
 80018de:	d0cd      	beq.n	800187c <__aeabi_dadd+0x4ec>
 80018e0:	0742      	lsls	r2, r0, #29
 80018e2:	08db      	lsrs	r3, r3, #3
 80018e4:	4313      	orrs	r3, r2
 80018e6:	2280      	movs	r2, #128	; 0x80
 80018e8:	08c0      	lsrs	r0, r0, #3
 80018ea:	0312      	lsls	r2, r2, #12
 80018ec:	4210      	tst	r0, r2
 80018ee:	d006      	beq.n	80018fe <__aeabi_dadd+0x56e>
 80018f0:	08fc      	lsrs	r4, r7, #3
 80018f2:	4214      	tst	r4, r2
 80018f4:	d103      	bne.n	80018fe <__aeabi_dadd+0x56e>
 80018f6:	0020      	movs	r0, r4
 80018f8:	08cb      	lsrs	r3, r1, #3
 80018fa:	077a      	lsls	r2, r7, #29
 80018fc:	4313      	orrs	r3, r2
 80018fe:	0f5a      	lsrs	r2, r3, #29
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	0752      	lsls	r2, r2, #29
 8001904:	08db      	lsrs	r3, r3, #3
 8001906:	4313      	orrs	r3, r2
 8001908:	e690      	b.n	800162c <__aeabi_dadd+0x29c>
 800190a:	4643      	mov	r3, r8
 800190c:	430b      	orrs	r3, r1
 800190e:	d100      	bne.n	8001912 <__aeabi_dadd+0x582>
 8001910:	e709      	b.n	8001726 <__aeabi_dadd+0x396>
 8001912:	4643      	mov	r3, r8
 8001914:	4642      	mov	r2, r8
 8001916:	08c9      	lsrs	r1, r1, #3
 8001918:	075b      	lsls	r3, r3, #29
 800191a:	4655      	mov	r5, sl
 800191c:	430b      	orrs	r3, r1
 800191e:	08d0      	lsrs	r0, r2, #3
 8001920:	e666      	b.n	80015f0 <__aeabi_dadd+0x260>
 8001922:	1acc      	subs	r4, r1, r3
 8001924:	42a1      	cmp	r1, r4
 8001926:	4189      	sbcs	r1, r1
 8001928:	1a3f      	subs	r7, r7, r0
 800192a:	4249      	negs	r1, r1
 800192c:	4655      	mov	r5, sl
 800192e:	2601      	movs	r6, #1
 8001930:	1a7f      	subs	r7, r7, r1
 8001932:	e57e      	b.n	8001432 <__aeabi_dadd+0xa2>
 8001934:	4642      	mov	r2, r8
 8001936:	1a5c      	subs	r4, r3, r1
 8001938:	1a87      	subs	r7, r0, r2
 800193a:	42a3      	cmp	r3, r4
 800193c:	4192      	sbcs	r2, r2
 800193e:	4252      	negs	r2, r2
 8001940:	1abf      	subs	r7, r7, r2
 8001942:	023a      	lsls	r2, r7, #8
 8001944:	d53d      	bpl.n	80019c2 <__aeabi_dadd+0x632>
 8001946:	1acc      	subs	r4, r1, r3
 8001948:	42a1      	cmp	r1, r4
 800194a:	4189      	sbcs	r1, r1
 800194c:	4643      	mov	r3, r8
 800194e:	4249      	negs	r1, r1
 8001950:	1a1f      	subs	r7, r3, r0
 8001952:	4655      	mov	r5, sl
 8001954:	1a7f      	subs	r7, r7, r1
 8001956:	e595      	b.n	8001484 <__aeabi_dadd+0xf4>
 8001958:	077b      	lsls	r3, r7, #29
 800195a:	08c9      	lsrs	r1, r1, #3
 800195c:	430b      	orrs	r3, r1
 800195e:	08f8      	lsrs	r0, r7, #3
 8001960:	e643      	b.n	80015ea <__aeabi_dadd+0x25a>
 8001962:	4644      	mov	r4, r8
 8001964:	08db      	lsrs	r3, r3, #3
 8001966:	430c      	orrs	r4, r1
 8001968:	d130      	bne.n	80019cc <__aeabi_dadd+0x63c>
 800196a:	0742      	lsls	r2, r0, #29
 800196c:	4313      	orrs	r3, r2
 800196e:	08c0      	lsrs	r0, r0, #3
 8001970:	e65c      	b.n	800162c <__aeabi_dadd+0x29c>
 8001972:	077b      	lsls	r3, r7, #29
 8001974:	08c9      	lsrs	r1, r1, #3
 8001976:	430b      	orrs	r3, r1
 8001978:	08f8      	lsrs	r0, r7, #3
 800197a:	e639      	b.n	80015f0 <__aeabi_dadd+0x260>
 800197c:	185c      	adds	r4, r3, r1
 800197e:	429c      	cmp	r4, r3
 8001980:	419b      	sbcs	r3, r3
 8001982:	4440      	add	r0, r8
 8001984:	425b      	negs	r3, r3
 8001986:	18c7      	adds	r7, r0, r3
 8001988:	023b      	lsls	r3, r7, #8
 800198a:	d400      	bmi.n	800198e <__aeabi_dadd+0x5fe>
 800198c:	e625      	b.n	80015da <__aeabi_dadd+0x24a>
 800198e:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <__aeabi_dadd+0x674>)
 8001990:	2601      	movs	r6, #1
 8001992:	401f      	ands	r7, r3
 8001994:	e621      	b.n	80015da <__aeabi_dadd+0x24a>
 8001996:	0004      	movs	r4, r0
 8001998:	3a20      	subs	r2, #32
 800199a:	40d4      	lsrs	r4, r2
 800199c:	4662      	mov	r2, ip
 800199e:	2a20      	cmp	r2, #32
 80019a0:	d004      	beq.n	80019ac <__aeabi_dadd+0x61c>
 80019a2:	2240      	movs	r2, #64	; 0x40
 80019a4:	4666      	mov	r6, ip
 80019a6:	1b92      	subs	r2, r2, r6
 80019a8:	4090      	lsls	r0, r2
 80019aa:	4303      	orrs	r3, r0
 80019ac:	1e5a      	subs	r2, r3, #1
 80019ae:	4193      	sbcs	r3, r2
 80019b0:	431c      	orrs	r4, r3
 80019b2:	e67e      	b.n	80016b2 <__aeabi_dadd+0x322>
 80019b4:	185c      	adds	r4, r3, r1
 80019b6:	428c      	cmp	r4, r1
 80019b8:	4189      	sbcs	r1, r1
 80019ba:	4440      	add	r0, r8
 80019bc:	4249      	negs	r1, r1
 80019be:	1847      	adds	r7, r0, r1
 80019c0:	e6dd      	b.n	800177e <__aeabi_dadd+0x3ee>
 80019c2:	0023      	movs	r3, r4
 80019c4:	433b      	orrs	r3, r7
 80019c6:	d100      	bne.n	80019ca <__aeabi_dadd+0x63a>
 80019c8:	e6ad      	b.n	8001726 <__aeabi_dadd+0x396>
 80019ca:	e606      	b.n	80015da <__aeabi_dadd+0x24a>
 80019cc:	0744      	lsls	r4, r0, #29
 80019ce:	4323      	orrs	r3, r4
 80019d0:	2480      	movs	r4, #128	; 0x80
 80019d2:	08c0      	lsrs	r0, r0, #3
 80019d4:	0324      	lsls	r4, r4, #12
 80019d6:	4220      	tst	r0, r4
 80019d8:	d008      	beq.n	80019ec <__aeabi_dadd+0x65c>
 80019da:	4642      	mov	r2, r8
 80019dc:	08d6      	lsrs	r6, r2, #3
 80019de:	4226      	tst	r6, r4
 80019e0:	d104      	bne.n	80019ec <__aeabi_dadd+0x65c>
 80019e2:	4655      	mov	r5, sl
 80019e4:	0030      	movs	r0, r6
 80019e6:	08cb      	lsrs	r3, r1, #3
 80019e8:	0751      	lsls	r1, r2, #29
 80019ea:	430b      	orrs	r3, r1
 80019ec:	0f5a      	lsrs	r2, r3, #29
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	08db      	lsrs	r3, r3, #3
 80019f2:	0752      	lsls	r2, r2, #29
 80019f4:	4313      	orrs	r3, r2
 80019f6:	e619      	b.n	800162c <__aeabi_dadd+0x29c>
 80019f8:	2300      	movs	r3, #0
 80019fa:	4a01      	ldr	r2, [pc, #4]	; (8001a00 <__aeabi_dadd+0x670>)
 80019fc:	001f      	movs	r7, r3
 80019fe:	e55e      	b.n	80014be <__aeabi_dadd+0x12e>
 8001a00:	000007ff 	.word	0x000007ff
 8001a04:	ff7fffff 	.word	0xff7fffff

08001a08 <__aeabi_ddiv>:
 8001a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a0a:	4657      	mov	r7, sl
 8001a0c:	464e      	mov	r6, r9
 8001a0e:	4645      	mov	r5, r8
 8001a10:	46de      	mov	lr, fp
 8001a12:	b5e0      	push	{r5, r6, r7, lr}
 8001a14:	4681      	mov	r9, r0
 8001a16:	0005      	movs	r5, r0
 8001a18:	030c      	lsls	r4, r1, #12
 8001a1a:	0048      	lsls	r0, r1, #1
 8001a1c:	4692      	mov	sl, r2
 8001a1e:	001f      	movs	r7, r3
 8001a20:	b085      	sub	sp, #20
 8001a22:	0b24      	lsrs	r4, r4, #12
 8001a24:	0d40      	lsrs	r0, r0, #21
 8001a26:	0fce      	lsrs	r6, r1, #31
 8001a28:	2800      	cmp	r0, #0
 8001a2a:	d100      	bne.n	8001a2e <__aeabi_ddiv+0x26>
 8001a2c:	e156      	b.n	8001cdc <__aeabi_ddiv+0x2d4>
 8001a2e:	4bd4      	ldr	r3, [pc, #848]	; (8001d80 <__aeabi_ddiv+0x378>)
 8001a30:	4298      	cmp	r0, r3
 8001a32:	d100      	bne.n	8001a36 <__aeabi_ddiv+0x2e>
 8001a34:	e172      	b.n	8001d1c <__aeabi_ddiv+0x314>
 8001a36:	0f6b      	lsrs	r3, r5, #29
 8001a38:	00e4      	lsls	r4, r4, #3
 8001a3a:	431c      	orrs	r4, r3
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	041b      	lsls	r3, r3, #16
 8001a40:	4323      	orrs	r3, r4
 8001a42:	4698      	mov	r8, r3
 8001a44:	4bcf      	ldr	r3, [pc, #828]	; (8001d84 <__aeabi_ddiv+0x37c>)
 8001a46:	00ed      	lsls	r5, r5, #3
 8001a48:	469b      	mov	fp, r3
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	4699      	mov	r9, r3
 8001a4e:	4483      	add	fp, r0
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	033c      	lsls	r4, r7, #12
 8001a54:	007b      	lsls	r3, r7, #1
 8001a56:	4650      	mov	r0, sl
 8001a58:	0b24      	lsrs	r4, r4, #12
 8001a5a:	0d5b      	lsrs	r3, r3, #21
 8001a5c:	0fff      	lsrs	r7, r7, #31
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d100      	bne.n	8001a64 <__aeabi_ddiv+0x5c>
 8001a62:	e11f      	b.n	8001ca4 <__aeabi_ddiv+0x29c>
 8001a64:	4ac6      	ldr	r2, [pc, #792]	; (8001d80 <__aeabi_ddiv+0x378>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d100      	bne.n	8001a6c <__aeabi_ddiv+0x64>
 8001a6a:	e162      	b.n	8001d32 <__aeabi_ddiv+0x32a>
 8001a6c:	49c5      	ldr	r1, [pc, #788]	; (8001d84 <__aeabi_ddiv+0x37c>)
 8001a6e:	0f42      	lsrs	r2, r0, #29
 8001a70:	468c      	mov	ip, r1
 8001a72:	00e4      	lsls	r4, r4, #3
 8001a74:	4659      	mov	r1, fp
 8001a76:	4314      	orrs	r4, r2
 8001a78:	2280      	movs	r2, #128	; 0x80
 8001a7a:	4463      	add	r3, ip
 8001a7c:	0412      	lsls	r2, r2, #16
 8001a7e:	1acb      	subs	r3, r1, r3
 8001a80:	4314      	orrs	r4, r2
 8001a82:	469b      	mov	fp, r3
 8001a84:	00c2      	lsls	r2, r0, #3
 8001a86:	2000      	movs	r0, #0
 8001a88:	0033      	movs	r3, r6
 8001a8a:	407b      	eors	r3, r7
 8001a8c:	469a      	mov	sl, r3
 8001a8e:	464b      	mov	r3, r9
 8001a90:	2b0f      	cmp	r3, #15
 8001a92:	d827      	bhi.n	8001ae4 <__aeabi_ddiv+0xdc>
 8001a94:	49bc      	ldr	r1, [pc, #752]	; (8001d88 <__aeabi_ddiv+0x380>)
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	58cb      	ldr	r3, [r1, r3]
 8001a9a:	469f      	mov	pc, r3
 8001a9c:	46b2      	mov	sl, r6
 8001a9e:	9b00      	ldr	r3, [sp, #0]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d016      	beq.n	8001ad2 <__aeabi_ddiv+0xca>
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	d100      	bne.n	8001aaa <__aeabi_ddiv+0xa2>
 8001aa8:	e28e      	b.n	8001fc8 <__aeabi_ddiv+0x5c0>
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d000      	beq.n	8001ab0 <__aeabi_ddiv+0xa8>
 8001aae:	e0d9      	b.n	8001c64 <__aeabi_ddiv+0x25c>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	2400      	movs	r4, #0
 8001ab4:	2500      	movs	r5, #0
 8001ab6:	4652      	mov	r2, sl
 8001ab8:	051b      	lsls	r3, r3, #20
 8001aba:	4323      	orrs	r3, r4
 8001abc:	07d2      	lsls	r2, r2, #31
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	0028      	movs	r0, r5
 8001ac2:	0019      	movs	r1, r3
 8001ac4:	b005      	add	sp, #20
 8001ac6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ac8:	46bb      	mov	fp, r7
 8001aca:	46b2      	mov	sl, r6
 8001acc:	46a9      	mov	r9, r5
 8001ace:	46a0      	mov	r8, r4
 8001ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ad2:	2400      	movs	r4, #0
 8001ad4:	2500      	movs	r5, #0
 8001ad6:	4baa      	ldr	r3, [pc, #680]	; (8001d80 <__aeabi_ddiv+0x378>)
 8001ad8:	e7ed      	b.n	8001ab6 <__aeabi_ddiv+0xae>
 8001ada:	46ba      	mov	sl, r7
 8001adc:	46a0      	mov	r8, r4
 8001ade:	0015      	movs	r5, r2
 8001ae0:	9000      	str	r0, [sp, #0]
 8001ae2:	e7dc      	b.n	8001a9e <__aeabi_ddiv+0x96>
 8001ae4:	4544      	cmp	r4, r8
 8001ae6:	d200      	bcs.n	8001aea <__aeabi_ddiv+0xe2>
 8001ae8:	e1c7      	b.n	8001e7a <__aeabi_ddiv+0x472>
 8001aea:	d100      	bne.n	8001aee <__aeabi_ddiv+0xe6>
 8001aec:	e1c2      	b.n	8001e74 <__aeabi_ddiv+0x46c>
 8001aee:	2301      	movs	r3, #1
 8001af0:	425b      	negs	r3, r3
 8001af2:	469c      	mov	ip, r3
 8001af4:	002e      	movs	r6, r5
 8001af6:	4640      	mov	r0, r8
 8001af8:	2500      	movs	r5, #0
 8001afa:	44e3      	add	fp, ip
 8001afc:	0223      	lsls	r3, r4, #8
 8001afe:	0e14      	lsrs	r4, r2, #24
 8001b00:	431c      	orrs	r4, r3
 8001b02:	0c1b      	lsrs	r3, r3, #16
 8001b04:	4699      	mov	r9, r3
 8001b06:	0423      	lsls	r3, r4, #16
 8001b08:	0c1f      	lsrs	r7, r3, #16
 8001b0a:	0212      	lsls	r2, r2, #8
 8001b0c:	4649      	mov	r1, r9
 8001b0e:	9200      	str	r2, [sp, #0]
 8001b10:	9701      	str	r7, [sp, #4]
 8001b12:	f7fe fb9b 	bl	800024c <__aeabi_uidivmod>
 8001b16:	0002      	movs	r2, r0
 8001b18:	437a      	muls	r2, r7
 8001b1a:	040b      	lsls	r3, r1, #16
 8001b1c:	0c31      	lsrs	r1, r6, #16
 8001b1e:	4680      	mov	r8, r0
 8001b20:	4319      	orrs	r1, r3
 8001b22:	428a      	cmp	r2, r1
 8001b24:	d907      	bls.n	8001b36 <__aeabi_ddiv+0x12e>
 8001b26:	2301      	movs	r3, #1
 8001b28:	425b      	negs	r3, r3
 8001b2a:	469c      	mov	ip, r3
 8001b2c:	1909      	adds	r1, r1, r4
 8001b2e:	44e0      	add	r8, ip
 8001b30:	428c      	cmp	r4, r1
 8001b32:	d800      	bhi.n	8001b36 <__aeabi_ddiv+0x12e>
 8001b34:	e207      	b.n	8001f46 <__aeabi_ddiv+0x53e>
 8001b36:	1a88      	subs	r0, r1, r2
 8001b38:	4649      	mov	r1, r9
 8001b3a:	f7fe fb87 	bl	800024c <__aeabi_uidivmod>
 8001b3e:	0409      	lsls	r1, r1, #16
 8001b40:	468c      	mov	ip, r1
 8001b42:	0431      	lsls	r1, r6, #16
 8001b44:	4666      	mov	r6, ip
 8001b46:	9a01      	ldr	r2, [sp, #4]
 8001b48:	0c09      	lsrs	r1, r1, #16
 8001b4a:	4342      	muls	r2, r0
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	4331      	orrs	r1, r6
 8001b50:	428a      	cmp	r2, r1
 8001b52:	d904      	bls.n	8001b5e <__aeabi_ddiv+0x156>
 8001b54:	1909      	adds	r1, r1, r4
 8001b56:	3b01      	subs	r3, #1
 8001b58:	428c      	cmp	r4, r1
 8001b5a:	d800      	bhi.n	8001b5e <__aeabi_ddiv+0x156>
 8001b5c:	e1ed      	b.n	8001f3a <__aeabi_ddiv+0x532>
 8001b5e:	1a88      	subs	r0, r1, r2
 8001b60:	4642      	mov	r2, r8
 8001b62:	0412      	lsls	r2, r2, #16
 8001b64:	431a      	orrs	r2, r3
 8001b66:	4690      	mov	r8, r2
 8001b68:	4641      	mov	r1, r8
 8001b6a:	9b00      	ldr	r3, [sp, #0]
 8001b6c:	040e      	lsls	r6, r1, #16
 8001b6e:	0c1b      	lsrs	r3, r3, #16
 8001b70:	001f      	movs	r7, r3
 8001b72:	9302      	str	r3, [sp, #8]
 8001b74:	9b00      	ldr	r3, [sp, #0]
 8001b76:	0c36      	lsrs	r6, r6, #16
 8001b78:	041b      	lsls	r3, r3, #16
 8001b7a:	0c19      	lsrs	r1, r3, #16
 8001b7c:	000b      	movs	r3, r1
 8001b7e:	4373      	muls	r3, r6
 8001b80:	0c12      	lsrs	r2, r2, #16
 8001b82:	437e      	muls	r6, r7
 8001b84:	9103      	str	r1, [sp, #12]
 8001b86:	4351      	muls	r1, r2
 8001b88:	437a      	muls	r2, r7
 8001b8a:	0c1f      	lsrs	r7, r3, #16
 8001b8c:	46bc      	mov	ip, r7
 8001b8e:	1876      	adds	r6, r6, r1
 8001b90:	4466      	add	r6, ip
 8001b92:	42b1      	cmp	r1, r6
 8001b94:	d903      	bls.n	8001b9e <__aeabi_ddiv+0x196>
 8001b96:	2180      	movs	r1, #128	; 0x80
 8001b98:	0249      	lsls	r1, r1, #9
 8001b9a:	468c      	mov	ip, r1
 8001b9c:	4462      	add	r2, ip
 8001b9e:	0c31      	lsrs	r1, r6, #16
 8001ba0:	188a      	adds	r2, r1, r2
 8001ba2:	0431      	lsls	r1, r6, #16
 8001ba4:	041e      	lsls	r6, r3, #16
 8001ba6:	0c36      	lsrs	r6, r6, #16
 8001ba8:	198e      	adds	r6, r1, r6
 8001baa:	4290      	cmp	r0, r2
 8001bac:	d302      	bcc.n	8001bb4 <__aeabi_ddiv+0x1ac>
 8001bae:	d112      	bne.n	8001bd6 <__aeabi_ddiv+0x1ce>
 8001bb0:	42b5      	cmp	r5, r6
 8001bb2:	d210      	bcs.n	8001bd6 <__aeabi_ddiv+0x1ce>
 8001bb4:	4643      	mov	r3, r8
 8001bb6:	1e59      	subs	r1, r3, #1
 8001bb8:	9b00      	ldr	r3, [sp, #0]
 8001bba:	469c      	mov	ip, r3
 8001bbc:	4465      	add	r5, ip
 8001bbe:	001f      	movs	r7, r3
 8001bc0:	429d      	cmp	r5, r3
 8001bc2:	419b      	sbcs	r3, r3
 8001bc4:	425b      	negs	r3, r3
 8001bc6:	191b      	adds	r3, r3, r4
 8001bc8:	18c0      	adds	r0, r0, r3
 8001bca:	4284      	cmp	r4, r0
 8001bcc:	d200      	bcs.n	8001bd0 <__aeabi_ddiv+0x1c8>
 8001bce:	e1a0      	b.n	8001f12 <__aeabi_ddiv+0x50a>
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_ddiv+0x1cc>
 8001bd2:	e19b      	b.n	8001f0c <__aeabi_ddiv+0x504>
 8001bd4:	4688      	mov	r8, r1
 8001bd6:	1bae      	subs	r6, r5, r6
 8001bd8:	42b5      	cmp	r5, r6
 8001bda:	41ad      	sbcs	r5, r5
 8001bdc:	1a80      	subs	r0, r0, r2
 8001bde:	426d      	negs	r5, r5
 8001be0:	1b40      	subs	r0, r0, r5
 8001be2:	4284      	cmp	r4, r0
 8001be4:	d100      	bne.n	8001be8 <__aeabi_ddiv+0x1e0>
 8001be6:	e1d5      	b.n	8001f94 <__aeabi_ddiv+0x58c>
 8001be8:	4649      	mov	r1, r9
 8001bea:	f7fe fb2f 	bl	800024c <__aeabi_uidivmod>
 8001bee:	9a01      	ldr	r2, [sp, #4]
 8001bf0:	040b      	lsls	r3, r1, #16
 8001bf2:	4342      	muls	r2, r0
 8001bf4:	0c31      	lsrs	r1, r6, #16
 8001bf6:	0005      	movs	r5, r0
 8001bf8:	4319      	orrs	r1, r3
 8001bfa:	428a      	cmp	r2, r1
 8001bfc:	d900      	bls.n	8001c00 <__aeabi_ddiv+0x1f8>
 8001bfe:	e16c      	b.n	8001eda <__aeabi_ddiv+0x4d2>
 8001c00:	1a88      	subs	r0, r1, r2
 8001c02:	4649      	mov	r1, r9
 8001c04:	f7fe fb22 	bl	800024c <__aeabi_uidivmod>
 8001c08:	9a01      	ldr	r2, [sp, #4]
 8001c0a:	0436      	lsls	r6, r6, #16
 8001c0c:	4342      	muls	r2, r0
 8001c0e:	0409      	lsls	r1, r1, #16
 8001c10:	0c36      	lsrs	r6, r6, #16
 8001c12:	0003      	movs	r3, r0
 8001c14:	430e      	orrs	r6, r1
 8001c16:	42b2      	cmp	r2, r6
 8001c18:	d900      	bls.n	8001c1c <__aeabi_ddiv+0x214>
 8001c1a:	e153      	b.n	8001ec4 <__aeabi_ddiv+0x4bc>
 8001c1c:	9803      	ldr	r0, [sp, #12]
 8001c1e:	1ab6      	subs	r6, r6, r2
 8001c20:	0002      	movs	r2, r0
 8001c22:	042d      	lsls	r5, r5, #16
 8001c24:	431d      	orrs	r5, r3
 8001c26:	9f02      	ldr	r7, [sp, #8]
 8001c28:	042b      	lsls	r3, r5, #16
 8001c2a:	0c1b      	lsrs	r3, r3, #16
 8001c2c:	435a      	muls	r2, r3
 8001c2e:	437b      	muls	r3, r7
 8001c30:	469c      	mov	ip, r3
 8001c32:	0c29      	lsrs	r1, r5, #16
 8001c34:	4348      	muls	r0, r1
 8001c36:	0c13      	lsrs	r3, r2, #16
 8001c38:	4484      	add	ip, r0
 8001c3a:	4463      	add	r3, ip
 8001c3c:	4379      	muls	r1, r7
 8001c3e:	4298      	cmp	r0, r3
 8001c40:	d903      	bls.n	8001c4a <__aeabi_ddiv+0x242>
 8001c42:	2080      	movs	r0, #128	; 0x80
 8001c44:	0240      	lsls	r0, r0, #9
 8001c46:	4684      	mov	ip, r0
 8001c48:	4461      	add	r1, ip
 8001c4a:	0c18      	lsrs	r0, r3, #16
 8001c4c:	0412      	lsls	r2, r2, #16
 8001c4e:	041b      	lsls	r3, r3, #16
 8001c50:	0c12      	lsrs	r2, r2, #16
 8001c52:	1841      	adds	r1, r0, r1
 8001c54:	189b      	adds	r3, r3, r2
 8001c56:	428e      	cmp	r6, r1
 8001c58:	d200      	bcs.n	8001c5c <__aeabi_ddiv+0x254>
 8001c5a:	e0ff      	b.n	8001e5c <__aeabi_ddiv+0x454>
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_ddiv+0x258>
 8001c5e:	e0fa      	b.n	8001e56 <__aeabi_ddiv+0x44e>
 8001c60:	2301      	movs	r3, #1
 8001c62:	431d      	orrs	r5, r3
 8001c64:	4a49      	ldr	r2, [pc, #292]	; (8001d8c <__aeabi_ddiv+0x384>)
 8001c66:	445a      	add	r2, fp
 8001c68:	2a00      	cmp	r2, #0
 8001c6a:	dc00      	bgt.n	8001c6e <__aeabi_ddiv+0x266>
 8001c6c:	e0aa      	b.n	8001dc4 <__aeabi_ddiv+0x3bc>
 8001c6e:	076b      	lsls	r3, r5, #29
 8001c70:	d000      	beq.n	8001c74 <__aeabi_ddiv+0x26c>
 8001c72:	e13d      	b.n	8001ef0 <__aeabi_ddiv+0x4e8>
 8001c74:	08ed      	lsrs	r5, r5, #3
 8001c76:	4643      	mov	r3, r8
 8001c78:	01db      	lsls	r3, r3, #7
 8001c7a:	d506      	bpl.n	8001c8a <__aeabi_ddiv+0x282>
 8001c7c:	4642      	mov	r2, r8
 8001c7e:	4b44      	ldr	r3, [pc, #272]	; (8001d90 <__aeabi_ddiv+0x388>)
 8001c80:	401a      	ands	r2, r3
 8001c82:	4690      	mov	r8, r2
 8001c84:	2280      	movs	r2, #128	; 0x80
 8001c86:	00d2      	lsls	r2, r2, #3
 8001c88:	445a      	add	r2, fp
 8001c8a:	4b42      	ldr	r3, [pc, #264]	; (8001d94 <__aeabi_ddiv+0x38c>)
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	dd00      	ble.n	8001c92 <__aeabi_ddiv+0x28a>
 8001c90:	e71f      	b.n	8001ad2 <__aeabi_ddiv+0xca>
 8001c92:	4643      	mov	r3, r8
 8001c94:	075b      	lsls	r3, r3, #29
 8001c96:	431d      	orrs	r5, r3
 8001c98:	4643      	mov	r3, r8
 8001c9a:	0552      	lsls	r2, r2, #21
 8001c9c:	025c      	lsls	r4, r3, #9
 8001c9e:	0b24      	lsrs	r4, r4, #12
 8001ca0:	0d53      	lsrs	r3, r2, #21
 8001ca2:	e708      	b.n	8001ab6 <__aeabi_ddiv+0xae>
 8001ca4:	4652      	mov	r2, sl
 8001ca6:	4322      	orrs	r2, r4
 8001ca8:	d100      	bne.n	8001cac <__aeabi_ddiv+0x2a4>
 8001caa:	e07b      	b.n	8001da4 <__aeabi_ddiv+0x39c>
 8001cac:	2c00      	cmp	r4, #0
 8001cae:	d100      	bne.n	8001cb2 <__aeabi_ddiv+0x2aa>
 8001cb0:	e0fa      	b.n	8001ea8 <__aeabi_ddiv+0x4a0>
 8001cb2:	0020      	movs	r0, r4
 8001cb4:	f001 fa22 	bl	80030fc <__clzsi2>
 8001cb8:	0002      	movs	r2, r0
 8001cba:	3a0b      	subs	r2, #11
 8001cbc:	231d      	movs	r3, #29
 8001cbe:	0001      	movs	r1, r0
 8001cc0:	1a9b      	subs	r3, r3, r2
 8001cc2:	4652      	mov	r2, sl
 8001cc4:	3908      	subs	r1, #8
 8001cc6:	40da      	lsrs	r2, r3
 8001cc8:	408c      	lsls	r4, r1
 8001cca:	4314      	orrs	r4, r2
 8001ccc:	4652      	mov	r2, sl
 8001cce:	408a      	lsls	r2, r1
 8001cd0:	4b31      	ldr	r3, [pc, #196]	; (8001d98 <__aeabi_ddiv+0x390>)
 8001cd2:	4458      	add	r0, fp
 8001cd4:	469b      	mov	fp, r3
 8001cd6:	4483      	add	fp, r0
 8001cd8:	2000      	movs	r0, #0
 8001cda:	e6d5      	b.n	8001a88 <__aeabi_ddiv+0x80>
 8001cdc:	464b      	mov	r3, r9
 8001cde:	4323      	orrs	r3, r4
 8001ce0:	4698      	mov	r8, r3
 8001ce2:	d044      	beq.n	8001d6e <__aeabi_ddiv+0x366>
 8001ce4:	2c00      	cmp	r4, #0
 8001ce6:	d100      	bne.n	8001cea <__aeabi_ddiv+0x2e2>
 8001ce8:	e0ce      	b.n	8001e88 <__aeabi_ddiv+0x480>
 8001cea:	0020      	movs	r0, r4
 8001cec:	f001 fa06 	bl	80030fc <__clzsi2>
 8001cf0:	0001      	movs	r1, r0
 8001cf2:	0002      	movs	r2, r0
 8001cf4:	390b      	subs	r1, #11
 8001cf6:	231d      	movs	r3, #29
 8001cf8:	1a5b      	subs	r3, r3, r1
 8001cfa:	4649      	mov	r1, r9
 8001cfc:	0010      	movs	r0, r2
 8001cfe:	40d9      	lsrs	r1, r3
 8001d00:	3808      	subs	r0, #8
 8001d02:	4084      	lsls	r4, r0
 8001d04:	000b      	movs	r3, r1
 8001d06:	464d      	mov	r5, r9
 8001d08:	4323      	orrs	r3, r4
 8001d0a:	4698      	mov	r8, r3
 8001d0c:	4085      	lsls	r5, r0
 8001d0e:	4823      	ldr	r0, [pc, #140]	; (8001d9c <__aeabi_ddiv+0x394>)
 8001d10:	1a83      	subs	r3, r0, r2
 8001d12:	469b      	mov	fp, r3
 8001d14:	2300      	movs	r3, #0
 8001d16:	4699      	mov	r9, r3
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	e69a      	b.n	8001a52 <__aeabi_ddiv+0x4a>
 8001d1c:	464b      	mov	r3, r9
 8001d1e:	4323      	orrs	r3, r4
 8001d20:	4698      	mov	r8, r3
 8001d22:	d11d      	bne.n	8001d60 <__aeabi_ddiv+0x358>
 8001d24:	2308      	movs	r3, #8
 8001d26:	4699      	mov	r9, r3
 8001d28:	3b06      	subs	r3, #6
 8001d2a:	2500      	movs	r5, #0
 8001d2c:	4683      	mov	fp, r0
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	e68f      	b.n	8001a52 <__aeabi_ddiv+0x4a>
 8001d32:	4652      	mov	r2, sl
 8001d34:	4322      	orrs	r2, r4
 8001d36:	d109      	bne.n	8001d4c <__aeabi_ddiv+0x344>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	4649      	mov	r1, r9
 8001d3c:	4319      	orrs	r1, r3
 8001d3e:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <__aeabi_ddiv+0x398>)
 8001d40:	4689      	mov	r9, r1
 8001d42:	469c      	mov	ip, r3
 8001d44:	2400      	movs	r4, #0
 8001d46:	2002      	movs	r0, #2
 8001d48:	44e3      	add	fp, ip
 8001d4a:	e69d      	b.n	8001a88 <__aeabi_ddiv+0x80>
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	464a      	mov	r2, r9
 8001d50:	431a      	orrs	r2, r3
 8001d52:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <__aeabi_ddiv+0x398>)
 8001d54:	4691      	mov	r9, r2
 8001d56:	469c      	mov	ip, r3
 8001d58:	4652      	mov	r2, sl
 8001d5a:	2003      	movs	r0, #3
 8001d5c:	44e3      	add	fp, ip
 8001d5e:	e693      	b.n	8001a88 <__aeabi_ddiv+0x80>
 8001d60:	230c      	movs	r3, #12
 8001d62:	4699      	mov	r9, r3
 8001d64:	3b09      	subs	r3, #9
 8001d66:	46a0      	mov	r8, r4
 8001d68:	4683      	mov	fp, r0
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	e671      	b.n	8001a52 <__aeabi_ddiv+0x4a>
 8001d6e:	2304      	movs	r3, #4
 8001d70:	4699      	mov	r9, r3
 8001d72:	2300      	movs	r3, #0
 8001d74:	469b      	mov	fp, r3
 8001d76:	3301      	adds	r3, #1
 8001d78:	2500      	movs	r5, #0
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	e669      	b.n	8001a52 <__aeabi_ddiv+0x4a>
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	000007ff 	.word	0x000007ff
 8001d84:	fffffc01 	.word	0xfffffc01
 8001d88:	0800f10c 	.word	0x0800f10c
 8001d8c:	000003ff 	.word	0x000003ff
 8001d90:	feffffff 	.word	0xfeffffff
 8001d94:	000007fe 	.word	0x000007fe
 8001d98:	000003f3 	.word	0x000003f3
 8001d9c:	fffffc0d 	.word	0xfffffc0d
 8001da0:	fffff801 	.word	0xfffff801
 8001da4:	4649      	mov	r1, r9
 8001da6:	2301      	movs	r3, #1
 8001da8:	4319      	orrs	r1, r3
 8001daa:	4689      	mov	r9, r1
 8001dac:	2400      	movs	r4, #0
 8001dae:	2001      	movs	r0, #1
 8001db0:	e66a      	b.n	8001a88 <__aeabi_ddiv+0x80>
 8001db2:	2300      	movs	r3, #0
 8001db4:	2480      	movs	r4, #128	; 0x80
 8001db6:	469a      	mov	sl, r3
 8001db8:	2500      	movs	r5, #0
 8001dba:	4b8a      	ldr	r3, [pc, #552]	; (8001fe4 <__aeabi_ddiv+0x5dc>)
 8001dbc:	0324      	lsls	r4, r4, #12
 8001dbe:	e67a      	b.n	8001ab6 <__aeabi_ddiv+0xae>
 8001dc0:	2501      	movs	r5, #1
 8001dc2:	426d      	negs	r5, r5
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	1a9b      	subs	r3, r3, r2
 8001dc8:	2b38      	cmp	r3, #56	; 0x38
 8001dca:	dd00      	ble.n	8001dce <__aeabi_ddiv+0x3c6>
 8001dcc:	e670      	b.n	8001ab0 <__aeabi_ddiv+0xa8>
 8001dce:	2b1f      	cmp	r3, #31
 8001dd0:	dc00      	bgt.n	8001dd4 <__aeabi_ddiv+0x3cc>
 8001dd2:	e0bf      	b.n	8001f54 <__aeabi_ddiv+0x54c>
 8001dd4:	211f      	movs	r1, #31
 8001dd6:	4249      	negs	r1, r1
 8001dd8:	1a8a      	subs	r2, r1, r2
 8001dda:	4641      	mov	r1, r8
 8001ddc:	40d1      	lsrs	r1, r2
 8001dde:	000a      	movs	r2, r1
 8001de0:	2b20      	cmp	r3, #32
 8001de2:	d004      	beq.n	8001dee <__aeabi_ddiv+0x3e6>
 8001de4:	4641      	mov	r1, r8
 8001de6:	4b80      	ldr	r3, [pc, #512]	; (8001fe8 <__aeabi_ddiv+0x5e0>)
 8001de8:	445b      	add	r3, fp
 8001dea:	4099      	lsls	r1, r3
 8001dec:	430d      	orrs	r5, r1
 8001dee:	1e6b      	subs	r3, r5, #1
 8001df0:	419d      	sbcs	r5, r3
 8001df2:	2307      	movs	r3, #7
 8001df4:	432a      	orrs	r2, r5
 8001df6:	001d      	movs	r5, r3
 8001df8:	2400      	movs	r4, #0
 8001dfa:	4015      	ands	r5, r2
 8001dfc:	4213      	tst	r3, r2
 8001dfe:	d100      	bne.n	8001e02 <__aeabi_ddiv+0x3fa>
 8001e00:	e0d4      	b.n	8001fac <__aeabi_ddiv+0x5a4>
 8001e02:	210f      	movs	r1, #15
 8001e04:	2300      	movs	r3, #0
 8001e06:	4011      	ands	r1, r2
 8001e08:	2904      	cmp	r1, #4
 8001e0a:	d100      	bne.n	8001e0e <__aeabi_ddiv+0x406>
 8001e0c:	e0cb      	b.n	8001fa6 <__aeabi_ddiv+0x59e>
 8001e0e:	1d11      	adds	r1, r2, #4
 8001e10:	4291      	cmp	r1, r2
 8001e12:	4192      	sbcs	r2, r2
 8001e14:	4252      	negs	r2, r2
 8001e16:	189b      	adds	r3, r3, r2
 8001e18:	000a      	movs	r2, r1
 8001e1a:	0219      	lsls	r1, r3, #8
 8001e1c:	d400      	bmi.n	8001e20 <__aeabi_ddiv+0x418>
 8001e1e:	e0c2      	b.n	8001fa6 <__aeabi_ddiv+0x59e>
 8001e20:	2301      	movs	r3, #1
 8001e22:	2400      	movs	r4, #0
 8001e24:	2500      	movs	r5, #0
 8001e26:	e646      	b.n	8001ab6 <__aeabi_ddiv+0xae>
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	4641      	mov	r1, r8
 8001e2c:	031b      	lsls	r3, r3, #12
 8001e2e:	4219      	tst	r1, r3
 8001e30:	d008      	beq.n	8001e44 <__aeabi_ddiv+0x43c>
 8001e32:	421c      	tst	r4, r3
 8001e34:	d106      	bne.n	8001e44 <__aeabi_ddiv+0x43c>
 8001e36:	431c      	orrs	r4, r3
 8001e38:	0324      	lsls	r4, r4, #12
 8001e3a:	46ba      	mov	sl, r7
 8001e3c:	0015      	movs	r5, r2
 8001e3e:	4b69      	ldr	r3, [pc, #420]	; (8001fe4 <__aeabi_ddiv+0x5dc>)
 8001e40:	0b24      	lsrs	r4, r4, #12
 8001e42:	e638      	b.n	8001ab6 <__aeabi_ddiv+0xae>
 8001e44:	2480      	movs	r4, #128	; 0x80
 8001e46:	4643      	mov	r3, r8
 8001e48:	0324      	lsls	r4, r4, #12
 8001e4a:	431c      	orrs	r4, r3
 8001e4c:	0324      	lsls	r4, r4, #12
 8001e4e:	46b2      	mov	sl, r6
 8001e50:	4b64      	ldr	r3, [pc, #400]	; (8001fe4 <__aeabi_ddiv+0x5dc>)
 8001e52:	0b24      	lsrs	r4, r4, #12
 8001e54:	e62f      	b.n	8001ab6 <__aeabi_ddiv+0xae>
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d100      	bne.n	8001e5c <__aeabi_ddiv+0x454>
 8001e5a:	e703      	b.n	8001c64 <__aeabi_ddiv+0x25c>
 8001e5c:	19a6      	adds	r6, r4, r6
 8001e5e:	1e68      	subs	r0, r5, #1
 8001e60:	42a6      	cmp	r6, r4
 8001e62:	d200      	bcs.n	8001e66 <__aeabi_ddiv+0x45e>
 8001e64:	e08d      	b.n	8001f82 <__aeabi_ddiv+0x57a>
 8001e66:	428e      	cmp	r6, r1
 8001e68:	d200      	bcs.n	8001e6c <__aeabi_ddiv+0x464>
 8001e6a:	e0a3      	b.n	8001fb4 <__aeabi_ddiv+0x5ac>
 8001e6c:	d100      	bne.n	8001e70 <__aeabi_ddiv+0x468>
 8001e6e:	e0b3      	b.n	8001fd8 <__aeabi_ddiv+0x5d0>
 8001e70:	0005      	movs	r5, r0
 8001e72:	e6f5      	b.n	8001c60 <__aeabi_ddiv+0x258>
 8001e74:	42aa      	cmp	r2, r5
 8001e76:	d900      	bls.n	8001e7a <__aeabi_ddiv+0x472>
 8001e78:	e639      	b.n	8001aee <__aeabi_ddiv+0xe6>
 8001e7a:	4643      	mov	r3, r8
 8001e7c:	07de      	lsls	r6, r3, #31
 8001e7e:	0858      	lsrs	r0, r3, #1
 8001e80:	086b      	lsrs	r3, r5, #1
 8001e82:	431e      	orrs	r6, r3
 8001e84:	07ed      	lsls	r5, r5, #31
 8001e86:	e639      	b.n	8001afc <__aeabi_ddiv+0xf4>
 8001e88:	4648      	mov	r0, r9
 8001e8a:	f001 f937 	bl	80030fc <__clzsi2>
 8001e8e:	0001      	movs	r1, r0
 8001e90:	0002      	movs	r2, r0
 8001e92:	3115      	adds	r1, #21
 8001e94:	3220      	adds	r2, #32
 8001e96:	291c      	cmp	r1, #28
 8001e98:	dc00      	bgt.n	8001e9c <__aeabi_ddiv+0x494>
 8001e9a:	e72c      	b.n	8001cf6 <__aeabi_ddiv+0x2ee>
 8001e9c:	464b      	mov	r3, r9
 8001e9e:	3808      	subs	r0, #8
 8001ea0:	4083      	lsls	r3, r0
 8001ea2:	2500      	movs	r5, #0
 8001ea4:	4698      	mov	r8, r3
 8001ea6:	e732      	b.n	8001d0e <__aeabi_ddiv+0x306>
 8001ea8:	f001 f928 	bl	80030fc <__clzsi2>
 8001eac:	0003      	movs	r3, r0
 8001eae:	001a      	movs	r2, r3
 8001eb0:	3215      	adds	r2, #21
 8001eb2:	3020      	adds	r0, #32
 8001eb4:	2a1c      	cmp	r2, #28
 8001eb6:	dc00      	bgt.n	8001eba <__aeabi_ddiv+0x4b2>
 8001eb8:	e700      	b.n	8001cbc <__aeabi_ddiv+0x2b4>
 8001eba:	4654      	mov	r4, sl
 8001ebc:	3b08      	subs	r3, #8
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	409c      	lsls	r4, r3
 8001ec2:	e705      	b.n	8001cd0 <__aeabi_ddiv+0x2c8>
 8001ec4:	1936      	adds	r6, r6, r4
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	42b4      	cmp	r4, r6
 8001eca:	d900      	bls.n	8001ece <__aeabi_ddiv+0x4c6>
 8001ecc:	e6a6      	b.n	8001c1c <__aeabi_ddiv+0x214>
 8001ece:	42b2      	cmp	r2, r6
 8001ed0:	d800      	bhi.n	8001ed4 <__aeabi_ddiv+0x4cc>
 8001ed2:	e6a3      	b.n	8001c1c <__aeabi_ddiv+0x214>
 8001ed4:	1e83      	subs	r3, r0, #2
 8001ed6:	1936      	adds	r6, r6, r4
 8001ed8:	e6a0      	b.n	8001c1c <__aeabi_ddiv+0x214>
 8001eda:	1909      	adds	r1, r1, r4
 8001edc:	3d01      	subs	r5, #1
 8001ede:	428c      	cmp	r4, r1
 8001ee0:	d900      	bls.n	8001ee4 <__aeabi_ddiv+0x4dc>
 8001ee2:	e68d      	b.n	8001c00 <__aeabi_ddiv+0x1f8>
 8001ee4:	428a      	cmp	r2, r1
 8001ee6:	d800      	bhi.n	8001eea <__aeabi_ddiv+0x4e2>
 8001ee8:	e68a      	b.n	8001c00 <__aeabi_ddiv+0x1f8>
 8001eea:	1e85      	subs	r5, r0, #2
 8001eec:	1909      	adds	r1, r1, r4
 8001eee:	e687      	b.n	8001c00 <__aeabi_ddiv+0x1f8>
 8001ef0:	230f      	movs	r3, #15
 8001ef2:	402b      	ands	r3, r5
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d100      	bne.n	8001efa <__aeabi_ddiv+0x4f2>
 8001ef8:	e6bc      	b.n	8001c74 <__aeabi_ddiv+0x26c>
 8001efa:	2305      	movs	r3, #5
 8001efc:	425b      	negs	r3, r3
 8001efe:	42ab      	cmp	r3, r5
 8001f00:	419b      	sbcs	r3, r3
 8001f02:	3504      	adds	r5, #4
 8001f04:	425b      	negs	r3, r3
 8001f06:	08ed      	lsrs	r5, r5, #3
 8001f08:	4498      	add	r8, r3
 8001f0a:	e6b4      	b.n	8001c76 <__aeabi_ddiv+0x26e>
 8001f0c:	42af      	cmp	r7, r5
 8001f0e:	d900      	bls.n	8001f12 <__aeabi_ddiv+0x50a>
 8001f10:	e660      	b.n	8001bd4 <__aeabi_ddiv+0x1cc>
 8001f12:	4282      	cmp	r2, r0
 8001f14:	d804      	bhi.n	8001f20 <__aeabi_ddiv+0x518>
 8001f16:	d000      	beq.n	8001f1a <__aeabi_ddiv+0x512>
 8001f18:	e65c      	b.n	8001bd4 <__aeabi_ddiv+0x1cc>
 8001f1a:	42ae      	cmp	r6, r5
 8001f1c:	d800      	bhi.n	8001f20 <__aeabi_ddiv+0x518>
 8001f1e:	e659      	b.n	8001bd4 <__aeabi_ddiv+0x1cc>
 8001f20:	2302      	movs	r3, #2
 8001f22:	425b      	negs	r3, r3
 8001f24:	469c      	mov	ip, r3
 8001f26:	9b00      	ldr	r3, [sp, #0]
 8001f28:	44e0      	add	r8, ip
 8001f2a:	469c      	mov	ip, r3
 8001f2c:	4465      	add	r5, ip
 8001f2e:	429d      	cmp	r5, r3
 8001f30:	419b      	sbcs	r3, r3
 8001f32:	425b      	negs	r3, r3
 8001f34:	191b      	adds	r3, r3, r4
 8001f36:	18c0      	adds	r0, r0, r3
 8001f38:	e64d      	b.n	8001bd6 <__aeabi_ddiv+0x1ce>
 8001f3a:	428a      	cmp	r2, r1
 8001f3c:	d800      	bhi.n	8001f40 <__aeabi_ddiv+0x538>
 8001f3e:	e60e      	b.n	8001b5e <__aeabi_ddiv+0x156>
 8001f40:	1e83      	subs	r3, r0, #2
 8001f42:	1909      	adds	r1, r1, r4
 8001f44:	e60b      	b.n	8001b5e <__aeabi_ddiv+0x156>
 8001f46:	428a      	cmp	r2, r1
 8001f48:	d800      	bhi.n	8001f4c <__aeabi_ddiv+0x544>
 8001f4a:	e5f4      	b.n	8001b36 <__aeabi_ddiv+0x12e>
 8001f4c:	1e83      	subs	r3, r0, #2
 8001f4e:	4698      	mov	r8, r3
 8001f50:	1909      	adds	r1, r1, r4
 8001f52:	e5f0      	b.n	8001b36 <__aeabi_ddiv+0x12e>
 8001f54:	4925      	ldr	r1, [pc, #148]	; (8001fec <__aeabi_ddiv+0x5e4>)
 8001f56:	0028      	movs	r0, r5
 8001f58:	4459      	add	r1, fp
 8001f5a:	408d      	lsls	r5, r1
 8001f5c:	4642      	mov	r2, r8
 8001f5e:	408a      	lsls	r2, r1
 8001f60:	1e69      	subs	r1, r5, #1
 8001f62:	418d      	sbcs	r5, r1
 8001f64:	4641      	mov	r1, r8
 8001f66:	40d8      	lsrs	r0, r3
 8001f68:	40d9      	lsrs	r1, r3
 8001f6a:	4302      	orrs	r2, r0
 8001f6c:	432a      	orrs	r2, r5
 8001f6e:	000b      	movs	r3, r1
 8001f70:	0751      	lsls	r1, r2, #29
 8001f72:	d100      	bne.n	8001f76 <__aeabi_ddiv+0x56e>
 8001f74:	e751      	b.n	8001e1a <__aeabi_ddiv+0x412>
 8001f76:	210f      	movs	r1, #15
 8001f78:	4011      	ands	r1, r2
 8001f7a:	2904      	cmp	r1, #4
 8001f7c:	d000      	beq.n	8001f80 <__aeabi_ddiv+0x578>
 8001f7e:	e746      	b.n	8001e0e <__aeabi_ddiv+0x406>
 8001f80:	e74b      	b.n	8001e1a <__aeabi_ddiv+0x412>
 8001f82:	0005      	movs	r5, r0
 8001f84:	428e      	cmp	r6, r1
 8001f86:	d000      	beq.n	8001f8a <__aeabi_ddiv+0x582>
 8001f88:	e66a      	b.n	8001c60 <__aeabi_ddiv+0x258>
 8001f8a:	9a00      	ldr	r2, [sp, #0]
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d000      	beq.n	8001f92 <__aeabi_ddiv+0x58a>
 8001f90:	e666      	b.n	8001c60 <__aeabi_ddiv+0x258>
 8001f92:	e667      	b.n	8001c64 <__aeabi_ddiv+0x25c>
 8001f94:	4a16      	ldr	r2, [pc, #88]	; (8001ff0 <__aeabi_ddiv+0x5e8>)
 8001f96:	445a      	add	r2, fp
 8001f98:	2a00      	cmp	r2, #0
 8001f9a:	dc00      	bgt.n	8001f9e <__aeabi_ddiv+0x596>
 8001f9c:	e710      	b.n	8001dc0 <__aeabi_ddiv+0x3b8>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	2500      	movs	r5, #0
 8001fa2:	4498      	add	r8, r3
 8001fa4:	e667      	b.n	8001c76 <__aeabi_ddiv+0x26e>
 8001fa6:	075d      	lsls	r5, r3, #29
 8001fa8:	025b      	lsls	r3, r3, #9
 8001faa:	0b1c      	lsrs	r4, r3, #12
 8001fac:	08d2      	lsrs	r2, r2, #3
 8001fae:	2300      	movs	r3, #0
 8001fb0:	4315      	orrs	r5, r2
 8001fb2:	e580      	b.n	8001ab6 <__aeabi_ddiv+0xae>
 8001fb4:	9800      	ldr	r0, [sp, #0]
 8001fb6:	3d02      	subs	r5, #2
 8001fb8:	0042      	lsls	r2, r0, #1
 8001fba:	4282      	cmp	r2, r0
 8001fbc:	41bf      	sbcs	r7, r7
 8001fbe:	427f      	negs	r7, r7
 8001fc0:	193c      	adds	r4, r7, r4
 8001fc2:	1936      	adds	r6, r6, r4
 8001fc4:	9200      	str	r2, [sp, #0]
 8001fc6:	e7dd      	b.n	8001f84 <__aeabi_ddiv+0x57c>
 8001fc8:	2480      	movs	r4, #128	; 0x80
 8001fca:	4643      	mov	r3, r8
 8001fcc:	0324      	lsls	r4, r4, #12
 8001fce:	431c      	orrs	r4, r3
 8001fd0:	0324      	lsls	r4, r4, #12
 8001fd2:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <__aeabi_ddiv+0x5dc>)
 8001fd4:	0b24      	lsrs	r4, r4, #12
 8001fd6:	e56e      	b.n	8001ab6 <__aeabi_ddiv+0xae>
 8001fd8:	9a00      	ldr	r2, [sp, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d3ea      	bcc.n	8001fb4 <__aeabi_ddiv+0x5ac>
 8001fde:	0005      	movs	r5, r0
 8001fe0:	e7d3      	b.n	8001f8a <__aeabi_ddiv+0x582>
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	000007ff 	.word	0x000007ff
 8001fe8:	0000043e 	.word	0x0000043e
 8001fec:	0000041e 	.word	0x0000041e
 8001ff0:	000003ff 	.word	0x000003ff

08001ff4 <__eqdf2>:
 8001ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ff6:	464e      	mov	r6, r9
 8001ff8:	4645      	mov	r5, r8
 8001ffa:	46de      	mov	lr, fp
 8001ffc:	4657      	mov	r7, sl
 8001ffe:	4690      	mov	r8, r2
 8002000:	b5e0      	push	{r5, r6, r7, lr}
 8002002:	0017      	movs	r7, r2
 8002004:	031a      	lsls	r2, r3, #12
 8002006:	0b12      	lsrs	r2, r2, #12
 8002008:	0005      	movs	r5, r0
 800200a:	4684      	mov	ip, r0
 800200c:	4819      	ldr	r0, [pc, #100]	; (8002074 <__eqdf2+0x80>)
 800200e:	030e      	lsls	r6, r1, #12
 8002010:	004c      	lsls	r4, r1, #1
 8002012:	4691      	mov	r9, r2
 8002014:	005a      	lsls	r2, r3, #1
 8002016:	0fdb      	lsrs	r3, r3, #31
 8002018:	469b      	mov	fp, r3
 800201a:	0b36      	lsrs	r6, r6, #12
 800201c:	0d64      	lsrs	r4, r4, #21
 800201e:	0fc9      	lsrs	r1, r1, #31
 8002020:	0d52      	lsrs	r2, r2, #21
 8002022:	4284      	cmp	r4, r0
 8002024:	d019      	beq.n	800205a <__eqdf2+0x66>
 8002026:	4282      	cmp	r2, r0
 8002028:	d010      	beq.n	800204c <__eqdf2+0x58>
 800202a:	2001      	movs	r0, #1
 800202c:	4294      	cmp	r4, r2
 800202e:	d10e      	bne.n	800204e <__eqdf2+0x5a>
 8002030:	454e      	cmp	r6, r9
 8002032:	d10c      	bne.n	800204e <__eqdf2+0x5a>
 8002034:	2001      	movs	r0, #1
 8002036:	45c4      	cmp	ip, r8
 8002038:	d109      	bne.n	800204e <__eqdf2+0x5a>
 800203a:	4559      	cmp	r1, fp
 800203c:	d017      	beq.n	800206e <__eqdf2+0x7a>
 800203e:	2c00      	cmp	r4, #0
 8002040:	d105      	bne.n	800204e <__eqdf2+0x5a>
 8002042:	0030      	movs	r0, r6
 8002044:	4328      	orrs	r0, r5
 8002046:	1e43      	subs	r3, r0, #1
 8002048:	4198      	sbcs	r0, r3
 800204a:	e000      	b.n	800204e <__eqdf2+0x5a>
 800204c:	2001      	movs	r0, #1
 800204e:	bcf0      	pop	{r4, r5, r6, r7}
 8002050:	46bb      	mov	fp, r7
 8002052:	46b2      	mov	sl, r6
 8002054:	46a9      	mov	r9, r5
 8002056:	46a0      	mov	r8, r4
 8002058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800205a:	0033      	movs	r3, r6
 800205c:	2001      	movs	r0, #1
 800205e:	432b      	orrs	r3, r5
 8002060:	d1f5      	bne.n	800204e <__eqdf2+0x5a>
 8002062:	42a2      	cmp	r2, r4
 8002064:	d1f3      	bne.n	800204e <__eqdf2+0x5a>
 8002066:	464b      	mov	r3, r9
 8002068:	433b      	orrs	r3, r7
 800206a:	d1f0      	bne.n	800204e <__eqdf2+0x5a>
 800206c:	e7e2      	b.n	8002034 <__eqdf2+0x40>
 800206e:	2000      	movs	r0, #0
 8002070:	e7ed      	b.n	800204e <__eqdf2+0x5a>
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	000007ff 	.word	0x000007ff

08002078 <__gedf2>:
 8002078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800207a:	4647      	mov	r7, r8
 800207c:	46ce      	mov	lr, r9
 800207e:	0004      	movs	r4, r0
 8002080:	0018      	movs	r0, r3
 8002082:	0016      	movs	r6, r2
 8002084:	031b      	lsls	r3, r3, #12
 8002086:	0b1b      	lsrs	r3, r3, #12
 8002088:	4d2d      	ldr	r5, [pc, #180]	; (8002140 <__gedf2+0xc8>)
 800208a:	004a      	lsls	r2, r1, #1
 800208c:	4699      	mov	r9, r3
 800208e:	b580      	push	{r7, lr}
 8002090:	0043      	lsls	r3, r0, #1
 8002092:	030f      	lsls	r7, r1, #12
 8002094:	46a4      	mov	ip, r4
 8002096:	46b0      	mov	r8, r6
 8002098:	0b3f      	lsrs	r7, r7, #12
 800209a:	0d52      	lsrs	r2, r2, #21
 800209c:	0fc9      	lsrs	r1, r1, #31
 800209e:	0d5b      	lsrs	r3, r3, #21
 80020a0:	0fc0      	lsrs	r0, r0, #31
 80020a2:	42aa      	cmp	r2, r5
 80020a4:	d021      	beq.n	80020ea <__gedf2+0x72>
 80020a6:	42ab      	cmp	r3, r5
 80020a8:	d013      	beq.n	80020d2 <__gedf2+0x5a>
 80020aa:	2a00      	cmp	r2, #0
 80020ac:	d122      	bne.n	80020f4 <__gedf2+0x7c>
 80020ae:	433c      	orrs	r4, r7
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d102      	bne.n	80020ba <__gedf2+0x42>
 80020b4:	464d      	mov	r5, r9
 80020b6:	432e      	orrs	r6, r5
 80020b8:	d022      	beq.n	8002100 <__gedf2+0x88>
 80020ba:	2c00      	cmp	r4, #0
 80020bc:	d010      	beq.n	80020e0 <__gedf2+0x68>
 80020be:	4281      	cmp	r1, r0
 80020c0:	d022      	beq.n	8002108 <__gedf2+0x90>
 80020c2:	2002      	movs	r0, #2
 80020c4:	3901      	subs	r1, #1
 80020c6:	4008      	ands	r0, r1
 80020c8:	3801      	subs	r0, #1
 80020ca:	bcc0      	pop	{r6, r7}
 80020cc:	46b9      	mov	r9, r7
 80020ce:	46b0      	mov	r8, r6
 80020d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020d2:	464d      	mov	r5, r9
 80020d4:	432e      	orrs	r6, r5
 80020d6:	d129      	bne.n	800212c <__gedf2+0xb4>
 80020d8:	2a00      	cmp	r2, #0
 80020da:	d1f0      	bne.n	80020be <__gedf2+0x46>
 80020dc:	433c      	orrs	r4, r7
 80020de:	d1ee      	bne.n	80020be <__gedf2+0x46>
 80020e0:	2800      	cmp	r0, #0
 80020e2:	d1f2      	bne.n	80020ca <__gedf2+0x52>
 80020e4:	2001      	movs	r0, #1
 80020e6:	4240      	negs	r0, r0
 80020e8:	e7ef      	b.n	80020ca <__gedf2+0x52>
 80020ea:	003d      	movs	r5, r7
 80020ec:	4325      	orrs	r5, r4
 80020ee:	d11d      	bne.n	800212c <__gedf2+0xb4>
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d0ee      	beq.n	80020d2 <__gedf2+0x5a>
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1e2      	bne.n	80020be <__gedf2+0x46>
 80020f8:	464c      	mov	r4, r9
 80020fa:	4326      	orrs	r6, r4
 80020fc:	d1df      	bne.n	80020be <__gedf2+0x46>
 80020fe:	e7e0      	b.n	80020c2 <__gedf2+0x4a>
 8002100:	2000      	movs	r0, #0
 8002102:	2c00      	cmp	r4, #0
 8002104:	d0e1      	beq.n	80020ca <__gedf2+0x52>
 8002106:	e7dc      	b.n	80020c2 <__gedf2+0x4a>
 8002108:	429a      	cmp	r2, r3
 800210a:	dc0a      	bgt.n	8002122 <__gedf2+0xaa>
 800210c:	dbe8      	blt.n	80020e0 <__gedf2+0x68>
 800210e:	454f      	cmp	r7, r9
 8002110:	d8d7      	bhi.n	80020c2 <__gedf2+0x4a>
 8002112:	d00e      	beq.n	8002132 <__gedf2+0xba>
 8002114:	2000      	movs	r0, #0
 8002116:	454f      	cmp	r7, r9
 8002118:	d2d7      	bcs.n	80020ca <__gedf2+0x52>
 800211a:	2900      	cmp	r1, #0
 800211c:	d0e2      	beq.n	80020e4 <__gedf2+0x6c>
 800211e:	0008      	movs	r0, r1
 8002120:	e7d3      	b.n	80020ca <__gedf2+0x52>
 8002122:	4243      	negs	r3, r0
 8002124:	4158      	adcs	r0, r3
 8002126:	0040      	lsls	r0, r0, #1
 8002128:	3801      	subs	r0, #1
 800212a:	e7ce      	b.n	80020ca <__gedf2+0x52>
 800212c:	2002      	movs	r0, #2
 800212e:	4240      	negs	r0, r0
 8002130:	e7cb      	b.n	80020ca <__gedf2+0x52>
 8002132:	45c4      	cmp	ip, r8
 8002134:	d8c5      	bhi.n	80020c2 <__gedf2+0x4a>
 8002136:	2000      	movs	r0, #0
 8002138:	45c4      	cmp	ip, r8
 800213a:	d2c6      	bcs.n	80020ca <__gedf2+0x52>
 800213c:	e7ed      	b.n	800211a <__gedf2+0xa2>
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	000007ff 	.word	0x000007ff

08002144 <__ledf2>:
 8002144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002146:	4647      	mov	r7, r8
 8002148:	46ce      	mov	lr, r9
 800214a:	0004      	movs	r4, r0
 800214c:	0018      	movs	r0, r3
 800214e:	0016      	movs	r6, r2
 8002150:	031b      	lsls	r3, r3, #12
 8002152:	0b1b      	lsrs	r3, r3, #12
 8002154:	4d2c      	ldr	r5, [pc, #176]	; (8002208 <__ledf2+0xc4>)
 8002156:	004a      	lsls	r2, r1, #1
 8002158:	4699      	mov	r9, r3
 800215a:	b580      	push	{r7, lr}
 800215c:	0043      	lsls	r3, r0, #1
 800215e:	030f      	lsls	r7, r1, #12
 8002160:	46a4      	mov	ip, r4
 8002162:	46b0      	mov	r8, r6
 8002164:	0b3f      	lsrs	r7, r7, #12
 8002166:	0d52      	lsrs	r2, r2, #21
 8002168:	0fc9      	lsrs	r1, r1, #31
 800216a:	0d5b      	lsrs	r3, r3, #21
 800216c:	0fc0      	lsrs	r0, r0, #31
 800216e:	42aa      	cmp	r2, r5
 8002170:	d00d      	beq.n	800218e <__ledf2+0x4a>
 8002172:	42ab      	cmp	r3, r5
 8002174:	d010      	beq.n	8002198 <__ledf2+0x54>
 8002176:	2a00      	cmp	r2, #0
 8002178:	d127      	bne.n	80021ca <__ledf2+0x86>
 800217a:	433c      	orrs	r4, r7
 800217c:	2b00      	cmp	r3, #0
 800217e:	d111      	bne.n	80021a4 <__ledf2+0x60>
 8002180:	464d      	mov	r5, r9
 8002182:	432e      	orrs	r6, r5
 8002184:	d10e      	bne.n	80021a4 <__ledf2+0x60>
 8002186:	2000      	movs	r0, #0
 8002188:	2c00      	cmp	r4, #0
 800218a:	d015      	beq.n	80021b8 <__ledf2+0x74>
 800218c:	e00e      	b.n	80021ac <__ledf2+0x68>
 800218e:	003d      	movs	r5, r7
 8002190:	4325      	orrs	r5, r4
 8002192:	d110      	bne.n	80021b6 <__ledf2+0x72>
 8002194:	4293      	cmp	r3, r2
 8002196:	d118      	bne.n	80021ca <__ledf2+0x86>
 8002198:	464d      	mov	r5, r9
 800219a:	432e      	orrs	r6, r5
 800219c:	d10b      	bne.n	80021b6 <__ledf2+0x72>
 800219e:	2a00      	cmp	r2, #0
 80021a0:	d102      	bne.n	80021a8 <__ledf2+0x64>
 80021a2:	433c      	orrs	r4, r7
 80021a4:	2c00      	cmp	r4, #0
 80021a6:	d00b      	beq.n	80021c0 <__ledf2+0x7c>
 80021a8:	4281      	cmp	r1, r0
 80021aa:	d014      	beq.n	80021d6 <__ledf2+0x92>
 80021ac:	2002      	movs	r0, #2
 80021ae:	3901      	subs	r1, #1
 80021b0:	4008      	ands	r0, r1
 80021b2:	3801      	subs	r0, #1
 80021b4:	e000      	b.n	80021b8 <__ledf2+0x74>
 80021b6:	2002      	movs	r0, #2
 80021b8:	bcc0      	pop	{r6, r7}
 80021ba:	46b9      	mov	r9, r7
 80021bc:	46b0      	mov	r8, r6
 80021be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021c0:	2800      	cmp	r0, #0
 80021c2:	d1f9      	bne.n	80021b8 <__ledf2+0x74>
 80021c4:	2001      	movs	r0, #1
 80021c6:	4240      	negs	r0, r0
 80021c8:	e7f6      	b.n	80021b8 <__ledf2+0x74>
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1ec      	bne.n	80021a8 <__ledf2+0x64>
 80021ce:	464c      	mov	r4, r9
 80021d0:	4326      	orrs	r6, r4
 80021d2:	d1e9      	bne.n	80021a8 <__ledf2+0x64>
 80021d4:	e7ea      	b.n	80021ac <__ledf2+0x68>
 80021d6:	429a      	cmp	r2, r3
 80021d8:	dd04      	ble.n	80021e4 <__ledf2+0xa0>
 80021da:	4243      	negs	r3, r0
 80021dc:	4158      	adcs	r0, r3
 80021de:	0040      	lsls	r0, r0, #1
 80021e0:	3801      	subs	r0, #1
 80021e2:	e7e9      	b.n	80021b8 <__ledf2+0x74>
 80021e4:	429a      	cmp	r2, r3
 80021e6:	dbeb      	blt.n	80021c0 <__ledf2+0x7c>
 80021e8:	454f      	cmp	r7, r9
 80021ea:	d8df      	bhi.n	80021ac <__ledf2+0x68>
 80021ec:	d006      	beq.n	80021fc <__ledf2+0xb8>
 80021ee:	2000      	movs	r0, #0
 80021f0:	454f      	cmp	r7, r9
 80021f2:	d2e1      	bcs.n	80021b8 <__ledf2+0x74>
 80021f4:	2900      	cmp	r1, #0
 80021f6:	d0e5      	beq.n	80021c4 <__ledf2+0x80>
 80021f8:	0008      	movs	r0, r1
 80021fa:	e7dd      	b.n	80021b8 <__ledf2+0x74>
 80021fc:	45c4      	cmp	ip, r8
 80021fe:	d8d5      	bhi.n	80021ac <__ledf2+0x68>
 8002200:	2000      	movs	r0, #0
 8002202:	45c4      	cmp	ip, r8
 8002204:	d2d8      	bcs.n	80021b8 <__ledf2+0x74>
 8002206:	e7f5      	b.n	80021f4 <__ledf2+0xb0>
 8002208:	000007ff 	.word	0x000007ff

0800220c <__aeabi_dmul>:
 800220c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220e:	4657      	mov	r7, sl
 8002210:	464e      	mov	r6, r9
 8002212:	4645      	mov	r5, r8
 8002214:	46de      	mov	lr, fp
 8002216:	b5e0      	push	{r5, r6, r7, lr}
 8002218:	4698      	mov	r8, r3
 800221a:	030c      	lsls	r4, r1, #12
 800221c:	004b      	lsls	r3, r1, #1
 800221e:	0006      	movs	r6, r0
 8002220:	4692      	mov	sl, r2
 8002222:	b087      	sub	sp, #28
 8002224:	0b24      	lsrs	r4, r4, #12
 8002226:	0d5b      	lsrs	r3, r3, #21
 8002228:	0fcf      	lsrs	r7, r1, #31
 800222a:	2b00      	cmp	r3, #0
 800222c:	d100      	bne.n	8002230 <__aeabi_dmul+0x24>
 800222e:	e15c      	b.n	80024ea <__aeabi_dmul+0x2de>
 8002230:	4ad9      	ldr	r2, [pc, #868]	; (8002598 <__aeabi_dmul+0x38c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d100      	bne.n	8002238 <__aeabi_dmul+0x2c>
 8002236:	e175      	b.n	8002524 <__aeabi_dmul+0x318>
 8002238:	0f42      	lsrs	r2, r0, #29
 800223a:	00e4      	lsls	r4, r4, #3
 800223c:	4314      	orrs	r4, r2
 800223e:	2280      	movs	r2, #128	; 0x80
 8002240:	0412      	lsls	r2, r2, #16
 8002242:	4314      	orrs	r4, r2
 8002244:	4ad5      	ldr	r2, [pc, #852]	; (800259c <__aeabi_dmul+0x390>)
 8002246:	00c5      	lsls	r5, r0, #3
 8002248:	4694      	mov	ip, r2
 800224a:	4463      	add	r3, ip
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	2300      	movs	r3, #0
 8002250:	4699      	mov	r9, r3
 8002252:	469b      	mov	fp, r3
 8002254:	4643      	mov	r3, r8
 8002256:	4642      	mov	r2, r8
 8002258:	031e      	lsls	r6, r3, #12
 800225a:	0fd2      	lsrs	r2, r2, #31
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4650      	mov	r0, sl
 8002260:	4690      	mov	r8, r2
 8002262:	0b36      	lsrs	r6, r6, #12
 8002264:	0d5b      	lsrs	r3, r3, #21
 8002266:	d100      	bne.n	800226a <__aeabi_dmul+0x5e>
 8002268:	e120      	b.n	80024ac <__aeabi_dmul+0x2a0>
 800226a:	4acb      	ldr	r2, [pc, #812]	; (8002598 <__aeabi_dmul+0x38c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d100      	bne.n	8002272 <__aeabi_dmul+0x66>
 8002270:	e162      	b.n	8002538 <__aeabi_dmul+0x32c>
 8002272:	49ca      	ldr	r1, [pc, #808]	; (800259c <__aeabi_dmul+0x390>)
 8002274:	0f42      	lsrs	r2, r0, #29
 8002276:	468c      	mov	ip, r1
 8002278:	9900      	ldr	r1, [sp, #0]
 800227a:	4463      	add	r3, ip
 800227c:	00f6      	lsls	r6, r6, #3
 800227e:	468c      	mov	ip, r1
 8002280:	4316      	orrs	r6, r2
 8002282:	2280      	movs	r2, #128	; 0x80
 8002284:	449c      	add	ip, r3
 8002286:	0412      	lsls	r2, r2, #16
 8002288:	4663      	mov	r3, ip
 800228a:	4316      	orrs	r6, r2
 800228c:	00c2      	lsls	r2, r0, #3
 800228e:	2000      	movs	r0, #0
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	9900      	ldr	r1, [sp, #0]
 8002294:	4643      	mov	r3, r8
 8002296:	3101      	adds	r1, #1
 8002298:	468c      	mov	ip, r1
 800229a:	4649      	mov	r1, r9
 800229c:	407b      	eors	r3, r7
 800229e:	9301      	str	r3, [sp, #4]
 80022a0:	290f      	cmp	r1, #15
 80022a2:	d826      	bhi.n	80022f2 <__aeabi_dmul+0xe6>
 80022a4:	4bbe      	ldr	r3, [pc, #760]	; (80025a0 <__aeabi_dmul+0x394>)
 80022a6:	0089      	lsls	r1, r1, #2
 80022a8:	5859      	ldr	r1, [r3, r1]
 80022aa:	468f      	mov	pc, r1
 80022ac:	4643      	mov	r3, r8
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	0034      	movs	r4, r6
 80022b2:	0015      	movs	r5, r2
 80022b4:	4683      	mov	fp, r0
 80022b6:	465b      	mov	r3, fp
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d016      	beq.n	80022ea <__aeabi_dmul+0xde>
 80022bc:	2b03      	cmp	r3, #3
 80022be:	d100      	bne.n	80022c2 <__aeabi_dmul+0xb6>
 80022c0:	e203      	b.n	80026ca <__aeabi_dmul+0x4be>
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d000      	beq.n	80022c8 <__aeabi_dmul+0xbc>
 80022c6:	e0cd      	b.n	8002464 <__aeabi_dmul+0x258>
 80022c8:	2200      	movs	r2, #0
 80022ca:	2400      	movs	r4, #0
 80022cc:	2500      	movs	r5, #0
 80022ce:	9b01      	ldr	r3, [sp, #4]
 80022d0:	0512      	lsls	r2, r2, #20
 80022d2:	4322      	orrs	r2, r4
 80022d4:	07db      	lsls	r3, r3, #31
 80022d6:	431a      	orrs	r2, r3
 80022d8:	0028      	movs	r0, r5
 80022da:	0011      	movs	r1, r2
 80022dc:	b007      	add	sp, #28
 80022de:	bcf0      	pop	{r4, r5, r6, r7}
 80022e0:	46bb      	mov	fp, r7
 80022e2:	46b2      	mov	sl, r6
 80022e4:	46a9      	mov	r9, r5
 80022e6:	46a0      	mov	r8, r4
 80022e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022ea:	2400      	movs	r4, #0
 80022ec:	2500      	movs	r5, #0
 80022ee:	4aaa      	ldr	r2, [pc, #680]	; (8002598 <__aeabi_dmul+0x38c>)
 80022f0:	e7ed      	b.n	80022ce <__aeabi_dmul+0xc2>
 80022f2:	0c28      	lsrs	r0, r5, #16
 80022f4:	042d      	lsls	r5, r5, #16
 80022f6:	0c2d      	lsrs	r5, r5, #16
 80022f8:	002b      	movs	r3, r5
 80022fa:	0c11      	lsrs	r1, r2, #16
 80022fc:	0412      	lsls	r2, r2, #16
 80022fe:	0c12      	lsrs	r2, r2, #16
 8002300:	4353      	muls	r3, r2
 8002302:	4698      	mov	r8, r3
 8002304:	0013      	movs	r3, r2
 8002306:	002f      	movs	r7, r5
 8002308:	4343      	muls	r3, r0
 800230a:	4699      	mov	r9, r3
 800230c:	434f      	muls	r7, r1
 800230e:	444f      	add	r7, r9
 8002310:	46bb      	mov	fp, r7
 8002312:	4647      	mov	r7, r8
 8002314:	000b      	movs	r3, r1
 8002316:	0c3f      	lsrs	r7, r7, #16
 8002318:	46ba      	mov	sl, r7
 800231a:	4343      	muls	r3, r0
 800231c:	44da      	add	sl, fp
 800231e:	9302      	str	r3, [sp, #8]
 8002320:	45d1      	cmp	r9, sl
 8002322:	d904      	bls.n	800232e <__aeabi_dmul+0x122>
 8002324:	2780      	movs	r7, #128	; 0x80
 8002326:	027f      	lsls	r7, r7, #9
 8002328:	46b9      	mov	r9, r7
 800232a:	444b      	add	r3, r9
 800232c:	9302      	str	r3, [sp, #8]
 800232e:	4653      	mov	r3, sl
 8002330:	0c1b      	lsrs	r3, r3, #16
 8002332:	469b      	mov	fp, r3
 8002334:	4653      	mov	r3, sl
 8002336:	041f      	lsls	r7, r3, #16
 8002338:	4643      	mov	r3, r8
 800233a:	041b      	lsls	r3, r3, #16
 800233c:	0c1b      	lsrs	r3, r3, #16
 800233e:	4698      	mov	r8, r3
 8002340:	003b      	movs	r3, r7
 8002342:	4443      	add	r3, r8
 8002344:	9304      	str	r3, [sp, #16]
 8002346:	0c33      	lsrs	r3, r6, #16
 8002348:	0436      	lsls	r6, r6, #16
 800234a:	0c36      	lsrs	r6, r6, #16
 800234c:	4698      	mov	r8, r3
 800234e:	0033      	movs	r3, r6
 8002350:	4343      	muls	r3, r0
 8002352:	4699      	mov	r9, r3
 8002354:	4643      	mov	r3, r8
 8002356:	4343      	muls	r3, r0
 8002358:	002f      	movs	r7, r5
 800235a:	469a      	mov	sl, r3
 800235c:	4643      	mov	r3, r8
 800235e:	4377      	muls	r7, r6
 8002360:	435d      	muls	r5, r3
 8002362:	0c38      	lsrs	r0, r7, #16
 8002364:	444d      	add	r5, r9
 8002366:	1945      	adds	r5, r0, r5
 8002368:	45a9      	cmp	r9, r5
 800236a:	d903      	bls.n	8002374 <__aeabi_dmul+0x168>
 800236c:	2380      	movs	r3, #128	; 0x80
 800236e:	025b      	lsls	r3, r3, #9
 8002370:	4699      	mov	r9, r3
 8002372:	44ca      	add	sl, r9
 8002374:	043f      	lsls	r7, r7, #16
 8002376:	0c28      	lsrs	r0, r5, #16
 8002378:	0c3f      	lsrs	r7, r7, #16
 800237a:	042d      	lsls	r5, r5, #16
 800237c:	19ed      	adds	r5, r5, r7
 800237e:	0c27      	lsrs	r7, r4, #16
 8002380:	0424      	lsls	r4, r4, #16
 8002382:	0c24      	lsrs	r4, r4, #16
 8002384:	0003      	movs	r3, r0
 8002386:	0020      	movs	r0, r4
 8002388:	4350      	muls	r0, r2
 800238a:	437a      	muls	r2, r7
 800238c:	4691      	mov	r9, r2
 800238e:	003a      	movs	r2, r7
 8002390:	4453      	add	r3, sl
 8002392:	9305      	str	r3, [sp, #20]
 8002394:	0c03      	lsrs	r3, r0, #16
 8002396:	469a      	mov	sl, r3
 8002398:	434a      	muls	r2, r1
 800239a:	4361      	muls	r1, r4
 800239c:	4449      	add	r1, r9
 800239e:	4451      	add	r1, sl
 80023a0:	44ab      	add	fp, r5
 80023a2:	4589      	cmp	r9, r1
 80023a4:	d903      	bls.n	80023ae <__aeabi_dmul+0x1a2>
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	025b      	lsls	r3, r3, #9
 80023aa:	4699      	mov	r9, r3
 80023ac:	444a      	add	r2, r9
 80023ae:	0400      	lsls	r0, r0, #16
 80023b0:	0c0b      	lsrs	r3, r1, #16
 80023b2:	0c00      	lsrs	r0, r0, #16
 80023b4:	0409      	lsls	r1, r1, #16
 80023b6:	1809      	adds	r1, r1, r0
 80023b8:	0020      	movs	r0, r4
 80023ba:	4699      	mov	r9, r3
 80023bc:	4643      	mov	r3, r8
 80023be:	4370      	muls	r0, r6
 80023c0:	435c      	muls	r4, r3
 80023c2:	437e      	muls	r6, r7
 80023c4:	435f      	muls	r7, r3
 80023c6:	0c03      	lsrs	r3, r0, #16
 80023c8:	4698      	mov	r8, r3
 80023ca:	19a4      	adds	r4, r4, r6
 80023cc:	4444      	add	r4, r8
 80023ce:	444a      	add	r2, r9
 80023d0:	9703      	str	r7, [sp, #12]
 80023d2:	42a6      	cmp	r6, r4
 80023d4:	d904      	bls.n	80023e0 <__aeabi_dmul+0x1d4>
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	025b      	lsls	r3, r3, #9
 80023da:	4698      	mov	r8, r3
 80023dc:	4447      	add	r7, r8
 80023de:	9703      	str	r7, [sp, #12]
 80023e0:	0423      	lsls	r3, r4, #16
 80023e2:	9e02      	ldr	r6, [sp, #8]
 80023e4:	469a      	mov	sl, r3
 80023e6:	9b05      	ldr	r3, [sp, #20]
 80023e8:	445e      	add	r6, fp
 80023ea:	4698      	mov	r8, r3
 80023ec:	42ae      	cmp	r6, r5
 80023ee:	41ad      	sbcs	r5, r5
 80023f0:	1876      	adds	r6, r6, r1
 80023f2:	428e      	cmp	r6, r1
 80023f4:	4189      	sbcs	r1, r1
 80023f6:	0400      	lsls	r0, r0, #16
 80023f8:	0c00      	lsrs	r0, r0, #16
 80023fa:	4450      	add	r0, sl
 80023fc:	4440      	add	r0, r8
 80023fe:	426d      	negs	r5, r5
 8002400:	1947      	adds	r7, r0, r5
 8002402:	46b8      	mov	r8, r7
 8002404:	4693      	mov	fp, r2
 8002406:	4249      	negs	r1, r1
 8002408:	4689      	mov	r9, r1
 800240a:	44c3      	add	fp, r8
 800240c:	44d9      	add	r9, fp
 800240e:	4298      	cmp	r0, r3
 8002410:	4180      	sbcs	r0, r0
 8002412:	45a8      	cmp	r8, r5
 8002414:	41ad      	sbcs	r5, r5
 8002416:	4593      	cmp	fp, r2
 8002418:	4192      	sbcs	r2, r2
 800241a:	4589      	cmp	r9, r1
 800241c:	4189      	sbcs	r1, r1
 800241e:	426d      	negs	r5, r5
 8002420:	4240      	negs	r0, r0
 8002422:	4328      	orrs	r0, r5
 8002424:	0c24      	lsrs	r4, r4, #16
 8002426:	4252      	negs	r2, r2
 8002428:	4249      	negs	r1, r1
 800242a:	430a      	orrs	r2, r1
 800242c:	9b03      	ldr	r3, [sp, #12]
 800242e:	1900      	adds	r0, r0, r4
 8002430:	1880      	adds	r0, r0, r2
 8002432:	18c7      	adds	r7, r0, r3
 8002434:	464b      	mov	r3, r9
 8002436:	0ddc      	lsrs	r4, r3, #23
 8002438:	9b04      	ldr	r3, [sp, #16]
 800243a:	0275      	lsls	r5, r6, #9
 800243c:	431d      	orrs	r5, r3
 800243e:	1e6a      	subs	r2, r5, #1
 8002440:	4195      	sbcs	r5, r2
 8002442:	464b      	mov	r3, r9
 8002444:	0df6      	lsrs	r6, r6, #23
 8002446:	027f      	lsls	r7, r7, #9
 8002448:	4335      	orrs	r5, r6
 800244a:	025a      	lsls	r2, r3, #9
 800244c:	433c      	orrs	r4, r7
 800244e:	4315      	orrs	r5, r2
 8002450:	01fb      	lsls	r3, r7, #7
 8002452:	d400      	bmi.n	8002456 <__aeabi_dmul+0x24a>
 8002454:	e11c      	b.n	8002690 <__aeabi_dmul+0x484>
 8002456:	2101      	movs	r1, #1
 8002458:	086a      	lsrs	r2, r5, #1
 800245a:	400d      	ands	r5, r1
 800245c:	4315      	orrs	r5, r2
 800245e:	07e2      	lsls	r2, r4, #31
 8002460:	4315      	orrs	r5, r2
 8002462:	0864      	lsrs	r4, r4, #1
 8002464:	494f      	ldr	r1, [pc, #316]	; (80025a4 <__aeabi_dmul+0x398>)
 8002466:	4461      	add	r1, ip
 8002468:	2900      	cmp	r1, #0
 800246a:	dc00      	bgt.n	800246e <__aeabi_dmul+0x262>
 800246c:	e0b0      	b.n	80025d0 <__aeabi_dmul+0x3c4>
 800246e:	076b      	lsls	r3, r5, #29
 8002470:	d009      	beq.n	8002486 <__aeabi_dmul+0x27a>
 8002472:	220f      	movs	r2, #15
 8002474:	402a      	ands	r2, r5
 8002476:	2a04      	cmp	r2, #4
 8002478:	d005      	beq.n	8002486 <__aeabi_dmul+0x27a>
 800247a:	1d2a      	adds	r2, r5, #4
 800247c:	42aa      	cmp	r2, r5
 800247e:	41ad      	sbcs	r5, r5
 8002480:	426d      	negs	r5, r5
 8002482:	1964      	adds	r4, r4, r5
 8002484:	0015      	movs	r5, r2
 8002486:	01e3      	lsls	r3, r4, #7
 8002488:	d504      	bpl.n	8002494 <__aeabi_dmul+0x288>
 800248a:	2180      	movs	r1, #128	; 0x80
 800248c:	4a46      	ldr	r2, [pc, #280]	; (80025a8 <__aeabi_dmul+0x39c>)
 800248e:	00c9      	lsls	r1, r1, #3
 8002490:	4014      	ands	r4, r2
 8002492:	4461      	add	r1, ip
 8002494:	4a45      	ldr	r2, [pc, #276]	; (80025ac <__aeabi_dmul+0x3a0>)
 8002496:	4291      	cmp	r1, r2
 8002498:	dd00      	ble.n	800249c <__aeabi_dmul+0x290>
 800249a:	e726      	b.n	80022ea <__aeabi_dmul+0xde>
 800249c:	0762      	lsls	r2, r4, #29
 800249e:	08ed      	lsrs	r5, r5, #3
 80024a0:	0264      	lsls	r4, r4, #9
 80024a2:	0549      	lsls	r1, r1, #21
 80024a4:	4315      	orrs	r5, r2
 80024a6:	0b24      	lsrs	r4, r4, #12
 80024a8:	0d4a      	lsrs	r2, r1, #21
 80024aa:	e710      	b.n	80022ce <__aeabi_dmul+0xc2>
 80024ac:	4652      	mov	r2, sl
 80024ae:	4332      	orrs	r2, r6
 80024b0:	d100      	bne.n	80024b4 <__aeabi_dmul+0x2a8>
 80024b2:	e07f      	b.n	80025b4 <__aeabi_dmul+0x3a8>
 80024b4:	2e00      	cmp	r6, #0
 80024b6:	d100      	bne.n	80024ba <__aeabi_dmul+0x2ae>
 80024b8:	e0dc      	b.n	8002674 <__aeabi_dmul+0x468>
 80024ba:	0030      	movs	r0, r6
 80024bc:	f000 fe1e 	bl	80030fc <__clzsi2>
 80024c0:	0002      	movs	r2, r0
 80024c2:	3a0b      	subs	r2, #11
 80024c4:	231d      	movs	r3, #29
 80024c6:	0001      	movs	r1, r0
 80024c8:	1a9b      	subs	r3, r3, r2
 80024ca:	4652      	mov	r2, sl
 80024cc:	3908      	subs	r1, #8
 80024ce:	40da      	lsrs	r2, r3
 80024d0:	408e      	lsls	r6, r1
 80024d2:	4316      	orrs	r6, r2
 80024d4:	4652      	mov	r2, sl
 80024d6:	408a      	lsls	r2, r1
 80024d8:	9b00      	ldr	r3, [sp, #0]
 80024da:	4935      	ldr	r1, [pc, #212]	; (80025b0 <__aeabi_dmul+0x3a4>)
 80024dc:	1a18      	subs	r0, r3, r0
 80024de:	0003      	movs	r3, r0
 80024e0:	468c      	mov	ip, r1
 80024e2:	4463      	add	r3, ip
 80024e4:	2000      	movs	r0, #0
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	e6d3      	b.n	8002292 <__aeabi_dmul+0x86>
 80024ea:	0025      	movs	r5, r4
 80024ec:	4305      	orrs	r5, r0
 80024ee:	d04a      	beq.n	8002586 <__aeabi_dmul+0x37a>
 80024f0:	2c00      	cmp	r4, #0
 80024f2:	d100      	bne.n	80024f6 <__aeabi_dmul+0x2ea>
 80024f4:	e0b0      	b.n	8002658 <__aeabi_dmul+0x44c>
 80024f6:	0020      	movs	r0, r4
 80024f8:	f000 fe00 	bl	80030fc <__clzsi2>
 80024fc:	0001      	movs	r1, r0
 80024fe:	0002      	movs	r2, r0
 8002500:	390b      	subs	r1, #11
 8002502:	231d      	movs	r3, #29
 8002504:	0010      	movs	r0, r2
 8002506:	1a5b      	subs	r3, r3, r1
 8002508:	0031      	movs	r1, r6
 800250a:	0035      	movs	r5, r6
 800250c:	3808      	subs	r0, #8
 800250e:	4084      	lsls	r4, r0
 8002510:	40d9      	lsrs	r1, r3
 8002512:	4085      	lsls	r5, r0
 8002514:	430c      	orrs	r4, r1
 8002516:	4826      	ldr	r0, [pc, #152]	; (80025b0 <__aeabi_dmul+0x3a4>)
 8002518:	1a83      	subs	r3, r0, r2
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	2300      	movs	r3, #0
 800251e:	4699      	mov	r9, r3
 8002520:	469b      	mov	fp, r3
 8002522:	e697      	b.n	8002254 <__aeabi_dmul+0x48>
 8002524:	0005      	movs	r5, r0
 8002526:	4325      	orrs	r5, r4
 8002528:	d126      	bne.n	8002578 <__aeabi_dmul+0x36c>
 800252a:	2208      	movs	r2, #8
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	2302      	movs	r3, #2
 8002530:	2400      	movs	r4, #0
 8002532:	4691      	mov	r9, r2
 8002534:	469b      	mov	fp, r3
 8002536:	e68d      	b.n	8002254 <__aeabi_dmul+0x48>
 8002538:	4652      	mov	r2, sl
 800253a:	9b00      	ldr	r3, [sp, #0]
 800253c:	4332      	orrs	r2, r6
 800253e:	d110      	bne.n	8002562 <__aeabi_dmul+0x356>
 8002540:	4915      	ldr	r1, [pc, #84]	; (8002598 <__aeabi_dmul+0x38c>)
 8002542:	2600      	movs	r6, #0
 8002544:	468c      	mov	ip, r1
 8002546:	4463      	add	r3, ip
 8002548:	4649      	mov	r1, r9
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	2302      	movs	r3, #2
 800254e:	4319      	orrs	r1, r3
 8002550:	4689      	mov	r9, r1
 8002552:	2002      	movs	r0, #2
 8002554:	e69d      	b.n	8002292 <__aeabi_dmul+0x86>
 8002556:	465b      	mov	r3, fp
 8002558:	9701      	str	r7, [sp, #4]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d000      	beq.n	8002560 <__aeabi_dmul+0x354>
 800255e:	e6ad      	b.n	80022bc <__aeabi_dmul+0xb0>
 8002560:	e6c3      	b.n	80022ea <__aeabi_dmul+0xde>
 8002562:	4a0d      	ldr	r2, [pc, #52]	; (8002598 <__aeabi_dmul+0x38c>)
 8002564:	2003      	movs	r0, #3
 8002566:	4694      	mov	ip, r2
 8002568:	4463      	add	r3, ip
 800256a:	464a      	mov	r2, r9
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	2303      	movs	r3, #3
 8002570:	431a      	orrs	r2, r3
 8002572:	4691      	mov	r9, r2
 8002574:	4652      	mov	r2, sl
 8002576:	e68c      	b.n	8002292 <__aeabi_dmul+0x86>
 8002578:	220c      	movs	r2, #12
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	2303      	movs	r3, #3
 800257e:	0005      	movs	r5, r0
 8002580:	4691      	mov	r9, r2
 8002582:	469b      	mov	fp, r3
 8002584:	e666      	b.n	8002254 <__aeabi_dmul+0x48>
 8002586:	2304      	movs	r3, #4
 8002588:	4699      	mov	r9, r3
 800258a:	2300      	movs	r3, #0
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	3301      	adds	r3, #1
 8002590:	2400      	movs	r4, #0
 8002592:	469b      	mov	fp, r3
 8002594:	e65e      	b.n	8002254 <__aeabi_dmul+0x48>
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	000007ff 	.word	0x000007ff
 800259c:	fffffc01 	.word	0xfffffc01
 80025a0:	0800f14c 	.word	0x0800f14c
 80025a4:	000003ff 	.word	0x000003ff
 80025a8:	feffffff 	.word	0xfeffffff
 80025ac:	000007fe 	.word	0x000007fe
 80025b0:	fffffc0d 	.word	0xfffffc0d
 80025b4:	4649      	mov	r1, r9
 80025b6:	2301      	movs	r3, #1
 80025b8:	4319      	orrs	r1, r3
 80025ba:	4689      	mov	r9, r1
 80025bc:	2600      	movs	r6, #0
 80025be:	2001      	movs	r0, #1
 80025c0:	e667      	b.n	8002292 <__aeabi_dmul+0x86>
 80025c2:	2300      	movs	r3, #0
 80025c4:	2480      	movs	r4, #128	; 0x80
 80025c6:	2500      	movs	r5, #0
 80025c8:	4a43      	ldr	r2, [pc, #268]	; (80026d8 <__aeabi_dmul+0x4cc>)
 80025ca:	9301      	str	r3, [sp, #4]
 80025cc:	0324      	lsls	r4, r4, #12
 80025ce:	e67e      	b.n	80022ce <__aeabi_dmul+0xc2>
 80025d0:	2001      	movs	r0, #1
 80025d2:	1a40      	subs	r0, r0, r1
 80025d4:	2838      	cmp	r0, #56	; 0x38
 80025d6:	dd00      	ble.n	80025da <__aeabi_dmul+0x3ce>
 80025d8:	e676      	b.n	80022c8 <__aeabi_dmul+0xbc>
 80025da:	281f      	cmp	r0, #31
 80025dc:	dd5b      	ble.n	8002696 <__aeabi_dmul+0x48a>
 80025de:	221f      	movs	r2, #31
 80025e0:	0023      	movs	r3, r4
 80025e2:	4252      	negs	r2, r2
 80025e4:	1a51      	subs	r1, r2, r1
 80025e6:	40cb      	lsrs	r3, r1
 80025e8:	0019      	movs	r1, r3
 80025ea:	2820      	cmp	r0, #32
 80025ec:	d003      	beq.n	80025f6 <__aeabi_dmul+0x3ea>
 80025ee:	4a3b      	ldr	r2, [pc, #236]	; (80026dc <__aeabi_dmul+0x4d0>)
 80025f0:	4462      	add	r2, ip
 80025f2:	4094      	lsls	r4, r2
 80025f4:	4325      	orrs	r5, r4
 80025f6:	1e6a      	subs	r2, r5, #1
 80025f8:	4195      	sbcs	r5, r2
 80025fa:	002a      	movs	r2, r5
 80025fc:	430a      	orrs	r2, r1
 80025fe:	2107      	movs	r1, #7
 8002600:	000d      	movs	r5, r1
 8002602:	2400      	movs	r4, #0
 8002604:	4015      	ands	r5, r2
 8002606:	4211      	tst	r1, r2
 8002608:	d05b      	beq.n	80026c2 <__aeabi_dmul+0x4b6>
 800260a:	210f      	movs	r1, #15
 800260c:	2400      	movs	r4, #0
 800260e:	4011      	ands	r1, r2
 8002610:	2904      	cmp	r1, #4
 8002612:	d053      	beq.n	80026bc <__aeabi_dmul+0x4b0>
 8002614:	1d11      	adds	r1, r2, #4
 8002616:	4291      	cmp	r1, r2
 8002618:	4192      	sbcs	r2, r2
 800261a:	4252      	negs	r2, r2
 800261c:	18a4      	adds	r4, r4, r2
 800261e:	000a      	movs	r2, r1
 8002620:	0223      	lsls	r3, r4, #8
 8002622:	d54b      	bpl.n	80026bc <__aeabi_dmul+0x4b0>
 8002624:	2201      	movs	r2, #1
 8002626:	2400      	movs	r4, #0
 8002628:	2500      	movs	r5, #0
 800262a:	e650      	b.n	80022ce <__aeabi_dmul+0xc2>
 800262c:	2380      	movs	r3, #128	; 0x80
 800262e:	031b      	lsls	r3, r3, #12
 8002630:	421c      	tst	r4, r3
 8002632:	d009      	beq.n	8002648 <__aeabi_dmul+0x43c>
 8002634:	421e      	tst	r6, r3
 8002636:	d107      	bne.n	8002648 <__aeabi_dmul+0x43c>
 8002638:	4333      	orrs	r3, r6
 800263a:	031c      	lsls	r4, r3, #12
 800263c:	4643      	mov	r3, r8
 800263e:	0015      	movs	r5, r2
 8002640:	0b24      	lsrs	r4, r4, #12
 8002642:	4a25      	ldr	r2, [pc, #148]	; (80026d8 <__aeabi_dmul+0x4cc>)
 8002644:	9301      	str	r3, [sp, #4]
 8002646:	e642      	b.n	80022ce <__aeabi_dmul+0xc2>
 8002648:	2280      	movs	r2, #128	; 0x80
 800264a:	0312      	lsls	r2, r2, #12
 800264c:	4314      	orrs	r4, r2
 800264e:	0324      	lsls	r4, r4, #12
 8002650:	4a21      	ldr	r2, [pc, #132]	; (80026d8 <__aeabi_dmul+0x4cc>)
 8002652:	0b24      	lsrs	r4, r4, #12
 8002654:	9701      	str	r7, [sp, #4]
 8002656:	e63a      	b.n	80022ce <__aeabi_dmul+0xc2>
 8002658:	f000 fd50 	bl	80030fc <__clzsi2>
 800265c:	0001      	movs	r1, r0
 800265e:	0002      	movs	r2, r0
 8002660:	3115      	adds	r1, #21
 8002662:	3220      	adds	r2, #32
 8002664:	291c      	cmp	r1, #28
 8002666:	dc00      	bgt.n	800266a <__aeabi_dmul+0x45e>
 8002668:	e74b      	b.n	8002502 <__aeabi_dmul+0x2f6>
 800266a:	0034      	movs	r4, r6
 800266c:	3808      	subs	r0, #8
 800266e:	2500      	movs	r5, #0
 8002670:	4084      	lsls	r4, r0
 8002672:	e750      	b.n	8002516 <__aeabi_dmul+0x30a>
 8002674:	f000 fd42 	bl	80030fc <__clzsi2>
 8002678:	0003      	movs	r3, r0
 800267a:	001a      	movs	r2, r3
 800267c:	3215      	adds	r2, #21
 800267e:	3020      	adds	r0, #32
 8002680:	2a1c      	cmp	r2, #28
 8002682:	dc00      	bgt.n	8002686 <__aeabi_dmul+0x47a>
 8002684:	e71e      	b.n	80024c4 <__aeabi_dmul+0x2b8>
 8002686:	4656      	mov	r6, sl
 8002688:	3b08      	subs	r3, #8
 800268a:	2200      	movs	r2, #0
 800268c:	409e      	lsls	r6, r3
 800268e:	e723      	b.n	80024d8 <__aeabi_dmul+0x2cc>
 8002690:	9b00      	ldr	r3, [sp, #0]
 8002692:	469c      	mov	ip, r3
 8002694:	e6e6      	b.n	8002464 <__aeabi_dmul+0x258>
 8002696:	4912      	ldr	r1, [pc, #72]	; (80026e0 <__aeabi_dmul+0x4d4>)
 8002698:	0022      	movs	r2, r4
 800269a:	4461      	add	r1, ip
 800269c:	002e      	movs	r6, r5
 800269e:	408d      	lsls	r5, r1
 80026a0:	408a      	lsls	r2, r1
 80026a2:	40c6      	lsrs	r6, r0
 80026a4:	1e69      	subs	r1, r5, #1
 80026a6:	418d      	sbcs	r5, r1
 80026a8:	4332      	orrs	r2, r6
 80026aa:	432a      	orrs	r2, r5
 80026ac:	40c4      	lsrs	r4, r0
 80026ae:	0753      	lsls	r3, r2, #29
 80026b0:	d0b6      	beq.n	8002620 <__aeabi_dmul+0x414>
 80026b2:	210f      	movs	r1, #15
 80026b4:	4011      	ands	r1, r2
 80026b6:	2904      	cmp	r1, #4
 80026b8:	d1ac      	bne.n	8002614 <__aeabi_dmul+0x408>
 80026ba:	e7b1      	b.n	8002620 <__aeabi_dmul+0x414>
 80026bc:	0765      	lsls	r5, r4, #29
 80026be:	0264      	lsls	r4, r4, #9
 80026c0:	0b24      	lsrs	r4, r4, #12
 80026c2:	08d2      	lsrs	r2, r2, #3
 80026c4:	4315      	orrs	r5, r2
 80026c6:	2200      	movs	r2, #0
 80026c8:	e601      	b.n	80022ce <__aeabi_dmul+0xc2>
 80026ca:	2280      	movs	r2, #128	; 0x80
 80026cc:	0312      	lsls	r2, r2, #12
 80026ce:	4314      	orrs	r4, r2
 80026d0:	0324      	lsls	r4, r4, #12
 80026d2:	4a01      	ldr	r2, [pc, #4]	; (80026d8 <__aeabi_dmul+0x4cc>)
 80026d4:	0b24      	lsrs	r4, r4, #12
 80026d6:	e5fa      	b.n	80022ce <__aeabi_dmul+0xc2>
 80026d8:	000007ff 	.word	0x000007ff
 80026dc:	0000043e 	.word	0x0000043e
 80026e0:	0000041e 	.word	0x0000041e

080026e4 <__aeabi_dsub>:
 80026e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026e6:	4657      	mov	r7, sl
 80026e8:	464e      	mov	r6, r9
 80026ea:	4645      	mov	r5, r8
 80026ec:	46de      	mov	lr, fp
 80026ee:	b5e0      	push	{r5, r6, r7, lr}
 80026f0:	001e      	movs	r6, r3
 80026f2:	0017      	movs	r7, r2
 80026f4:	004a      	lsls	r2, r1, #1
 80026f6:	030b      	lsls	r3, r1, #12
 80026f8:	0d52      	lsrs	r2, r2, #21
 80026fa:	0a5b      	lsrs	r3, r3, #9
 80026fc:	4690      	mov	r8, r2
 80026fe:	0f42      	lsrs	r2, r0, #29
 8002700:	431a      	orrs	r2, r3
 8002702:	0fcd      	lsrs	r5, r1, #31
 8002704:	4ccd      	ldr	r4, [pc, #820]	; (8002a3c <__aeabi_dsub+0x358>)
 8002706:	0331      	lsls	r1, r6, #12
 8002708:	00c3      	lsls	r3, r0, #3
 800270a:	4694      	mov	ip, r2
 800270c:	0070      	lsls	r0, r6, #1
 800270e:	0f7a      	lsrs	r2, r7, #29
 8002710:	0a49      	lsrs	r1, r1, #9
 8002712:	00ff      	lsls	r7, r7, #3
 8002714:	469a      	mov	sl, r3
 8002716:	46b9      	mov	r9, r7
 8002718:	0d40      	lsrs	r0, r0, #21
 800271a:	0ff6      	lsrs	r6, r6, #31
 800271c:	4311      	orrs	r1, r2
 800271e:	42a0      	cmp	r0, r4
 8002720:	d100      	bne.n	8002724 <__aeabi_dsub+0x40>
 8002722:	e0b1      	b.n	8002888 <__aeabi_dsub+0x1a4>
 8002724:	2201      	movs	r2, #1
 8002726:	4056      	eors	r6, r2
 8002728:	46b3      	mov	fp, r6
 800272a:	42b5      	cmp	r5, r6
 800272c:	d100      	bne.n	8002730 <__aeabi_dsub+0x4c>
 800272e:	e088      	b.n	8002842 <__aeabi_dsub+0x15e>
 8002730:	4642      	mov	r2, r8
 8002732:	1a12      	subs	r2, r2, r0
 8002734:	2a00      	cmp	r2, #0
 8002736:	dc00      	bgt.n	800273a <__aeabi_dsub+0x56>
 8002738:	e0ae      	b.n	8002898 <__aeabi_dsub+0x1b4>
 800273a:	2800      	cmp	r0, #0
 800273c:	d100      	bne.n	8002740 <__aeabi_dsub+0x5c>
 800273e:	e0c1      	b.n	80028c4 <__aeabi_dsub+0x1e0>
 8002740:	48be      	ldr	r0, [pc, #760]	; (8002a3c <__aeabi_dsub+0x358>)
 8002742:	4580      	cmp	r8, r0
 8002744:	d100      	bne.n	8002748 <__aeabi_dsub+0x64>
 8002746:	e151      	b.n	80029ec <__aeabi_dsub+0x308>
 8002748:	2080      	movs	r0, #128	; 0x80
 800274a:	0400      	lsls	r0, r0, #16
 800274c:	4301      	orrs	r1, r0
 800274e:	2a38      	cmp	r2, #56	; 0x38
 8002750:	dd00      	ble.n	8002754 <__aeabi_dsub+0x70>
 8002752:	e17b      	b.n	8002a4c <__aeabi_dsub+0x368>
 8002754:	2a1f      	cmp	r2, #31
 8002756:	dd00      	ble.n	800275a <__aeabi_dsub+0x76>
 8002758:	e1ee      	b.n	8002b38 <__aeabi_dsub+0x454>
 800275a:	2020      	movs	r0, #32
 800275c:	003e      	movs	r6, r7
 800275e:	1a80      	subs	r0, r0, r2
 8002760:	000c      	movs	r4, r1
 8002762:	40d6      	lsrs	r6, r2
 8002764:	40d1      	lsrs	r1, r2
 8002766:	4087      	lsls	r7, r0
 8002768:	4662      	mov	r2, ip
 800276a:	4084      	lsls	r4, r0
 800276c:	1a52      	subs	r2, r2, r1
 800276e:	1e78      	subs	r0, r7, #1
 8002770:	4187      	sbcs	r7, r0
 8002772:	4694      	mov	ip, r2
 8002774:	4334      	orrs	r4, r6
 8002776:	4327      	orrs	r7, r4
 8002778:	1bdc      	subs	r4, r3, r7
 800277a:	42a3      	cmp	r3, r4
 800277c:	419b      	sbcs	r3, r3
 800277e:	4662      	mov	r2, ip
 8002780:	425b      	negs	r3, r3
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	4699      	mov	r9, r3
 8002786:	464b      	mov	r3, r9
 8002788:	021b      	lsls	r3, r3, #8
 800278a:	d400      	bmi.n	800278e <__aeabi_dsub+0xaa>
 800278c:	e118      	b.n	80029c0 <__aeabi_dsub+0x2dc>
 800278e:	464b      	mov	r3, r9
 8002790:	0258      	lsls	r0, r3, #9
 8002792:	0a43      	lsrs	r3, r0, #9
 8002794:	4699      	mov	r9, r3
 8002796:	464b      	mov	r3, r9
 8002798:	2b00      	cmp	r3, #0
 800279a:	d100      	bne.n	800279e <__aeabi_dsub+0xba>
 800279c:	e137      	b.n	8002a0e <__aeabi_dsub+0x32a>
 800279e:	4648      	mov	r0, r9
 80027a0:	f000 fcac 	bl	80030fc <__clzsi2>
 80027a4:	0001      	movs	r1, r0
 80027a6:	3908      	subs	r1, #8
 80027a8:	2320      	movs	r3, #32
 80027aa:	0022      	movs	r2, r4
 80027ac:	4648      	mov	r0, r9
 80027ae:	1a5b      	subs	r3, r3, r1
 80027b0:	40da      	lsrs	r2, r3
 80027b2:	4088      	lsls	r0, r1
 80027b4:	408c      	lsls	r4, r1
 80027b6:	4643      	mov	r3, r8
 80027b8:	4310      	orrs	r0, r2
 80027ba:	4588      	cmp	r8, r1
 80027bc:	dd00      	ble.n	80027c0 <__aeabi_dsub+0xdc>
 80027be:	e136      	b.n	8002a2e <__aeabi_dsub+0x34a>
 80027c0:	1ac9      	subs	r1, r1, r3
 80027c2:	1c4b      	adds	r3, r1, #1
 80027c4:	2b1f      	cmp	r3, #31
 80027c6:	dd00      	ble.n	80027ca <__aeabi_dsub+0xe6>
 80027c8:	e0ea      	b.n	80029a0 <__aeabi_dsub+0x2bc>
 80027ca:	2220      	movs	r2, #32
 80027cc:	0026      	movs	r6, r4
 80027ce:	1ad2      	subs	r2, r2, r3
 80027d0:	0001      	movs	r1, r0
 80027d2:	4094      	lsls	r4, r2
 80027d4:	40de      	lsrs	r6, r3
 80027d6:	40d8      	lsrs	r0, r3
 80027d8:	2300      	movs	r3, #0
 80027da:	4091      	lsls	r1, r2
 80027dc:	1e62      	subs	r2, r4, #1
 80027de:	4194      	sbcs	r4, r2
 80027e0:	4681      	mov	r9, r0
 80027e2:	4698      	mov	r8, r3
 80027e4:	4331      	orrs	r1, r6
 80027e6:	430c      	orrs	r4, r1
 80027e8:	0763      	lsls	r3, r4, #29
 80027ea:	d009      	beq.n	8002800 <__aeabi_dsub+0x11c>
 80027ec:	230f      	movs	r3, #15
 80027ee:	4023      	ands	r3, r4
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d005      	beq.n	8002800 <__aeabi_dsub+0x11c>
 80027f4:	1d23      	adds	r3, r4, #4
 80027f6:	42a3      	cmp	r3, r4
 80027f8:	41a4      	sbcs	r4, r4
 80027fa:	4264      	negs	r4, r4
 80027fc:	44a1      	add	r9, r4
 80027fe:	001c      	movs	r4, r3
 8002800:	464b      	mov	r3, r9
 8002802:	021b      	lsls	r3, r3, #8
 8002804:	d400      	bmi.n	8002808 <__aeabi_dsub+0x124>
 8002806:	e0de      	b.n	80029c6 <__aeabi_dsub+0x2e2>
 8002808:	4641      	mov	r1, r8
 800280a:	4b8c      	ldr	r3, [pc, #560]	; (8002a3c <__aeabi_dsub+0x358>)
 800280c:	3101      	adds	r1, #1
 800280e:	4299      	cmp	r1, r3
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x130>
 8002812:	e0e7      	b.n	80029e4 <__aeabi_dsub+0x300>
 8002814:	464b      	mov	r3, r9
 8002816:	488a      	ldr	r0, [pc, #552]	; (8002a40 <__aeabi_dsub+0x35c>)
 8002818:	08e4      	lsrs	r4, r4, #3
 800281a:	4003      	ands	r3, r0
 800281c:	0018      	movs	r0, r3
 800281e:	0549      	lsls	r1, r1, #21
 8002820:	075b      	lsls	r3, r3, #29
 8002822:	0240      	lsls	r0, r0, #9
 8002824:	4323      	orrs	r3, r4
 8002826:	0d4a      	lsrs	r2, r1, #21
 8002828:	0b04      	lsrs	r4, r0, #12
 800282a:	0512      	lsls	r2, r2, #20
 800282c:	07ed      	lsls	r5, r5, #31
 800282e:	4322      	orrs	r2, r4
 8002830:	432a      	orrs	r2, r5
 8002832:	0018      	movs	r0, r3
 8002834:	0011      	movs	r1, r2
 8002836:	bcf0      	pop	{r4, r5, r6, r7}
 8002838:	46bb      	mov	fp, r7
 800283a:	46b2      	mov	sl, r6
 800283c:	46a9      	mov	r9, r5
 800283e:	46a0      	mov	r8, r4
 8002840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002842:	4642      	mov	r2, r8
 8002844:	1a12      	subs	r2, r2, r0
 8002846:	2a00      	cmp	r2, #0
 8002848:	dd52      	ble.n	80028f0 <__aeabi_dsub+0x20c>
 800284a:	2800      	cmp	r0, #0
 800284c:	d100      	bne.n	8002850 <__aeabi_dsub+0x16c>
 800284e:	e09c      	b.n	800298a <__aeabi_dsub+0x2a6>
 8002850:	45a0      	cmp	r8, r4
 8002852:	d100      	bne.n	8002856 <__aeabi_dsub+0x172>
 8002854:	e0ca      	b.n	80029ec <__aeabi_dsub+0x308>
 8002856:	2080      	movs	r0, #128	; 0x80
 8002858:	0400      	lsls	r0, r0, #16
 800285a:	4301      	orrs	r1, r0
 800285c:	2a38      	cmp	r2, #56	; 0x38
 800285e:	dd00      	ble.n	8002862 <__aeabi_dsub+0x17e>
 8002860:	e149      	b.n	8002af6 <__aeabi_dsub+0x412>
 8002862:	2a1f      	cmp	r2, #31
 8002864:	dc00      	bgt.n	8002868 <__aeabi_dsub+0x184>
 8002866:	e197      	b.n	8002b98 <__aeabi_dsub+0x4b4>
 8002868:	0010      	movs	r0, r2
 800286a:	000e      	movs	r6, r1
 800286c:	3820      	subs	r0, #32
 800286e:	40c6      	lsrs	r6, r0
 8002870:	2a20      	cmp	r2, #32
 8002872:	d004      	beq.n	800287e <__aeabi_dsub+0x19a>
 8002874:	2040      	movs	r0, #64	; 0x40
 8002876:	1a82      	subs	r2, r0, r2
 8002878:	4091      	lsls	r1, r2
 800287a:	430f      	orrs	r7, r1
 800287c:	46b9      	mov	r9, r7
 800287e:	464c      	mov	r4, r9
 8002880:	1e62      	subs	r2, r4, #1
 8002882:	4194      	sbcs	r4, r2
 8002884:	4334      	orrs	r4, r6
 8002886:	e13a      	b.n	8002afe <__aeabi_dsub+0x41a>
 8002888:	000a      	movs	r2, r1
 800288a:	433a      	orrs	r2, r7
 800288c:	d028      	beq.n	80028e0 <__aeabi_dsub+0x1fc>
 800288e:	46b3      	mov	fp, r6
 8002890:	42b5      	cmp	r5, r6
 8002892:	d02b      	beq.n	80028ec <__aeabi_dsub+0x208>
 8002894:	4a6b      	ldr	r2, [pc, #428]	; (8002a44 <__aeabi_dsub+0x360>)
 8002896:	4442      	add	r2, r8
 8002898:	2a00      	cmp	r2, #0
 800289a:	d05d      	beq.n	8002958 <__aeabi_dsub+0x274>
 800289c:	4642      	mov	r2, r8
 800289e:	4644      	mov	r4, r8
 80028a0:	1a82      	subs	r2, r0, r2
 80028a2:	2c00      	cmp	r4, #0
 80028a4:	d000      	beq.n	80028a8 <__aeabi_dsub+0x1c4>
 80028a6:	e0f5      	b.n	8002a94 <__aeabi_dsub+0x3b0>
 80028a8:	4665      	mov	r5, ip
 80028aa:	431d      	orrs	r5, r3
 80028ac:	d100      	bne.n	80028b0 <__aeabi_dsub+0x1cc>
 80028ae:	e19c      	b.n	8002bea <__aeabi_dsub+0x506>
 80028b0:	1e55      	subs	r5, r2, #1
 80028b2:	2a01      	cmp	r2, #1
 80028b4:	d100      	bne.n	80028b8 <__aeabi_dsub+0x1d4>
 80028b6:	e1fb      	b.n	8002cb0 <__aeabi_dsub+0x5cc>
 80028b8:	4c60      	ldr	r4, [pc, #384]	; (8002a3c <__aeabi_dsub+0x358>)
 80028ba:	42a2      	cmp	r2, r4
 80028bc:	d100      	bne.n	80028c0 <__aeabi_dsub+0x1dc>
 80028be:	e1bd      	b.n	8002c3c <__aeabi_dsub+0x558>
 80028c0:	002a      	movs	r2, r5
 80028c2:	e0f0      	b.n	8002aa6 <__aeabi_dsub+0x3c2>
 80028c4:	0008      	movs	r0, r1
 80028c6:	4338      	orrs	r0, r7
 80028c8:	d100      	bne.n	80028cc <__aeabi_dsub+0x1e8>
 80028ca:	e0c3      	b.n	8002a54 <__aeabi_dsub+0x370>
 80028cc:	1e50      	subs	r0, r2, #1
 80028ce:	2a01      	cmp	r2, #1
 80028d0:	d100      	bne.n	80028d4 <__aeabi_dsub+0x1f0>
 80028d2:	e1a8      	b.n	8002c26 <__aeabi_dsub+0x542>
 80028d4:	4c59      	ldr	r4, [pc, #356]	; (8002a3c <__aeabi_dsub+0x358>)
 80028d6:	42a2      	cmp	r2, r4
 80028d8:	d100      	bne.n	80028dc <__aeabi_dsub+0x1f8>
 80028da:	e087      	b.n	80029ec <__aeabi_dsub+0x308>
 80028dc:	0002      	movs	r2, r0
 80028de:	e736      	b.n	800274e <__aeabi_dsub+0x6a>
 80028e0:	2201      	movs	r2, #1
 80028e2:	4056      	eors	r6, r2
 80028e4:	46b3      	mov	fp, r6
 80028e6:	42b5      	cmp	r5, r6
 80028e8:	d000      	beq.n	80028ec <__aeabi_dsub+0x208>
 80028ea:	e721      	b.n	8002730 <__aeabi_dsub+0x4c>
 80028ec:	4a55      	ldr	r2, [pc, #340]	; (8002a44 <__aeabi_dsub+0x360>)
 80028ee:	4442      	add	r2, r8
 80028f0:	2a00      	cmp	r2, #0
 80028f2:	d100      	bne.n	80028f6 <__aeabi_dsub+0x212>
 80028f4:	e0b5      	b.n	8002a62 <__aeabi_dsub+0x37e>
 80028f6:	4642      	mov	r2, r8
 80028f8:	4644      	mov	r4, r8
 80028fa:	1a82      	subs	r2, r0, r2
 80028fc:	2c00      	cmp	r4, #0
 80028fe:	d100      	bne.n	8002902 <__aeabi_dsub+0x21e>
 8002900:	e138      	b.n	8002b74 <__aeabi_dsub+0x490>
 8002902:	4e4e      	ldr	r6, [pc, #312]	; (8002a3c <__aeabi_dsub+0x358>)
 8002904:	42b0      	cmp	r0, r6
 8002906:	d100      	bne.n	800290a <__aeabi_dsub+0x226>
 8002908:	e1de      	b.n	8002cc8 <__aeabi_dsub+0x5e4>
 800290a:	2680      	movs	r6, #128	; 0x80
 800290c:	4664      	mov	r4, ip
 800290e:	0436      	lsls	r6, r6, #16
 8002910:	4334      	orrs	r4, r6
 8002912:	46a4      	mov	ip, r4
 8002914:	2a38      	cmp	r2, #56	; 0x38
 8002916:	dd00      	ble.n	800291a <__aeabi_dsub+0x236>
 8002918:	e196      	b.n	8002c48 <__aeabi_dsub+0x564>
 800291a:	2a1f      	cmp	r2, #31
 800291c:	dd00      	ble.n	8002920 <__aeabi_dsub+0x23c>
 800291e:	e224      	b.n	8002d6a <__aeabi_dsub+0x686>
 8002920:	2620      	movs	r6, #32
 8002922:	1ab4      	subs	r4, r6, r2
 8002924:	46a2      	mov	sl, r4
 8002926:	4664      	mov	r4, ip
 8002928:	4656      	mov	r6, sl
 800292a:	40b4      	lsls	r4, r6
 800292c:	46a1      	mov	r9, r4
 800292e:	001c      	movs	r4, r3
 8002930:	464e      	mov	r6, r9
 8002932:	40d4      	lsrs	r4, r2
 8002934:	4326      	orrs	r6, r4
 8002936:	0034      	movs	r4, r6
 8002938:	4656      	mov	r6, sl
 800293a:	40b3      	lsls	r3, r6
 800293c:	1e5e      	subs	r6, r3, #1
 800293e:	41b3      	sbcs	r3, r6
 8002940:	431c      	orrs	r4, r3
 8002942:	4663      	mov	r3, ip
 8002944:	40d3      	lsrs	r3, r2
 8002946:	18c9      	adds	r1, r1, r3
 8002948:	19e4      	adds	r4, r4, r7
 800294a:	42bc      	cmp	r4, r7
 800294c:	41bf      	sbcs	r7, r7
 800294e:	427f      	negs	r7, r7
 8002950:	46b9      	mov	r9, r7
 8002952:	4680      	mov	r8, r0
 8002954:	4489      	add	r9, r1
 8002956:	e0d8      	b.n	8002b0a <__aeabi_dsub+0x426>
 8002958:	4640      	mov	r0, r8
 800295a:	4c3b      	ldr	r4, [pc, #236]	; (8002a48 <__aeabi_dsub+0x364>)
 800295c:	3001      	adds	r0, #1
 800295e:	4220      	tst	r0, r4
 8002960:	d000      	beq.n	8002964 <__aeabi_dsub+0x280>
 8002962:	e0b4      	b.n	8002ace <__aeabi_dsub+0x3ea>
 8002964:	4640      	mov	r0, r8
 8002966:	2800      	cmp	r0, #0
 8002968:	d000      	beq.n	800296c <__aeabi_dsub+0x288>
 800296a:	e144      	b.n	8002bf6 <__aeabi_dsub+0x512>
 800296c:	4660      	mov	r0, ip
 800296e:	4318      	orrs	r0, r3
 8002970:	d100      	bne.n	8002974 <__aeabi_dsub+0x290>
 8002972:	e190      	b.n	8002c96 <__aeabi_dsub+0x5b2>
 8002974:	0008      	movs	r0, r1
 8002976:	4338      	orrs	r0, r7
 8002978:	d000      	beq.n	800297c <__aeabi_dsub+0x298>
 800297a:	e1aa      	b.n	8002cd2 <__aeabi_dsub+0x5ee>
 800297c:	4661      	mov	r1, ip
 800297e:	08db      	lsrs	r3, r3, #3
 8002980:	0749      	lsls	r1, r1, #29
 8002982:	430b      	orrs	r3, r1
 8002984:	4661      	mov	r1, ip
 8002986:	08cc      	lsrs	r4, r1, #3
 8002988:	e027      	b.n	80029da <__aeabi_dsub+0x2f6>
 800298a:	0008      	movs	r0, r1
 800298c:	4338      	orrs	r0, r7
 800298e:	d061      	beq.n	8002a54 <__aeabi_dsub+0x370>
 8002990:	1e50      	subs	r0, r2, #1
 8002992:	2a01      	cmp	r2, #1
 8002994:	d100      	bne.n	8002998 <__aeabi_dsub+0x2b4>
 8002996:	e139      	b.n	8002c0c <__aeabi_dsub+0x528>
 8002998:	42a2      	cmp	r2, r4
 800299a:	d027      	beq.n	80029ec <__aeabi_dsub+0x308>
 800299c:	0002      	movs	r2, r0
 800299e:	e75d      	b.n	800285c <__aeabi_dsub+0x178>
 80029a0:	0002      	movs	r2, r0
 80029a2:	391f      	subs	r1, #31
 80029a4:	40ca      	lsrs	r2, r1
 80029a6:	0011      	movs	r1, r2
 80029a8:	2b20      	cmp	r3, #32
 80029aa:	d003      	beq.n	80029b4 <__aeabi_dsub+0x2d0>
 80029ac:	2240      	movs	r2, #64	; 0x40
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	4098      	lsls	r0, r3
 80029b2:	4304      	orrs	r4, r0
 80029b4:	1e63      	subs	r3, r4, #1
 80029b6:	419c      	sbcs	r4, r3
 80029b8:	2300      	movs	r3, #0
 80029ba:	4699      	mov	r9, r3
 80029bc:	4698      	mov	r8, r3
 80029be:	430c      	orrs	r4, r1
 80029c0:	0763      	lsls	r3, r4, #29
 80029c2:	d000      	beq.n	80029c6 <__aeabi_dsub+0x2e2>
 80029c4:	e712      	b.n	80027ec <__aeabi_dsub+0x108>
 80029c6:	464b      	mov	r3, r9
 80029c8:	464a      	mov	r2, r9
 80029ca:	08e4      	lsrs	r4, r4, #3
 80029cc:	075b      	lsls	r3, r3, #29
 80029ce:	4323      	orrs	r3, r4
 80029d0:	08d4      	lsrs	r4, r2, #3
 80029d2:	4642      	mov	r2, r8
 80029d4:	4919      	ldr	r1, [pc, #100]	; (8002a3c <__aeabi_dsub+0x358>)
 80029d6:	428a      	cmp	r2, r1
 80029d8:	d00e      	beq.n	80029f8 <__aeabi_dsub+0x314>
 80029da:	0324      	lsls	r4, r4, #12
 80029dc:	0552      	lsls	r2, r2, #21
 80029de:	0b24      	lsrs	r4, r4, #12
 80029e0:	0d52      	lsrs	r2, r2, #21
 80029e2:	e722      	b.n	800282a <__aeabi_dsub+0x146>
 80029e4:	000a      	movs	r2, r1
 80029e6:	2400      	movs	r4, #0
 80029e8:	2300      	movs	r3, #0
 80029ea:	e71e      	b.n	800282a <__aeabi_dsub+0x146>
 80029ec:	08db      	lsrs	r3, r3, #3
 80029ee:	4662      	mov	r2, ip
 80029f0:	0752      	lsls	r2, r2, #29
 80029f2:	4313      	orrs	r3, r2
 80029f4:	4662      	mov	r2, ip
 80029f6:	08d4      	lsrs	r4, r2, #3
 80029f8:	001a      	movs	r2, r3
 80029fa:	4322      	orrs	r2, r4
 80029fc:	d100      	bne.n	8002a00 <__aeabi_dsub+0x31c>
 80029fe:	e1fc      	b.n	8002dfa <__aeabi_dsub+0x716>
 8002a00:	2280      	movs	r2, #128	; 0x80
 8002a02:	0312      	lsls	r2, r2, #12
 8002a04:	4314      	orrs	r4, r2
 8002a06:	0324      	lsls	r4, r4, #12
 8002a08:	4a0c      	ldr	r2, [pc, #48]	; (8002a3c <__aeabi_dsub+0x358>)
 8002a0a:	0b24      	lsrs	r4, r4, #12
 8002a0c:	e70d      	b.n	800282a <__aeabi_dsub+0x146>
 8002a0e:	0020      	movs	r0, r4
 8002a10:	f000 fb74 	bl	80030fc <__clzsi2>
 8002a14:	0001      	movs	r1, r0
 8002a16:	3118      	adds	r1, #24
 8002a18:	291f      	cmp	r1, #31
 8002a1a:	dc00      	bgt.n	8002a1e <__aeabi_dsub+0x33a>
 8002a1c:	e6c4      	b.n	80027a8 <__aeabi_dsub+0xc4>
 8002a1e:	3808      	subs	r0, #8
 8002a20:	4084      	lsls	r4, r0
 8002a22:	4643      	mov	r3, r8
 8002a24:	0020      	movs	r0, r4
 8002a26:	2400      	movs	r4, #0
 8002a28:	4588      	cmp	r8, r1
 8002a2a:	dc00      	bgt.n	8002a2e <__aeabi_dsub+0x34a>
 8002a2c:	e6c8      	b.n	80027c0 <__aeabi_dsub+0xdc>
 8002a2e:	4a04      	ldr	r2, [pc, #16]	; (8002a40 <__aeabi_dsub+0x35c>)
 8002a30:	1a5b      	subs	r3, r3, r1
 8002a32:	4010      	ands	r0, r2
 8002a34:	4698      	mov	r8, r3
 8002a36:	4681      	mov	r9, r0
 8002a38:	e6d6      	b.n	80027e8 <__aeabi_dsub+0x104>
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	000007ff 	.word	0x000007ff
 8002a40:	ff7fffff 	.word	0xff7fffff
 8002a44:	fffff801 	.word	0xfffff801
 8002a48:	000007fe 	.word	0x000007fe
 8002a4c:	430f      	orrs	r7, r1
 8002a4e:	1e7a      	subs	r2, r7, #1
 8002a50:	4197      	sbcs	r7, r2
 8002a52:	e691      	b.n	8002778 <__aeabi_dsub+0x94>
 8002a54:	4661      	mov	r1, ip
 8002a56:	08db      	lsrs	r3, r3, #3
 8002a58:	0749      	lsls	r1, r1, #29
 8002a5a:	430b      	orrs	r3, r1
 8002a5c:	4661      	mov	r1, ip
 8002a5e:	08cc      	lsrs	r4, r1, #3
 8002a60:	e7b8      	b.n	80029d4 <__aeabi_dsub+0x2f0>
 8002a62:	4640      	mov	r0, r8
 8002a64:	4cd3      	ldr	r4, [pc, #844]	; (8002db4 <__aeabi_dsub+0x6d0>)
 8002a66:	3001      	adds	r0, #1
 8002a68:	4220      	tst	r0, r4
 8002a6a:	d000      	beq.n	8002a6e <__aeabi_dsub+0x38a>
 8002a6c:	e0a2      	b.n	8002bb4 <__aeabi_dsub+0x4d0>
 8002a6e:	4640      	mov	r0, r8
 8002a70:	2800      	cmp	r0, #0
 8002a72:	d000      	beq.n	8002a76 <__aeabi_dsub+0x392>
 8002a74:	e101      	b.n	8002c7a <__aeabi_dsub+0x596>
 8002a76:	4660      	mov	r0, ip
 8002a78:	4318      	orrs	r0, r3
 8002a7a:	d100      	bne.n	8002a7e <__aeabi_dsub+0x39a>
 8002a7c:	e15e      	b.n	8002d3c <__aeabi_dsub+0x658>
 8002a7e:	0008      	movs	r0, r1
 8002a80:	4338      	orrs	r0, r7
 8002a82:	d000      	beq.n	8002a86 <__aeabi_dsub+0x3a2>
 8002a84:	e15f      	b.n	8002d46 <__aeabi_dsub+0x662>
 8002a86:	4661      	mov	r1, ip
 8002a88:	08db      	lsrs	r3, r3, #3
 8002a8a:	0749      	lsls	r1, r1, #29
 8002a8c:	430b      	orrs	r3, r1
 8002a8e:	4661      	mov	r1, ip
 8002a90:	08cc      	lsrs	r4, r1, #3
 8002a92:	e7a2      	b.n	80029da <__aeabi_dsub+0x2f6>
 8002a94:	4dc8      	ldr	r5, [pc, #800]	; (8002db8 <__aeabi_dsub+0x6d4>)
 8002a96:	42a8      	cmp	r0, r5
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x3b8>
 8002a9a:	e0cf      	b.n	8002c3c <__aeabi_dsub+0x558>
 8002a9c:	2580      	movs	r5, #128	; 0x80
 8002a9e:	4664      	mov	r4, ip
 8002aa0:	042d      	lsls	r5, r5, #16
 8002aa2:	432c      	orrs	r4, r5
 8002aa4:	46a4      	mov	ip, r4
 8002aa6:	2a38      	cmp	r2, #56	; 0x38
 8002aa8:	dc56      	bgt.n	8002b58 <__aeabi_dsub+0x474>
 8002aaa:	2a1f      	cmp	r2, #31
 8002aac:	dd00      	ble.n	8002ab0 <__aeabi_dsub+0x3cc>
 8002aae:	e0d1      	b.n	8002c54 <__aeabi_dsub+0x570>
 8002ab0:	2520      	movs	r5, #32
 8002ab2:	001e      	movs	r6, r3
 8002ab4:	1aad      	subs	r5, r5, r2
 8002ab6:	4664      	mov	r4, ip
 8002ab8:	40ab      	lsls	r3, r5
 8002aba:	40ac      	lsls	r4, r5
 8002abc:	40d6      	lsrs	r6, r2
 8002abe:	1e5d      	subs	r5, r3, #1
 8002ac0:	41ab      	sbcs	r3, r5
 8002ac2:	4334      	orrs	r4, r6
 8002ac4:	4323      	orrs	r3, r4
 8002ac6:	4664      	mov	r4, ip
 8002ac8:	40d4      	lsrs	r4, r2
 8002aca:	1b09      	subs	r1, r1, r4
 8002acc:	e049      	b.n	8002b62 <__aeabi_dsub+0x47e>
 8002ace:	4660      	mov	r0, ip
 8002ad0:	1bdc      	subs	r4, r3, r7
 8002ad2:	1a46      	subs	r6, r0, r1
 8002ad4:	42a3      	cmp	r3, r4
 8002ad6:	4180      	sbcs	r0, r0
 8002ad8:	4240      	negs	r0, r0
 8002ada:	4681      	mov	r9, r0
 8002adc:	0030      	movs	r0, r6
 8002ade:	464e      	mov	r6, r9
 8002ae0:	1b80      	subs	r0, r0, r6
 8002ae2:	4681      	mov	r9, r0
 8002ae4:	0200      	lsls	r0, r0, #8
 8002ae6:	d476      	bmi.n	8002bd6 <__aeabi_dsub+0x4f2>
 8002ae8:	464b      	mov	r3, r9
 8002aea:	4323      	orrs	r3, r4
 8002aec:	d000      	beq.n	8002af0 <__aeabi_dsub+0x40c>
 8002aee:	e652      	b.n	8002796 <__aeabi_dsub+0xb2>
 8002af0:	2400      	movs	r4, #0
 8002af2:	2500      	movs	r5, #0
 8002af4:	e771      	b.n	80029da <__aeabi_dsub+0x2f6>
 8002af6:	4339      	orrs	r1, r7
 8002af8:	000c      	movs	r4, r1
 8002afa:	1e62      	subs	r2, r4, #1
 8002afc:	4194      	sbcs	r4, r2
 8002afe:	18e4      	adds	r4, r4, r3
 8002b00:	429c      	cmp	r4, r3
 8002b02:	419b      	sbcs	r3, r3
 8002b04:	425b      	negs	r3, r3
 8002b06:	4463      	add	r3, ip
 8002b08:	4699      	mov	r9, r3
 8002b0a:	464b      	mov	r3, r9
 8002b0c:	021b      	lsls	r3, r3, #8
 8002b0e:	d400      	bmi.n	8002b12 <__aeabi_dsub+0x42e>
 8002b10:	e756      	b.n	80029c0 <__aeabi_dsub+0x2dc>
 8002b12:	2301      	movs	r3, #1
 8002b14:	469c      	mov	ip, r3
 8002b16:	4ba8      	ldr	r3, [pc, #672]	; (8002db8 <__aeabi_dsub+0x6d4>)
 8002b18:	44e0      	add	r8, ip
 8002b1a:	4598      	cmp	r8, r3
 8002b1c:	d038      	beq.n	8002b90 <__aeabi_dsub+0x4ac>
 8002b1e:	464b      	mov	r3, r9
 8002b20:	48a6      	ldr	r0, [pc, #664]	; (8002dbc <__aeabi_dsub+0x6d8>)
 8002b22:	2201      	movs	r2, #1
 8002b24:	4003      	ands	r3, r0
 8002b26:	0018      	movs	r0, r3
 8002b28:	0863      	lsrs	r3, r4, #1
 8002b2a:	4014      	ands	r4, r2
 8002b2c:	431c      	orrs	r4, r3
 8002b2e:	07c3      	lsls	r3, r0, #31
 8002b30:	431c      	orrs	r4, r3
 8002b32:	0843      	lsrs	r3, r0, #1
 8002b34:	4699      	mov	r9, r3
 8002b36:	e657      	b.n	80027e8 <__aeabi_dsub+0x104>
 8002b38:	0010      	movs	r0, r2
 8002b3a:	000e      	movs	r6, r1
 8002b3c:	3820      	subs	r0, #32
 8002b3e:	40c6      	lsrs	r6, r0
 8002b40:	2a20      	cmp	r2, #32
 8002b42:	d004      	beq.n	8002b4e <__aeabi_dsub+0x46a>
 8002b44:	2040      	movs	r0, #64	; 0x40
 8002b46:	1a82      	subs	r2, r0, r2
 8002b48:	4091      	lsls	r1, r2
 8002b4a:	430f      	orrs	r7, r1
 8002b4c:	46b9      	mov	r9, r7
 8002b4e:	464f      	mov	r7, r9
 8002b50:	1e7a      	subs	r2, r7, #1
 8002b52:	4197      	sbcs	r7, r2
 8002b54:	4337      	orrs	r7, r6
 8002b56:	e60f      	b.n	8002778 <__aeabi_dsub+0x94>
 8002b58:	4662      	mov	r2, ip
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	0013      	movs	r3, r2
 8002b5e:	1e5a      	subs	r2, r3, #1
 8002b60:	4193      	sbcs	r3, r2
 8002b62:	1afc      	subs	r4, r7, r3
 8002b64:	42a7      	cmp	r7, r4
 8002b66:	41bf      	sbcs	r7, r7
 8002b68:	427f      	negs	r7, r7
 8002b6a:	1bcb      	subs	r3, r1, r7
 8002b6c:	4699      	mov	r9, r3
 8002b6e:	465d      	mov	r5, fp
 8002b70:	4680      	mov	r8, r0
 8002b72:	e608      	b.n	8002786 <__aeabi_dsub+0xa2>
 8002b74:	4666      	mov	r6, ip
 8002b76:	431e      	orrs	r6, r3
 8002b78:	d100      	bne.n	8002b7c <__aeabi_dsub+0x498>
 8002b7a:	e0be      	b.n	8002cfa <__aeabi_dsub+0x616>
 8002b7c:	1e56      	subs	r6, r2, #1
 8002b7e:	2a01      	cmp	r2, #1
 8002b80:	d100      	bne.n	8002b84 <__aeabi_dsub+0x4a0>
 8002b82:	e109      	b.n	8002d98 <__aeabi_dsub+0x6b4>
 8002b84:	4c8c      	ldr	r4, [pc, #560]	; (8002db8 <__aeabi_dsub+0x6d4>)
 8002b86:	42a2      	cmp	r2, r4
 8002b88:	d100      	bne.n	8002b8c <__aeabi_dsub+0x4a8>
 8002b8a:	e119      	b.n	8002dc0 <__aeabi_dsub+0x6dc>
 8002b8c:	0032      	movs	r2, r6
 8002b8e:	e6c1      	b.n	8002914 <__aeabi_dsub+0x230>
 8002b90:	4642      	mov	r2, r8
 8002b92:	2400      	movs	r4, #0
 8002b94:	2300      	movs	r3, #0
 8002b96:	e648      	b.n	800282a <__aeabi_dsub+0x146>
 8002b98:	2020      	movs	r0, #32
 8002b9a:	000c      	movs	r4, r1
 8002b9c:	1a80      	subs	r0, r0, r2
 8002b9e:	003e      	movs	r6, r7
 8002ba0:	4087      	lsls	r7, r0
 8002ba2:	4084      	lsls	r4, r0
 8002ba4:	40d6      	lsrs	r6, r2
 8002ba6:	1e78      	subs	r0, r7, #1
 8002ba8:	4187      	sbcs	r7, r0
 8002baa:	40d1      	lsrs	r1, r2
 8002bac:	4334      	orrs	r4, r6
 8002bae:	433c      	orrs	r4, r7
 8002bb0:	448c      	add	ip, r1
 8002bb2:	e7a4      	b.n	8002afe <__aeabi_dsub+0x41a>
 8002bb4:	4a80      	ldr	r2, [pc, #512]	; (8002db8 <__aeabi_dsub+0x6d4>)
 8002bb6:	4290      	cmp	r0, r2
 8002bb8:	d100      	bne.n	8002bbc <__aeabi_dsub+0x4d8>
 8002bba:	e0e9      	b.n	8002d90 <__aeabi_dsub+0x6ac>
 8002bbc:	19df      	adds	r7, r3, r7
 8002bbe:	429f      	cmp	r7, r3
 8002bc0:	419b      	sbcs	r3, r3
 8002bc2:	4461      	add	r1, ip
 8002bc4:	425b      	negs	r3, r3
 8002bc6:	18c9      	adds	r1, r1, r3
 8002bc8:	07cc      	lsls	r4, r1, #31
 8002bca:	087f      	lsrs	r7, r7, #1
 8002bcc:	084b      	lsrs	r3, r1, #1
 8002bce:	4699      	mov	r9, r3
 8002bd0:	4680      	mov	r8, r0
 8002bd2:	433c      	orrs	r4, r7
 8002bd4:	e6f4      	b.n	80029c0 <__aeabi_dsub+0x2dc>
 8002bd6:	1afc      	subs	r4, r7, r3
 8002bd8:	42a7      	cmp	r7, r4
 8002bda:	41bf      	sbcs	r7, r7
 8002bdc:	4663      	mov	r3, ip
 8002bde:	427f      	negs	r7, r7
 8002be0:	1ac9      	subs	r1, r1, r3
 8002be2:	1bcb      	subs	r3, r1, r7
 8002be4:	4699      	mov	r9, r3
 8002be6:	465d      	mov	r5, fp
 8002be8:	e5d5      	b.n	8002796 <__aeabi_dsub+0xb2>
 8002bea:	08ff      	lsrs	r7, r7, #3
 8002bec:	074b      	lsls	r3, r1, #29
 8002bee:	465d      	mov	r5, fp
 8002bf0:	433b      	orrs	r3, r7
 8002bf2:	08cc      	lsrs	r4, r1, #3
 8002bf4:	e6ee      	b.n	80029d4 <__aeabi_dsub+0x2f0>
 8002bf6:	4662      	mov	r2, ip
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	d000      	beq.n	8002bfe <__aeabi_dsub+0x51a>
 8002bfc:	e082      	b.n	8002d04 <__aeabi_dsub+0x620>
 8002bfe:	000b      	movs	r3, r1
 8002c00:	433b      	orrs	r3, r7
 8002c02:	d11b      	bne.n	8002c3c <__aeabi_dsub+0x558>
 8002c04:	2480      	movs	r4, #128	; 0x80
 8002c06:	2500      	movs	r5, #0
 8002c08:	0324      	lsls	r4, r4, #12
 8002c0a:	e6f9      	b.n	8002a00 <__aeabi_dsub+0x31c>
 8002c0c:	19dc      	adds	r4, r3, r7
 8002c0e:	429c      	cmp	r4, r3
 8002c10:	419b      	sbcs	r3, r3
 8002c12:	4461      	add	r1, ip
 8002c14:	4689      	mov	r9, r1
 8002c16:	425b      	negs	r3, r3
 8002c18:	4499      	add	r9, r3
 8002c1a:	464b      	mov	r3, r9
 8002c1c:	021b      	lsls	r3, r3, #8
 8002c1e:	d444      	bmi.n	8002caa <__aeabi_dsub+0x5c6>
 8002c20:	2301      	movs	r3, #1
 8002c22:	4698      	mov	r8, r3
 8002c24:	e6cc      	b.n	80029c0 <__aeabi_dsub+0x2dc>
 8002c26:	1bdc      	subs	r4, r3, r7
 8002c28:	4662      	mov	r2, ip
 8002c2a:	42a3      	cmp	r3, r4
 8002c2c:	419b      	sbcs	r3, r3
 8002c2e:	1a51      	subs	r1, r2, r1
 8002c30:	425b      	negs	r3, r3
 8002c32:	1acb      	subs	r3, r1, r3
 8002c34:	4699      	mov	r9, r3
 8002c36:	2301      	movs	r3, #1
 8002c38:	4698      	mov	r8, r3
 8002c3a:	e5a4      	b.n	8002786 <__aeabi_dsub+0xa2>
 8002c3c:	08ff      	lsrs	r7, r7, #3
 8002c3e:	074b      	lsls	r3, r1, #29
 8002c40:	465d      	mov	r5, fp
 8002c42:	433b      	orrs	r3, r7
 8002c44:	08cc      	lsrs	r4, r1, #3
 8002c46:	e6d7      	b.n	80029f8 <__aeabi_dsub+0x314>
 8002c48:	4662      	mov	r2, ip
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	0014      	movs	r4, r2
 8002c4e:	1e63      	subs	r3, r4, #1
 8002c50:	419c      	sbcs	r4, r3
 8002c52:	e679      	b.n	8002948 <__aeabi_dsub+0x264>
 8002c54:	0015      	movs	r5, r2
 8002c56:	4664      	mov	r4, ip
 8002c58:	3d20      	subs	r5, #32
 8002c5a:	40ec      	lsrs	r4, r5
 8002c5c:	46a0      	mov	r8, r4
 8002c5e:	2a20      	cmp	r2, #32
 8002c60:	d005      	beq.n	8002c6e <__aeabi_dsub+0x58a>
 8002c62:	2540      	movs	r5, #64	; 0x40
 8002c64:	4664      	mov	r4, ip
 8002c66:	1aaa      	subs	r2, r5, r2
 8002c68:	4094      	lsls	r4, r2
 8002c6a:	4323      	orrs	r3, r4
 8002c6c:	469a      	mov	sl, r3
 8002c6e:	4654      	mov	r4, sl
 8002c70:	1e63      	subs	r3, r4, #1
 8002c72:	419c      	sbcs	r4, r3
 8002c74:	4643      	mov	r3, r8
 8002c76:	4323      	orrs	r3, r4
 8002c78:	e773      	b.n	8002b62 <__aeabi_dsub+0x47e>
 8002c7a:	4662      	mov	r2, ip
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	d023      	beq.n	8002cc8 <__aeabi_dsub+0x5e4>
 8002c80:	000a      	movs	r2, r1
 8002c82:	433a      	orrs	r2, r7
 8002c84:	d000      	beq.n	8002c88 <__aeabi_dsub+0x5a4>
 8002c86:	e0a0      	b.n	8002dca <__aeabi_dsub+0x6e6>
 8002c88:	4662      	mov	r2, ip
 8002c8a:	08db      	lsrs	r3, r3, #3
 8002c8c:	0752      	lsls	r2, r2, #29
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	4662      	mov	r2, ip
 8002c92:	08d4      	lsrs	r4, r2, #3
 8002c94:	e6b0      	b.n	80029f8 <__aeabi_dsub+0x314>
 8002c96:	000b      	movs	r3, r1
 8002c98:	433b      	orrs	r3, r7
 8002c9a:	d100      	bne.n	8002c9e <__aeabi_dsub+0x5ba>
 8002c9c:	e728      	b.n	8002af0 <__aeabi_dsub+0x40c>
 8002c9e:	08ff      	lsrs	r7, r7, #3
 8002ca0:	074b      	lsls	r3, r1, #29
 8002ca2:	465d      	mov	r5, fp
 8002ca4:	433b      	orrs	r3, r7
 8002ca6:	08cc      	lsrs	r4, r1, #3
 8002ca8:	e697      	b.n	80029da <__aeabi_dsub+0x2f6>
 8002caa:	2302      	movs	r3, #2
 8002cac:	4698      	mov	r8, r3
 8002cae:	e736      	b.n	8002b1e <__aeabi_dsub+0x43a>
 8002cb0:	1afc      	subs	r4, r7, r3
 8002cb2:	42a7      	cmp	r7, r4
 8002cb4:	41bf      	sbcs	r7, r7
 8002cb6:	4663      	mov	r3, ip
 8002cb8:	427f      	negs	r7, r7
 8002cba:	1ac9      	subs	r1, r1, r3
 8002cbc:	1bcb      	subs	r3, r1, r7
 8002cbe:	4699      	mov	r9, r3
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	465d      	mov	r5, fp
 8002cc4:	4698      	mov	r8, r3
 8002cc6:	e55e      	b.n	8002786 <__aeabi_dsub+0xa2>
 8002cc8:	074b      	lsls	r3, r1, #29
 8002cca:	08ff      	lsrs	r7, r7, #3
 8002ccc:	433b      	orrs	r3, r7
 8002cce:	08cc      	lsrs	r4, r1, #3
 8002cd0:	e692      	b.n	80029f8 <__aeabi_dsub+0x314>
 8002cd2:	1bdc      	subs	r4, r3, r7
 8002cd4:	4660      	mov	r0, ip
 8002cd6:	42a3      	cmp	r3, r4
 8002cd8:	41b6      	sbcs	r6, r6
 8002cda:	1a40      	subs	r0, r0, r1
 8002cdc:	4276      	negs	r6, r6
 8002cde:	1b80      	subs	r0, r0, r6
 8002ce0:	4681      	mov	r9, r0
 8002ce2:	0200      	lsls	r0, r0, #8
 8002ce4:	d560      	bpl.n	8002da8 <__aeabi_dsub+0x6c4>
 8002ce6:	1afc      	subs	r4, r7, r3
 8002ce8:	42a7      	cmp	r7, r4
 8002cea:	41bf      	sbcs	r7, r7
 8002cec:	4663      	mov	r3, ip
 8002cee:	427f      	negs	r7, r7
 8002cf0:	1ac9      	subs	r1, r1, r3
 8002cf2:	1bcb      	subs	r3, r1, r7
 8002cf4:	4699      	mov	r9, r3
 8002cf6:	465d      	mov	r5, fp
 8002cf8:	e576      	b.n	80027e8 <__aeabi_dsub+0x104>
 8002cfa:	08ff      	lsrs	r7, r7, #3
 8002cfc:	074b      	lsls	r3, r1, #29
 8002cfe:	433b      	orrs	r3, r7
 8002d00:	08cc      	lsrs	r4, r1, #3
 8002d02:	e667      	b.n	80029d4 <__aeabi_dsub+0x2f0>
 8002d04:	000a      	movs	r2, r1
 8002d06:	08db      	lsrs	r3, r3, #3
 8002d08:	433a      	orrs	r2, r7
 8002d0a:	d100      	bne.n	8002d0e <__aeabi_dsub+0x62a>
 8002d0c:	e66f      	b.n	80029ee <__aeabi_dsub+0x30a>
 8002d0e:	4662      	mov	r2, ip
 8002d10:	0752      	lsls	r2, r2, #29
 8002d12:	4313      	orrs	r3, r2
 8002d14:	4662      	mov	r2, ip
 8002d16:	08d4      	lsrs	r4, r2, #3
 8002d18:	2280      	movs	r2, #128	; 0x80
 8002d1a:	0312      	lsls	r2, r2, #12
 8002d1c:	4214      	tst	r4, r2
 8002d1e:	d007      	beq.n	8002d30 <__aeabi_dsub+0x64c>
 8002d20:	08c8      	lsrs	r0, r1, #3
 8002d22:	4210      	tst	r0, r2
 8002d24:	d104      	bne.n	8002d30 <__aeabi_dsub+0x64c>
 8002d26:	465d      	mov	r5, fp
 8002d28:	0004      	movs	r4, r0
 8002d2a:	08fb      	lsrs	r3, r7, #3
 8002d2c:	0749      	lsls	r1, r1, #29
 8002d2e:	430b      	orrs	r3, r1
 8002d30:	0f5a      	lsrs	r2, r3, #29
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	08db      	lsrs	r3, r3, #3
 8002d36:	0752      	lsls	r2, r2, #29
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	e65d      	b.n	80029f8 <__aeabi_dsub+0x314>
 8002d3c:	074b      	lsls	r3, r1, #29
 8002d3e:	08ff      	lsrs	r7, r7, #3
 8002d40:	433b      	orrs	r3, r7
 8002d42:	08cc      	lsrs	r4, r1, #3
 8002d44:	e649      	b.n	80029da <__aeabi_dsub+0x2f6>
 8002d46:	19dc      	adds	r4, r3, r7
 8002d48:	429c      	cmp	r4, r3
 8002d4a:	419b      	sbcs	r3, r3
 8002d4c:	4461      	add	r1, ip
 8002d4e:	4689      	mov	r9, r1
 8002d50:	425b      	negs	r3, r3
 8002d52:	4499      	add	r9, r3
 8002d54:	464b      	mov	r3, r9
 8002d56:	021b      	lsls	r3, r3, #8
 8002d58:	d400      	bmi.n	8002d5c <__aeabi_dsub+0x678>
 8002d5a:	e631      	b.n	80029c0 <__aeabi_dsub+0x2dc>
 8002d5c:	464a      	mov	r2, r9
 8002d5e:	4b17      	ldr	r3, [pc, #92]	; (8002dbc <__aeabi_dsub+0x6d8>)
 8002d60:	401a      	ands	r2, r3
 8002d62:	2301      	movs	r3, #1
 8002d64:	4691      	mov	r9, r2
 8002d66:	4698      	mov	r8, r3
 8002d68:	e62a      	b.n	80029c0 <__aeabi_dsub+0x2dc>
 8002d6a:	0016      	movs	r6, r2
 8002d6c:	4664      	mov	r4, ip
 8002d6e:	3e20      	subs	r6, #32
 8002d70:	40f4      	lsrs	r4, r6
 8002d72:	46a0      	mov	r8, r4
 8002d74:	2a20      	cmp	r2, #32
 8002d76:	d005      	beq.n	8002d84 <__aeabi_dsub+0x6a0>
 8002d78:	2640      	movs	r6, #64	; 0x40
 8002d7a:	4664      	mov	r4, ip
 8002d7c:	1ab2      	subs	r2, r6, r2
 8002d7e:	4094      	lsls	r4, r2
 8002d80:	4323      	orrs	r3, r4
 8002d82:	469a      	mov	sl, r3
 8002d84:	4654      	mov	r4, sl
 8002d86:	1e63      	subs	r3, r4, #1
 8002d88:	419c      	sbcs	r4, r3
 8002d8a:	4643      	mov	r3, r8
 8002d8c:	431c      	orrs	r4, r3
 8002d8e:	e5db      	b.n	8002948 <__aeabi_dsub+0x264>
 8002d90:	0002      	movs	r2, r0
 8002d92:	2400      	movs	r4, #0
 8002d94:	2300      	movs	r3, #0
 8002d96:	e548      	b.n	800282a <__aeabi_dsub+0x146>
 8002d98:	19dc      	adds	r4, r3, r7
 8002d9a:	42bc      	cmp	r4, r7
 8002d9c:	41bf      	sbcs	r7, r7
 8002d9e:	4461      	add	r1, ip
 8002da0:	4689      	mov	r9, r1
 8002da2:	427f      	negs	r7, r7
 8002da4:	44b9      	add	r9, r7
 8002da6:	e738      	b.n	8002c1a <__aeabi_dsub+0x536>
 8002da8:	464b      	mov	r3, r9
 8002daa:	4323      	orrs	r3, r4
 8002dac:	d100      	bne.n	8002db0 <__aeabi_dsub+0x6cc>
 8002dae:	e69f      	b.n	8002af0 <__aeabi_dsub+0x40c>
 8002db0:	e606      	b.n	80029c0 <__aeabi_dsub+0x2dc>
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	000007fe 	.word	0x000007fe
 8002db8:	000007ff 	.word	0x000007ff
 8002dbc:	ff7fffff 	.word	0xff7fffff
 8002dc0:	08ff      	lsrs	r7, r7, #3
 8002dc2:	074b      	lsls	r3, r1, #29
 8002dc4:	433b      	orrs	r3, r7
 8002dc6:	08cc      	lsrs	r4, r1, #3
 8002dc8:	e616      	b.n	80029f8 <__aeabi_dsub+0x314>
 8002dca:	4662      	mov	r2, ip
 8002dcc:	08db      	lsrs	r3, r3, #3
 8002dce:	0752      	lsls	r2, r2, #29
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	4662      	mov	r2, ip
 8002dd4:	08d4      	lsrs	r4, r2, #3
 8002dd6:	2280      	movs	r2, #128	; 0x80
 8002dd8:	0312      	lsls	r2, r2, #12
 8002dda:	4214      	tst	r4, r2
 8002ddc:	d007      	beq.n	8002dee <__aeabi_dsub+0x70a>
 8002dde:	08c8      	lsrs	r0, r1, #3
 8002de0:	4210      	tst	r0, r2
 8002de2:	d104      	bne.n	8002dee <__aeabi_dsub+0x70a>
 8002de4:	465d      	mov	r5, fp
 8002de6:	0004      	movs	r4, r0
 8002de8:	08fb      	lsrs	r3, r7, #3
 8002dea:	0749      	lsls	r1, r1, #29
 8002dec:	430b      	orrs	r3, r1
 8002dee:	0f5a      	lsrs	r2, r3, #29
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	0752      	lsls	r2, r2, #29
 8002df4:	08db      	lsrs	r3, r3, #3
 8002df6:	4313      	orrs	r3, r2
 8002df8:	e5fe      	b.n	80029f8 <__aeabi_dsub+0x314>
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	4a01      	ldr	r2, [pc, #4]	; (8002e04 <__aeabi_dsub+0x720>)
 8002dfe:	001c      	movs	r4, r3
 8002e00:	e513      	b.n	800282a <__aeabi_dsub+0x146>
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	000007ff 	.word	0x000007ff

08002e08 <__aeabi_dcmpun>:
 8002e08:	b570      	push	{r4, r5, r6, lr}
 8002e0a:	0005      	movs	r5, r0
 8002e0c:	480c      	ldr	r0, [pc, #48]	; (8002e40 <__aeabi_dcmpun+0x38>)
 8002e0e:	031c      	lsls	r4, r3, #12
 8002e10:	0016      	movs	r6, r2
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	030a      	lsls	r2, r1, #12
 8002e16:	0049      	lsls	r1, r1, #1
 8002e18:	0b12      	lsrs	r2, r2, #12
 8002e1a:	0d49      	lsrs	r1, r1, #21
 8002e1c:	0b24      	lsrs	r4, r4, #12
 8002e1e:	0d5b      	lsrs	r3, r3, #21
 8002e20:	4281      	cmp	r1, r0
 8002e22:	d008      	beq.n	8002e36 <__aeabi_dcmpun+0x2e>
 8002e24:	4a06      	ldr	r2, [pc, #24]	; (8002e40 <__aeabi_dcmpun+0x38>)
 8002e26:	2000      	movs	r0, #0
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d103      	bne.n	8002e34 <__aeabi_dcmpun+0x2c>
 8002e2c:	0020      	movs	r0, r4
 8002e2e:	4330      	orrs	r0, r6
 8002e30:	1e43      	subs	r3, r0, #1
 8002e32:	4198      	sbcs	r0, r3
 8002e34:	bd70      	pop	{r4, r5, r6, pc}
 8002e36:	2001      	movs	r0, #1
 8002e38:	432a      	orrs	r2, r5
 8002e3a:	d1fb      	bne.n	8002e34 <__aeabi_dcmpun+0x2c>
 8002e3c:	e7f2      	b.n	8002e24 <__aeabi_dcmpun+0x1c>
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	000007ff 	.word	0x000007ff

08002e44 <__aeabi_d2iz>:
 8002e44:	000a      	movs	r2, r1
 8002e46:	b530      	push	{r4, r5, lr}
 8002e48:	4c13      	ldr	r4, [pc, #76]	; (8002e98 <__aeabi_d2iz+0x54>)
 8002e4a:	0053      	lsls	r3, r2, #1
 8002e4c:	0309      	lsls	r1, r1, #12
 8002e4e:	0005      	movs	r5, r0
 8002e50:	0b09      	lsrs	r1, r1, #12
 8002e52:	2000      	movs	r0, #0
 8002e54:	0d5b      	lsrs	r3, r3, #21
 8002e56:	0fd2      	lsrs	r2, r2, #31
 8002e58:	42a3      	cmp	r3, r4
 8002e5a:	dd04      	ble.n	8002e66 <__aeabi_d2iz+0x22>
 8002e5c:	480f      	ldr	r0, [pc, #60]	; (8002e9c <__aeabi_d2iz+0x58>)
 8002e5e:	4283      	cmp	r3, r0
 8002e60:	dd02      	ble.n	8002e68 <__aeabi_d2iz+0x24>
 8002e62:	4b0f      	ldr	r3, [pc, #60]	; (8002ea0 <__aeabi_d2iz+0x5c>)
 8002e64:	18d0      	adds	r0, r2, r3
 8002e66:	bd30      	pop	{r4, r5, pc}
 8002e68:	2080      	movs	r0, #128	; 0x80
 8002e6a:	0340      	lsls	r0, r0, #13
 8002e6c:	4301      	orrs	r1, r0
 8002e6e:	480d      	ldr	r0, [pc, #52]	; (8002ea4 <__aeabi_d2iz+0x60>)
 8002e70:	1ac0      	subs	r0, r0, r3
 8002e72:	281f      	cmp	r0, #31
 8002e74:	dd08      	ble.n	8002e88 <__aeabi_d2iz+0x44>
 8002e76:	480c      	ldr	r0, [pc, #48]	; (8002ea8 <__aeabi_d2iz+0x64>)
 8002e78:	1ac3      	subs	r3, r0, r3
 8002e7a:	40d9      	lsrs	r1, r3
 8002e7c:	000b      	movs	r3, r1
 8002e7e:	4258      	negs	r0, r3
 8002e80:	2a00      	cmp	r2, #0
 8002e82:	d1f0      	bne.n	8002e66 <__aeabi_d2iz+0x22>
 8002e84:	0018      	movs	r0, r3
 8002e86:	e7ee      	b.n	8002e66 <__aeabi_d2iz+0x22>
 8002e88:	4c08      	ldr	r4, [pc, #32]	; (8002eac <__aeabi_d2iz+0x68>)
 8002e8a:	40c5      	lsrs	r5, r0
 8002e8c:	46a4      	mov	ip, r4
 8002e8e:	4463      	add	r3, ip
 8002e90:	4099      	lsls	r1, r3
 8002e92:	000b      	movs	r3, r1
 8002e94:	432b      	orrs	r3, r5
 8002e96:	e7f2      	b.n	8002e7e <__aeabi_d2iz+0x3a>
 8002e98:	000003fe 	.word	0x000003fe
 8002e9c:	0000041d 	.word	0x0000041d
 8002ea0:	7fffffff 	.word	0x7fffffff
 8002ea4:	00000433 	.word	0x00000433
 8002ea8:	00000413 	.word	0x00000413
 8002eac:	fffffbed 	.word	0xfffffbed

08002eb0 <__aeabi_i2d>:
 8002eb0:	b570      	push	{r4, r5, r6, lr}
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	d016      	beq.n	8002ee4 <__aeabi_i2d+0x34>
 8002eb6:	17c3      	asrs	r3, r0, #31
 8002eb8:	18c5      	adds	r5, r0, r3
 8002eba:	405d      	eors	r5, r3
 8002ebc:	0fc4      	lsrs	r4, r0, #31
 8002ebe:	0028      	movs	r0, r5
 8002ec0:	f000 f91c 	bl	80030fc <__clzsi2>
 8002ec4:	4a11      	ldr	r2, [pc, #68]	; (8002f0c <__aeabi_i2d+0x5c>)
 8002ec6:	1a12      	subs	r2, r2, r0
 8002ec8:	280a      	cmp	r0, #10
 8002eca:	dc16      	bgt.n	8002efa <__aeabi_i2d+0x4a>
 8002ecc:	0003      	movs	r3, r0
 8002ece:	002e      	movs	r6, r5
 8002ed0:	3315      	adds	r3, #21
 8002ed2:	409e      	lsls	r6, r3
 8002ed4:	230b      	movs	r3, #11
 8002ed6:	1a18      	subs	r0, r3, r0
 8002ed8:	40c5      	lsrs	r5, r0
 8002eda:	0552      	lsls	r2, r2, #21
 8002edc:	032d      	lsls	r5, r5, #12
 8002ede:	0b2d      	lsrs	r5, r5, #12
 8002ee0:	0d53      	lsrs	r3, r2, #21
 8002ee2:	e003      	b.n	8002eec <__aeabi_i2d+0x3c>
 8002ee4:	2400      	movs	r4, #0
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	2500      	movs	r5, #0
 8002eea:	2600      	movs	r6, #0
 8002eec:	051b      	lsls	r3, r3, #20
 8002eee:	432b      	orrs	r3, r5
 8002ef0:	07e4      	lsls	r4, r4, #31
 8002ef2:	4323      	orrs	r3, r4
 8002ef4:	0030      	movs	r0, r6
 8002ef6:	0019      	movs	r1, r3
 8002ef8:	bd70      	pop	{r4, r5, r6, pc}
 8002efa:	380b      	subs	r0, #11
 8002efc:	4085      	lsls	r5, r0
 8002efe:	0552      	lsls	r2, r2, #21
 8002f00:	032d      	lsls	r5, r5, #12
 8002f02:	2600      	movs	r6, #0
 8002f04:	0b2d      	lsrs	r5, r5, #12
 8002f06:	0d53      	lsrs	r3, r2, #21
 8002f08:	e7f0      	b.n	8002eec <__aeabi_i2d+0x3c>
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	0000041e 	.word	0x0000041e

08002f10 <__aeabi_ui2d>:
 8002f10:	b510      	push	{r4, lr}
 8002f12:	1e04      	subs	r4, r0, #0
 8002f14:	d010      	beq.n	8002f38 <__aeabi_ui2d+0x28>
 8002f16:	f000 f8f1 	bl	80030fc <__clzsi2>
 8002f1a:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <__aeabi_ui2d+0x48>)
 8002f1c:	1a1b      	subs	r3, r3, r0
 8002f1e:	280a      	cmp	r0, #10
 8002f20:	dc11      	bgt.n	8002f46 <__aeabi_ui2d+0x36>
 8002f22:	220b      	movs	r2, #11
 8002f24:	0021      	movs	r1, r4
 8002f26:	1a12      	subs	r2, r2, r0
 8002f28:	40d1      	lsrs	r1, r2
 8002f2a:	3015      	adds	r0, #21
 8002f2c:	030a      	lsls	r2, r1, #12
 8002f2e:	055b      	lsls	r3, r3, #21
 8002f30:	4084      	lsls	r4, r0
 8002f32:	0b12      	lsrs	r2, r2, #12
 8002f34:	0d5b      	lsrs	r3, r3, #21
 8002f36:	e001      	b.n	8002f3c <__aeabi_ui2d+0x2c>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	051b      	lsls	r3, r3, #20
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	0020      	movs	r0, r4
 8002f42:	0019      	movs	r1, r3
 8002f44:	bd10      	pop	{r4, pc}
 8002f46:	0022      	movs	r2, r4
 8002f48:	380b      	subs	r0, #11
 8002f4a:	4082      	lsls	r2, r0
 8002f4c:	055b      	lsls	r3, r3, #21
 8002f4e:	0312      	lsls	r2, r2, #12
 8002f50:	2400      	movs	r4, #0
 8002f52:	0b12      	lsrs	r2, r2, #12
 8002f54:	0d5b      	lsrs	r3, r3, #21
 8002f56:	e7f1      	b.n	8002f3c <__aeabi_ui2d+0x2c>
 8002f58:	0000041e 	.word	0x0000041e

08002f5c <__aeabi_f2d>:
 8002f5c:	b570      	push	{r4, r5, r6, lr}
 8002f5e:	0043      	lsls	r3, r0, #1
 8002f60:	0246      	lsls	r6, r0, #9
 8002f62:	0fc4      	lsrs	r4, r0, #31
 8002f64:	20fe      	movs	r0, #254	; 0xfe
 8002f66:	0e1b      	lsrs	r3, r3, #24
 8002f68:	1c59      	adds	r1, r3, #1
 8002f6a:	0a75      	lsrs	r5, r6, #9
 8002f6c:	4208      	tst	r0, r1
 8002f6e:	d00c      	beq.n	8002f8a <__aeabi_f2d+0x2e>
 8002f70:	22e0      	movs	r2, #224	; 0xe0
 8002f72:	0092      	lsls	r2, r2, #2
 8002f74:	4694      	mov	ip, r2
 8002f76:	076d      	lsls	r5, r5, #29
 8002f78:	0b36      	lsrs	r6, r6, #12
 8002f7a:	4463      	add	r3, ip
 8002f7c:	051b      	lsls	r3, r3, #20
 8002f7e:	4333      	orrs	r3, r6
 8002f80:	07e4      	lsls	r4, r4, #31
 8002f82:	4323      	orrs	r3, r4
 8002f84:	0028      	movs	r0, r5
 8002f86:	0019      	movs	r1, r3
 8002f88:	bd70      	pop	{r4, r5, r6, pc}
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d114      	bne.n	8002fb8 <__aeabi_f2d+0x5c>
 8002f8e:	2d00      	cmp	r5, #0
 8002f90:	d01b      	beq.n	8002fca <__aeabi_f2d+0x6e>
 8002f92:	0028      	movs	r0, r5
 8002f94:	f000 f8b2 	bl	80030fc <__clzsi2>
 8002f98:	280a      	cmp	r0, #10
 8002f9a:	dc1c      	bgt.n	8002fd6 <__aeabi_f2d+0x7a>
 8002f9c:	230b      	movs	r3, #11
 8002f9e:	002e      	movs	r6, r5
 8002fa0:	1a1b      	subs	r3, r3, r0
 8002fa2:	40de      	lsrs	r6, r3
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	3315      	adds	r3, #21
 8002fa8:	409d      	lsls	r5, r3
 8002faa:	4a0e      	ldr	r2, [pc, #56]	; (8002fe4 <__aeabi_f2d+0x88>)
 8002fac:	0336      	lsls	r6, r6, #12
 8002fae:	1a12      	subs	r2, r2, r0
 8002fb0:	0552      	lsls	r2, r2, #21
 8002fb2:	0b36      	lsrs	r6, r6, #12
 8002fb4:	0d53      	lsrs	r3, r2, #21
 8002fb6:	e7e1      	b.n	8002f7c <__aeabi_f2d+0x20>
 8002fb8:	2d00      	cmp	r5, #0
 8002fba:	d009      	beq.n	8002fd0 <__aeabi_f2d+0x74>
 8002fbc:	2280      	movs	r2, #128	; 0x80
 8002fbe:	0b36      	lsrs	r6, r6, #12
 8002fc0:	0312      	lsls	r2, r2, #12
 8002fc2:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <__aeabi_f2d+0x8c>)
 8002fc4:	076d      	lsls	r5, r5, #29
 8002fc6:	4316      	orrs	r6, r2
 8002fc8:	e7d8      	b.n	8002f7c <__aeabi_f2d+0x20>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	2600      	movs	r6, #0
 8002fce:	e7d5      	b.n	8002f7c <__aeabi_f2d+0x20>
 8002fd0:	2600      	movs	r6, #0
 8002fd2:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <__aeabi_f2d+0x8c>)
 8002fd4:	e7d2      	b.n	8002f7c <__aeabi_f2d+0x20>
 8002fd6:	0003      	movs	r3, r0
 8002fd8:	3b0b      	subs	r3, #11
 8002fda:	409d      	lsls	r5, r3
 8002fdc:	002e      	movs	r6, r5
 8002fde:	2500      	movs	r5, #0
 8002fe0:	e7e3      	b.n	8002faa <__aeabi_f2d+0x4e>
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	00000389 	.word	0x00000389
 8002fe8:	000007ff 	.word	0x000007ff

08002fec <__aeabi_d2f>:
 8002fec:	0002      	movs	r2, r0
 8002fee:	004b      	lsls	r3, r1, #1
 8002ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ff2:	0d5b      	lsrs	r3, r3, #21
 8002ff4:	030c      	lsls	r4, r1, #12
 8002ff6:	4e3d      	ldr	r6, [pc, #244]	; (80030ec <__aeabi_d2f+0x100>)
 8002ff8:	0a64      	lsrs	r4, r4, #9
 8002ffa:	0f40      	lsrs	r0, r0, #29
 8002ffc:	1c5f      	adds	r7, r3, #1
 8002ffe:	0fc9      	lsrs	r1, r1, #31
 8003000:	4304      	orrs	r4, r0
 8003002:	00d5      	lsls	r5, r2, #3
 8003004:	4237      	tst	r7, r6
 8003006:	d00a      	beq.n	800301e <__aeabi_d2f+0x32>
 8003008:	4839      	ldr	r0, [pc, #228]	; (80030f0 <__aeabi_d2f+0x104>)
 800300a:	181e      	adds	r6, r3, r0
 800300c:	2efe      	cmp	r6, #254	; 0xfe
 800300e:	dd16      	ble.n	800303e <__aeabi_d2f+0x52>
 8003010:	20ff      	movs	r0, #255	; 0xff
 8003012:	2400      	movs	r4, #0
 8003014:	05c0      	lsls	r0, r0, #23
 8003016:	4320      	orrs	r0, r4
 8003018:	07c9      	lsls	r1, r1, #31
 800301a:	4308      	orrs	r0, r1
 800301c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800301e:	2b00      	cmp	r3, #0
 8003020:	d106      	bne.n	8003030 <__aeabi_d2f+0x44>
 8003022:	432c      	orrs	r4, r5
 8003024:	d026      	beq.n	8003074 <__aeabi_d2f+0x88>
 8003026:	2205      	movs	r2, #5
 8003028:	0192      	lsls	r2, r2, #6
 800302a:	0a54      	lsrs	r4, r2, #9
 800302c:	b2d8      	uxtb	r0, r3
 800302e:	e7f1      	b.n	8003014 <__aeabi_d2f+0x28>
 8003030:	4325      	orrs	r5, r4
 8003032:	d0ed      	beq.n	8003010 <__aeabi_d2f+0x24>
 8003034:	2080      	movs	r0, #128	; 0x80
 8003036:	03c0      	lsls	r0, r0, #15
 8003038:	4304      	orrs	r4, r0
 800303a:	20ff      	movs	r0, #255	; 0xff
 800303c:	e7ea      	b.n	8003014 <__aeabi_d2f+0x28>
 800303e:	2e00      	cmp	r6, #0
 8003040:	dd1b      	ble.n	800307a <__aeabi_d2f+0x8e>
 8003042:	0192      	lsls	r2, r2, #6
 8003044:	1e53      	subs	r3, r2, #1
 8003046:	419a      	sbcs	r2, r3
 8003048:	00e4      	lsls	r4, r4, #3
 800304a:	0f6d      	lsrs	r5, r5, #29
 800304c:	4322      	orrs	r2, r4
 800304e:	432a      	orrs	r2, r5
 8003050:	0753      	lsls	r3, r2, #29
 8003052:	d048      	beq.n	80030e6 <__aeabi_d2f+0xfa>
 8003054:	230f      	movs	r3, #15
 8003056:	4013      	ands	r3, r2
 8003058:	2b04      	cmp	r3, #4
 800305a:	d000      	beq.n	800305e <__aeabi_d2f+0x72>
 800305c:	3204      	adds	r2, #4
 800305e:	2380      	movs	r3, #128	; 0x80
 8003060:	04db      	lsls	r3, r3, #19
 8003062:	4013      	ands	r3, r2
 8003064:	d03f      	beq.n	80030e6 <__aeabi_d2f+0xfa>
 8003066:	1c70      	adds	r0, r6, #1
 8003068:	2efe      	cmp	r6, #254	; 0xfe
 800306a:	d0d1      	beq.n	8003010 <__aeabi_d2f+0x24>
 800306c:	0192      	lsls	r2, r2, #6
 800306e:	0a54      	lsrs	r4, r2, #9
 8003070:	b2c0      	uxtb	r0, r0
 8003072:	e7cf      	b.n	8003014 <__aeabi_d2f+0x28>
 8003074:	2000      	movs	r0, #0
 8003076:	2400      	movs	r4, #0
 8003078:	e7cc      	b.n	8003014 <__aeabi_d2f+0x28>
 800307a:	0032      	movs	r2, r6
 800307c:	3217      	adds	r2, #23
 800307e:	db22      	blt.n	80030c6 <__aeabi_d2f+0xda>
 8003080:	2080      	movs	r0, #128	; 0x80
 8003082:	0400      	lsls	r0, r0, #16
 8003084:	4320      	orrs	r0, r4
 8003086:	241e      	movs	r4, #30
 8003088:	1ba4      	subs	r4, r4, r6
 800308a:	2c1f      	cmp	r4, #31
 800308c:	dd1d      	ble.n	80030ca <__aeabi_d2f+0xde>
 800308e:	2202      	movs	r2, #2
 8003090:	4252      	negs	r2, r2
 8003092:	1b96      	subs	r6, r2, r6
 8003094:	0002      	movs	r2, r0
 8003096:	40f2      	lsrs	r2, r6
 8003098:	0016      	movs	r6, r2
 800309a:	2c20      	cmp	r4, #32
 800309c:	d004      	beq.n	80030a8 <__aeabi_d2f+0xbc>
 800309e:	4a15      	ldr	r2, [pc, #84]	; (80030f4 <__aeabi_d2f+0x108>)
 80030a0:	4694      	mov	ip, r2
 80030a2:	4463      	add	r3, ip
 80030a4:	4098      	lsls	r0, r3
 80030a6:	4305      	orrs	r5, r0
 80030a8:	002a      	movs	r2, r5
 80030aa:	1e53      	subs	r3, r2, #1
 80030ac:	419a      	sbcs	r2, r3
 80030ae:	4332      	orrs	r2, r6
 80030b0:	2600      	movs	r6, #0
 80030b2:	0753      	lsls	r3, r2, #29
 80030b4:	d1ce      	bne.n	8003054 <__aeabi_d2f+0x68>
 80030b6:	2480      	movs	r4, #128	; 0x80
 80030b8:	0013      	movs	r3, r2
 80030ba:	04e4      	lsls	r4, r4, #19
 80030bc:	2001      	movs	r0, #1
 80030be:	4023      	ands	r3, r4
 80030c0:	4222      	tst	r2, r4
 80030c2:	d1d3      	bne.n	800306c <__aeabi_d2f+0x80>
 80030c4:	e7b0      	b.n	8003028 <__aeabi_d2f+0x3c>
 80030c6:	2300      	movs	r3, #0
 80030c8:	e7ad      	b.n	8003026 <__aeabi_d2f+0x3a>
 80030ca:	4a0b      	ldr	r2, [pc, #44]	; (80030f8 <__aeabi_d2f+0x10c>)
 80030cc:	4694      	mov	ip, r2
 80030ce:	002a      	movs	r2, r5
 80030d0:	40e2      	lsrs	r2, r4
 80030d2:	0014      	movs	r4, r2
 80030d4:	002a      	movs	r2, r5
 80030d6:	4463      	add	r3, ip
 80030d8:	409a      	lsls	r2, r3
 80030da:	4098      	lsls	r0, r3
 80030dc:	1e55      	subs	r5, r2, #1
 80030de:	41aa      	sbcs	r2, r5
 80030e0:	4302      	orrs	r2, r0
 80030e2:	4322      	orrs	r2, r4
 80030e4:	e7e4      	b.n	80030b0 <__aeabi_d2f+0xc4>
 80030e6:	0033      	movs	r3, r6
 80030e8:	e79e      	b.n	8003028 <__aeabi_d2f+0x3c>
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	000007fe 	.word	0x000007fe
 80030f0:	fffffc80 	.word	0xfffffc80
 80030f4:	fffffca2 	.word	0xfffffca2
 80030f8:	fffffc82 	.word	0xfffffc82

080030fc <__clzsi2>:
 80030fc:	211c      	movs	r1, #28
 80030fe:	2301      	movs	r3, #1
 8003100:	041b      	lsls	r3, r3, #16
 8003102:	4298      	cmp	r0, r3
 8003104:	d301      	bcc.n	800310a <__clzsi2+0xe>
 8003106:	0c00      	lsrs	r0, r0, #16
 8003108:	3910      	subs	r1, #16
 800310a:	0a1b      	lsrs	r3, r3, #8
 800310c:	4298      	cmp	r0, r3
 800310e:	d301      	bcc.n	8003114 <__clzsi2+0x18>
 8003110:	0a00      	lsrs	r0, r0, #8
 8003112:	3908      	subs	r1, #8
 8003114:	091b      	lsrs	r3, r3, #4
 8003116:	4298      	cmp	r0, r3
 8003118:	d301      	bcc.n	800311e <__clzsi2+0x22>
 800311a:	0900      	lsrs	r0, r0, #4
 800311c:	3904      	subs	r1, #4
 800311e:	a202      	add	r2, pc, #8	; (adr r2, 8003128 <__clzsi2+0x2c>)
 8003120:	5c10      	ldrb	r0, [r2, r0]
 8003122:	1840      	adds	r0, r0, r1
 8003124:	4770      	bx	lr
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	02020304 	.word	0x02020304
 800312c:	01010101 	.word	0x01010101
	...

08003138 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4a06      	ldr	r2, [pc, #24]	; (8003160 <vApplicationGetIdleTaskMemory+0x28>)
 8003148:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	4a05      	ldr	r2, [pc, #20]	; (8003164 <vApplicationGetIdleTaskMemory+0x2c>)
 800314e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2280      	movs	r2, #128	; 0x80
 8003154:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	46bd      	mov	sp, r7
 800315a:	b004      	add	sp, #16
 800315c:	bd80      	pop	{r7, pc}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	2000024c 	.word	0x2000024c
 8003164:	20000300 	.word	0x20000300

08003168 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003168:	b5b0      	push	{r4, r5, r7, lr}
 800316a:	b09e      	sub	sp, #120	; 0x78
 800316c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800316e:	f001 fa99 	bl	80046a4 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003172:	f000 f887 	bl	8003284 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003176:	f000 f8d1 	bl	800331c <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	uart_print_config(9600);
 800317a:	2396      	movs	r3, #150	; 0x96
 800317c:	019b      	lsls	r3, r3, #6
 800317e:	0018      	movs	r0, r3
 8003180:	f003 f9fc 	bl	800657c <uart_print_config>
	USART_INIT(USART3, PORTC, PORTC, 10, 11, 9600);
 8003184:	4a33      	ldr	r2, [pc, #204]	; (8003254 <main+0xec>)
 8003186:	4933      	ldr	r1, [pc, #204]	; (8003254 <main+0xec>)
 8003188:	4833      	ldr	r0, [pc, #204]	; (8003258 <main+0xf0>)
 800318a:	2396      	movs	r3, #150	; 0x96
 800318c:	019b      	lsls	r3, r3, #6
 800318e:	9301      	str	r3, [sp, #4]
 8003190:	230b      	movs	r3, #11
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	230a      	movs	r3, #10
 8003196:	f002 ffa3 	bl	80060e0 <USART_INIT>
	USART_IT_EN(USART3, 0, 1, 0);
 800319a:	482f      	ldr	r0, [pc, #188]	; (8003258 <main+0xf0>)
 800319c:	2300      	movs	r3, #0
 800319e:	2201      	movs	r2, #1
 80031a0:	2100      	movs	r1, #0
 80031a2:	f002 ffc1 	bl	8006128 <USART_IT_EN>
	print("Running\n");
 80031a6:	4b2d      	ldr	r3, [pc, #180]	; (800325c <main+0xf4>)
 80031a8:	0018      	movs	r0, r3
 80031aa:	f003 f9bf 	bl	800652c <print>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of myBinarySem01 */
	osSemaphoreDef(myBinarySem01);
 80031ae:	2168      	movs	r1, #104	; 0x68
 80031b0:	187b      	adds	r3, r7, r1
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	187b      	adds	r3, r7, r1
 80031b8:	2200      	movs	r2, #0
 80031ba:	605a      	str	r2, [r3, #4]
	myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 80031bc:	187b      	adds	r3, r7, r1
 80031be:	2101      	movs	r1, #1
 80031c0:	0018      	movs	r0, r3
 80031c2:	f005 fd83 	bl	8008ccc <osSemaphoreCreate>
 80031c6:	0002      	movs	r2, r0
 80031c8:	4b25      	ldr	r3, [pc, #148]	; (8003260 <main+0xf8>)
 80031ca:	601a      	str	r2, [r3, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of myQueue01 */
	osMessageQDef(myQueue01, 16, uint16_t);
 80031cc:	2158      	movs	r1, #88	; 0x58
 80031ce:	187b      	adds	r3, r7, r1
 80031d0:	4a24      	ldr	r2, [pc, #144]	; (8003264 <main+0xfc>)
 80031d2:	ca31      	ldmia	r2!, {r0, r4, r5}
 80031d4:	c331      	stmia	r3!, {r0, r4, r5}
 80031d6:	6812      	ldr	r2, [r2, #0]
 80031d8:	601a      	str	r2, [r3, #0]
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 80031da:	187b      	adds	r3, r7, r1
 80031dc:	2100      	movs	r1, #0
 80031de:	0018      	movs	r0, r3
 80031e0:	f005 fda7 	bl	8008d32 <osMessageCreate>
 80031e4:	0002      	movs	r2, r0
 80031e6:	4b20      	ldr	r3, [pc, #128]	; (8003268 <main+0x100>)
 80031e8:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80031ea:	213c      	movs	r1, #60	; 0x3c
 80031ec:	187b      	adds	r3, r7, r1
 80031ee:	4a1f      	ldr	r2, [pc, #124]	; (800326c <main+0x104>)
 80031f0:	ca31      	ldmia	r2!, {r0, r4, r5}
 80031f2:	c331      	stmia	r3!, {r0, r4, r5}
 80031f4:	ca31      	ldmia	r2!, {r0, r4, r5}
 80031f6:	c331      	stmia	r3!, {r0, r4, r5}
 80031f8:	6812      	ldr	r2, [r2, #0]
 80031fa:	601a      	str	r2, [r3, #0]
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80031fc:	187b      	adds	r3, r7, r1
 80031fe:	2100      	movs	r1, #0
 8003200:	0018      	movs	r0, r3
 8003202:	f005 fd02 	bl	8008c0a <osThreadCreate>
 8003206:	0002      	movs	r2, r0
 8003208:	4b19      	ldr	r3, [pc, #100]	; (8003270 <main+0x108>)
 800320a:	601a      	str	r2, [r3, #0]

	/* definition and creation of myTask02 */
	osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 800320c:	2120      	movs	r1, #32
 800320e:	187b      	adds	r3, r7, r1
 8003210:	4a18      	ldr	r2, [pc, #96]	; (8003274 <main+0x10c>)
 8003212:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003214:	c331      	stmia	r3!, {r0, r4, r5}
 8003216:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003218:	c331      	stmia	r3!, {r0, r4, r5}
 800321a:	6812      	ldr	r2, [r2, #0]
 800321c:	601a      	str	r2, [r3, #0]
	myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800321e:	187b      	adds	r3, r7, r1
 8003220:	2100      	movs	r1, #0
 8003222:	0018      	movs	r0, r3
 8003224:	f005 fcf1 	bl	8008c0a <osThreadCreate>
 8003228:	0002      	movs	r2, r0
 800322a:	4b13      	ldr	r3, [pc, #76]	; (8003278 <main+0x110>)
 800322c:	601a      	str	r2, [r3, #0]

	/* definition and creation of myTask03 */
	osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 256);
 800322e:	1d3b      	adds	r3, r7, #4
 8003230:	4a12      	ldr	r2, [pc, #72]	; (800327c <main+0x114>)
 8003232:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003234:	c313      	stmia	r3!, {r0, r1, r4}
 8003236:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003238:	c313      	stmia	r3!, {r0, r1, r4}
 800323a:	6812      	ldr	r2, [r2, #0]
 800323c:	601a      	str	r2, [r3, #0]
	myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 800323e:	1d3b      	adds	r3, r7, #4
 8003240:	2100      	movs	r1, #0
 8003242:	0018      	movs	r0, r3
 8003244:	f005 fce1 	bl	8008c0a <osThreadCreate>
 8003248:	0002      	movs	r2, r0
 800324a:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <main+0x118>)
 800324c:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 800324e:	f005 fcd4 	bl	8008bfa <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8003252:	e7fe      	b.n	8003252 <main+0xea>
 8003254:	48000800 	.word	0x48000800
 8003258:	40004800 	.word	0x40004800
 800325c:	0800eed4 	.word	0x0800eed4
 8003260:	200007a4 	.word	0x200007a4
 8003264:	0800eee0 	.word	0x0800eee0
 8003268:	200007a0 	.word	0x200007a0
 800326c:	0800eef0 	.word	0x0800eef0
 8003270:	20000794 	.word	0x20000794
 8003274:	0800ef0c 	.word	0x0800ef0c
 8003278:	20000798 	.word	0x20000798
 800327c:	0800ef28 	.word	0x0800ef28
 8003280:	2000079c 	.word	0x2000079c

08003284 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003284:	b590      	push	{r4, r7, lr}
 8003286:	b091      	sub	sp, #68	; 0x44
 8003288:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800328a:	2410      	movs	r4, #16
 800328c:	193b      	adds	r3, r7, r4
 800328e:	0018      	movs	r0, r3
 8003290:	2330      	movs	r3, #48	; 0x30
 8003292:	001a      	movs	r2, r3
 8003294:	2100      	movs	r1, #0
 8003296:	f007 fb05 	bl	800a8a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800329a:	003b      	movs	r3, r7
 800329c:	0018      	movs	r0, r3
 800329e:	2310      	movs	r3, #16
 80032a0:	001a      	movs	r2, r3
 80032a2:	2100      	movs	r1, #0
 80032a4:	f007 fafe 	bl	800a8a4 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80032a8:	0021      	movs	r1, r4
 80032aa:	187b      	adds	r3, r7, r1
 80032ac:	2202      	movs	r2, #2
 80032ae:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032b0:	187b      	adds	r3, r7, r1
 80032b2:	2201      	movs	r2, #1
 80032b4:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80032b6:	187b      	adds	r3, r7, r1
 80032b8:	2210      	movs	r2, #16
 80032ba:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032bc:	187b      	adds	r3, r7, r1
 80032be:	2202      	movs	r2, #2
 80032c0:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80032c2:	187b      	adds	r3, r7, r1
 80032c4:	2280      	movs	r2, #128	; 0x80
 80032c6:	0212      	lsls	r2, r2, #8
 80032c8:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80032ca:	187b      	adds	r3, r7, r1
 80032cc:	2280      	movs	r2, #128	; 0x80
 80032ce:	0352      	lsls	r2, r2, #13
 80032d0:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80032d2:	187b      	adds	r3, r7, r1
 80032d4:	2200      	movs	r2, #0
 80032d6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80032d8:	187b      	adds	r3, r7, r1
 80032da:	0018      	movs	r0, r3
 80032dc:	f001 fafa 	bl	80048d4 <HAL_RCC_OscConfig>
 80032e0:	1e03      	subs	r3, r0, #0
 80032e2:	d001      	beq.n	80032e8 <SystemClock_Config+0x64>
		Error_Handler();
 80032e4:	f001 f8ac 	bl	8004440 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80032e8:	003b      	movs	r3, r7
 80032ea:	2207      	movs	r2, #7
 80032ec:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032ee:	003b      	movs	r3, r7
 80032f0:	2202      	movs	r2, #2
 80032f2:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032f4:	003b      	movs	r3, r7
 80032f6:	2200      	movs	r2, #0
 80032f8:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80032fa:	003b      	movs	r3, r7
 80032fc:	2200      	movs	r2, #0
 80032fe:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8003300:	003b      	movs	r3, r7
 8003302:	2101      	movs	r1, #1
 8003304:	0018      	movs	r0, r3
 8003306:	f001 fe03 	bl	8004f10 <HAL_RCC_ClockConfig>
 800330a:	1e03      	subs	r3, r0, #0
 800330c:	d001      	beq.n	8003312 <SystemClock_Config+0x8e>
		Error_Handler();
 800330e:	f001 f897 	bl	8004440 <Error_Handler>
	}
}
 8003312:	46c0      	nop			; (mov r8, r8)
 8003314:	46bd      	mov	sp, r7
 8003316:	b011      	add	sp, #68	; 0x44
 8003318:	bd90      	pop	{r4, r7, pc}
	...

0800331c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003322:	4b17      	ldr	r3, [pc, #92]	; (8003380 <MX_GPIO_Init+0x64>)
 8003324:	695a      	ldr	r2, [r3, #20]
 8003326:	4b16      	ldr	r3, [pc, #88]	; (8003380 <MX_GPIO_Init+0x64>)
 8003328:	2180      	movs	r1, #128	; 0x80
 800332a:	0309      	lsls	r1, r1, #12
 800332c:	430a      	orrs	r2, r1
 800332e:	615a      	str	r2, [r3, #20]
 8003330:	4b13      	ldr	r3, [pc, #76]	; (8003380 <MX_GPIO_Init+0x64>)
 8003332:	695a      	ldr	r2, [r3, #20]
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	031b      	lsls	r3, r3, #12
 8003338:	4013      	ands	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800333e:	4b10      	ldr	r3, [pc, #64]	; (8003380 <MX_GPIO_Init+0x64>)
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <MX_GPIO_Init+0x64>)
 8003344:	2180      	movs	r1, #128	; 0x80
 8003346:	03c9      	lsls	r1, r1, #15
 8003348:	430a      	orrs	r2, r1
 800334a:	615a      	str	r2, [r3, #20]
 800334c:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <MX_GPIO_Init+0x64>)
 800334e:	695a      	ldr	r2, [r3, #20]
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	03db      	lsls	r3, r3, #15
 8003354:	4013      	ands	r3, r2
 8003356:	60bb      	str	r3, [r7, #8]
 8003358:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800335a:	4b09      	ldr	r3, [pc, #36]	; (8003380 <MX_GPIO_Init+0x64>)
 800335c:	695a      	ldr	r2, [r3, #20]
 800335e:	4b08      	ldr	r3, [pc, #32]	; (8003380 <MX_GPIO_Init+0x64>)
 8003360:	2180      	movs	r1, #128	; 0x80
 8003362:	0289      	lsls	r1, r1, #10
 8003364:	430a      	orrs	r2, r1
 8003366:	615a      	str	r2, [r3, #20]
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <MX_GPIO_Init+0x64>)
 800336a:	695a      	ldr	r2, [r3, #20]
 800336c:	2380      	movs	r3, #128	; 0x80
 800336e:	029b      	lsls	r3, r3, #10
 8003370:	4013      	ands	r3, r2
 8003372:	607b      	str	r3, [r7, #4]
 8003374:	687b      	ldr	r3, [r7, #4]

}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	46bd      	mov	sp, r7
 800337a:	b004      	add	sp, #16
 800337c:	bd80      	pop	{r7, pc}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	40021000 	.word	0x40021000

08003384 <gpio_settingfn>:

/* USER CODE BEGIN 4 */

void gpio_settingfn(void) {
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af02      	add	r7, sp, #8
	gpio_config(PORTA, 11, INPUT_MODE, LOW_SPEED, EN_PD, PHPL);	// Interrupt pin PA11
 800338a:	2390      	movs	r3, #144	; 0x90
 800338c:	05d8      	lsls	r0, r3, #23
 800338e:	2300      	movs	r3, #0
 8003390:	9301      	str	r3, [sp, #4]
 8003392:	2302      	movs	r3, #2
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	2300      	movs	r3, #0
 8003398:	2200      	movs	r2, #0
 800339a:	210b      	movs	r1, #11
 800339c:	f002 f9de 	bl	800575c <gpio_config>
	gpio_config(PORTA, 12, INPUT_MODE, LOW_SPEED, EN_PD, PHPL);	// Interrupt pin PA12
 80033a0:	2390      	movs	r3, #144	; 0x90
 80033a2:	05d8      	lsls	r0, r3, #23
 80033a4:	2300      	movs	r3, #0
 80033a6:	9301      	str	r3, [sp, #4]
 80033a8:	2302      	movs	r3, #2
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	2300      	movs	r3, #0
 80033ae:	2200      	movs	r2, #0
 80033b0:	210c      	movs	r1, #12
 80033b2:	f002 f9d3 	bl	800575c <gpio_config>

	gpio_IT_config(PORTA, 11, RISING_EDGE);
 80033b6:	2390      	movs	r3, #144	; 0x90
 80033b8:	05db      	lsls	r3, r3, #23
 80033ba:	2200      	movs	r2, #0
 80033bc:	210b      	movs	r1, #11
 80033be:	0018      	movs	r0, r3
 80033c0:	f002 fad6 	bl	8005970 <gpio_IT_config>
	gpio_IT_config(PORTA, 12, RISING_EDGE);
 80033c4:	2390      	movs	r3, #144	; 0x90
 80033c6:	05db      	lsls	r3, r3, #23
 80033c8:	2200      	movs	r2, #0
 80033ca:	210c      	movs	r1, #12
 80033cc:	0018      	movs	r0, r3
 80033ce:	f002 facf 	bl	8005970 <gpio_IT_config>

	gpio_IT_EN(11, EXTI4_15_IRQn);
 80033d2:	2107      	movs	r1, #7
 80033d4:	200b      	movs	r0, #11
 80033d6:	f002 fc77 	bl	8005cc8 <gpio_IT_EN>
	gpio_IT_EN(12, EXTI4_15_IRQn);
 80033da:	2107      	movs	r1, #7
 80033dc:	200c      	movs	r0, #12
 80033de:	f002 fc73 	bl	8005cc8 <gpio_IT_EN>

	gpio_config(ADC14_PORT, ADC14_PIN, ANALOG_MODE, LOW_SPEED, DI_PUPD, PHPL);// Analog Pin
 80033e2:	4816      	ldr	r0, [pc, #88]	; (800343c <gpio_settingfn+0xb8>)
 80033e4:	2300      	movs	r3, #0
 80033e6:	9301      	str	r3, [sp, #4]
 80033e8:	2300      	movs	r3, #0
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	2300      	movs	r3, #0
 80033ee:	2203      	movs	r2, #3
 80033f0:	2104      	movs	r1, #4
 80033f2:	f002 f9b3 	bl	800575c <gpio_config>

	gpio_config(SCL_PORT, SCL_PIN, ALT_MODE, HIGH_SPEED, EN_PU, OD);// I2C pins
 80033f6:	4812      	ldr	r0, [pc, #72]	; (8003440 <gpio_settingfn+0xbc>)
 80033f8:	2301      	movs	r3, #1
 80033fa:	9301      	str	r3, [sp, #4]
 80033fc:	2301      	movs	r3, #1
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	2302      	movs	r3, #2
 8003402:	2202      	movs	r2, #2
 8003404:	2108      	movs	r1, #8
 8003406:	f002 f9a9 	bl	800575c <gpio_config>
	gpio_config(SDA_PORT, SDA_PIN, ALT_MODE, HIGH_SPEED, EN_PU, OD);
 800340a:	480d      	ldr	r0, [pc, #52]	; (8003440 <gpio_settingfn+0xbc>)
 800340c:	2301      	movs	r3, #1
 800340e:	9301      	str	r3, [sp, #4]
 8003410:	2301      	movs	r3, #1
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	2302      	movs	r3, #2
 8003416:	2202      	movs	r2, #2
 8003418:	2109      	movs	r1, #9
 800341a:	f002 f99f 	bl	800575c <gpio_config>

	gpio_altfn(SCL_PORT, SCL_PIN, I2C1_SCL_PB8);
 800341e:	4b08      	ldr	r3, [pc, #32]	; (8003440 <gpio_settingfn+0xbc>)
 8003420:	2201      	movs	r2, #1
 8003422:	2108      	movs	r1, #8
 8003424:	0018      	movs	r0, r3
 8003426:	f002 fa60 	bl	80058ea <gpio_altfn>
	gpio_altfn(SDA_PORT, SDA_PIN, I2C1_SDA_PB9);
 800342a:	4b05      	ldr	r3, [pc, #20]	; (8003440 <gpio_settingfn+0xbc>)
 800342c:	2201      	movs	r2, #1
 800342e:	2109      	movs	r1, #9
 8003430:	0018      	movs	r0, r3
 8003432:	f002 fa5a 	bl	80058ea <gpio_altfn>
}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	48000800 	.word	0x48000800
 8003440:	48000400 	.word	0x48000400

08003444 <gpio11_callback>:

void gpio11_callback() {
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
	print("Gpio 11 IT\n");
 8003448:	4b03      	ldr	r3, [pc, #12]	; (8003458 <gpio11_callback+0x14>)
 800344a:	0018      	movs	r0, r3
 800344c:	f003 f86e 	bl	800652c <print>
}
 8003450:	46c0      	nop			; (mov r8, r8)
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	0800ef44 	.word	0x0800ef44

0800345c <gpio12_callback>:
void gpio12_callback() {
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
	print("Gpio 12 IT\n");
 8003460:	4b03      	ldr	r3, [pc, #12]	; (8003470 <gpio12_callback+0x14>)
 8003462:	0018      	movs	r0, r3
 8003464:	f003 f862 	bl	800652c <print>
}
 8003468:	46c0      	nop			; (mov r8, r8)
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	0800ef50 	.word	0x0800ef50

08003474 <HMS_bgdisplay>:

void HMS_bgdisplay(void) {
 8003474:	b590      	push	{r4, r7, lr}
 8003476:	b08b      	sub	sp, #44	; 0x2c
 8003478:	af08      	add	r7, sp, #32

	//===================== | Border |===============================//
	for (uint16_t i = 5; i > 0; i--) {
 800347a:	1dbb      	adds	r3, r7, #6
 800347c:	2205      	movs	r2, #5
 800347e:	801a      	strh	r2, [r3, #0]
 8003480:	e01e      	b.n	80034c0 <HMS_bgdisplay+0x4c>
		LCD_DrawRect(i, i, TFTWIDTH - 2 * i, TFTHEIGHT - 2 * i, WHITE);
 8003482:	1dbb      	adds	r3, r7, #6
 8003484:	2000      	movs	r0, #0
 8003486:	5e18      	ldrsh	r0, [r3, r0]
 8003488:	1dbb      	adds	r3, r7, #6
 800348a:	2100      	movs	r1, #0
 800348c:	5e59      	ldrsh	r1, [r3, r1]
 800348e:	1dbb      	adds	r3, r7, #6
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	2278      	movs	r2, #120	; 0x78
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	b29b      	uxth	r3, r3
 8003498:	18db      	adds	r3, r3, r3
 800349a:	b29b      	uxth	r3, r3
 800349c:	b21a      	sxth	r2, r3
 800349e:	1dbb      	adds	r3, r7, #6
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	24a0      	movs	r4, #160	; 0xa0
 80034a4:	1ae3      	subs	r3, r4, r3
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	18db      	adds	r3, r3, r3
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	b21b      	sxth	r3, r3
 80034ae:	4c5b      	ldr	r4, [pc, #364]	; (800361c <HMS_bgdisplay+0x1a8>)
 80034b0:	9400      	str	r4, [sp, #0]
 80034b2:	f003 ff7c 	bl	80073ae <LCD_DrawRect>
	for (uint16_t i = 5; i > 0; i--) {
 80034b6:	1dbb      	adds	r3, r7, #6
 80034b8:	881a      	ldrh	r2, [r3, #0]
 80034ba:	1dbb      	adds	r3, r7, #6
 80034bc:	3a01      	subs	r2, #1
 80034be:	801a      	strh	r2, [r3, #0]
 80034c0:	1dbb      	adds	r3, r7, #6
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1dc      	bne.n	8003482 <HMS_bgdisplay+0xe>
	}

	LCD_DrawHBorder(0, TFTHEIGHT / 3, TFTWIDTH, WHITE, 5);
 80034c8:	4a54      	ldr	r2, [pc, #336]	; (800361c <HMS_bgdisplay+0x1a8>)
 80034ca:	2305      	movs	r3, #5
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	0013      	movs	r3, r2
 80034d0:	22f0      	movs	r2, #240	; 0xf0
 80034d2:	216a      	movs	r1, #106	; 0x6a
 80034d4:	2000      	movs	r0, #0
 80034d6:	f003 facd 	bl	8006a74 <LCD_DrawHBorder>
	LCD_DrawHBorder(0, 2 * (TFTHEIGHT / 3), TFTWIDTH, WHITE, 5);
 80034da:	4a50      	ldr	r2, [pc, #320]	; (800361c <HMS_bgdisplay+0x1a8>)
 80034dc:	2305      	movs	r3, #5
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	0013      	movs	r3, r2
 80034e2:	22f0      	movs	r2, #240	; 0xf0
 80034e4:	21d4      	movs	r1, #212	; 0xd4
 80034e6:	2000      	movs	r0, #0
 80034e8:	f003 fac4 	bl	8006a74 <LCD_DrawHBorder>
	//===============================================================//

	//===================== | Box 1 |===============================//

	LCD_DrawButton1(" ", 20, 20, TFTWIDTH - 40, (TFTHEIGHT / 3) - 40, 10, CYAN,
 80034ec:	484c      	ldr	r0, [pc, #304]	; (8003620 <HMS_bgdisplay+0x1ac>)
 80034ee:	2302      	movs	r3, #2
 80034f0:	9307      	str	r3, [sp, #28]
 80034f2:	2302      	movs	r3, #2
 80034f4:	9306      	str	r3, [sp, #24]
 80034f6:	2302      	movs	r3, #2
 80034f8:	9305      	str	r3, [sp, #20]
 80034fa:	2300      	movs	r3, #0
 80034fc:	9304      	str	r3, [sp, #16]
 80034fe:	4b47      	ldr	r3, [pc, #284]	; (800361c <HMS_bgdisplay+0x1a8>)
 8003500:	9303      	str	r3, [sp, #12]
 8003502:	4b48      	ldr	r3, [pc, #288]	; (8003624 <HMS_bgdisplay+0x1b0>)
 8003504:	9302      	str	r3, [sp, #8]
 8003506:	230a      	movs	r3, #10
 8003508:	9301      	str	r3, [sp, #4]
 800350a:	2342      	movs	r3, #66	; 0x42
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	23c8      	movs	r3, #200	; 0xc8
 8003510:	2214      	movs	r2, #20
 8003512:	2114      	movs	r1, #20
 8003514:	f003 fa02 	bl	800691c <LCD_DrawButton1>
	WHITE, 0, 2, 2, 2);

	LCD_SetTextSize(2);
 8003518:	2002      	movs	r0, #2
 800351a:	f005 f8e5 	bl	80086e8 <LCD_SetTextSize>
	LCD_SetTextColor(WHITE, CYAN);
 800351e:	4a41      	ldr	r2, [pc, #260]	; (8003624 <HMS_bgdisplay+0x1b0>)
 8003520:	4b3e      	ldr	r3, [pc, #248]	; (800361c <HMS_bgdisplay+0x1a8>)
 8003522:	0011      	movs	r1, r2
 8003524:	0018      	movs	r0, r3
 8003526:	f005 f8f5 	bl	8008714 <LCD_SetTextColor>
	LCD_SetCursor(((TFTWIDTH - 20) / 3) + 15, 25);
 800352a:	2119      	movs	r1, #25
 800352c:	2058      	movs	r0, #88	; 0x58
 800352e:	f005 f8c5 	bl	80086bc <LCD_SetCursor>
	LCD_Printf("Health");
 8003532:	4b3d      	ldr	r3, [pc, #244]	; (8003628 <HMS_bgdisplay+0x1b4>)
 8003534:	0018      	movs	r0, r3
 8003536:	f004 ffc5 	bl	80084c4 <LCD_Printf>
	LCD_SetCursor(((TFTWIDTH - 20) / 3) - 10, 45);
 800353a:	212d      	movs	r1, #45	; 0x2d
 800353c:	203f      	movs	r0, #63	; 0x3f
 800353e:	f005 f8bd 	bl	80086bc <LCD_SetCursor>
	LCD_Printf("Monitoring");
 8003542:	4b3a      	ldr	r3, [pc, #232]	; (800362c <HMS_bgdisplay+0x1b8>)
 8003544:	0018      	movs	r0, r3
 8003546:	f004 ffbd 	bl	80084c4 <LCD_Printf>
	LCD_SetCursor(((TFTWIDTH - 20) / 3) + 15, 65);
 800354a:	2141      	movs	r1, #65	; 0x41
 800354c:	2058      	movs	r0, #88	; 0x58
 800354e:	f005 f8b5 	bl	80086bc <LCD_SetCursor>
	LCD_Printf("System");
 8003552:	4b37      	ldr	r3, [pc, #220]	; (8003630 <HMS_bgdisplay+0x1bc>)
 8003554:	0018      	movs	r0, r3
 8003556:	f004 ffb5 	bl	80084c4 <LCD_Printf>

	//===============================================================//

	//===================== | Box 2 |===============================//

	LCD_FillRoundRect(15, (TFTHEIGHT / 3) + 15, TFTWIDTH - 35, 25, 5, RED);
 800355a:	23f8      	movs	r3, #248	; 0xf8
 800355c:	021b      	lsls	r3, r3, #8
 800355e:	9301      	str	r3, [sp, #4]
 8003560:	2305      	movs	r3, #5
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	2319      	movs	r3, #25
 8003566:	22cd      	movs	r2, #205	; 0xcd
 8003568:	2179      	movs	r1, #121	; 0x79
 800356a:	200f      	movs	r0, #15
 800356c:	f004 fd74 	bl	8008058 <LCD_FillRoundRect>
	LCD_SetTextColor(WHITE, RED);
 8003570:	23f8      	movs	r3, #248	; 0xf8
 8003572:	021b      	lsls	r3, r3, #8
 8003574:	4a29      	ldr	r2, [pc, #164]	; (800361c <HMS_bgdisplay+0x1a8>)
 8003576:	0019      	movs	r1, r3
 8003578:	0010      	movs	r0, r2
 800357a:	f005 f8cb 	bl	8008714 <LCD_SetTextColor>
	LCD_SetCursor(20, (TFTHEIGHT / 3) + 20);
 800357e:	217e      	movs	r1, #126	; 0x7e
 8003580:	2014      	movs	r0, #20
 8003582:	f005 f89b 	bl	80086bc <LCD_SetCursor>
	LCD_SetTextSize(2);
 8003586:	2002      	movs	r0, #2
 8003588:	f005 f8ae 	bl	80086e8 <LCD_SetTextSize>
	LCD_Printf("H.Rate: ");
 800358c:	4b29      	ldr	r3, [pc, #164]	; (8003634 <HMS_bgdisplay+0x1c0>)
 800358e:	0018      	movs	r0, r3
 8003590:	f004 ff98 	bl	80084c4 <LCD_Printf>

	LCD_FillRoundRect(15, (TFTHEIGHT / 3) + 45, TFTWIDTH - 35, 25, 5, GREEN);
 8003594:	23fc      	movs	r3, #252	; 0xfc
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	9301      	str	r3, [sp, #4]
 800359a:	2305      	movs	r3, #5
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	2319      	movs	r3, #25
 80035a0:	22cd      	movs	r2, #205	; 0xcd
 80035a2:	2197      	movs	r1, #151	; 0x97
 80035a4:	200f      	movs	r0, #15
 80035a6:	f004 fd57 	bl	8008058 <LCD_FillRoundRect>
	LCD_SetTextColor(WHITE, GREEN);
 80035aa:	23fc      	movs	r3, #252	; 0xfc
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4a1b      	ldr	r2, [pc, #108]	; (800361c <HMS_bgdisplay+0x1a8>)
 80035b0:	0019      	movs	r1, r3
 80035b2:	0010      	movs	r0, r2
 80035b4:	f005 f8ae 	bl	8008714 <LCD_SetTextColor>
	LCD_SetCursor(20, (TFTHEIGHT / 3) + 50);
 80035b8:	219c      	movs	r1, #156	; 0x9c
 80035ba:	2014      	movs	r0, #20
 80035bc:	f005 f87e 	bl	80086bc <LCD_SetCursor>
	LCD_SetTextSize(2);
 80035c0:	2002      	movs	r0, #2
 80035c2:	f005 f891 	bl	80086e8 <LCD_SetTextSize>
	LCD_Printf("SpO2: ");
 80035c6:	4b1c      	ldr	r3, [pc, #112]	; (8003638 <HMS_bgdisplay+0x1c4>)
 80035c8:	0018      	movs	r0, r3
 80035ca:	f004 ff7b 	bl	80084c4 <LCD_Printf>

	LCD_FillRoundRect(15, (TFTHEIGHT / 3) + 75, TFTWIDTH - 35, 25, 5, BLUE);
 80035ce:	231f      	movs	r3, #31
 80035d0:	9301      	str	r3, [sp, #4]
 80035d2:	2305      	movs	r3, #5
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	2319      	movs	r3, #25
 80035d8:	22cd      	movs	r2, #205	; 0xcd
 80035da:	21b5      	movs	r1, #181	; 0xb5
 80035dc:	200f      	movs	r0, #15
 80035de:	f004 fd3b 	bl	8008058 <LCD_FillRoundRect>
	LCD_SetTextColor(WHITE, BLUE);
 80035e2:	4b0e      	ldr	r3, [pc, #56]	; (800361c <HMS_bgdisplay+0x1a8>)
 80035e4:	211f      	movs	r1, #31
 80035e6:	0018      	movs	r0, r3
 80035e8:	f005 f894 	bl	8008714 <LCD_SetTextColor>
	LCD_SetCursor(20, (TFTHEIGHT / 3) + 80);
 80035ec:	21ba      	movs	r1, #186	; 0xba
 80035ee:	2014      	movs	r0, #20
 80035f0:	f005 f864 	bl	80086bc <LCD_SetCursor>
	LCD_SetTextSize(2);
 80035f4:	2002      	movs	r0, #2
 80035f6:	f005 f877 	bl	80086e8 <LCD_SetTextSize>
	LCD_Printf("Temp: ");
 80035fa:	4b10      	ldr	r3, [pc, #64]	; (800363c <HMS_bgdisplay+0x1c8>)
 80035fc:	0018      	movs	r0, r3
 80035fe:	f004 ff61 	bl	80084c4 <LCD_Printf>

	//===============================================================//

	//========================= | Box 3 |============================//

	LCD_FillRect(20, (2 * (TFTHEIGHT / 3)) + 20, TFTWIDTH - 35, 70, WHITE);
 8003602:	4b06      	ldr	r3, [pc, #24]	; (800361c <HMS_bgdisplay+0x1a8>)
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	2346      	movs	r3, #70	; 0x46
 8003608:	22cd      	movs	r2, #205	; 0xcd
 800360a:	21e8      	movs	r1, #232	; 0xe8
 800360c:	2014      	movs	r0, #20
 800360e:	f004 fc47 	bl	8007ea0 <LCD_FillRect>

	//===============================================================//

}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	46bd      	mov	sp, r7
 8003616:	b003      	add	sp, #12
 8003618:	bd90      	pop	{r4, r7, pc}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	0000ffff 	.word	0x0000ffff
 8003620:	0800ef5c 	.word	0x0800ef5c
 8003624:	000007ff 	.word	0x000007ff
 8003628:	0800ef60 	.word	0x0800ef60
 800362c:	0800ef68 	.word	0x0800ef68
 8003630:	0800ef74 	.word	0x0800ef74
 8003634:	0800ef7c 	.word	0x0800ef7c
 8003638:	0800ef88 	.word	0x0800ef88
 800363c:	0800ef90 	.word	0x0800ef90

08003640 <temp2color>:

uint16_t temp2color(int degree, int lo, int hi) {
 8003640:	b5b0      	push	{r4, r5, r7, lr}
 8003642:	b088      	sub	sp, #32
 8003644:	af02      	add	r7, sp, #8
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
	uint8_t r, g, b;
	r = map(degree, lo, hi, 255, 0);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	b298      	uxth	r0, r3
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	b299      	uxth	r1, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	b29a      	uxth	r2, r3
 8003658:	2300      	movs	r3, #0
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	23ff      	movs	r3, #255	; 0xff
 800365e:	f002 f803 	bl	8005668 <map>
 8003662:	0003      	movs	r3, r0
 8003664:	001a      	movs	r2, r3
 8003666:	2417      	movs	r4, #23
 8003668:	193b      	adds	r3, r7, r4
 800366a:	701a      	strb	r2, [r3, #0]
	g = 0;
 800366c:	2516      	movs	r5, #22
 800366e:	197b      	adds	r3, r7, r5
 8003670:	2200      	movs	r2, #0
 8003672:	701a      	strb	r2, [r3, #0]
	b = map(degree, lo, hi, 0, 255);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	b298      	uxth	r0, r3
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	b299      	uxth	r1, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	b29a      	uxth	r2, r3
 8003680:	23ff      	movs	r3, #255	; 0xff
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	2300      	movs	r3, #0
 8003686:	f001 ffef 	bl	8005668 <map>
 800368a:	0003      	movs	r3, r0
 800368c:	001a      	movs	r2, r3
 800368e:	2015      	movs	r0, #21
 8003690:	183b      	adds	r3, r7, r0
 8003692:	701a      	strb	r2, [r3, #0]
	return LCD_Color565(r, g, b);
 8003694:	193b      	adds	r3, r7, r4
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	021b      	lsls	r3, r3, #8
 800369a:	b21b      	sxth	r3, r3
 800369c:	0adb      	lsrs	r3, r3, #11
 800369e:	02db      	lsls	r3, r3, #11
 80036a0:	b21a      	sxth	r2, r3
 80036a2:	197b      	adds	r3, r7, r5
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	b219      	sxth	r1, r3
 80036aa:	23fc      	movs	r3, #252	; 0xfc
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	400b      	ands	r3, r1
 80036b0:	b21b      	sxth	r3, r3
 80036b2:	4313      	orrs	r3, r2
 80036b4:	b21a      	sxth	r2, r3
 80036b6:	183b      	adds	r3, r7, r0
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	08db      	lsrs	r3, r3, #3
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	b21b      	sxth	r3, r3
 80036c0:	4313      	orrs	r3, r2
 80036c2:	b21b      	sxth	r3, r3
 80036c4:	b29b      	uxth	r3, r3
}
 80036c6:	0018      	movs	r0, r3
 80036c8:	46bd      	mov	sp, r7
 80036ca:	b006      	add	sp, #24
 80036cc:	bdb0      	pop	{r4, r5, r7, pc}

080036ce <colorgradient>:

void colorgradient(int x, int y, int w, int h, int percent) {
 80036ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036d0:	b087      	sub	sp, #28
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	60f8      	str	r0, [r7, #12]
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	607a      	str	r2, [r7, #4]
 80036da:	603b      	str	r3, [r7, #0]
//	LCD_DrawRect(x, y, w, h, BLACK);
	for (int row = 1; row < h - 1; row++) {
 80036dc:	2301      	movs	r3, #1
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	e01f      	b.n	8003722 <colorgradient+0x54>
		LCD_DrawFastHLine(x + 1, y + row, w - 2, temp2color(row, 0, h));
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	3301      	adds	r3, #1
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	b21c      	sxth	r4, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	18d3      	adds	r3, r2, r3
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	b21d      	sxth	r5, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	3b02      	subs	r3, #2
 8003700:	b29b      	uxth	r3, r3
 8003702:	b21e      	sxth	r6, r3
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2100      	movs	r1, #0
 800370a:	0018      	movs	r0, r3
 800370c:	f7ff ff98 	bl	8003640 <temp2color>
 8003710:	0003      	movs	r3, r0
 8003712:	0032      	movs	r2, r6
 8003714:	0029      	movs	r1, r5
 8003716:	0020      	movs	r0, r4
 8003718:	f003 fd82 	bl	8007220 <LCD_DrawFastHLine>
	for (int row = 1; row < h - 1; row++) {
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	3301      	adds	r3, #1
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	3b01      	subs	r3, #1
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	429a      	cmp	r2, r3
 800372a:	dbda      	blt.n	80036e2 <colorgradient+0x14>
	}
}
 800372c:	46c0      	nop			; (mov r8, r8)
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	46bd      	mov	sp, r7
 8003732:	b007      	add	sp, #28
 8003734:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003738 <readECG>:
		graph_x += graphRefreshRate_peak;
	}

}

uint16_t readECG() {
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
	uint16_t adc_value = 0;
 800373e:	1dbb      	adds	r3, r7, #6
 8003740:	2200      	movs	r2, #0
 8003742:	801a      	strh	r2, [r3, #0]
	ret = adc_read(&adc_value, 1, 10);
 8003744:	1dbb      	adds	r3, r7, #6
 8003746:	220a      	movs	r2, #10
 8003748:	2101      	movs	r1, #1
 800374a:	0018      	movs	r0, r3
 800374c:	f001 fe0e 	bl	800536c <adc_read>
 8003750:	0003      	movs	r3, r0
 8003752:	001a      	movs	r2, r3
 8003754:	4b08      	ldr	r3, [pc, #32]	; (8003778 <readECG+0x40>)
 8003756:	701a      	strb	r2, [r3, #0]
	if (ret == BML_OK) {
 8003758:	4b07      	ldr	r3, [pc, #28]	; (8003778 <readECG+0x40>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <readECG+0x34>
//		uint8_t adcStr[20];
//		sprintf(adcStr, "ECG Value: %d\n\r", adc_value);
//		USART_WRITE(USART2, adcStr, strlen(adcStr), 10);
//		print("ECG Value: %d\n\r", adcVal);
	} else {
		USART_WRITE(USART2, "Error: ADC read\n\r", 17, 100);
 8003760:	4906      	ldr	r1, [pc, #24]	; (800377c <readECG+0x44>)
 8003762:	4807      	ldr	r0, [pc, #28]	; (8003780 <readECG+0x48>)
 8003764:	2364      	movs	r3, #100	; 0x64
 8003766:	2211      	movs	r2, #17
 8003768:	f002 fea4 	bl	80064b4 <USART_WRITE>
	}
	return adc_value;
 800376c:	1dbb      	adds	r3, r7, #6
 800376e:	881b      	ldrh	r3, [r3, #0]
}
 8003770:	0018      	movs	r0, r3
 8003772:	46bd      	mov	sp, r7
 8003774:	b002      	add	sp, #8
 8003776:	bd80      	pop	{r7, pc}
 8003778:	20000500 	.word	0x20000500
 800377c:	0800ef98 	.word	0x0800ef98
 8003780:	40004400 	.word	0x40004400

08003784 <displayTemperature>:

void displayTemperature() {
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
	if (tempReadFlag) {
 8003788:	4b20      	ldr	r3, [pc, #128]	; (800380c <displayTemperature+0x88>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d029      	beq.n	80037e4 <displayTemperature+0x60>
//		print("Temp in Celsius: = 	%0.2f\n", temp);
		if ((temp > 0) && (temp < 100)) {
 8003790:	4b1f      	ldr	r3, [pc, #124]	; (8003810 <displayTemperature+0x8c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2100      	movs	r1, #0
 8003796:	1c18      	adds	r0, r3, #0
 8003798:	f7fc feac 	bl	80004f4 <__aeabi_fcmpgt>
 800379c:	1e03      	subs	r3, r0, #0
 800379e:	d100      	bne.n	80037a2 <displayTemperature+0x1e>
		LCD_SetTextColor(WHITE, BLUE);
		LCD_SetCursor(130, (TFTHEIGHT / 3) + 80);
		LCD_SetTextSize(2);
		LCD_Printf("  ERROR");
	}
}
 80037a0:	e030      	b.n	8003804 <displayTemperature+0x80>
		if ((temp > 0) && (temp < 100)) {
 80037a2:	4b1b      	ldr	r3, [pc, #108]	; (8003810 <displayTemperature+0x8c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	491b      	ldr	r1, [pc, #108]	; (8003814 <displayTemperature+0x90>)
 80037a8:	1c18      	adds	r0, r3, #0
 80037aa:	f7fc fe8f 	bl	80004cc <__aeabi_fcmplt>
 80037ae:	1e03      	subs	r3, r0, #0
 80037b0:	d100      	bne.n	80037b4 <displayTemperature+0x30>
}
 80037b2:	e027      	b.n	8003804 <displayTemperature+0x80>
			LCD_SetTextColor(WHITE, BLUE);
 80037b4:	4b18      	ldr	r3, [pc, #96]	; (8003818 <displayTemperature+0x94>)
 80037b6:	211f      	movs	r1, #31
 80037b8:	0018      	movs	r0, r3
 80037ba:	f004 ffab 	bl	8008714 <LCD_SetTextColor>
			LCD_SetCursor(130, (TFTHEIGHT / 3) + 80);
 80037be:	21ba      	movs	r1, #186	; 0xba
 80037c0:	2082      	movs	r0, #130	; 0x82
 80037c2:	f004 ff7b 	bl	80086bc <LCD_SetCursor>
			LCD_SetTextSize(2);
 80037c6:	2002      	movs	r0, #2
 80037c8:	f004 ff8e 	bl	80086e8 <LCD_SetTextSize>
			LCD_Printf("%0.2f'C", temp);
 80037cc:	4b10      	ldr	r3, [pc, #64]	; (8003810 <displayTemperature+0x8c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	1c18      	adds	r0, r3, #0
 80037d2:	f7ff fbc3 	bl	8002f5c <__aeabi_f2d>
 80037d6:	0002      	movs	r2, r0
 80037d8:	000b      	movs	r3, r1
 80037da:	4910      	ldr	r1, [pc, #64]	; (800381c <displayTemperature+0x98>)
 80037dc:	0008      	movs	r0, r1
 80037de:	f004 fe71 	bl	80084c4 <LCD_Printf>
}
 80037e2:	e00f      	b.n	8003804 <displayTemperature+0x80>
		LCD_SetTextColor(WHITE, BLUE);
 80037e4:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <displayTemperature+0x94>)
 80037e6:	211f      	movs	r1, #31
 80037e8:	0018      	movs	r0, r3
 80037ea:	f004 ff93 	bl	8008714 <LCD_SetTextColor>
		LCD_SetCursor(130, (TFTHEIGHT / 3) + 80);
 80037ee:	21ba      	movs	r1, #186	; 0xba
 80037f0:	2082      	movs	r0, #130	; 0x82
 80037f2:	f004 ff63 	bl	80086bc <LCD_SetCursor>
		LCD_SetTextSize(2);
 80037f6:	2002      	movs	r0, #2
 80037f8:	f004 ff76 	bl	80086e8 <LCD_SetTextSize>
		LCD_Printf("  ERROR");
 80037fc:	4b08      	ldr	r3, [pc, #32]	; (8003820 <displayTemperature+0x9c>)
 80037fe:	0018      	movs	r0, r3
 8003800:	f004 fe60 	bl	80084c4 <LCD_Printf>
}
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	200005e8 	.word	0x200005e8
 8003810:	20000504 	.word	0x20000504
 8003814:	42c80000 	.word	0x42c80000
 8003818:	0000ffff 	.word	0x0000ffff
 800381c:	0800efac 	.word	0x0800efac
 8003820:	0800efb4 	.word	0x0800efb4

08003824 <readTemperature>:

void readTemperature() {
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
	ret = mlx90614_getObject1(&temp);
 8003828:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <readTemperature+0x30>)
 800382a:	0018      	movs	r0, r3
 800382c:	f003 f84c 	bl	80068c8 <mlx90614_getObject1>
 8003830:	0003      	movs	r3, r0
 8003832:	001a      	movs	r2, r3
 8003834:	4b08      	ldr	r3, [pc, #32]	; (8003858 <readTemperature+0x34>)
 8003836:	701a      	strb	r2, [r3, #0]
	if (ret == BML_OK) {
 8003838:	4b07      	ldr	r3, [pc, #28]	; (8003858 <readTemperature+0x34>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d103      	bne.n	8003848 <readTemperature+0x24>
		tempReadFlag = true;
 8003840:	4b06      	ldr	r3, [pc, #24]	; (800385c <readTemperature+0x38>)
 8003842:	2201      	movs	r2, #1
 8003844:	701a      	strb	r2, [r3, #0]
	} else {
		tempReadFlag = false;
	}
}
 8003846:	e002      	b.n	800384e <readTemperature+0x2a>
		tempReadFlag = false;
 8003848:	4b04      	ldr	r3, [pc, #16]	; (800385c <readTemperature+0x38>)
 800384a:	2200      	movs	r2, #0
 800384c:	701a      	strb	r2, [r3, #0]
}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	20000504 	.word	0x20000504
 8003858:	20000500 	.word	0x20000500
 800385c:	200005e8 	.word	0x200005e8

08003860 <readHnS>:

void readHnS() {
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
	if (hnsStrRecFlag) {
 8003866:	4b44      	ldr	r3, [pc, #272]	; (8003978 <readHnS+0x118>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d06c      	beq.n	8003948 <readHnS+0xe8>
//		USART_WRITE(USART2, hStr, ida, 100);
		uint8_t a = 0, b = 0, ida = 0, idb = 0;
 800386e:	1dfb      	adds	r3, r7, #7
 8003870:	2200      	movs	r2, #0
 8003872:	701a      	strb	r2, [r3, #0]
 8003874:	1dbb      	adds	r3, r7, #6
 8003876:	2200      	movs	r2, #0
 8003878:	701a      	strb	r2, [r3, #0]
 800387a:	1d7b      	adds	r3, r7, #5
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
 8003880:	1d3b      	adds	r3, r7, #4
 8003882:	2200      	movs	r2, #0
 8003884:	701a      	strb	r2, [r3, #0]
		while (hnsStrData[a] != 'H') {
 8003886:	e004      	b.n	8003892 <readHnS+0x32>
			a++;
 8003888:	1dfb      	adds	r3, r7, #7
 800388a:	781a      	ldrb	r2, [r3, #0]
 800388c:	1dfb      	adds	r3, r7, #7
 800388e:	3201      	adds	r2, #1
 8003890:	701a      	strb	r2, [r3, #0]
		while (hnsStrData[a] != 'H') {
 8003892:	1dfb      	adds	r3, r7, #7
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	4a39      	ldr	r2, [pc, #228]	; (800397c <readHnS+0x11c>)
 8003898:	5cd3      	ldrb	r3, [r2, r3]
 800389a:	2b48      	cmp	r3, #72	; 0x48
 800389c:	d1f4      	bne.n	8003888 <readHnS+0x28>
		}
		while (hnsStrData[b] != 'S') {
 800389e:	e004      	b.n	80038aa <readHnS+0x4a>
			b++;
 80038a0:	1dbb      	adds	r3, r7, #6
 80038a2:	781a      	ldrb	r2, [r3, #0]
 80038a4:	1dbb      	adds	r3, r7, #6
 80038a6:	3201      	adds	r2, #1
 80038a8:	701a      	strb	r2, [r3, #0]
		while (hnsStrData[b] != 'S') {
 80038aa:	1dbb      	adds	r3, r7, #6
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	4a33      	ldr	r2, [pc, #204]	; (800397c <readHnS+0x11c>)
 80038b0:	5cd3      	ldrb	r3, [r2, r3]
 80038b2:	2b53      	cmp	r3, #83	; 0x53
 80038b4:	d1f4      	bne.n	80038a0 <readHnS+0x40>
		}
		a++;
 80038b6:	1dfb      	adds	r3, r7, #7
 80038b8:	781a      	ldrb	r2, [r3, #0]
 80038ba:	1dfb      	adds	r3, r7, #7
 80038bc:	3201      	adds	r2, #1
 80038be:	701a      	strb	r2, [r3, #0]
		b++;
 80038c0:	1dbb      	adds	r3, r7, #6
 80038c2:	781a      	ldrb	r2, [r3, #0]
 80038c4:	1dbb      	adds	r3, r7, #6
 80038c6:	3201      	adds	r2, #1
 80038c8:	701a      	strb	r2, [r3, #0]
		while (hnsStrData[a] != '@') {
 80038ca:	e011      	b.n	80038f0 <readHnS+0x90>
			hStr[ida] = hnsStrData[a];
 80038cc:	1dfb      	adds	r3, r7, #7
 80038ce:	781a      	ldrb	r2, [r3, #0]
 80038d0:	1d7b      	adds	r3, r7, #5
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	4929      	ldr	r1, [pc, #164]	; (800397c <readHnS+0x11c>)
 80038d6:	5c89      	ldrb	r1, [r1, r2]
 80038d8:	4a29      	ldr	r2, [pc, #164]	; (8003980 <readHnS+0x120>)
 80038da:	54d1      	strb	r1, [r2, r3]
			ida++;
 80038dc:	1d7b      	adds	r3, r7, #5
 80038de:	781a      	ldrb	r2, [r3, #0]
 80038e0:	1d7b      	adds	r3, r7, #5
 80038e2:	3201      	adds	r2, #1
 80038e4:	701a      	strb	r2, [r3, #0]
			a++;
 80038e6:	1dfb      	adds	r3, r7, #7
 80038e8:	781a      	ldrb	r2, [r3, #0]
 80038ea:	1dfb      	adds	r3, r7, #7
 80038ec:	3201      	adds	r2, #1
 80038ee:	701a      	strb	r2, [r3, #0]
		while (hnsStrData[a] != '@') {
 80038f0:	1dfb      	adds	r3, r7, #7
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	4a21      	ldr	r2, [pc, #132]	; (800397c <readHnS+0x11c>)
 80038f6:	5cd3      	ldrb	r3, [r2, r3]
 80038f8:	2b40      	cmp	r3, #64	; 0x40
 80038fa:	d1e7      	bne.n	80038cc <readHnS+0x6c>
		}
		hStr[ida] = '\0';
 80038fc:	1d7b      	adds	r3, r7, #5
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	4a1f      	ldr	r2, [pc, #124]	; (8003980 <readHnS+0x120>)
 8003902:	2100      	movs	r1, #0
 8003904:	54d1      	strb	r1, [r2, r3]
		while (hnsStrData[b] != '@') {
 8003906:	e011      	b.n	800392c <readHnS+0xcc>
			sStr[idb] = hnsStrData[b];
 8003908:	1dbb      	adds	r3, r7, #6
 800390a:	781a      	ldrb	r2, [r3, #0]
 800390c:	1d3b      	adds	r3, r7, #4
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	491a      	ldr	r1, [pc, #104]	; (800397c <readHnS+0x11c>)
 8003912:	5c89      	ldrb	r1, [r1, r2]
 8003914:	4a1b      	ldr	r2, [pc, #108]	; (8003984 <readHnS+0x124>)
 8003916:	54d1      	strb	r1, [r2, r3]
//			USART_WRITE(USART2, sStr[idb], 1, 10);
			idb++;
 8003918:	1d3b      	adds	r3, r7, #4
 800391a:	781a      	ldrb	r2, [r3, #0]
 800391c:	1d3b      	adds	r3, r7, #4
 800391e:	3201      	adds	r2, #1
 8003920:	701a      	strb	r2, [r3, #0]
			b++;
 8003922:	1dbb      	adds	r3, r7, #6
 8003924:	781a      	ldrb	r2, [r3, #0]
 8003926:	1dbb      	adds	r3, r7, #6
 8003928:	3201      	adds	r2, #1
 800392a:	701a      	strb	r2, [r3, #0]
		while (hnsStrData[b] != '@') {
 800392c:	1dbb      	adds	r3, r7, #6
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	4a12      	ldr	r2, [pc, #72]	; (800397c <readHnS+0x11c>)
 8003932:	5cd3      	ldrb	r3, [r2, r3]
 8003934:	2b40      	cmp	r3, #64	; 0x40
 8003936:	d1e7      	bne.n	8003908 <readHnS+0xa8>
		}
		sStr[idb] = '\0';
 8003938:	1d3b      	adds	r3, r7, #4
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	4a11      	ldr	r2, [pc, #68]	; (8003984 <readHnS+0x124>)
 800393e:	2100      	movs	r1, #0
 8003940:	54d1      	strb	r1, [r2, r3]
		hnsStrRecFlag = 0;
 8003942:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <readHnS+0x118>)
 8003944:	2200      	movs	r2, #0
 8003946:	701a      	strb	r2, [r3, #0]
//		USART_WRITE(USART2, sStr, idb, 100);
//		USART_WRITE(USART2, '\n', 1, 10);

	}

	hVal = atof(hStr);
 8003948:	4b0d      	ldr	r3, [pc, #52]	; (8003980 <readHnS+0x120>)
 800394a:	0018      	movs	r0, r3
 800394c:	f006 fe66 	bl	800a61c <atof>
 8003950:	0002      	movs	r2, r0
 8003952:	000b      	movs	r3, r1
 8003954:	0010      	movs	r0, r2
 8003956:	0019      	movs	r1, r3
 8003958:	f7ff fb48 	bl	8002fec <__aeabi_d2f>
 800395c:	1c02      	adds	r2, r0, #0
 800395e:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <readHnS+0x128>)
 8003960:	601a      	str	r2, [r3, #0]
	sVal = atoi(sStr);
 8003962:	4b08      	ldr	r3, [pc, #32]	; (8003984 <readHnS+0x124>)
 8003964:	0018      	movs	r0, r3
 8003966:	f006 fe5e 	bl	800a626 <atoi>
 800396a:	0002      	movs	r2, r0
 800396c:	4b07      	ldr	r3, [pc, #28]	; (800398c <readHnS+0x12c>)
 800396e:	601a      	str	r2, [r3, #0]

}
 8003970:	46c0      	nop			; (mov r8, r8)
 8003972:	46bd      	mov	sp, r7
 8003974:	b002      	add	sp, #8
 8003976:	bd80      	pop	{r7, pc}
 8003978:	200005e6 	.word	0x200005e6
 800397c:	2000056c 	.word	0x2000056c
 8003980:	200005d0 	.word	0x200005d0
 8003984:	200005dc 	.word	0x200005dc
 8003988:	200005ec 	.word	0x200005ec
 800398c:	200005f0 	.word	0x200005f0

08003990 <displayHnS>:

void displayHnS() {
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
	LCD_SetTextColor(WHITE, RED);
 8003994:	23f8      	movs	r3, #248	; 0xf8
 8003996:	021b      	lsls	r3, r3, #8
 8003998:	4a30      	ldr	r2, [pc, #192]	; (8003a5c <displayHnS+0xcc>)
 800399a:	0019      	movs	r1, r3
 800399c:	0010      	movs	r0, r2
 800399e:	f004 feb9 	bl	8008714 <LCD_SetTextColor>
	LCD_SetCursor(155, (TFTHEIGHT / 3) + 20);
 80039a2:	217e      	movs	r1, #126	; 0x7e
 80039a4:	209b      	movs	r0, #155	; 0x9b
 80039a6:	f004 fe89 	bl	80086bc <LCD_SetCursor>
	LCD_SetTextSize(2);
 80039aa:	2002      	movs	r0, #2
 80039ac:	f004 fe9c 	bl	80086e8 <LCD_SetTextSize>
	if (hVal < 100 && hVal > 0) {
 80039b0:	4b2b      	ldr	r3, [pc, #172]	; (8003a60 <displayHnS+0xd0>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	492b      	ldr	r1, [pc, #172]	; (8003a64 <displayHnS+0xd4>)
 80039b6:	1c18      	adds	r0, r3, #0
 80039b8:	f7fc fd88 	bl	80004cc <__aeabi_fcmplt>
 80039bc:	1e03      	subs	r3, r0, #0
 80039be:	d013      	beq.n	80039e8 <displayHnS+0x58>
 80039c0:	4b27      	ldr	r3, [pc, #156]	; (8003a60 <displayHnS+0xd0>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2100      	movs	r1, #0
 80039c6:	1c18      	adds	r0, r3, #0
 80039c8:	f7fc fd94 	bl	80004f4 <__aeabi_fcmpgt>
 80039cc:	1e03      	subs	r3, r0, #0
 80039ce:	d00b      	beq.n	80039e8 <displayHnS+0x58>
		LCD_Printf("%0.2f", hVal);
 80039d0:	4b23      	ldr	r3, [pc, #140]	; (8003a60 <displayHnS+0xd0>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	1c18      	adds	r0, r3, #0
 80039d6:	f7ff fac1 	bl	8002f5c <__aeabi_f2d>
 80039da:	0002      	movs	r2, r0
 80039dc:	000b      	movs	r3, r1
 80039de:	4922      	ldr	r1, [pc, #136]	; (8003a68 <displayHnS+0xd8>)
 80039e0:	0008      	movs	r0, r1
 80039e2:	f004 fd6f 	bl	80084c4 <LCD_Printf>
 80039e6:	e012      	b.n	8003a0e <displayHnS+0x7e>
	} else if (hVal == 0) {
 80039e8:	4b1d      	ldr	r3, [pc, #116]	; (8003a60 <displayHnS+0xd0>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2100      	movs	r1, #0
 80039ee:	1c18      	adds	r0, r3, #0
 80039f0:	f7fc fd66 	bl	80004c0 <__aeabi_fcmpeq>
 80039f4:	1e03      	subs	r3, r0, #0
 80039f6:	d00a      	beq.n	8003a0e <displayHnS+0x7e>
		LCD_Printf(" %0.2f", hVal);
 80039f8:	4b19      	ldr	r3, [pc, #100]	; (8003a60 <displayHnS+0xd0>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	1c18      	adds	r0, r3, #0
 80039fe:	f7ff faad 	bl	8002f5c <__aeabi_f2d>
 8003a02:	0002      	movs	r2, r0
 8003a04:	000b      	movs	r3, r1
 8003a06:	4919      	ldr	r1, [pc, #100]	; (8003a6c <displayHnS+0xdc>)
 8003a08:	0008      	movs	r0, r1
 8003a0a:	f004 fd5b 	bl	80084c4 <LCD_Printf>
	}

	LCD_SetTextColor(WHITE, GREEN);
 8003a0e:	23fc      	movs	r3, #252	; 0xfc
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	4a12      	ldr	r2, [pc, #72]	; (8003a5c <displayHnS+0xcc>)
 8003a14:	0019      	movs	r1, r3
 8003a16:	0010      	movs	r0, r2
 8003a18:	f004 fe7c 	bl	8008714 <LCD_SetTextColor>
	LCD_SetCursor(175, (TFTHEIGHT / 3) + 50);
 8003a1c:	219c      	movs	r1, #156	; 0x9c
 8003a1e:	20af      	movs	r0, #175	; 0xaf
 8003a20:	f004 fe4c 	bl	80086bc <LCD_SetCursor>
	LCD_SetTextSize(2);
 8003a24:	2002      	movs	r0, #2
 8003a26:	f004 fe5f 	bl	80086e8 <LCD_SetTextSize>
	if (sVal > 10 && sVal < 100) {
 8003a2a:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <displayHnS+0xe0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b0a      	cmp	r3, #10
 8003a30:	dd0b      	ble.n	8003a4a <displayHnS+0xba>
 8003a32:	4b0f      	ldr	r3, [pc, #60]	; (8003a70 <displayHnS+0xe0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b63      	cmp	r3, #99	; 0x63
 8003a38:	dc07      	bgt.n	8003a4a <displayHnS+0xba>
		LCD_Printf("%d%%", sVal);
 8003a3a:	4b0d      	ldr	r3, [pc, #52]	; (8003a70 <displayHnS+0xe0>)
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	4b0d      	ldr	r3, [pc, #52]	; (8003a74 <displayHnS+0xe4>)
 8003a40:	0011      	movs	r1, r2
 8003a42:	0018      	movs	r0, r3
 8003a44:	f004 fd3e 	bl	80084c4 <LCD_Printf>
 8003a48:	e004      	b.n	8003a54 <displayHnS+0xc4>
	} else {
		LCD_Printf(" 0%%");
 8003a4a:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <displayHnS+0xe8>)
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f004 fd39 	bl	80084c4 <LCD_Printf>
	}
}
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	46c0      	nop			; (mov r8, r8)
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	0000ffff 	.word	0x0000ffff
 8003a60:	200005ec 	.word	0x200005ec
 8003a64:	42c80000 	.word	0x42c80000
 8003a68:	0800efbc 	.word	0x0800efbc
 8003a6c:	0800efc4 	.word	0x0800efc4
 8003a70:	200005f0 	.word	0x200005f0
 8003a74:	0800efcc 	.word	0x0800efcc
 8003a78:	0800efd4 	.word	0x0800efd4

08003a7c <ecgPeak>:

void ecgPeak() {
 8003a7c:	b590      	push	{r4, r7, lr}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af02      	add	r7, sp, #8
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8003a82:	4bf4      	ldr	r3, [pc, #976]	; (8003e54 <ecgPeak+0x3d8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	b218      	sxth	r0, r3
 8003a88:	23f2      	movs	r3, #242	; 0xf2
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	3319      	adds	r3, #25
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	b219      	sxth	r1, r3
 8003a92:	4bf0      	ldr	r3, [pc, #960]	; (8003e54 <ecgPeak+0x3d8>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3302      	adds	r3, #2
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 8003a9e:	23f2      	movs	r3, #242	; 0xf2
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	3319      	adds	r3, #25
 8003aa4:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8003aa6:	b21c      	sxth	r4, r3
 8003aa8:	23f8      	movs	r3, #248	; 0xf8
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	0023      	movs	r3, r4
 8003ab0:	f003 fabc 	bl	800702c <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8003ab4:	4be7      	ldr	r3, [pc, #924]	; (8003e54 <ecgPeak+0x3d8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	b218      	sxth	r0, r3
 8003aba:	23f2      	movs	r3, #242	; 0xf2
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	331a      	adds	r3, #26
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	b219      	sxth	r1, r3
 8003ac4:	4be3      	ldr	r3, [pc, #908]	; (8003e54 <ecgPeak+0x3d8>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3302      	adds	r3, #2
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	b21a      	sxth	r2, r3
							graph_y0 + 26, RED);
 8003ad0:	23f2      	movs	r3, #242	; 0xf2
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	331a      	adds	r3, #26
 8003ad6:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8003ad8:	b21c      	sxth	r4, r3
 8003ada:	23f8      	movs	r3, #248	; 0xf8
 8003adc:	021b      	lsls	r3, r3, #8
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	0023      	movs	r3, r4
 8003ae2:	f003 faa3 	bl	800702c <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 8003ae6:	4bdb      	ldr	r3, [pc, #876]	; (8003e54 <ecgPeak+0x3d8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	1c9a      	adds	r2, r3, #2
 8003aec:	4bd9      	ldr	r3, [pc, #868]	; (8003e54 <ecgPeak+0x3d8>)
 8003aee:	601a      	str	r2, [r3, #0]
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8003af0:	4bd8      	ldr	r3, [pc, #864]	; (8003e54 <ecgPeak+0x3d8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	b218      	sxth	r0, r3
 8003af6:	23f2      	movs	r3, #242	; 0xf2
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	3319      	adds	r3, #25
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	b219      	sxth	r1, r3
 8003b00:	4bd4      	ldr	r3, [pc, #848]	; (8003e54 <ecgPeak+0x3d8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	3302      	adds	r3, #2
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 8003b0c:	23f2      	movs	r3, #242	; 0xf2
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3319      	adds	r3, #25
 8003b12:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8003b14:	b21c      	sxth	r4, r3
 8003b16:	23f8      	movs	r3, #248	; 0xf8
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	0023      	movs	r3, r4
 8003b1e:	f003 fa85 	bl	800702c <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8003b22:	4bcc      	ldr	r3, [pc, #816]	; (8003e54 <ecgPeak+0x3d8>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	b218      	sxth	r0, r3
 8003b28:	23f2      	movs	r3, #242	; 0xf2
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	331a      	adds	r3, #26
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	b219      	sxth	r1, r3
 8003b32:	4bc8      	ldr	r3, [pc, #800]	; (8003e54 <ecgPeak+0x3d8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3302      	adds	r3, #2
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	b21a      	sxth	r2, r3
							graph_y0 + 26, RED);
 8003b3e:	23f2      	movs	r3, #242	; 0xf2
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	331a      	adds	r3, #26
 8003b44:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8003b46:	b21c      	sxth	r4, r3
 8003b48:	23f8      	movs	r3, #248	; 0xf8
 8003b4a:	021b      	lsls	r3, r3, #8
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	0023      	movs	r3, r4
 8003b50:	f003 fa6c 	bl	800702c <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 8003b54:	4bbf      	ldr	r3, [pc, #764]	; (8003e54 <ecgPeak+0x3d8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	1c9a      	adds	r2, r3, #2
 8003b5a:	4bbe      	ldr	r3, [pc, #760]	; (8003e54 <ecgPeak+0x3d8>)
 8003b5c:	601a      	str	r2, [r3, #0]
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8003b5e:	4bbd      	ldr	r3, [pc, #756]	; (8003e54 <ecgPeak+0x3d8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	b218      	sxth	r0, r3
 8003b64:	23f2      	movs	r3, #242	; 0xf2
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3319      	adds	r3, #25
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	b219      	sxth	r1, r3
 8003b6e:	4bb9      	ldr	r3, [pc, #740]	; (8003e54 <ecgPeak+0x3d8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3302      	adds	r3, #2
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 8003b7a:	23f2      	movs	r3, #242	; 0xf2
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	3319      	adds	r3, #25
 8003b80:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8003b82:	b21c      	sxth	r4, r3
 8003b84:	23f8      	movs	r3, #248	; 0xf8
 8003b86:	021b      	lsls	r3, r3, #8
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	0023      	movs	r3, r4
 8003b8c:	f003 fa4e 	bl	800702c <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8003b90:	4bb0      	ldr	r3, [pc, #704]	; (8003e54 <ecgPeak+0x3d8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	b218      	sxth	r0, r3
 8003b96:	23f2      	movs	r3, #242	; 0xf2
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	331a      	adds	r3, #26
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	b219      	sxth	r1, r3
 8003ba0:	4bac      	ldr	r3, [pc, #688]	; (8003e54 <ecgPeak+0x3d8>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	3302      	adds	r3, #2
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	b21a      	sxth	r2, r3
							graph_y0 + 26, RED);
 8003bac:	23f2      	movs	r3, #242	; 0xf2
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	331a      	adds	r3, #26
 8003bb2:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8003bb4:	b21c      	sxth	r4, r3
 8003bb6:	23f8      	movs	r3, #248	; 0xf8
 8003bb8:	021b      	lsls	r3, r3, #8
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	0023      	movs	r3, r4
 8003bbe:	f003 fa35 	bl	800702c <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 8003bc2:	4ba4      	ldr	r3, [pc, #656]	; (8003e54 <ecgPeak+0x3d8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	1c9a      	adds	r2, r3, #2
 8003bc8:	4ba2      	ldr	r3, [pc, #648]	; (8003e54 <ecgPeak+0x3d8>)
 8003bca:	601a      	str	r2, [r3, #0]

	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8003bcc:	4ba1      	ldr	r3, [pc, #644]	; (8003e54 <ecgPeak+0x3d8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	b218      	sxth	r0, r3
 8003bd2:	23f2      	movs	r3, #242	; 0xf2
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	3319      	adds	r3, #25
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	b219      	sxth	r1, r3
 8003bdc:	4b9d      	ldr	r3, [pc, #628]	; (8003e54 <ecgPeak+0x3d8>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3302      	adds	r3, #2
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	b21a      	sxth	r2, r3
			graph_y0 + 40, RED);
 8003be8:	23f2      	movs	r3, #242	; 0xf2
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3328      	adds	r3, #40	; 0x28
 8003bee:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8003bf0:	b21c      	sxth	r4, r3
 8003bf2:	23f8      	movs	r3, #248	; 0xf8
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	0023      	movs	r3, r4
 8003bfa:	f003 fa17 	bl	800702c <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8003bfe:	4b95      	ldr	r3, [pc, #596]	; (8003e54 <ecgPeak+0x3d8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	b218      	sxth	r0, r3
 8003c04:	23f2      	movs	r3, #242	; 0xf2
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	331a      	adds	r3, #26
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	b219      	sxth	r1, r3
 8003c0e:	4b91      	ldr	r3, [pc, #580]	; (8003e54 <ecgPeak+0x3d8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3302      	adds	r3, #2
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	b21a      	sxth	r2, r3
				graph_y0 + 41, RED);
 8003c1a:	23f2      	movs	r3, #242	; 0xf2
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	3329      	adds	r3, #41	; 0x29
 8003c20:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8003c22:	b21c      	sxth	r4, r3
 8003c24:	23f8      	movs	r3, #248	; 0xf8
 8003c26:	021b      	lsls	r3, r3, #8
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	0023      	movs	r3, r4
 8003c2c:	f003 f9fe 	bl	800702c <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 8003c30:	4b88      	ldr	r3, [pc, #544]	; (8003e54 <ecgPeak+0x3d8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	1c9a      	adds	r2, r3, #2
 8003c36:	4b87      	ldr	r3, [pc, #540]	; (8003e54 <ecgPeak+0x3d8>)
 8003c38:	601a      	str	r2, [r3, #0]
	LCD_DrawLine(graph_x, graph_y0 + 40, graph_x + graphRefreshRate_peak,
 8003c3a:	4b86      	ldr	r3, [pc, #536]	; (8003e54 <ecgPeak+0x3d8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	b218      	sxth	r0, r3
 8003c40:	23f2      	movs	r3, #242	; 0xf2
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3328      	adds	r3, #40	; 0x28
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	b219      	sxth	r1, r3
 8003c4a:	4b82      	ldr	r3, [pc, #520]	; (8003e54 <ecgPeak+0x3d8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	3302      	adds	r3, #2
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	b21a      	sxth	r2, r3
 8003c56:	23f2      	movs	r3, #242	; 0xf2
 8003c58:	b21c      	sxth	r4, r3
 8003c5a:	23f8      	movs	r3, #248	; 0xf8
 8003c5c:	021b      	lsls	r3, r3, #8
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	0023      	movs	r3, r4
 8003c62:	f003 f9e3 	bl	800702c <LCD_DrawLine>
			graph_y0, RED);
	LCD_DrawLine(graph_x, graph_y0 + 41, graph_x + graphRefreshRate_peak,
 8003c66:	4b7b      	ldr	r3, [pc, #492]	; (8003e54 <ecgPeak+0x3d8>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	b218      	sxth	r0, r3
 8003c6c:	23f2      	movs	r3, #242	; 0xf2
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	3329      	adds	r3, #41	; 0x29
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	b219      	sxth	r1, r3
 8003c76:	4b77      	ldr	r3, [pc, #476]	; (8003e54 <ecgPeak+0x3d8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	3302      	adds	r3, #2
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	b21a      	sxth	r2, r3
				graph_y0 + 1, RED);
 8003c82:	23f2      	movs	r3, #242	; 0xf2
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3301      	adds	r3, #1
 8003c88:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 41, graph_x + graphRefreshRate_peak,
 8003c8a:	b21c      	sxth	r4, r3
 8003c8c:	23f8      	movs	r3, #248	; 0xf8
 8003c8e:	021b      	lsls	r3, r3, #8
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	0023      	movs	r3, r4
 8003c94:	f003 f9ca 	bl	800702c <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 8003c98:	4b6e      	ldr	r3, [pc, #440]	; (8003e54 <ecgPeak+0x3d8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	1c9a      	adds	r2, r3, #2
 8003c9e:	4b6d      	ldr	r3, [pc, #436]	; (8003e54 <ecgPeak+0x3d8>)
 8003ca0:	601a      	str	r2, [r3, #0]
	LCD_DrawLine(graph_x, graph_y0, graph_x + graphRefreshRate_peak,
 8003ca2:	4b6c      	ldr	r3, [pc, #432]	; (8003e54 <ecgPeak+0x3d8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	b218      	sxth	r0, r3
 8003ca8:	23f2      	movs	r3, #242	; 0xf2
 8003caa:	b219      	sxth	r1, r3
 8003cac:	4b69      	ldr	r3, [pc, #420]	; (8003e54 <ecgPeak+0x3d8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	3302      	adds	r3, #2
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 8003cb8:	23f2      	movs	r3, #242	; 0xf2
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3319      	adds	r3, #25
 8003cbe:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0, graph_x + graphRefreshRate_peak,
 8003cc0:	b21c      	sxth	r4, r3
 8003cc2:	23f8      	movs	r3, #248	; 0xf8
 8003cc4:	021b      	lsls	r3, r3, #8
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	0023      	movs	r3, r4
 8003cca:	f003 f9af 	bl	800702c <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 1, graph_x + graphRefreshRate_peak,
 8003cce:	4b61      	ldr	r3, [pc, #388]	; (8003e54 <ecgPeak+0x3d8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	b218      	sxth	r0, r3
 8003cd4:	23f2      	movs	r3, #242	; 0xf2
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3301      	adds	r3, #1
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	b219      	sxth	r1, r3
 8003cde:	4b5d      	ldr	r3, [pc, #372]	; (8003e54 <ecgPeak+0x3d8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3302      	adds	r3, #2
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	b21a      	sxth	r2, r3
				graph_y0 + 26, RED);
 8003cea:	23f2      	movs	r3, #242	; 0xf2
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	331a      	adds	r3, #26
 8003cf0:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 1, graph_x + graphRefreshRate_peak,
 8003cf2:	b21c      	sxth	r4, r3
 8003cf4:	23f8      	movs	r3, #248	; 0xf8
 8003cf6:	021b      	lsls	r3, r3, #8
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	0023      	movs	r3, r4
 8003cfc:	f003 f996 	bl	800702c <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 8003d00:	4b54      	ldr	r3, [pc, #336]	; (8003e54 <ecgPeak+0x3d8>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	1c9a      	adds	r2, r3, #2
 8003d06:	4b53      	ldr	r3, [pc, #332]	; (8003e54 <ecgPeak+0x3d8>)
 8003d08:	601a      	str	r2, [r3, #0]

	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8003d0a:	4b52      	ldr	r3, [pc, #328]	; (8003e54 <ecgPeak+0x3d8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	b218      	sxth	r0, r3
 8003d10:	23f2      	movs	r3, #242	; 0xf2
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3319      	adds	r3, #25
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	b219      	sxth	r1, r3
 8003d1a:	4b4e      	ldr	r3, [pc, #312]	; (8003e54 <ecgPeak+0x3d8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3302      	adds	r3, #2
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 8003d26:	23f2      	movs	r3, #242	; 0xf2
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3319      	adds	r3, #25
 8003d2c:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8003d2e:	b21c      	sxth	r4, r3
 8003d30:	23f8      	movs	r3, #248	; 0xf8
 8003d32:	021b      	lsls	r3, r3, #8
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	0023      	movs	r3, r4
 8003d38:	f003 f978 	bl	800702c <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8003d3c:	4b45      	ldr	r3, [pc, #276]	; (8003e54 <ecgPeak+0x3d8>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	b218      	sxth	r0, r3
 8003d42:	23f2      	movs	r3, #242	; 0xf2
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	331a      	adds	r3, #26
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	b219      	sxth	r1, r3
 8003d4c:	4b41      	ldr	r3, [pc, #260]	; (8003e54 <ecgPeak+0x3d8>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	3302      	adds	r3, #2
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	b21a      	sxth	r2, r3
							graph_y0 + 26, RED);
 8003d58:	23f2      	movs	r3, #242	; 0xf2
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	331a      	adds	r3, #26
 8003d5e:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8003d60:	b21c      	sxth	r4, r3
 8003d62:	23f8      	movs	r3, #248	; 0xf8
 8003d64:	021b      	lsls	r3, r3, #8
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	0023      	movs	r3, r4
 8003d6a:	f003 f95f 	bl	800702c <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 8003d6e:	4b39      	ldr	r3, [pc, #228]	; (8003e54 <ecgPeak+0x3d8>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	1c9a      	adds	r2, r3, #2
 8003d74:	4b37      	ldr	r3, [pc, #220]	; (8003e54 <ecgPeak+0x3d8>)
 8003d76:	601a      	str	r2, [r3, #0]
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8003d78:	4b36      	ldr	r3, [pc, #216]	; (8003e54 <ecgPeak+0x3d8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	b218      	sxth	r0, r3
 8003d7e:	23f2      	movs	r3, #242	; 0xf2
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3319      	adds	r3, #25
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	b219      	sxth	r1, r3
 8003d88:	4b32      	ldr	r3, [pc, #200]	; (8003e54 <ecgPeak+0x3d8>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	3302      	adds	r3, #2
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 8003d94:	23f2      	movs	r3, #242	; 0xf2
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3319      	adds	r3, #25
 8003d9a:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8003d9c:	b21c      	sxth	r4, r3
 8003d9e:	23f8      	movs	r3, #248	; 0xf8
 8003da0:	021b      	lsls	r3, r3, #8
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	0023      	movs	r3, r4
 8003da6:	f003 f941 	bl	800702c <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8003daa:	4b2a      	ldr	r3, [pc, #168]	; (8003e54 <ecgPeak+0x3d8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	b218      	sxth	r0, r3
 8003db0:	23f2      	movs	r3, #242	; 0xf2
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	331a      	adds	r3, #26
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	b219      	sxth	r1, r3
 8003dba:	4b26      	ldr	r3, [pc, #152]	; (8003e54 <ecgPeak+0x3d8>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3302      	adds	r3, #2
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	b21a      	sxth	r2, r3
							graph_y0 + 26, RED);
 8003dc6:	23f2      	movs	r3, #242	; 0xf2
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	331a      	adds	r3, #26
 8003dcc:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8003dce:	b21c      	sxth	r4, r3
 8003dd0:	23f8      	movs	r3, #248	; 0xf8
 8003dd2:	021b      	lsls	r3, r3, #8
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	0023      	movs	r3, r4
 8003dd8:	f003 f928 	bl	800702c <LCD_DrawLine>
	graph_x += graphRefreshRate_peak;
 8003ddc:	4b1d      	ldr	r3, [pc, #116]	; (8003e54 <ecgPeak+0x3d8>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	1c9a      	adds	r2, r3, #2
 8003de2:	4b1c      	ldr	r3, [pc, #112]	; (8003e54 <ecgPeak+0x3d8>)
 8003de4:	601a      	str	r2, [r3, #0]
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8003de6:	4b1b      	ldr	r3, [pc, #108]	; (8003e54 <ecgPeak+0x3d8>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	b218      	sxth	r0, r3
 8003dec:	23f2      	movs	r3, #242	; 0xf2
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	3319      	adds	r3, #25
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	b219      	sxth	r1, r3
 8003df6:	4b17      	ldr	r3, [pc, #92]	; (8003e54 <ecgPeak+0x3d8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	3302      	adds	r3, #2
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	b21a      	sxth	r2, r3
			graph_y0 + 25, RED);
 8003e02:	23f2      	movs	r3, #242	; 0xf2
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3319      	adds	r3, #25
 8003e08:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8003e0a:	b21c      	sxth	r4, r3
 8003e0c:	23f8      	movs	r3, #248	; 0xf8
 8003e0e:	021b      	lsls	r3, r3, #8
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	0023      	movs	r3, r4
 8003e14:	f003 f90a 	bl	800702c <LCD_DrawLine>
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8003e18:	4b0e      	ldr	r3, [pc, #56]	; (8003e54 <ecgPeak+0x3d8>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	b218      	sxth	r0, r3
 8003e1e:	23f2      	movs	r3, #242	; 0xf2
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	331a      	adds	r3, #26
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	b219      	sxth	r1, r3
 8003e28:	4b0a      	ldr	r3, [pc, #40]	; (8003e54 <ecgPeak+0x3d8>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3302      	adds	r3, #2
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	b21a      	sxth	r2, r3
							graph_y0 + 26, RED);
 8003e34:	23f2      	movs	r3, #242	; 0xf2
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	331a      	adds	r3, #26
 8003e3a:	b29b      	uxth	r3, r3
	LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8003e3c:	b21c      	sxth	r4, r3
 8003e3e:	23f8      	movs	r3, #248	; 0xf8
 8003e40:	021b      	lsls	r3, r3, #8
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	0023      	movs	r3, r4
 8003e46:	f003 f8f1 	bl	800702c <LCD_DrawLine>
}
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	b001      	add	sp, #4
 8003e50:	e002      	b.n	8003e58 <ecgPeak+0x3dc>
 8003e52:	46c0      	nop			; (mov r8, r8)
 8003e54:	20000000 	.word	0x20000000
 8003e58:	bd90      	pop	{r4, r7, pc}
 8003e5a:	46c0      	nop			; (mov r8, r8)

08003e5c <ecgLine>:

void ecgLine() {
 8003e5c:	b590      	push	{r4, r7, lr}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af02      	add	r7, sp, #8
	for (uint8_t i = 0; i < 3; i++) {
 8003e62:	1dfb      	adds	r3, r7, #7
 8003e64:	2200      	movs	r2, #0
 8003e66:	701a      	strb	r2, [r3, #0]
 8003e68:	e0a4      	b.n	8003fb4 <ecgLine+0x158>
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8003e6a:	4b57      	ldr	r3, [pc, #348]	; (8003fc8 <ecgLine+0x16c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	b218      	sxth	r0, r3
 8003e70:	23f2      	movs	r3, #242	; 0xf2
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3319      	adds	r3, #25
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	b219      	sxth	r1, r3
 8003e7a:	4b53      	ldr	r3, [pc, #332]	; (8003fc8 <ecgLine+0x16c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3302      	adds	r3, #2
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	b21a      	sxth	r2, r3
				graph_y0 + 25, RED);
 8003e86:	23f2      	movs	r3, #242	; 0xf2
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	3319      	adds	r3, #25
 8003e8c:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8003e8e:	b21c      	sxth	r4, r3
 8003e90:	23f8      	movs	r3, #248	; 0xf8
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	0023      	movs	r3, r4
 8003e98:	f003 f8c8 	bl	800702c <LCD_DrawLine>
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8003e9c:	4b4a      	ldr	r3, [pc, #296]	; (8003fc8 <ecgLine+0x16c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	b218      	sxth	r0, r3
 8003ea2:	23f2      	movs	r3, #242	; 0xf2
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	331a      	adds	r3, #26
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	b219      	sxth	r1, r3
 8003eac:	4b46      	ldr	r3, [pc, #280]	; (8003fc8 <ecgLine+0x16c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	3302      	adds	r3, #2
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	b21a      	sxth	r2, r3
				graph_y0 + 26, RED);
 8003eb8:	23f2      	movs	r3, #242	; 0xf2
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	331a      	adds	r3, #26
 8003ebe:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8003ec0:	b21c      	sxth	r4, r3
 8003ec2:	23f8      	movs	r3, #248	; 0xf8
 8003ec4:	021b      	lsls	r3, r3, #8
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	0023      	movs	r3, r4
 8003eca:	f003 f8af 	bl	800702c <LCD_DrawLine>
		graph_x += graphRefreshRate_peak;
 8003ece:	4b3e      	ldr	r3, [pc, #248]	; (8003fc8 <ecgLine+0x16c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	1c9a      	adds	r2, r3, #2
 8003ed4:	4b3c      	ldr	r3, [pc, #240]	; (8003fc8 <ecgLine+0x16c>)
 8003ed6:	601a      	str	r2, [r3, #0]
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8003ed8:	4b3b      	ldr	r3, [pc, #236]	; (8003fc8 <ecgLine+0x16c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	b218      	sxth	r0, r3
 8003ede:	23f2      	movs	r3, #242	; 0xf2
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	3319      	adds	r3, #25
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	b219      	sxth	r1, r3
 8003ee8:	4b37      	ldr	r3, [pc, #220]	; (8003fc8 <ecgLine+0x16c>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	3302      	adds	r3, #2
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	b21a      	sxth	r2, r3
				graph_y0 + 25, RED);
 8003ef4:	23f2      	movs	r3, #242	; 0xf2
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3319      	adds	r3, #25
 8003efa:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8003efc:	b21c      	sxth	r4, r3
 8003efe:	23f8      	movs	r3, #248	; 0xf8
 8003f00:	021b      	lsls	r3, r3, #8
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	0023      	movs	r3, r4
 8003f06:	f003 f891 	bl	800702c <LCD_DrawLine>
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8003f0a:	4b2f      	ldr	r3, [pc, #188]	; (8003fc8 <ecgLine+0x16c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	b218      	sxth	r0, r3
 8003f10:	23f2      	movs	r3, #242	; 0xf2
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	331a      	adds	r3, #26
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	b219      	sxth	r1, r3
 8003f1a:	4b2b      	ldr	r3, [pc, #172]	; (8003fc8 <ecgLine+0x16c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3302      	adds	r3, #2
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	b21a      	sxth	r2, r3
				graph_y0 + 26, RED);
 8003f26:	23f2      	movs	r3, #242	; 0xf2
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	331a      	adds	r3, #26
 8003f2c:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8003f2e:	b21c      	sxth	r4, r3
 8003f30:	23f8      	movs	r3, #248	; 0xf8
 8003f32:	021b      	lsls	r3, r3, #8
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	0023      	movs	r3, r4
 8003f38:	f003 f878 	bl	800702c <LCD_DrawLine>
		graph_x += graphRefreshRate_peak;
 8003f3c:	4b22      	ldr	r3, [pc, #136]	; (8003fc8 <ecgLine+0x16c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	1c9a      	adds	r2, r3, #2
 8003f42:	4b21      	ldr	r3, [pc, #132]	; (8003fc8 <ecgLine+0x16c>)
 8003f44:	601a      	str	r2, [r3, #0]
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8003f46:	4b20      	ldr	r3, [pc, #128]	; (8003fc8 <ecgLine+0x16c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	b218      	sxth	r0, r3
 8003f4c:	23f2      	movs	r3, #242	; 0xf2
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	3319      	adds	r3, #25
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	b219      	sxth	r1, r3
 8003f56:	4b1c      	ldr	r3, [pc, #112]	; (8003fc8 <ecgLine+0x16c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	3302      	adds	r3, #2
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	b21a      	sxth	r2, r3
				graph_y0 + 25, RED);
 8003f62:	23f2      	movs	r3, #242	; 0xf2
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	3319      	adds	r3, #25
 8003f68:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 25, graph_x + graphRefreshRate_peak,
 8003f6a:	b21c      	sxth	r4, r3
 8003f6c:	23f8      	movs	r3, #248	; 0xf8
 8003f6e:	021b      	lsls	r3, r3, #8
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	0023      	movs	r3, r4
 8003f74:	f003 f85a 	bl	800702c <LCD_DrawLine>
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8003f78:	4b13      	ldr	r3, [pc, #76]	; (8003fc8 <ecgLine+0x16c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	b218      	sxth	r0, r3
 8003f7e:	23f2      	movs	r3, #242	; 0xf2
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	331a      	adds	r3, #26
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	b219      	sxth	r1, r3
 8003f88:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <ecgLine+0x16c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	3302      	adds	r3, #2
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	b21a      	sxth	r2, r3
				graph_y0 + 26, RED);
 8003f94:	23f2      	movs	r3, #242	; 0xf2
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	331a      	adds	r3, #26
 8003f9a:	b29b      	uxth	r3, r3
		LCD_DrawLine(graph_x, graph_y0 + 26, graph_x + graphRefreshRate_peak,
 8003f9c:	b21c      	sxth	r4, r3
 8003f9e:	23f8      	movs	r3, #248	; 0xf8
 8003fa0:	021b      	lsls	r3, r3, #8
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	0023      	movs	r3, r4
 8003fa6:	f003 f841 	bl	800702c <LCD_DrawLine>
	for (uint8_t i = 0; i < 3; i++) {
 8003faa:	1dfb      	adds	r3, r7, #7
 8003fac:	781a      	ldrb	r2, [r3, #0]
 8003fae:	1dfb      	adds	r3, r7, #7
 8003fb0:	3201      	adds	r2, #1
 8003fb2:	701a      	strb	r2, [r3, #0]
 8003fb4:	1dfb      	adds	r3, r7, #7
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d800      	bhi.n	8003fbe <ecgLine+0x162>
 8003fbc:	e755      	b.n	8003e6a <ecgLine+0xe>
	}
}
 8003fbe:	46c0      	nop			; (mov r8, r8)
 8003fc0:	46c0      	nop			; (mov r8, r8)
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	b003      	add	sp, #12
 8003fc6:	bd90      	pop	{r4, r7, pc}
 8003fc8:	20000000 	.word	0x20000000

08003fcc <LCD_ECGAnimation>:

void LCD_ECGAnimation() {
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af02      	add	r7, sp, #8
	ecgLine();
 8003fd2:	f7ff ff43 	bl	8003e5c <ecgLine>

	int a = graph_x;
 8003fd6:	4b10      	ldr	r3, [pc, #64]	; (8004018 <LCD_ECGAnimation+0x4c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	607b      	str	r3, [r7, #4]
	if (a + graphRefreshRate_peak >= graph_x2 - 25) {
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	1c9a      	adds	r2, r3, #2
 8003fe0:	23af      	movs	r3, #175	; 0xaf
 8003fe2:	3b19      	subs	r3, #25
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	db0b      	blt.n	8004000 <LCD_ECGAnimation+0x34>
		LCD_FillRect(20, (2 * (TFTHEIGHT / 3)) + 20, TFTWIDTH - 80, 70, WHITE);
 8003fe8:	4b0c      	ldr	r3, [pc, #48]	; (800401c <LCD_ECGAnimation+0x50>)
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	2346      	movs	r3, #70	; 0x46
 8003fee:	22a0      	movs	r2, #160	; 0xa0
 8003ff0:	21e8      	movs	r1, #232	; 0xe8
 8003ff2:	2014      	movs	r0, #20
 8003ff4:	f003 ff54 	bl	8007ea0 <LCD_FillRect>
		graph_x = graph_x0;
 8003ff8:	221e      	movs	r2, #30
 8003ffa:	4b07      	ldr	r3, [pc, #28]	; (8004018 <LCD_ECGAnimation+0x4c>)
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	e004      	b.n	800400a <LCD_ECGAnimation+0x3e>
	} else {
		graph_x += graphRefreshRate_peak;
 8004000:	4b05      	ldr	r3, [pc, #20]	; (8004018 <LCD_ECGAnimation+0x4c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	1c9a      	adds	r2, r3, #2
 8004006:	4b04      	ldr	r3, [pc, #16]	; (8004018 <LCD_ECGAnimation+0x4c>)
 8004008:	601a      	str	r2, [r3, #0]
	}

	ecgPeak();
 800400a:	f7ff fd37 	bl	8003a7c <ecgPeak>
}
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	46bd      	mov	sp, r7
 8004012:	b002      	add	sp, #8
 8004014:	bd80      	pop	{r7, pc}
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	20000000 	.word	0x20000000
 800401c:	0000ffff 	.word	0x0000ffff

08004020 <EXTI4_15_IRQHandler>:


//=======================| Interrupt Handlers |=============================//

void EXTI4_15_IRQHandler() {
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0

	if (gpio_IT_CHK(11)) {
 8004026:	200b      	movs	r0, #11
 8004028:	f001 fe6e 	bl	8005d08 <gpio_IT_CHK>
 800402c:	1e03      	subs	r3, r0, #0
 800402e:	d00d      	beq.n	800404c <EXTI4_15_IRQHandler+0x2c>
		for (int i = 500000; i > 0; i--)
 8004030:	4b12      	ldr	r3, [pc, #72]	; (800407c <EXTI4_15_IRQHandler+0x5c>)
 8004032:	607b      	str	r3, [r7, #4]
 8004034:	e002      	b.n	800403c <EXTI4_15_IRQHandler+0x1c>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3b01      	subs	r3, #1
 800403a:	607b      	str	r3, [r7, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	dcf9      	bgt.n	8004036 <EXTI4_15_IRQHandler+0x16>
			;
		gpio_IT_CLR(11);
 8004042:	200b      	movs	r0, #11
 8004044:	f001 fe78 	bl	8005d38 <gpio_IT_CLR>
		gpio11_callback();
 8004048:	f7ff f9fc 	bl	8003444 <gpio11_callback>
	}
	if (gpio_IT_CHK(12)) {
 800404c:	200c      	movs	r0, #12
 800404e:	f001 fe5b 	bl	8005d08 <gpio_IT_CHK>
 8004052:	1e03      	subs	r3, r0, #0
 8004054:	d00d      	beq.n	8004072 <EXTI4_15_IRQHandler+0x52>
		for (int i = 500000; i > 0; i--)
 8004056:	4b09      	ldr	r3, [pc, #36]	; (800407c <EXTI4_15_IRQHandler+0x5c>)
 8004058:	603b      	str	r3, [r7, #0]
 800405a:	e002      	b.n	8004062 <EXTI4_15_IRQHandler+0x42>
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	3b01      	subs	r3, #1
 8004060:	603b      	str	r3, [r7, #0]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	dcf9      	bgt.n	800405c <EXTI4_15_IRQHandler+0x3c>
			;
		gpio_IT_CLR(12);
 8004068:	200c      	movs	r0, #12
 800406a:	f001 fe65 	bl	8005d38 <gpio_IT_CLR>
		gpio12_callback();
 800406e:	f7ff f9f5 	bl	800345c <gpio12_callback>
	}
}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	46bd      	mov	sp, r7
 8004076:	b002      	add	sp, #8
 8004078:	bd80      	pop	{r7, pc}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	0007a120 	.word	0x0007a120

08004080 <USART3_4_IRQHandler>:

void USART3_4_IRQHandler() {
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
	char chr;
	uint8_t i = 0;
 8004086:	1dbb      	adds	r3, r7, #6
 8004088:	2200      	movs	r2, #0
 800408a:	701a      	strb	r2, [r3, #0]
	if ((USART3->ISR & USART_ISR_RXNE) == USART_ISR_RXNE) {
 800408c:	4b19      	ldr	r3, [pc, #100]	; (80040f4 <USART3_4_IRQHandler+0x74>)
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	2220      	movs	r2, #32
 8004092:	4013      	ands	r3, r2
 8004094:	2b20      	cmp	r3, #32
 8004096:	d104      	bne.n	80040a2 <USART3_4_IRQHandler+0x22>
		chr = (uint8_t) (USART3->RDR);
 8004098:	4b16      	ldr	r3, [pc, #88]	; (80040f4 <USART3_4_IRQHandler+0x74>)
 800409a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800409c:	b29a      	uxth	r2, r3
 800409e:	1dfb      	adds	r3, r7, #7
 80040a0:	701a      	strb	r2, [r3, #0]
//			USART_WRITE(USART2, chr, 1, 10);
	}
	if (chr == '\n') {
 80040a2:	1dfb      	adds	r3, r7, #7
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b0a      	cmp	r3, #10
 80040a8:	d114      	bne.n	80040d4 <USART3_4_IRQHandler+0x54>
		strcpy(hnsStrData, hnsStr);
 80040aa:	4a13      	ldr	r2, [pc, #76]	; (80040f8 <USART3_4_IRQHandler+0x78>)
 80040ac:	4b13      	ldr	r3, [pc, #76]	; (80040fc <USART3_4_IRQHandler+0x7c>)
 80040ae:	0011      	movs	r1, r2
 80040b0:	0018      	movs	r0, r3
 80040b2:	f007 f9f7 	bl	800b4a4 <strcpy>
//		print(hnsStrData);
//		USART_WRITE(USART2, '\n', 1, 10);
		memset(hnsStr, 0, idx);
 80040b6:	4b12      	ldr	r3, [pc, #72]	; (8004100 <USART3_4_IRQHandler+0x80>)
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	001a      	movs	r2, r3
 80040bc:	4b0e      	ldr	r3, [pc, #56]	; (80040f8 <USART3_4_IRQHandler+0x78>)
 80040be:	2100      	movs	r1, #0
 80040c0:	0018      	movs	r0, r3
 80040c2:	f006 fbef 	bl	800a8a4 <memset>
		idx = 0;
 80040c6:	4b0e      	ldr	r3, [pc, #56]	; (8004100 <USART3_4_IRQHandler+0x80>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	701a      	strb	r2, [r3, #0]
		hnsStrRecFlag = 1;
 80040cc:	4b0d      	ldr	r3, [pc, #52]	; (8004104 <USART3_4_IRQHandler+0x84>)
 80040ce:	2201      	movs	r2, #1
 80040d0:	701a      	strb	r2, [r3, #0]
	} else {
		hnsStr[idx++] = chr;
	}
}
 80040d2:	e00a      	b.n	80040ea <USART3_4_IRQHandler+0x6a>
		hnsStr[idx++] = chr;
 80040d4:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <USART3_4_IRQHandler+0x80>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	b2d1      	uxtb	r1, r2
 80040dc:	4a08      	ldr	r2, [pc, #32]	; (8004100 <USART3_4_IRQHandler+0x80>)
 80040de:	7011      	strb	r1, [r2, #0]
 80040e0:	0019      	movs	r1, r3
 80040e2:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <USART3_4_IRQHandler+0x78>)
 80040e4:	1dfa      	adds	r2, r7, #7
 80040e6:	7812      	ldrb	r2, [r2, #0]
 80040e8:	545a      	strb	r2, [r3, r1]
}
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	46bd      	mov	sp, r7
 80040ee:	b002      	add	sp, #8
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	46c0      	nop			; (mov r8, r8)
 80040f4:	40004800 	.word	0x40004800
 80040f8:	20000508 	.word	0x20000508
 80040fc:	2000056c 	.word	0x2000056c
 8004100:	200005e7 	.word	0x200005e7
 8004104:	200005e6 	.word	0x200005e6

08004108 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af04      	add	r7, sp, #16
 800410e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */

	ret = adc_en(100);
 8004110:	2064      	movs	r0, #100	; 0x64
 8004112:	f001 f909 	bl	8005328 <adc_en>
 8004116:	0003      	movs	r3, r0
 8004118:	001a      	movs	r2, r3
 800411a:	4b2f      	ldr	r3, [pc, #188]	; (80041d8 <StartDefaultTask+0xd0>)
 800411c:	701a      	strb	r2, [r3, #0]
	if (ret != BML_OK) {
 800411e:	4b2e      	ldr	r3, [pc, #184]	; (80041d8 <StartDefaultTask+0xd0>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d005      	beq.n	8004132 <StartDefaultTask+0x2a>
		USART_WRITE(USART2, "Error: ADC EN\n\r", 10, 100);
 8004126:	492d      	ldr	r1, [pc, #180]	; (80041dc <StartDefaultTask+0xd4>)
 8004128:	482d      	ldr	r0, [pc, #180]	; (80041e0 <StartDefaultTask+0xd8>)
 800412a:	2364      	movs	r3, #100	; 0x64
 800412c:	220a      	movs	r2, #10
 800412e:	f002 f9c1 	bl	80064b4 <USART_WRITE>
		//		while (1)
		//			;
	}
	mlx90614_setUnit(MLX90614_UNIT_C);
 8004132:	2002      	movs	r0, #2
 8004134:	f002 fafc 	bl	8006730 <mlx90614_setUnit>

	gpio_settingfn();
 8004138:	f7ff f924 	bl	8003384 <gpio_settingfn>

	ret = mlx90614_init();
 800413c:	f002 faac 	bl	8006698 <mlx90614_init>
 8004140:	0003      	movs	r3, r0
 8004142:	001a      	movs	r2, r3
 8004144:	4b24      	ldr	r3, [pc, #144]	; (80041d8 <StartDefaultTask+0xd0>)
 8004146:	701a      	strb	r2, [r3, #0]
	if (ret != BML_OK) {
 8004148:	4b23      	ldr	r3, [pc, #140]	; (80041d8 <StartDefaultTask+0xd0>)
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <StartDefaultTask+0x50>
		print("Error in Init MLX\n\r");
 8004150:	4b24      	ldr	r3, [pc, #144]	; (80041e4 <StartDefaultTask+0xdc>)
 8004152:	0018      	movs	r0, r3
 8004154:	f002 f9ea 	bl	800652c <print>
		//		while (1)
		//			;
	}

	adc_config(sample_time_2, CONT_off, SCANDIR_off, AUTOFF_off, WAIT_off,
 8004158:	2300      	movs	r3, #0
 800415a:	9302      	str	r3, [sp, #8]
 800415c:	2301      	movs	r3, #1
 800415e:	9301      	str	r3, [sp, #4]
 8004160:	2300      	movs	r3, #0
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	2300      	movs	r3, #0
 8004166:	2200      	movs	r2, #0
 8004168:	2100      	movs	r1, #0
 800416a:	2002      	movs	r0, #2
 800416c:	f001 f9f6 	bl	800555c <adc_config>
	DISCEN_on, OVRMOD_off);

	//	===============| TFT |=====================//
	LCD_Begin();
 8004170:	f002 fd90 	bl	8006c94 <LCD_Begin>
	LCD_SetRotation(0);
 8004174:	2000      	movs	r0, #0
 8004176:	f004 fae7 	bl	8008748 <LCD_SetRotation>
	//	LCD_FillScreen(BLACK);
	colorgradient(0, 0, TFTWIDTH, TFTHEIGHT, 50);
 800417a:	23a0      	movs	r3, #160	; 0xa0
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	2232      	movs	r2, #50	; 0x32
 8004180:	9200      	str	r2, [sp, #0]
 8004182:	22f0      	movs	r2, #240	; 0xf0
 8004184:	2100      	movs	r1, #0
 8004186:	2000      	movs	r0, #0
 8004188:	f7ff faa1 	bl	80036ce <colorgradient>

	LCD_SetTextSize(3);
 800418c:	2003      	movs	r0, #3
 800418e:	f004 faab 	bl	80086e8 <LCD_SetTextSize>

	HMS_bgdisplay();
 8004192:	f7ff f96f 	bl	8003474 <HMS_bgdisplay>

	LCD_SetTextColor(BLACK, WHITE);
 8004196:	4b14      	ldr	r3, [pc, #80]	; (80041e8 <StartDefaultTask+0xe0>)
 8004198:	0019      	movs	r1, r3
 800419a:	2000      	movs	r0, #0
 800419c:	f004 faba 	bl	8008714 <LCD_SetTextColor>
	LCD_SetCursor(190, 240);
 80041a0:	21f0      	movs	r1, #240	; 0xf0
 80041a2:	20be      	movs	r0, #190	; 0xbe
 80041a4:	f004 fa8a 	bl	80086bc <LCD_SetCursor>
	LCD_SetTextSize(2);
 80041a8:	2002      	movs	r0, #2
 80041aa:	f004 fa9d 	bl	80086e8 <LCD_SetTextSize>
	LCD_Printf("HR");
 80041ae:	4b0f      	ldr	r3, [pc, #60]	; (80041ec <StartDefaultTask+0xe4>)
 80041b0:	0018      	movs	r0, r3
 80041b2:	f004 f987 	bl	80084c4 <LCD_Printf>

	//===========================================//

	mSec = HAL_GetTick();
 80041b6:	f000 facf 	bl	8004758 <HAL_GetTick>
 80041ba:	0002      	movs	r2, r0
 80041bc:	4b0c      	ldr	r3, [pc, #48]	; (80041f0 <StartDefaultTask+0xe8>)
 80041be:	601a      	str	r2, [r3, #0]

	for (;;) {
		readTemperature();
 80041c0:	f7ff fb30 	bl	8003824 <readTemperature>
		readHnS();
 80041c4:	f7ff fb4c 	bl	8003860 <readHnS>
		dispHnS_flag = true;
 80041c8:	4b0a      	ldr	r3, [pc, #40]	; (80041f4 <StartDefaultTask+0xec>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	701a      	strb	r2, [r3, #0]
		dispTemp_flag = true;
 80041ce:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <StartDefaultTask+0xf0>)
 80041d0:	2201      	movs	r2, #1
 80041d2:	701a      	strb	r2, [r3, #0]
		readTemperature();
 80041d4:	e7f4      	b.n	80041c0 <StartDefaultTask+0xb8>
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	20000500 	.word	0x20000500
 80041dc:	0800efdc 	.word	0x0800efdc
 80041e0:	40004400 	.word	0x40004400
 80041e4:	0800efec 	.word	0x0800efec
 80041e8:	0000ffff 	.word	0x0000ffff
 80041ec:	0800f000 	.word	0x0800f000
 80041f0:	20000008 	.word	0x20000008
 80041f4:	20000005 	.word	0x20000005
 80041f8:	20000004 	.word	0x20000004

080041fc <StartTask02>:
 * @brief Function implementing the myTask02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const *argument) {
 80041fc:	b590      	push	{r4, r7, lr}
 80041fe:	b089      	sub	sp, #36	; 0x24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;) {
//		adcVal = readECG();
		if (adcArrHead == 0) {
 8004204:	4b43      	ldr	r3, [pc, #268]	; (8004314 <StartTask02+0x118>)
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d104      	bne.n	8004216 <StartTask02+0x1a>
			prevBeatVal = 2000;
 800420c:	4b42      	ldr	r3, [pc, #264]	; (8004318 <StartTask02+0x11c>)
 800420e:	22fa      	movs	r2, #250	; 0xfa
 8004210:	00d2      	lsls	r2, r2, #3
 8004212:	801a      	strh	r2, [r3, #0]
 8004214:	e007      	b.n	8004226 <StartTask02+0x2a>
		} else {
			prevBeatVal = adcArr[adcArrHead - 1];
 8004216:	4b3f      	ldr	r3, [pc, #252]	; (8004314 <StartTask02+0x118>)
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	1e5a      	subs	r2, r3, #1
 800421c:	4b3f      	ldr	r3, [pc, #252]	; (800431c <StartTask02+0x120>)
 800421e:	0052      	lsls	r2, r2, #1
 8004220:	5ad2      	ldrh	r2, [r2, r3]
 8004222:	4b3d      	ldr	r3, [pc, #244]	; (8004318 <StartTask02+0x11c>)
 8004224:	801a      	strh	r2, [r3, #0]
		}
		adcArr[adcArrHead] = readECG();
 8004226:	4b3b      	ldr	r3, [pc, #236]	; (8004314 <StartTask02+0x118>)
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	001c      	movs	r4, r3
 800422c:	f7ff fa84 	bl	8003738 <readECG>
 8004230:	0003      	movs	r3, r0
 8004232:	0019      	movs	r1, r3
 8004234:	4b39      	ldr	r3, [pc, #228]	; (800431c <StartTask02+0x120>)
 8004236:	0062      	lsls	r2, r4, #1
 8004238:	52d1      	strh	r1, [r2, r3]
		nextBeatVal = adcArr[adcArrHead];
 800423a:	4b36      	ldr	r3, [pc, #216]	; (8004314 <StartTask02+0x118>)
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	001a      	movs	r2, r3
 8004240:	4b36      	ldr	r3, [pc, #216]	; (800431c <StartTask02+0x120>)
 8004242:	0052      	lsls	r2, r2, #1
 8004244:	5ad2      	ldrh	r2, [r2, r3]
 8004246:	4b36      	ldr	r3, [pc, #216]	; (8004320 <StartTask02+0x124>)
 8004248:	801a      	strh	r2, [r3, #0]

		uint8_t adcStr[20];
		sprintf(adcStr, "ECG Value: %d\n\r", adcArr[adcArrHead]);
 800424a:	4b32      	ldr	r3, [pc, #200]	; (8004314 <StartTask02+0x118>)
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	001a      	movs	r2, r3
 8004250:	4b32      	ldr	r3, [pc, #200]	; (800431c <StartTask02+0x120>)
 8004252:	0052      	lsls	r2, r2, #1
 8004254:	5ad3      	ldrh	r3, [r2, r3]
 8004256:	001a      	movs	r2, r3
 8004258:	4932      	ldr	r1, [pc, #200]	; (8004324 <StartTask02+0x128>)
 800425a:	240c      	movs	r4, #12
 800425c:	193b      	adds	r3, r7, r4
 800425e:	0018      	movs	r0, r3
 8004260:	f007 f8b4 	bl	800b3cc <siprintf>
		USART_WRITE(USART2, adcStr, strlen(adcStr), 10);
 8004264:	193b      	adds	r3, r7, r4
 8004266:	0018      	movs	r0, r3
 8004268:	f7fb ff4e 	bl	8000108 <strlen>
 800426c:	0002      	movs	r2, r0
 800426e:	1939      	adds	r1, r7, r4
 8004270:	482d      	ldr	r0, [pc, #180]	; (8004328 <StartTask02+0x12c>)
 8004272:	230a      	movs	r3, #10
 8004274:	f002 f91e 	bl	80064b4 <USART_WRITE>

		beatVal = nextBeatVal - prevBeatVal;
 8004278:	4b29      	ldr	r3, [pc, #164]	; (8004320 <StartTask02+0x124>)
 800427a:	881a      	ldrh	r2, [r3, #0]
 800427c:	4b26      	ldr	r3, [pc, #152]	; (8004318 <StartTask02+0x11c>)
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	b29b      	uxth	r3, r3
 8004284:	b21a      	sxth	r2, r3
 8004286:	4b29      	ldr	r3, [pc, #164]	; (800432c <StartTask02+0x130>)
 8004288:	801a      	strh	r2, [r3, #0]

		if (beatVal > 800 && beatVal < 2500) {
 800428a:	4b28      	ldr	r3, [pc, #160]	; (800432c <StartTask02+0x130>)
 800428c:	2200      	movs	r2, #0
 800428e:	5e9a      	ldrsh	r2, [r3, r2]
 8004290:	23c8      	movs	r3, #200	; 0xc8
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	429a      	cmp	r2, r3
 8004296:	dd0c      	ble.n	80042b2 <StartTask02+0xb6>
 8004298:	4b24      	ldr	r3, [pc, #144]	; (800432c <StartTask02+0x130>)
 800429a:	2200      	movs	r2, #0
 800429c:	5e9b      	ldrsh	r3, [r3, r2]
 800429e:	4a24      	ldr	r2, [pc, #144]	; (8004330 <StartTask02+0x134>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	dc06      	bgt.n	80042b2 <StartTask02+0xb6>
//			USART_WRITE(USART2, "Beat!\n", 6, 10);
			hrVal++;
 80042a4:	4b23      	ldr	r3, [pc, #140]	; (8004334 <StartTask02+0x138>)
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3301      	adds	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	4b21      	ldr	r3, [pc, #132]	; (8004334 <StartTask02+0x138>)
 80042b0:	801a      	strh	r2, [r3, #0]
		}

		if (HAL_GetTick() - mSec >= 1000) {
 80042b2:	f000 fa51 	bl	8004758 <HAL_GetTick>
 80042b6:	0002      	movs	r2, r0
 80042b8:	4b1f      	ldr	r3, [pc, #124]	; (8004338 <StartTask02+0x13c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	1ad2      	subs	r2, r2, r3
 80042be:	23fa      	movs	r3, #250	; 0xfa
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d317      	bcc.n	80042f6 <StartTask02+0xfa>
			sec++;
 80042c6:	4b1d      	ldr	r3, [pc, #116]	; (800433c <StartTask02+0x140>)
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	3301      	adds	r3, #1
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	4b1b      	ldr	r3, [pc, #108]	; (800433c <StartTask02+0x140>)
 80042d0:	801a      	strh	r2, [r3, #0]
			if (sec >= 60) {
 80042d2:	4b1a      	ldr	r3, [pc, #104]	; (800433c <StartTask02+0x140>)
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	2b3b      	cmp	r3, #59	; 0x3b
 80042d8:	d908      	bls.n	80042ec <StartTask02+0xf0>
				sec = 0;
 80042da:	4b18      	ldr	r3, [pc, #96]	; (800433c <StartTask02+0x140>)
 80042dc:	2200      	movs	r2, #0
 80042de:	801a      	strh	r2, [r3, #0]
				min++;
 80042e0:	4b17      	ldr	r3, [pc, #92]	; (8004340 <StartTask02+0x144>)
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	3301      	adds	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	4b15      	ldr	r3, [pc, #84]	; (8004340 <StartTask02+0x144>)
 80042ea:	801a      	strh	r2, [r3, #0]
			}
			mSec = HAL_GetTick();
 80042ec:	f000 fa34 	bl	8004758 <HAL_GetTick>
 80042f0:	0002      	movs	r2, r0
 80042f2:	4b11      	ldr	r3, [pc, #68]	; (8004338 <StartTask02+0x13c>)
 80042f4:	601a      	str	r2, [r3, #0]
		}

		adcArrHead = (adcArrHead + 1) % adcArrLen;
 80042f6:	4b07      	ldr	r3, [pc, #28]	; (8004314 <StartTask02+0x118>)
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	3301      	adds	r3, #1
 80042fc:	21c8      	movs	r1, #200	; 0xc8
 80042fe:	0018      	movs	r0, r3
 8004300:	f7fc f88e 	bl	8000420 <__aeabi_idivmod>
 8004304:	000b      	movs	r3, r1
 8004306:	b29a      	uxth	r2, r3
 8004308:	4b02      	ldr	r3, [pc, #8]	; (8004314 <StartTask02+0x118>)
 800430a:	801a      	strh	r2, [r3, #0]
		osDelay(1);
 800430c:	2001      	movs	r0, #1
 800430e:	f004 fcc9 	bl	8008ca4 <osDelay>
	for (;;) {
 8004312:	e777      	b.n	8004204 <StartTask02+0x8>
 8004314:	20000788 	.word	0x20000788
 8004318:	2000078a 	.word	0x2000078a
 800431c:	200005f8 	.word	0x200005f8
 8004320:	2000078c 	.word	0x2000078c
 8004324:	0800f004 	.word	0x0800f004
 8004328:	40004400 	.word	0x40004400
 800432c:	200005f4 	.word	0x200005f4
 8004330:	000009c3 	.word	0x000009c3
 8004334:	200005f6 	.word	0x200005f6
 8004338:	20000008 	.word	0x20000008
 800433c:	2000078e 	.word	0x2000078e
 8004340:	20000790 	.word	0x20000790

08004344 <StartTask03>:
 * @brief Function implementing the myTask03 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void const *argument) {
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	for (;;) {
//		print("In task3\n");
		if (dispTemp_flag) {
 800434c:	4b33      	ldr	r3, [pc, #204]	; (800441c <StartTask03+0xd8>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d004      	beq.n	800435e <StartTask03+0x1a>
			displayTemperature();
 8004354:	f7ff fa16 	bl	8003784 <displayTemperature>
			dispTemp_flag = false;
 8004358:	4b30      	ldr	r3, [pc, #192]	; (800441c <StartTask03+0xd8>)
 800435a:	2200      	movs	r2, #0
 800435c:	701a      	strb	r2, [r3, #0]
		}
		if (dispHnS_flag) {
 800435e:	4b30      	ldr	r3, [pc, #192]	; (8004420 <StartTask03+0xdc>)
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d004      	beq.n	8004370 <StartTask03+0x2c>
			displayHnS();
 8004366:	f7ff fb13 	bl	8003990 <displayHnS>
			dispHnS_flag = false;
 800436a:	4b2d      	ldr	r3, [pc, #180]	; (8004420 <StartTask03+0xdc>)
 800436c:	2200      	movs	r2, #0
 800436e:	701a      	strb	r2, [r3, #0]
		}

		if (min - oneMin == 1) {
 8004370:	4b2c      	ldr	r3, [pc, #176]	; (8004424 <StartTask03+0xe0>)
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	001a      	movs	r2, r3
 8004376:	4b2c      	ldr	r3, [pc, #176]	; (8004428 <StartTask03+0xe4>)
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b01      	cmp	r3, #1
 800437e:	d147      	bne.n	8004410 <StartTask03+0xcc>
			print("HR: %d\n", hrVal);
 8004380:	4b2a      	ldr	r3, [pc, #168]	; (800442c <StartTask03+0xe8>)
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	b29b      	uxth	r3, r3
 8004386:	001a      	movs	r2, r3
 8004388:	4b29      	ldr	r3, [pc, #164]	; (8004430 <StartTask03+0xec>)
 800438a:	0011      	movs	r1, r2
 800438c:	0018      	movs	r0, r3
 800438e:	f002 f8cd 	bl	800652c <print>

			if (hrVal >= 150 && hrVal <= 20) {
 8004392:	4b26      	ldr	r3, [pc, #152]	; (800442c <StartTask03+0xe8>)
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	b29b      	uxth	r3, r3
 8004398:	2b95      	cmp	r3, #149	; 0x95
 800439a:	d907      	bls.n	80043ac <StartTask03+0x68>
 800439c:	4b23      	ldr	r3, [pc, #140]	; (800442c <StartTask03+0xe8>)
 800439e:	881b      	ldrh	r3, [r3, #0]
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	2b14      	cmp	r3, #20
 80043a4:	d802      	bhi.n	80043ac <StartTask03+0x68>
				hrVal = 0;
 80043a6:	4b21      	ldr	r3, [pc, #132]	; (800442c <StartTask03+0xe8>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	801a      	strh	r2, [r3, #0]
			}

			LCD_SetTextColor(BLACK, WHITE);
 80043ac:	4b21      	ldr	r3, [pc, #132]	; (8004434 <StartTask03+0xf0>)
 80043ae:	0019      	movs	r1, r3
 80043b0:	2000      	movs	r0, #0
 80043b2:	f004 f9af 	bl	8008714 <LCD_SetTextColor>
			LCD_SetCursor(190, 270);
 80043b6:	2387      	movs	r3, #135	; 0x87
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	0019      	movs	r1, r3
 80043bc:	20be      	movs	r0, #190	; 0xbe
 80043be:	f004 f97d 	bl	80086bc <LCD_SetCursor>
			LCD_SetTextSize(2);
 80043c2:	2002      	movs	r0, #2
 80043c4:	f004 f990 	bl	80086e8 <LCD_SetTextSize>
			if (hrVal < 10)
 80043c8:	4b18      	ldr	r3, [pc, #96]	; (800442c <StartTask03+0xe8>)
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b09      	cmp	r3, #9
 80043d0:	d809      	bhi.n	80043e6 <StartTask03+0xa2>
				LCD_Printf(" %d", hrVal);
 80043d2:	4b16      	ldr	r3, [pc, #88]	; (800442c <StartTask03+0xe8>)
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	001a      	movs	r2, r3
 80043da:	4b17      	ldr	r3, [pc, #92]	; (8004438 <StartTask03+0xf4>)
 80043dc:	0011      	movs	r1, r2
 80043de:	0018      	movs	r0, r3
 80043e0:	f004 f870 	bl	80084c4 <LCD_Printf>
 80043e4:	e00d      	b.n	8004402 <StartTask03+0xbe>
			else if(hrVal < 100)
 80043e6:	4b11      	ldr	r3, [pc, #68]	; (800442c <StartTask03+0xe8>)
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	2b63      	cmp	r3, #99	; 0x63
 80043ee:	d808      	bhi.n	8004402 <StartTask03+0xbe>
				LCD_Printf("%d", hrVal);
 80043f0:	4b0e      	ldr	r3, [pc, #56]	; (800442c <StartTask03+0xe8>)
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	001a      	movs	r2, r3
 80043f8:	4b10      	ldr	r3, [pc, #64]	; (800443c <StartTask03+0xf8>)
 80043fa:	0011      	movs	r1, r2
 80043fc:	0018      	movs	r0, r3
 80043fe:	f004 f861 	bl	80084c4 <LCD_Printf>
			hrVal = 0;
 8004402:	4b0a      	ldr	r3, [pc, #40]	; (800442c <StartTask03+0xe8>)
 8004404:	2200      	movs	r2, #0
 8004406:	801a      	strh	r2, [r3, #0]
			oneMin = min;
 8004408:	4b06      	ldr	r3, [pc, #24]	; (8004424 <StartTask03+0xe0>)
 800440a:	881a      	ldrh	r2, [r3, #0]
 800440c:	4b06      	ldr	r3, [pc, #24]	; (8004428 <StartTask03+0xe4>)
 800440e:	801a      	strh	r2, [r3, #0]
		}

//		LCD_DrawGraph(adcArr[adcArrTail]);
//		adcArrTail = (adcArrTail + 1) % adcArrLen;
		LCD_ECGAnimation();
 8004410:	f7ff fddc 	bl	8003fcc <LCD_ECGAnimation>
		osDelay(10);
 8004414:	200a      	movs	r0, #10
 8004416:	f004 fc45 	bl	8008ca4 <osDelay>
		if (dispTemp_flag) {
 800441a:	e797      	b.n	800434c <StartTask03+0x8>
 800441c:	20000004 	.word	0x20000004
 8004420:	20000005 	.word	0x20000005
 8004424:	20000790 	.word	0x20000790
 8004428:	20000792 	.word	0x20000792
 800442c:	200005f6 	.word	0x200005f6
 8004430:	0800f014 	.word	0x0800f014
 8004434:	0000ffff 	.word	0x0000ffff
 8004438:	0800f01c 	.word	0x0800f01c
 800443c:	0800f020 	.word	0x0800f020

08004440 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004444:	b672      	cpsid	i
}
 8004446:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004448:	e7fe      	b.n	8004448 <Error_Handler+0x8>
	...

0800444c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004452:	4b12      	ldr	r3, [pc, #72]	; (800449c <HAL_MspInit+0x50>)
 8004454:	699a      	ldr	r2, [r3, #24]
 8004456:	4b11      	ldr	r3, [pc, #68]	; (800449c <HAL_MspInit+0x50>)
 8004458:	2101      	movs	r1, #1
 800445a:	430a      	orrs	r2, r1
 800445c:	619a      	str	r2, [r3, #24]
 800445e:	4b0f      	ldr	r3, [pc, #60]	; (800449c <HAL_MspInit+0x50>)
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	2201      	movs	r2, #1
 8004464:	4013      	ands	r3, r2
 8004466:	607b      	str	r3, [r7, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800446a:	4b0c      	ldr	r3, [pc, #48]	; (800449c <HAL_MspInit+0x50>)
 800446c:	69da      	ldr	r2, [r3, #28]
 800446e:	4b0b      	ldr	r3, [pc, #44]	; (800449c <HAL_MspInit+0x50>)
 8004470:	2180      	movs	r1, #128	; 0x80
 8004472:	0549      	lsls	r1, r1, #21
 8004474:	430a      	orrs	r2, r1
 8004476:	61da      	str	r2, [r3, #28]
 8004478:	4b08      	ldr	r3, [pc, #32]	; (800449c <HAL_MspInit+0x50>)
 800447a:	69da      	ldr	r2, [r3, #28]
 800447c:	2380      	movs	r3, #128	; 0x80
 800447e:	055b      	lsls	r3, r3, #21
 8004480:	4013      	ands	r3, r2
 8004482:	603b      	str	r3, [r7, #0]
 8004484:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8004486:	2302      	movs	r3, #2
 8004488:	425b      	negs	r3, r3
 800448a:	2200      	movs	r2, #0
 800448c:	2103      	movs	r1, #3
 800448e:	0018      	movs	r0, r3
 8004490:	f000 f9fe 	bl	8004890 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004494:	46c0      	nop			; (mov r8, r8)
 8004496:	46bd      	mov	sp, r7
 8004498:	b002      	add	sp, #8
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40021000 	.word	0x40021000

080044a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044a4:	e7fe      	b.n	80044a4 <NMI_Handler+0x4>

080044a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044aa:	e7fe      	b.n	80044aa <HardFault_Handler+0x4>

080044ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044b0:	f000 f940 	bl	8004734 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80044b4:	f005 fd0e 	bl	8009ed4 <xTaskGetSchedulerState>
 80044b8:	0003      	movs	r3, r0
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d001      	beq.n	80044c2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80044be:	f005 fecb 	bl	800a258 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044c2:	46c0      	nop			; (mov r8, r8)
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
	return 1;
 80044cc:	2301      	movs	r3, #1
}
 80044ce:	0018      	movs	r0, r3
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <_kill>:

int _kill(int pid, int sig)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80044de:	f006 f8a9 	bl	800a634 <__errno>
 80044e2:	0003      	movs	r3, r0
 80044e4:	2216      	movs	r2, #22
 80044e6:	601a      	str	r2, [r3, #0]
	return -1;
 80044e8:	2301      	movs	r3, #1
 80044ea:	425b      	negs	r3, r3
}
 80044ec:	0018      	movs	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	b002      	add	sp, #8
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <_exit>:

void _exit (int status)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80044fc:	2301      	movs	r3, #1
 80044fe:	425a      	negs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	0011      	movs	r1, r2
 8004504:	0018      	movs	r0, r3
 8004506:	f7ff ffe5 	bl	80044d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 800450a:	e7fe      	b.n	800450a <_exit+0x16>

0800450c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004518:	2300      	movs	r3, #0
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	e00a      	b.n	8004534 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800451e:	e000      	b.n	8004522 <_read+0x16>
 8004520:	bf00      	nop
 8004522:	0001      	movs	r1, r0
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	60ba      	str	r2, [r7, #8]
 800452a:	b2ca      	uxtb	r2, r1
 800452c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	3301      	adds	r3, #1
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	429a      	cmp	r2, r3
 800453a:	dbf0      	blt.n	800451e <_read+0x12>
	}

return len;
 800453c:	687b      	ldr	r3, [r7, #4]
}
 800453e:	0018      	movs	r0, r3
 8004540:	46bd      	mov	sp, r7
 8004542:	b006      	add	sp, #24
 8004544:	bd80      	pop	{r7, pc}

08004546 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b086      	sub	sp, #24
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004552:	2300      	movs	r3, #0
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	e009      	b.n	800456c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	1c5a      	adds	r2, r3, #1
 800455c:	60ba      	str	r2, [r7, #8]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	0018      	movs	r0, r3
 8004562:	e000      	b.n	8004566 <_write+0x20>
 8004564:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	3301      	adds	r3, #1
 800456a:	617b      	str	r3, [r7, #20]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	429a      	cmp	r2, r3
 8004572:	dbf1      	blt.n	8004558 <_write+0x12>
	}
	return len;
 8004574:	687b      	ldr	r3, [r7, #4]
}
 8004576:	0018      	movs	r0, r3
 8004578:	46bd      	mov	sp, r7
 800457a:	b006      	add	sp, #24
 800457c:	bd80      	pop	{r7, pc}

0800457e <_close>:

int _close(int file)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b082      	sub	sp, #8
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
	return -1;
 8004586:	2301      	movs	r3, #1
 8004588:	425b      	negs	r3, r3
}
 800458a:	0018      	movs	r0, r3
 800458c:	46bd      	mov	sp, r7
 800458e:	b002      	add	sp, #8
 8004590:	bd80      	pop	{r7, pc}

08004592 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b082      	sub	sp, #8
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	2280      	movs	r2, #128	; 0x80
 80045a0:	0192      	lsls	r2, r2, #6
 80045a2:	605a      	str	r2, [r3, #4]
	return 0;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	0018      	movs	r0, r3
 80045a8:	46bd      	mov	sp, r7
 80045aa:	b002      	add	sp, #8
 80045ac:	bd80      	pop	{r7, pc}

080045ae <_isatty>:

int _isatty(int file)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b082      	sub	sp, #8
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
	return 1;
 80045b6:	2301      	movs	r3, #1
}
 80045b8:	0018      	movs	r0, r3
 80045ba:	46bd      	mov	sp, r7
 80045bc:	b002      	add	sp, #8
 80045be:	bd80      	pop	{r7, pc}

080045c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
	return 0;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	0018      	movs	r0, r3
 80045d0:	46bd      	mov	sp, r7
 80045d2:	b004      	add	sp, #16
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045e0:	4a14      	ldr	r2, [pc, #80]	; (8004634 <_sbrk+0x5c>)
 80045e2:	4b15      	ldr	r3, [pc, #84]	; (8004638 <_sbrk+0x60>)
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045ec:	4b13      	ldr	r3, [pc, #76]	; (800463c <_sbrk+0x64>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d102      	bne.n	80045fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045f4:	4b11      	ldr	r3, [pc, #68]	; (800463c <_sbrk+0x64>)
 80045f6:	4a12      	ldr	r2, [pc, #72]	; (8004640 <_sbrk+0x68>)
 80045f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045fa:	4b10      	ldr	r3, [pc, #64]	; (800463c <_sbrk+0x64>)
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	18d3      	adds	r3, r2, r3
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	429a      	cmp	r2, r3
 8004606:	d207      	bcs.n	8004618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004608:	f006 f814 	bl	800a634 <__errno>
 800460c:	0003      	movs	r3, r0
 800460e:	220c      	movs	r2, #12
 8004610:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004612:	2301      	movs	r3, #1
 8004614:	425b      	negs	r3, r3
 8004616:	e009      	b.n	800462c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004618:	4b08      	ldr	r3, [pc, #32]	; (800463c <_sbrk+0x64>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800461e:	4b07      	ldr	r3, [pc, #28]	; (800463c <_sbrk+0x64>)
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	18d2      	adds	r2, r2, r3
 8004626:	4b05      	ldr	r3, [pc, #20]	; (800463c <_sbrk+0x64>)
 8004628:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800462a:	68fb      	ldr	r3, [r7, #12]
}
 800462c:	0018      	movs	r0, r3
 800462e:	46bd      	mov	sp, r7
 8004630:	b006      	add	sp, #24
 8004632:	bd80      	pop	{r7, pc}
 8004634:	20004000 	.word	0x20004000
 8004638:	00000400 	.word	0x00000400
 800463c:	200007a8 	.word	0x200007a8
 8004640:	20001750 	.word	0x20001750

08004644 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004648:	46c0      	nop			; (mov r8, r8)
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004650:	480d      	ldr	r0, [pc, #52]	; (8004688 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004652:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004654:	480d      	ldr	r0, [pc, #52]	; (800468c <LoopForever+0x6>)
  ldr r1, =_edata
 8004656:	490e      	ldr	r1, [pc, #56]	; (8004690 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004658:	4a0e      	ldr	r2, [pc, #56]	; (8004694 <LoopForever+0xe>)
  movs r3, #0
 800465a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800465c:	e002      	b.n	8004664 <LoopCopyDataInit>

0800465e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800465e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004662:	3304      	adds	r3, #4

08004664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004668:	d3f9      	bcc.n	800465e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800466a:	4a0b      	ldr	r2, [pc, #44]	; (8004698 <LoopForever+0x12>)
  ldr r4, =_ebss
 800466c:	4c0b      	ldr	r4, [pc, #44]	; (800469c <LoopForever+0x16>)
  movs r3, #0
 800466e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004670:	e001      	b.n	8004676 <LoopFillZerobss>

08004672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004674:	3204      	adds	r2, #4

08004676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004678:	d3fb      	bcc.n	8004672 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800467a:	f7ff ffe3 	bl	8004644 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800467e:	f006 f8e1 	bl	800a844 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004682:	f7fe fd71 	bl	8003168 <main>

08004686 <LoopForever>:

LoopForever:
    b LoopForever
 8004686:	e7fe      	b.n	8004686 <LoopForever>
  ldr   r0, =_estack
 8004688:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800468c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004690:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8004694:	0800fb04 	.word	0x0800fb04
  ldr r2, =_sbss
 8004698:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 800469c:	2000174c 	.word	0x2000174c

080046a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80046a0:	e7fe      	b.n	80046a0 <ADC1_IRQHandler>
	...

080046a4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046a8:	4b07      	ldr	r3, [pc, #28]	; (80046c8 <HAL_Init+0x24>)
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <HAL_Init+0x24>)
 80046ae:	2110      	movs	r1, #16
 80046b0:	430a      	orrs	r2, r1
 80046b2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80046b4:	2003      	movs	r0, #3
 80046b6:	f000 f809 	bl	80046cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046ba:	f7ff fec7 	bl	800444c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	0018      	movs	r0, r3
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	40022000 	.word	0x40022000

080046cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046cc:	b590      	push	{r4, r7, lr}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80046d4:	4b14      	ldr	r3, [pc, #80]	; (8004728 <HAL_InitTick+0x5c>)
 80046d6:	681c      	ldr	r4, [r3, #0]
 80046d8:	4b14      	ldr	r3, [pc, #80]	; (800472c <HAL_InitTick+0x60>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	0019      	movs	r1, r3
 80046de:	23fa      	movs	r3, #250	; 0xfa
 80046e0:	0098      	lsls	r0, r3, #2
 80046e2:	f7fb fd2d 	bl	8000140 <__udivsi3>
 80046e6:	0003      	movs	r3, r0
 80046e8:	0019      	movs	r1, r3
 80046ea:	0020      	movs	r0, r4
 80046ec:	f7fb fd28 	bl	8000140 <__udivsi3>
 80046f0:	0003      	movs	r3, r0
 80046f2:	0018      	movs	r0, r3
 80046f4:	f000 f8e1 	bl	80048ba <HAL_SYSTICK_Config>
 80046f8:	1e03      	subs	r3, r0, #0
 80046fa:	d001      	beq.n	8004700 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e00f      	b.n	8004720 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b03      	cmp	r3, #3
 8004704:	d80b      	bhi.n	800471e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004706:	6879      	ldr	r1, [r7, #4]
 8004708:	2301      	movs	r3, #1
 800470a:	425b      	negs	r3, r3
 800470c:	2200      	movs	r2, #0
 800470e:	0018      	movs	r0, r3
 8004710:	f000 f8be 	bl	8004890 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004714:	4b06      	ldr	r3, [pc, #24]	; (8004730 <HAL_InitTick+0x64>)
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	e000      	b.n	8004720 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
}
 8004720:	0018      	movs	r0, r3
 8004722:	46bd      	mov	sp, r7
 8004724:	b003      	add	sp, #12
 8004726:	bd90      	pop	{r4, r7, pc}
 8004728:	2000000c 	.word	0x2000000c
 800472c:	20000014 	.word	0x20000014
 8004730:	20000010 	.word	0x20000010

08004734 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004738:	4b05      	ldr	r3, [pc, #20]	; (8004750 <HAL_IncTick+0x1c>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	001a      	movs	r2, r3
 800473e:	4b05      	ldr	r3, [pc, #20]	; (8004754 <HAL_IncTick+0x20>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	18d2      	adds	r2, r2, r3
 8004744:	4b03      	ldr	r3, [pc, #12]	; (8004754 <HAL_IncTick+0x20>)
 8004746:	601a      	str	r2, [r3, #0]
}
 8004748:	46c0      	nop			; (mov r8, r8)
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	46c0      	nop			; (mov r8, r8)
 8004750:	20000014 	.word	0x20000014
 8004754:	200007ac 	.word	0x200007ac

08004758 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
  return uwTick;
 800475c:	4b02      	ldr	r3, [pc, #8]	; (8004768 <HAL_GetTick+0x10>)
 800475e:	681b      	ldr	r3, [r3, #0]
}
 8004760:	0018      	movs	r0, r3
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	200007ac 	.word	0x200007ac

0800476c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800476c:	b590      	push	{r4, r7, lr}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	0002      	movs	r2, r0
 8004774:	6039      	str	r1, [r7, #0]
 8004776:	1dfb      	adds	r3, r7, #7
 8004778:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800477a:	1dfb      	adds	r3, r7, #7
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b7f      	cmp	r3, #127	; 0x7f
 8004780:	d828      	bhi.n	80047d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004782:	4a2f      	ldr	r2, [pc, #188]	; (8004840 <__NVIC_SetPriority+0xd4>)
 8004784:	1dfb      	adds	r3, r7, #7
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	b25b      	sxtb	r3, r3
 800478a:	089b      	lsrs	r3, r3, #2
 800478c:	33c0      	adds	r3, #192	; 0xc0
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	589b      	ldr	r3, [r3, r2]
 8004792:	1dfa      	adds	r2, r7, #7
 8004794:	7812      	ldrb	r2, [r2, #0]
 8004796:	0011      	movs	r1, r2
 8004798:	2203      	movs	r2, #3
 800479a:	400a      	ands	r2, r1
 800479c:	00d2      	lsls	r2, r2, #3
 800479e:	21ff      	movs	r1, #255	; 0xff
 80047a0:	4091      	lsls	r1, r2
 80047a2:	000a      	movs	r2, r1
 80047a4:	43d2      	mvns	r2, r2
 80047a6:	401a      	ands	r2, r3
 80047a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	019b      	lsls	r3, r3, #6
 80047ae:	22ff      	movs	r2, #255	; 0xff
 80047b0:	401a      	ands	r2, r3
 80047b2:	1dfb      	adds	r3, r7, #7
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	0018      	movs	r0, r3
 80047b8:	2303      	movs	r3, #3
 80047ba:	4003      	ands	r3, r0
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80047c0:	481f      	ldr	r0, [pc, #124]	; (8004840 <__NVIC_SetPriority+0xd4>)
 80047c2:	1dfb      	adds	r3, r7, #7
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	b25b      	sxtb	r3, r3
 80047c8:	089b      	lsrs	r3, r3, #2
 80047ca:	430a      	orrs	r2, r1
 80047cc:	33c0      	adds	r3, #192	; 0xc0
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80047d2:	e031      	b.n	8004838 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80047d4:	4a1b      	ldr	r2, [pc, #108]	; (8004844 <__NVIC_SetPriority+0xd8>)
 80047d6:	1dfb      	adds	r3, r7, #7
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	0019      	movs	r1, r3
 80047dc:	230f      	movs	r3, #15
 80047de:	400b      	ands	r3, r1
 80047e0:	3b08      	subs	r3, #8
 80047e2:	089b      	lsrs	r3, r3, #2
 80047e4:	3306      	adds	r3, #6
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	18d3      	adds	r3, r2, r3
 80047ea:	3304      	adds	r3, #4
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	1dfa      	adds	r2, r7, #7
 80047f0:	7812      	ldrb	r2, [r2, #0]
 80047f2:	0011      	movs	r1, r2
 80047f4:	2203      	movs	r2, #3
 80047f6:	400a      	ands	r2, r1
 80047f8:	00d2      	lsls	r2, r2, #3
 80047fa:	21ff      	movs	r1, #255	; 0xff
 80047fc:	4091      	lsls	r1, r2
 80047fe:	000a      	movs	r2, r1
 8004800:	43d2      	mvns	r2, r2
 8004802:	401a      	ands	r2, r3
 8004804:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	019b      	lsls	r3, r3, #6
 800480a:	22ff      	movs	r2, #255	; 0xff
 800480c:	401a      	ands	r2, r3
 800480e:	1dfb      	adds	r3, r7, #7
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	0018      	movs	r0, r3
 8004814:	2303      	movs	r3, #3
 8004816:	4003      	ands	r3, r0
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800481c:	4809      	ldr	r0, [pc, #36]	; (8004844 <__NVIC_SetPriority+0xd8>)
 800481e:	1dfb      	adds	r3, r7, #7
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	001c      	movs	r4, r3
 8004824:	230f      	movs	r3, #15
 8004826:	4023      	ands	r3, r4
 8004828:	3b08      	subs	r3, #8
 800482a:	089b      	lsrs	r3, r3, #2
 800482c:	430a      	orrs	r2, r1
 800482e:	3306      	adds	r3, #6
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	18c3      	adds	r3, r0, r3
 8004834:	3304      	adds	r3, #4
 8004836:	601a      	str	r2, [r3, #0]
}
 8004838:	46c0      	nop			; (mov r8, r8)
 800483a:	46bd      	mov	sp, r7
 800483c:	b003      	add	sp, #12
 800483e:	bd90      	pop	{r4, r7, pc}
 8004840:	e000e100 	.word	0xe000e100
 8004844:	e000ed00 	.word	0xe000ed00

08004848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	1e5a      	subs	r2, r3, #1
 8004854:	2380      	movs	r3, #128	; 0x80
 8004856:	045b      	lsls	r3, r3, #17
 8004858:	429a      	cmp	r2, r3
 800485a:	d301      	bcc.n	8004860 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800485c:	2301      	movs	r3, #1
 800485e:	e010      	b.n	8004882 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004860:	4b0a      	ldr	r3, [pc, #40]	; (800488c <SysTick_Config+0x44>)
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	3a01      	subs	r2, #1
 8004866:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004868:	2301      	movs	r3, #1
 800486a:	425b      	negs	r3, r3
 800486c:	2103      	movs	r1, #3
 800486e:	0018      	movs	r0, r3
 8004870:	f7ff ff7c 	bl	800476c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004874:	4b05      	ldr	r3, [pc, #20]	; (800488c <SysTick_Config+0x44>)
 8004876:	2200      	movs	r2, #0
 8004878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800487a:	4b04      	ldr	r3, [pc, #16]	; (800488c <SysTick_Config+0x44>)
 800487c:	2207      	movs	r2, #7
 800487e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004880:	2300      	movs	r3, #0
}
 8004882:	0018      	movs	r0, r3
 8004884:	46bd      	mov	sp, r7
 8004886:	b002      	add	sp, #8
 8004888:	bd80      	pop	{r7, pc}
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	e000e010 	.word	0xe000e010

08004890 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	60b9      	str	r1, [r7, #8]
 8004898:	607a      	str	r2, [r7, #4]
 800489a:	210f      	movs	r1, #15
 800489c:	187b      	adds	r3, r7, r1
 800489e:	1c02      	adds	r2, r0, #0
 80048a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	187b      	adds	r3, r7, r1
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	b25b      	sxtb	r3, r3
 80048aa:	0011      	movs	r1, r2
 80048ac:	0018      	movs	r0, r3
 80048ae:	f7ff ff5d 	bl	800476c <__NVIC_SetPriority>
}
 80048b2:	46c0      	nop			; (mov r8, r8)
 80048b4:	46bd      	mov	sp, r7
 80048b6:	b004      	add	sp, #16
 80048b8:	bd80      	pop	{r7, pc}

080048ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b082      	sub	sp, #8
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	0018      	movs	r0, r3
 80048c6:	f7ff ffbf 	bl	8004848 <SysTick_Config>
 80048ca:	0003      	movs	r3, r0
}
 80048cc:	0018      	movs	r0, r3
 80048ce:	46bd      	mov	sp, r7
 80048d0:	b002      	add	sp, #8
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b088      	sub	sp, #32
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e305      	b.n	8004ef2 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2201      	movs	r2, #1
 80048ec:	4013      	ands	r3, r2
 80048ee:	d100      	bne.n	80048f2 <HAL_RCC_OscConfig+0x1e>
 80048f0:	e08d      	b.n	8004a0e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80048f2:	4bc5      	ldr	r3, [pc, #788]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	220c      	movs	r2, #12
 80048f8:	4013      	ands	r3, r2
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d00e      	beq.n	800491c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80048fe:	4bc2      	ldr	r3, [pc, #776]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	220c      	movs	r2, #12
 8004904:	4013      	ands	r3, r2
 8004906:	2b08      	cmp	r3, #8
 8004908:	d116      	bne.n	8004938 <HAL_RCC_OscConfig+0x64>
 800490a:	4bbf      	ldr	r3, [pc, #764]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	23c0      	movs	r3, #192	; 0xc0
 8004910:	025b      	lsls	r3, r3, #9
 8004912:	401a      	ands	r2, r3
 8004914:	2380      	movs	r3, #128	; 0x80
 8004916:	025b      	lsls	r3, r3, #9
 8004918:	429a      	cmp	r2, r3
 800491a:	d10d      	bne.n	8004938 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800491c:	4bba      	ldr	r3, [pc, #744]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	2380      	movs	r3, #128	; 0x80
 8004922:	029b      	lsls	r3, r3, #10
 8004924:	4013      	ands	r3, r2
 8004926:	d100      	bne.n	800492a <HAL_RCC_OscConfig+0x56>
 8004928:	e070      	b.n	8004a0c <HAL_RCC_OscConfig+0x138>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d000      	beq.n	8004934 <HAL_RCC_OscConfig+0x60>
 8004932:	e06b      	b.n	8004a0c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e2dc      	b.n	8004ef2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d107      	bne.n	8004950 <HAL_RCC_OscConfig+0x7c>
 8004940:	4bb1      	ldr	r3, [pc, #708]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	4bb0      	ldr	r3, [pc, #704]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004946:	2180      	movs	r1, #128	; 0x80
 8004948:	0249      	lsls	r1, r1, #9
 800494a:	430a      	orrs	r2, r1
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	e02f      	b.n	80049b0 <HAL_RCC_OscConfig+0xdc>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10c      	bne.n	8004972 <HAL_RCC_OscConfig+0x9e>
 8004958:	4bab      	ldr	r3, [pc, #684]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	4baa      	ldr	r3, [pc, #680]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 800495e:	49ab      	ldr	r1, [pc, #684]	; (8004c0c <HAL_RCC_OscConfig+0x338>)
 8004960:	400a      	ands	r2, r1
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	4ba8      	ldr	r3, [pc, #672]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	4ba7      	ldr	r3, [pc, #668]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 800496a:	49a9      	ldr	r1, [pc, #676]	; (8004c10 <HAL_RCC_OscConfig+0x33c>)
 800496c:	400a      	ands	r2, r1
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	e01e      	b.n	80049b0 <HAL_RCC_OscConfig+0xdc>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b05      	cmp	r3, #5
 8004978:	d10e      	bne.n	8004998 <HAL_RCC_OscConfig+0xc4>
 800497a:	4ba3      	ldr	r3, [pc, #652]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	4ba2      	ldr	r3, [pc, #648]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004980:	2180      	movs	r1, #128	; 0x80
 8004982:	02c9      	lsls	r1, r1, #11
 8004984:	430a      	orrs	r2, r1
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	4b9f      	ldr	r3, [pc, #636]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	4b9e      	ldr	r3, [pc, #632]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 800498e:	2180      	movs	r1, #128	; 0x80
 8004990:	0249      	lsls	r1, r1, #9
 8004992:	430a      	orrs	r2, r1
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	e00b      	b.n	80049b0 <HAL_RCC_OscConfig+0xdc>
 8004998:	4b9b      	ldr	r3, [pc, #620]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	4b9a      	ldr	r3, [pc, #616]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 800499e:	499b      	ldr	r1, [pc, #620]	; (8004c0c <HAL_RCC_OscConfig+0x338>)
 80049a0:	400a      	ands	r2, r1
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	4b98      	ldr	r3, [pc, #608]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	4b97      	ldr	r3, [pc, #604]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 80049aa:	4999      	ldr	r1, [pc, #612]	; (8004c10 <HAL_RCC_OscConfig+0x33c>)
 80049ac:	400a      	ands	r2, r1
 80049ae:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d014      	beq.n	80049e2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b8:	f7ff fece 	bl	8004758 <HAL_GetTick>
 80049bc:	0003      	movs	r3, r0
 80049be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049c0:	e008      	b.n	80049d4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049c2:	f7ff fec9 	bl	8004758 <HAL_GetTick>
 80049c6:	0002      	movs	r2, r0
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b64      	cmp	r3, #100	; 0x64
 80049ce:	d901      	bls.n	80049d4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e28e      	b.n	8004ef2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049d4:	4b8c      	ldr	r3, [pc, #560]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	2380      	movs	r3, #128	; 0x80
 80049da:	029b      	lsls	r3, r3, #10
 80049dc:	4013      	ands	r3, r2
 80049de:	d0f0      	beq.n	80049c2 <HAL_RCC_OscConfig+0xee>
 80049e0:	e015      	b.n	8004a0e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e2:	f7ff feb9 	bl	8004758 <HAL_GetTick>
 80049e6:	0003      	movs	r3, r0
 80049e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049ec:	f7ff feb4 	bl	8004758 <HAL_GetTick>
 80049f0:	0002      	movs	r2, r0
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b64      	cmp	r3, #100	; 0x64
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e279      	b.n	8004ef2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049fe:	4b82      	ldr	r3, [pc, #520]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	2380      	movs	r3, #128	; 0x80
 8004a04:	029b      	lsls	r3, r3, #10
 8004a06:	4013      	ands	r3, r2
 8004a08:	d1f0      	bne.n	80049ec <HAL_RCC_OscConfig+0x118>
 8004a0a:	e000      	b.n	8004a0e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a0c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2202      	movs	r2, #2
 8004a14:	4013      	ands	r3, r2
 8004a16:	d100      	bne.n	8004a1a <HAL_RCC_OscConfig+0x146>
 8004a18:	e06c      	b.n	8004af4 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004a1a:	4b7b      	ldr	r3, [pc, #492]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	220c      	movs	r2, #12
 8004a20:	4013      	ands	r3, r2
 8004a22:	d00e      	beq.n	8004a42 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004a24:	4b78      	ldr	r3, [pc, #480]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	220c      	movs	r2, #12
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d11f      	bne.n	8004a70 <HAL_RCC_OscConfig+0x19c>
 8004a30:	4b75      	ldr	r3, [pc, #468]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	23c0      	movs	r3, #192	; 0xc0
 8004a36:	025b      	lsls	r3, r3, #9
 8004a38:	401a      	ands	r2, r3
 8004a3a:	2380      	movs	r3, #128	; 0x80
 8004a3c:	021b      	lsls	r3, r3, #8
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d116      	bne.n	8004a70 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a42:	4b71      	ldr	r3, [pc, #452]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2202      	movs	r2, #2
 8004a48:	4013      	ands	r3, r2
 8004a4a:	d005      	beq.n	8004a58 <HAL_RCC_OscConfig+0x184>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d001      	beq.n	8004a58 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e24c      	b.n	8004ef2 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a58:	4b6b      	ldr	r3, [pc, #428]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	22f8      	movs	r2, #248	; 0xf8
 8004a5e:	4393      	bics	r3, r2
 8004a60:	0019      	movs	r1, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	00da      	lsls	r2, r3, #3
 8004a68:	4b67      	ldr	r3, [pc, #412]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a6e:	e041      	b.n	8004af4 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d024      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a78:	4b63      	ldr	r3, [pc, #396]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	4b62      	ldr	r3, [pc, #392]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004a7e:	2101      	movs	r1, #1
 8004a80:	430a      	orrs	r2, r1
 8004a82:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a84:	f7ff fe68 	bl	8004758 <HAL_GetTick>
 8004a88:	0003      	movs	r3, r0
 8004a8a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a8e:	f7ff fe63 	bl	8004758 <HAL_GetTick>
 8004a92:	0002      	movs	r2, r0
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e228      	b.n	8004ef2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa0:	4b59      	ldr	r3, [pc, #356]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	d0f1      	beq.n	8004a8e <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aaa:	4b57      	ldr	r3, [pc, #348]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	22f8      	movs	r2, #248	; 0xf8
 8004ab0:	4393      	bics	r3, r2
 8004ab2:	0019      	movs	r1, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	00da      	lsls	r2, r3, #3
 8004aba:	4b53      	ldr	r3, [pc, #332]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004abc:	430a      	orrs	r2, r1
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	e018      	b.n	8004af4 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ac2:	4b51      	ldr	r3, [pc, #324]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	4b50      	ldr	r3, [pc, #320]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004ac8:	2101      	movs	r1, #1
 8004aca:	438a      	bics	r2, r1
 8004acc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ace:	f7ff fe43 	bl	8004758 <HAL_GetTick>
 8004ad2:	0003      	movs	r3, r0
 8004ad4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ad8:	f7ff fe3e 	bl	8004758 <HAL_GetTick>
 8004adc:	0002      	movs	r2, r0
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e203      	b.n	8004ef2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aea:	4b47      	ldr	r3, [pc, #284]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2202      	movs	r2, #2
 8004af0:	4013      	ands	r3, r2
 8004af2:	d1f1      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2208      	movs	r2, #8
 8004afa:	4013      	ands	r3, r2
 8004afc:	d036      	beq.n	8004b6c <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d019      	beq.n	8004b3a <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b06:	4b40      	ldr	r3, [pc, #256]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004b08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b0a:	4b3f      	ldr	r3, [pc, #252]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b12:	f7ff fe21 	bl	8004758 <HAL_GetTick>
 8004b16:	0003      	movs	r3, r0
 8004b18:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b1c:	f7ff fe1c 	bl	8004758 <HAL_GetTick>
 8004b20:	0002      	movs	r2, r0
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e1e1      	b.n	8004ef2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b2e:	4b36      	ldr	r3, [pc, #216]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	2202      	movs	r2, #2
 8004b34:	4013      	ands	r3, r2
 8004b36:	d0f1      	beq.n	8004b1c <HAL_RCC_OscConfig+0x248>
 8004b38:	e018      	b.n	8004b6c <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b3a:	4b33      	ldr	r3, [pc, #204]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b3e:	4b32      	ldr	r3, [pc, #200]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004b40:	2101      	movs	r1, #1
 8004b42:	438a      	bics	r2, r1
 8004b44:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b46:	f7ff fe07 	bl	8004758 <HAL_GetTick>
 8004b4a:	0003      	movs	r3, r0
 8004b4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b50:	f7ff fe02 	bl	8004758 <HAL_GetTick>
 8004b54:	0002      	movs	r2, r0
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e1c7      	b.n	8004ef2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b62:	4b29      	ldr	r3, [pc, #164]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	2202      	movs	r2, #2
 8004b68:	4013      	ands	r3, r2
 8004b6a:	d1f1      	bne.n	8004b50 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2204      	movs	r2, #4
 8004b72:	4013      	ands	r3, r2
 8004b74:	d100      	bne.n	8004b78 <HAL_RCC_OscConfig+0x2a4>
 8004b76:	e0b5      	b.n	8004ce4 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b78:	201f      	movs	r0, #31
 8004b7a:	183b      	adds	r3, r7, r0
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b80:	4b21      	ldr	r3, [pc, #132]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004b82:	69da      	ldr	r2, [r3, #28]
 8004b84:	2380      	movs	r3, #128	; 0x80
 8004b86:	055b      	lsls	r3, r3, #21
 8004b88:	4013      	ands	r3, r2
 8004b8a:	d110      	bne.n	8004bae <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b8c:	4b1e      	ldr	r3, [pc, #120]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004b8e:	69da      	ldr	r2, [r3, #28]
 8004b90:	4b1d      	ldr	r3, [pc, #116]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004b92:	2180      	movs	r1, #128	; 0x80
 8004b94:	0549      	lsls	r1, r1, #21
 8004b96:	430a      	orrs	r2, r1
 8004b98:	61da      	str	r2, [r3, #28]
 8004b9a:	4b1b      	ldr	r3, [pc, #108]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004b9c:	69da      	ldr	r2, [r3, #28]
 8004b9e:	2380      	movs	r3, #128	; 0x80
 8004ba0:	055b      	lsls	r3, r3, #21
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004ba8:	183b      	adds	r3, r7, r0
 8004baa:	2201      	movs	r2, #1
 8004bac:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bae:	4b19      	ldr	r3, [pc, #100]	; (8004c14 <HAL_RCC_OscConfig+0x340>)
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	2380      	movs	r3, #128	; 0x80
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	d11a      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bba:	4b16      	ldr	r3, [pc, #88]	; (8004c14 <HAL_RCC_OscConfig+0x340>)
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	4b15      	ldr	r3, [pc, #84]	; (8004c14 <HAL_RCC_OscConfig+0x340>)
 8004bc0:	2180      	movs	r1, #128	; 0x80
 8004bc2:	0049      	lsls	r1, r1, #1
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bc8:	f7ff fdc6 	bl	8004758 <HAL_GetTick>
 8004bcc:	0003      	movs	r3, r0
 8004bce:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bd2:	f7ff fdc1 	bl	8004758 <HAL_GetTick>
 8004bd6:	0002      	movs	r2, r0
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b64      	cmp	r3, #100	; 0x64
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e186      	b.n	8004ef2 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be4:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <HAL_RCC_OscConfig+0x340>)
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	2380      	movs	r3, #128	; 0x80
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	4013      	ands	r3, r2
 8004bee:	d0f0      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d10f      	bne.n	8004c18 <HAL_RCC_OscConfig+0x344>
 8004bf8:	4b03      	ldr	r3, [pc, #12]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004bfa:	6a1a      	ldr	r2, [r3, #32]
 8004bfc:	4b02      	ldr	r3, [pc, #8]	; (8004c08 <HAL_RCC_OscConfig+0x334>)
 8004bfe:	2101      	movs	r1, #1
 8004c00:	430a      	orrs	r2, r1
 8004c02:	621a      	str	r2, [r3, #32]
 8004c04:	e036      	b.n	8004c74 <HAL_RCC_OscConfig+0x3a0>
 8004c06:	46c0      	nop			; (mov r8, r8)
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	fffeffff 	.word	0xfffeffff
 8004c10:	fffbffff 	.word	0xfffbffff
 8004c14:	40007000 	.word	0x40007000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10c      	bne.n	8004c3a <HAL_RCC_OscConfig+0x366>
 8004c20:	4bb6      	ldr	r3, [pc, #728]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004c22:	6a1a      	ldr	r2, [r3, #32]
 8004c24:	4bb5      	ldr	r3, [pc, #724]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004c26:	2101      	movs	r1, #1
 8004c28:	438a      	bics	r2, r1
 8004c2a:	621a      	str	r2, [r3, #32]
 8004c2c:	4bb3      	ldr	r3, [pc, #716]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004c2e:	6a1a      	ldr	r2, [r3, #32]
 8004c30:	4bb2      	ldr	r3, [pc, #712]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004c32:	2104      	movs	r1, #4
 8004c34:	438a      	bics	r2, r1
 8004c36:	621a      	str	r2, [r3, #32]
 8004c38:	e01c      	b.n	8004c74 <HAL_RCC_OscConfig+0x3a0>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2b05      	cmp	r3, #5
 8004c40:	d10c      	bne.n	8004c5c <HAL_RCC_OscConfig+0x388>
 8004c42:	4bae      	ldr	r3, [pc, #696]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004c44:	6a1a      	ldr	r2, [r3, #32]
 8004c46:	4bad      	ldr	r3, [pc, #692]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004c48:	2104      	movs	r1, #4
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	621a      	str	r2, [r3, #32]
 8004c4e:	4bab      	ldr	r3, [pc, #684]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004c50:	6a1a      	ldr	r2, [r3, #32]
 8004c52:	4baa      	ldr	r3, [pc, #680]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004c54:	2101      	movs	r1, #1
 8004c56:	430a      	orrs	r2, r1
 8004c58:	621a      	str	r2, [r3, #32]
 8004c5a:	e00b      	b.n	8004c74 <HAL_RCC_OscConfig+0x3a0>
 8004c5c:	4ba7      	ldr	r3, [pc, #668]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004c5e:	6a1a      	ldr	r2, [r3, #32]
 8004c60:	4ba6      	ldr	r3, [pc, #664]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004c62:	2101      	movs	r1, #1
 8004c64:	438a      	bics	r2, r1
 8004c66:	621a      	str	r2, [r3, #32]
 8004c68:	4ba4      	ldr	r3, [pc, #656]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004c6a:	6a1a      	ldr	r2, [r3, #32]
 8004c6c:	4ba3      	ldr	r3, [pc, #652]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004c6e:	2104      	movs	r1, #4
 8004c70:	438a      	bics	r2, r1
 8004c72:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d014      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c7c:	f7ff fd6c 	bl	8004758 <HAL_GetTick>
 8004c80:	0003      	movs	r3, r0
 8004c82:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c84:	e009      	b.n	8004c9a <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c86:	f7ff fd67 	bl	8004758 <HAL_GetTick>
 8004c8a:	0002      	movs	r2, r0
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	4a9b      	ldr	r2, [pc, #620]	; (8004f00 <HAL_RCC_OscConfig+0x62c>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e12b      	b.n	8004ef2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c9a:	4b98      	ldr	r3, [pc, #608]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	d0f0      	beq.n	8004c86 <HAL_RCC_OscConfig+0x3b2>
 8004ca4:	e013      	b.n	8004cce <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ca6:	f7ff fd57 	bl	8004758 <HAL_GetTick>
 8004caa:	0003      	movs	r3, r0
 8004cac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cae:	e009      	b.n	8004cc4 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cb0:	f7ff fd52 	bl	8004758 <HAL_GetTick>
 8004cb4:	0002      	movs	r2, r0
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	4a91      	ldr	r2, [pc, #580]	; (8004f00 <HAL_RCC_OscConfig+0x62c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e116      	b.n	8004ef2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cc4:	4b8d      	ldr	r3, [pc, #564]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	2202      	movs	r2, #2
 8004cca:	4013      	ands	r3, r2
 8004ccc:	d1f0      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004cce:	231f      	movs	r3, #31
 8004cd0:	18fb      	adds	r3, r7, r3
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d105      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cd8:	4b88      	ldr	r3, [pc, #544]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004cda:	69da      	ldr	r2, [r3, #28]
 8004cdc:	4b87      	ldr	r3, [pc, #540]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004cde:	4989      	ldr	r1, [pc, #548]	; (8004f04 <HAL_RCC_OscConfig+0x630>)
 8004ce0:	400a      	ands	r2, r1
 8004ce2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2210      	movs	r2, #16
 8004cea:	4013      	ands	r3, r2
 8004cec:	d063      	beq.n	8004db6 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d12a      	bne.n	8004d4c <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004cf6:	4b81      	ldr	r3, [pc, #516]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cfa:	4b80      	ldr	r3, [pc, #512]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004cfc:	2104      	movs	r1, #4
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004d02:	4b7e      	ldr	r3, [pc, #504]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d06:	4b7d      	ldr	r3, [pc, #500]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004d08:	2101      	movs	r1, #1
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d0e:	f7ff fd23 	bl	8004758 <HAL_GetTick>
 8004d12:	0003      	movs	r3, r0
 8004d14:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004d18:	f7ff fd1e 	bl	8004758 <HAL_GetTick>
 8004d1c:	0002      	movs	r2, r0
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e0e3      	b.n	8004ef2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004d2a:	4b74      	ldr	r3, [pc, #464]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2e:	2202      	movs	r2, #2
 8004d30:	4013      	ands	r3, r2
 8004d32:	d0f1      	beq.n	8004d18 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004d34:	4b71      	ldr	r3, [pc, #452]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d38:	22f8      	movs	r2, #248	; 0xf8
 8004d3a:	4393      	bics	r3, r2
 8004d3c:	0019      	movs	r1, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	00da      	lsls	r2, r3, #3
 8004d44:	4b6d      	ldr	r3, [pc, #436]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004d46:	430a      	orrs	r2, r1
 8004d48:	635a      	str	r2, [r3, #52]	; 0x34
 8004d4a:	e034      	b.n	8004db6 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	3305      	adds	r3, #5
 8004d52:	d111      	bne.n	8004d78 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004d54:	4b69      	ldr	r3, [pc, #420]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004d56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d58:	4b68      	ldr	r3, [pc, #416]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004d5a:	2104      	movs	r1, #4
 8004d5c:	438a      	bics	r2, r1
 8004d5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004d60:	4b66      	ldr	r3, [pc, #408]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d64:	22f8      	movs	r2, #248	; 0xf8
 8004d66:	4393      	bics	r3, r2
 8004d68:	0019      	movs	r1, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	00da      	lsls	r2, r3, #3
 8004d70:	4b62      	ldr	r3, [pc, #392]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004d72:	430a      	orrs	r2, r1
 8004d74:	635a      	str	r2, [r3, #52]	; 0x34
 8004d76:	e01e      	b.n	8004db6 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004d78:	4b60      	ldr	r3, [pc, #384]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004d7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d7c:	4b5f      	ldr	r3, [pc, #380]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004d7e:	2104      	movs	r1, #4
 8004d80:	430a      	orrs	r2, r1
 8004d82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004d84:	4b5d      	ldr	r3, [pc, #372]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d88:	4b5c      	ldr	r3, [pc, #368]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	438a      	bics	r2, r1
 8004d8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d90:	f7ff fce2 	bl	8004758 <HAL_GetTick>
 8004d94:	0003      	movs	r3, r0
 8004d96:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004d98:	e008      	b.n	8004dac <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004d9a:	f7ff fcdd 	bl	8004758 <HAL_GetTick>
 8004d9e:	0002      	movs	r2, r0
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e0a2      	b.n	8004ef2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004dac:	4b53      	ldr	r3, [pc, #332]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db0:	2202      	movs	r2, #2
 8004db2:	4013      	ands	r3, r2
 8004db4:	d1f1      	bne.n	8004d9a <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d100      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x4ec>
 8004dbe:	e097      	b.n	8004ef0 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dc0:	4b4e      	ldr	r3, [pc, #312]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	220c      	movs	r2, #12
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d100      	bne.n	8004dce <HAL_RCC_OscConfig+0x4fa>
 8004dcc:	e06b      	b.n	8004ea6 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d14c      	bne.n	8004e70 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dd6:	4b49      	ldr	r3, [pc, #292]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	4b48      	ldr	r3, [pc, #288]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004ddc:	494a      	ldr	r1, [pc, #296]	; (8004f08 <HAL_RCC_OscConfig+0x634>)
 8004dde:	400a      	ands	r2, r1
 8004de0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de2:	f7ff fcb9 	bl	8004758 <HAL_GetTick>
 8004de6:	0003      	movs	r3, r0
 8004de8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dec:	f7ff fcb4 	bl	8004758 <HAL_GetTick>
 8004df0:	0002      	movs	r2, r0
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e079      	b.n	8004ef2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dfe:	4b3f      	ldr	r3, [pc, #252]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	2380      	movs	r3, #128	; 0x80
 8004e04:	049b      	lsls	r3, r3, #18
 8004e06:	4013      	ands	r3, r2
 8004e08:	d1f0      	bne.n	8004dec <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e0a:	4b3c      	ldr	r3, [pc, #240]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0e:	220f      	movs	r2, #15
 8004e10:	4393      	bics	r3, r2
 8004e12:	0019      	movs	r1, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e18:	4b38      	ldr	r3, [pc, #224]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e1e:	4b37      	ldr	r3, [pc, #220]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	4a3a      	ldr	r2, [pc, #232]	; (8004f0c <HAL_RCC_OscConfig+0x638>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	0019      	movs	r1, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	431a      	orrs	r2, r3
 8004e32:	4b32      	ldr	r3, [pc, #200]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004e34:	430a      	orrs	r2, r1
 8004e36:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e38:	4b30      	ldr	r3, [pc, #192]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	4b2f      	ldr	r3, [pc, #188]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004e3e:	2180      	movs	r1, #128	; 0x80
 8004e40:	0449      	lsls	r1, r1, #17
 8004e42:	430a      	orrs	r2, r1
 8004e44:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e46:	f7ff fc87 	bl	8004758 <HAL_GetTick>
 8004e4a:	0003      	movs	r3, r0
 8004e4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e50:	f7ff fc82 	bl	8004758 <HAL_GetTick>
 8004e54:	0002      	movs	r2, r0
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e047      	b.n	8004ef2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e62:	4b26      	ldr	r3, [pc, #152]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	2380      	movs	r3, #128	; 0x80
 8004e68:	049b      	lsls	r3, r3, #18
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	d0f0      	beq.n	8004e50 <HAL_RCC_OscConfig+0x57c>
 8004e6e:	e03f      	b.n	8004ef0 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e70:	4b22      	ldr	r3, [pc, #136]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	4b21      	ldr	r3, [pc, #132]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004e76:	4924      	ldr	r1, [pc, #144]	; (8004f08 <HAL_RCC_OscConfig+0x634>)
 8004e78:	400a      	ands	r2, r1
 8004e7a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e7c:	f7ff fc6c 	bl	8004758 <HAL_GetTick>
 8004e80:	0003      	movs	r3, r0
 8004e82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e84:	e008      	b.n	8004e98 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e86:	f7ff fc67 	bl	8004758 <HAL_GetTick>
 8004e8a:	0002      	movs	r2, r0
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d901      	bls.n	8004e98 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e02c      	b.n	8004ef2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e98:	4b18      	ldr	r3, [pc, #96]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	2380      	movs	r3, #128	; 0x80
 8004e9e:	049b      	lsls	r3, r3, #18
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	d1f0      	bne.n	8004e86 <HAL_RCC_OscConfig+0x5b2>
 8004ea4:	e024      	b.n	8004ef0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d101      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e01f      	b.n	8004ef2 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004eb2:	4b12      	ldr	r3, [pc, #72]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004eb8:	4b10      	ldr	r3, [pc, #64]	; (8004efc <HAL_RCC_OscConfig+0x628>)
 8004eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	23c0      	movs	r3, #192	; 0xc0
 8004ec2:	025b      	lsls	r3, r3, #9
 8004ec4:	401a      	ands	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d10e      	bne.n	8004eec <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	220f      	movs	r2, #15
 8004ed2:	401a      	ands	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d107      	bne.n	8004eec <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	23f0      	movs	r3, #240	; 0xf0
 8004ee0:	039b      	lsls	r3, r3, #14
 8004ee2:	401a      	ands	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d001      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e000      	b.n	8004ef2 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	b008      	add	sp, #32
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	46c0      	nop			; (mov r8, r8)
 8004efc:	40021000 	.word	0x40021000
 8004f00:	00001388 	.word	0x00001388
 8004f04:	efffffff 	.word	0xefffffff
 8004f08:	feffffff 	.word	0xfeffffff
 8004f0c:	ffc27fff 	.word	0xffc27fff

08004f10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e0b3      	b.n	800508c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f24:	4b5b      	ldr	r3, [pc, #364]	; (8005094 <HAL_RCC_ClockConfig+0x184>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d911      	bls.n	8004f56 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f32:	4b58      	ldr	r3, [pc, #352]	; (8005094 <HAL_RCC_ClockConfig+0x184>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2201      	movs	r2, #1
 8004f38:	4393      	bics	r3, r2
 8004f3a:	0019      	movs	r1, r3
 8004f3c:	4b55      	ldr	r3, [pc, #340]	; (8005094 <HAL_RCC_ClockConfig+0x184>)
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f44:	4b53      	ldr	r3, [pc, #332]	; (8005094 <HAL_RCC_ClockConfig+0x184>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d001      	beq.n	8004f56 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e09a      	b.n	800508c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	d015      	beq.n	8004f8c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2204      	movs	r2, #4
 8004f66:	4013      	ands	r3, r2
 8004f68:	d006      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004f6a:	4b4b      	ldr	r3, [pc, #300]	; (8005098 <HAL_RCC_ClockConfig+0x188>)
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	4b4a      	ldr	r3, [pc, #296]	; (8005098 <HAL_RCC_ClockConfig+0x188>)
 8004f70:	21e0      	movs	r1, #224	; 0xe0
 8004f72:	00c9      	lsls	r1, r1, #3
 8004f74:	430a      	orrs	r2, r1
 8004f76:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f78:	4b47      	ldr	r3, [pc, #284]	; (8005098 <HAL_RCC_ClockConfig+0x188>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	22f0      	movs	r2, #240	; 0xf0
 8004f7e:	4393      	bics	r3, r2
 8004f80:	0019      	movs	r1, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	4b44      	ldr	r3, [pc, #272]	; (8005098 <HAL_RCC_ClockConfig+0x188>)
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2201      	movs	r2, #1
 8004f92:	4013      	ands	r3, r2
 8004f94:	d040      	beq.n	8005018 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d107      	bne.n	8004fae <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f9e:	4b3e      	ldr	r3, [pc, #248]	; (8005098 <HAL_RCC_ClockConfig+0x188>)
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	2380      	movs	r3, #128	; 0x80
 8004fa4:	029b      	lsls	r3, r3, #10
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	d114      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e06e      	b.n	800508c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d107      	bne.n	8004fc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb6:	4b38      	ldr	r3, [pc, #224]	; (8005098 <HAL_RCC_ClockConfig+0x188>)
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	2380      	movs	r3, #128	; 0x80
 8004fbc:	049b      	lsls	r3, r3, #18
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	d108      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e062      	b.n	800508c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc6:	4b34      	ldr	r3, [pc, #208]	; (8005098 <HAL_RCC_ClockConfig+0x188>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	4013      	ands	r3, r2
 8004fce:	d101      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e05b      	b.n	800508c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fd4:	4b30      	ldr	r3, [pc, #192]	; (8005098 <HAL_RCC_ClockConfig+0x188>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	2203      	movs	r2, #3
 8004fda:	4393      	bics	r3, r2
 8004fdc:	0019      	movs	r1, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	4b2d      	ldr	r3, [pc, #180]	; (8005098 <HAL_RCC_ClockConfig+0x188>)
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fe8:	f7ff fbb6 	bl	8004758 <HAL_GetTick>
 8004fec:	0003      	movs	r3, r0
 8004fee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ff0:	e009      	b.n	8005006 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ff2:	f7ff fbb1 	bl	8004758 <HAL_GetTick>
 8004ff6:	0002      	movs	r2, r0
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	4a27      	ldr	r2, [pc, #156]	; (800509c <HAL_RCC_ClockConfig+0x18c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e042      	b.n	800508c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005006:	4b24      	ldr	r3, [pc, #144]	; (8005098 <HAL_RCC_ClockConfig+0x188>)
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	220c      	movs	r2, #12
 800500c:	401a      	ands	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	429a      	cmp	r2, r3
 8005016:	d1ec      	bne.n	8004ff2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005018:	4b1e      	ldr	r3, [pc, #120]	; (8005094 <HAL_RCC_ClockConfig+0x184>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2201      	movs	r2, #1
 800501e:	4013      	ands	r3, r2
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	429a      	cmp	r2, r3
 8005024:	d211      	bcs.n	800504a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005026:	4b1b      	ldr	r3, [pc, #108]	; (8005094 <HAL_RCC_ClockConfig+0x184>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2201      	movs	r2, #1
 800502c:	4393      	bics	r3, r2
 800502e:	0019      	movs	r1, r3
 8005030:	4b18      	ldr	r3, [pc, #96]	; (8005094 <HAL_RCC_ClockConfig+0x184>)
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005038:	4b16      	ldr	r3, [pc, #88]	; (8005094 <HAL_RCC_ClockConfig+0x184>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2201      	movs	r2, #1
 800503e:	4013      	ands	r3, r2
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d001      	beq.n	800504a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e020      	b.n	800508c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2204      	movs	r2, #4
 8005050:	4013      	ands	r3, r2
 8005052:	d009      	beq.n	8005068 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005054:	4b10      	ldr	r3, [pc, #64]	; (8005098 <HAL_RCC_ClockConfig+0x188>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	4a11      	ldr	r2, [pc, #68]	; (80050a0 <HAL_RCC_ClockConfig+0x190>)
 800505a:	4013      	ands	r3, r2
 800505c:	0019      	movs	r1, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68da      	ldr	r2, [r3, #12]
 8005062:	4b0d      	ldr	r3, [pc, #52]	; (8005098 <HAL_RCC_ClockConfig+0x188>)
 8005064:	430a      	orrs	r2, r1
 8005066:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005068:	f000 f820 	bl	80050ac <HAL_RCC_GetSysClockFreq>
 800506c:	0001      	movs	r1, r0
 800506e:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <HAL_RCC_ClockConfig+0x188>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	091b      	lsrs	r3, r3, #4
 8005074:	220f      	movs	r2, #15
 8005076:	4013      	ands	r3, r2
 8005078:	4a0a      	ldr	r2, [pc, #40]	; (80050a4 <HAL_RCC_ClockConfig+0x194>)
 800507a:	5cd3      	ldrb	r3, [r2, r3]
 800507c:	000a      	movs	r2, r1
 800507e:	40da      	lsrs	r2, r3
 8005080:	4b09      	ldr	r3, [pc, #36]	; (80050a8 <HAL_RCC_ClockConfig+0x198>)
 8005082:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005084:	2003      	movs	r0, #3
 8005086:	f7ff fb21 	bl	80046cc <HAL_InitTick>
  
  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	0018      	movs	r0, r3
 800508e:	46bd      	mov	sp, r7
 8005090:	b004      	add	sp, #16
 8005092:	bd80      	pop	{r7, pc}
 8005094:	40022000 	.word	0x40022000
 8005098:	40021000 	.word	0x40021000
 800509c:	00001388 	.word	0x00001388
 80050a0:	fffff8ff 	.word	0xfffff8ff
 80050a4:	0800f18c 	.word	0x0800f18c
 80050a8:	2000000c 	.word	0x2000000c

080050ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050ac:	b590      	push	{r4, r7, lr}
 80050ae:	b08f      	sub	sp, #60	; 0x3c
 80050b0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80050b2:	2314      	movs	r3, #20
 80050b4:	18fb      	adds	r3, r7, r3
 80050b6:	4a2c      	ldr	r2, [pc, #176]	; (8005168 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050b8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80050ba:	c313      	stmia	r3!, {r0, r1, r4}
 80050bc:	6812      	ldr	r2, [r2, #0]
 80050be:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80050c0:	1d3b      	adds	r3, r7, #4
 80050c2:	4a2a      	ldr	r2, [pc, #168]	; (800516c <HAL_RCC_GetSysClockFreq+0xc0>)
 80050c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80050c6:	c313      	stmia	r3!, {r0, r1, r4}
 80050c8:	6812      	ldr	r2, [r2, #0]
 80050ca:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050d0:	2300      	movs	r3, #0
 80050d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80050d4:	2300      	movs	r3, #0
 80050d6:	637b      	str	r3, [r7, #52]	; 0x34
 80050d8:	2300      	movs	r3, #0
 80050da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80050e0:	4b23      	ldr	r3, [pc, #140]	; (8005170 <HAL_RCC_GetSysClockFreq+0xc4>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80050e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e8:	220c      	movs	r2, #12
 80050ea:	4013      	ands	r3, r2
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d002      	beq.n	80050f6 <HAL_RCC_GetSysClockFreq+0x4a>
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d003      	beq.n	80050fc <HAL_RCC_GetSysClockFreq+0x50>
 80050f4:	e02f      	b.n	8005156 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80050f6:	4b1f      	ldr	r3, [pc, #124]	; (8005174 <HAL_RCC_GetSysClockFreq+0xc8>)
 80050f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80050fa:	e02f      	b.n	800515c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80050fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fe:	0c9b      	lsrs	r3, r3, #18
 8005100:	220f      	movs	r2, #15
 8005102:	4013      	ands	r3, r2
 8005104:	2214      	movs	r2, #20
 8005106:	18ba      	adds	r2, r7, r2
 8005108:	5cd3      	ldrb	r3, [r2, r3]
 800510a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800510c:	4b18      	ldr	r3, [pc, #96]	; (8005170 <HAL_RCC_GetSysClockFreq+0xc4>)
 800510e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005110:	220f      	movs	r2, #15
 8005112:	4013      	ands	r3, r2
 8005114:	1d3a      	adds	r2, r7, #4
 8005116:	5cd3      	ldrb	r3, [r2, r3]
 8005118:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800511a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800511c:	23c0      	movs	r3, #192	; 0xc0
 800511e:	025b      	lsls	r3, r3, #9
 8005120:	401a      	ands	r2, r3
 8005122:	2380      	movs	r3, #128	; 0x80
 8005124:	025b      	lsls	r3, r3, #9
 8005126:	429a      	cmp	r2, r3
 8005128:	d109      	bne.n	800513e <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800512a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800512c:	4811      	ldr	r0, [pc, #68]	; (8005174 <HAL_RCC_GetSysClockFreq+0xc8>)
 800512e:	f7fb f807 	bl	8000140 <__udivsi3>
 8005132:	0003      	movs	r3, r0
 8005134:	001a      	movs	r2, r3
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	4353      	muls	r3, r2
 800513a:	637b      	str	r3, [r7, #52]	; 0x34
 800513c:	e008      	b.n	8005150 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800513e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005140:	480c      	ldr	r0, [pc, #48]	; (8005174 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005142:	f7fa fffd 	bl	8000140 <__udivsi3>
 8005146:	0003      	movs	r3, r0
 8005148:	001a      	movs	r2, r3
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	4353      	muls	r3, r2
 800514e:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005152:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005154:	e002      	b.n	800515c <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005156:	4b07      	ldr	r3, [pc, #28]	; (8005174 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005158:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800515a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800515c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800515e:	0018      	movs	r0, r3
 8005160:	46bd      	mov	sp, r7
 8005162:	b00f      	add	sp, #60	; 0x3c
 8005164:	bd90      	pop	{r4, r7, pc}
 8005166:	46c0      	nop			; (mov r8, r8)
 8005168:	0800f024 	.word	0x0800f024
 800516c:	0800f034 	.word	0x0800f034
 8005170:	40021000 	.word	0x40021000
 8005174:	007a1200 	.word	0x007a1200

08005178 <adc_calib>:
 *  Created on: Oct 28, 2022
 *      Author: hp
 */
#include "adc.h"

BML_StatusTypeDef adc_calib(uint16_t timeout) {
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	0002      	movs	r2, r0
 8005180:	1dbb      	adds	r3, r7, #6
 8005182:	801a      	strh	r2, [r3, #0]
	// Calibrate ADC
	uint16_t i = timeout;
 8005184:	230e      	movs	r3, #14
 8005186:	18fb      	adds	r3, r7, r3
 8005188:	1dba      	adds	r2, r7, #6
 800518a:	8812      	ldrh	r2, [r2, #0]
 800518c:	801a      	strh	r2, [r3, #0]
	if ((ADC1->CR & ADC_CR_ADEN) != 0) /* (1) */
 800518e:	4b25      	ldr	r3, [pc, #148]	; (8005224 <adc_calib+0xac>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	2201      	movs	r2, #1
 8005194:	4013      	ands	r3, r2
 8005196:	d015      	beq.n	80051c4 <adc_calib+0x4c>
	{
		ADC1->CR |= ADC_CR_ADDIS; /* (2) */
 8005198:	4b22      	ldr	r3, [pc, #136]	; (8005224 <adc_calib+0xac>)
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	4b21      	ldr	r3, [pc, #132]	; (8005224 <adc_calib+0xac>)
 800519e:	2102      	movs	r1, #2
 80051a0:	430a      	orrs	r2, r1
 80051a2:	609a      	str	r2, [r3, #8]
	}
	while ((ADC1->CR & ADC_CR_ADEN) != 0) {
 80051a4:	e00e      	b.n	80051c4 <adc_calib+0x4c>
		ADC_Delay(1);
 80051a6:	2001      	movs	r0, #1
 80051a8:	f003 fd7c 	bl	8008ca4 <osDelay>
		i--;
 80051ac:	210e      	movs	r1, #14
 80051ae:	187b      	adds	r3, r7, r1
 80051b0:	881a      	ldrh	r2, [r3, #0]
 80051b2:	187b      	adds	r3, r7, r1
 80051b4:	3a01      	subs	r2, #1
 80051b6:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 80051b8:	187b      	adds	r3, r7, r1
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <adc_calib+0x4c>
			return BML_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e02b      	b.n	800521c <adc_calib+0xa4>
	while ((ADC1->CR & ADC_CR_ADEN) != 0) {
 80051c4:	4b17      	ldr	r3, [pc, #92]	; (8005224 <adc_calib+0xac>)
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	2201      	movs	r2, #1
 80051ca:	4013      	ands	r3, r2
 80051cc:	d1eb      	bne.n	80051a6 <adc_calib+0x2e>
		}
		/* For robust implementation, add here time-out management */
	}

	i = timeout;
 80051ce:	230e      	movs	r3, #14
 80051d0:	18fb      	adds	r3, r7, r3
 80051d2:	1dba      	adds	r2, r7, #6
 80051d4:	8812      	ldrh	r2, [r2, #0]
 80051d6:	801a      	strh	r2, [r3, #0]

	ADC1->CFGR1 &= ~ADC_CFGR1_DMAEN; /* (3) */
 80051d8:	4b12      	ldr	r3, [pc, #72]	; (8005224 <adc_calib+0xac>)
 80051da:	68da      	ldr	r2, [r3, #12]
 80051dc:	4b11      	ldr	r3, [pc, #68]	; (8005224 <adc_calib+0xac>)
 80051de:	2101      	movs	r1, #1
 80051e0:	438a      	bics	r2, r1
 80051e2:	60da      	str	r2, [r3, #12]
	ADC1->CR |= ADC_CR_ADCAL; /* (4) */
 80051e4:	4b0f      	ldr	r3, [pc, #60]	; (8005224 <adc_calib+0xac>)
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	4b0e      	ldr	r3, [pc, #56]	; (8005224 <adc_calib+0xac>)
 80051ea:	2180      	movs	r1, #128	; 0x80
 80051ec:	0609      	lsls	r1, r1, #24
 80051ee:	430a      	orrs	r2, r1
 80051f0:	609a      	str	r2, [r3, #8]
	while ((ADC1->CR & ADC_CR_ADCAL) != 0) /* (5) */
 80051f2:	e00e      	b.n	8005212 <adc_calib+0x9a>
	{
		ADC_Delay(1);
 80051f4:	2001      	movs	r0, #1
 80051f6:	f003 fd55 	bl	8008ca4 <osDelay>
		i--;
 80051fa:	210e      	movs	r1, #14
 80051fc:	187b      	adds	r3, r7, r1
 80051fe:	881a      	ldrh	r2, [r3, #0]
 8005200:	187b      	adds	r3, r7, r1
 8005202:	3a01      	subs	r2, #1
 8005204:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8005206:	187b      	adds	r3, r7, r1
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <adc_calib+0x9a>
			return BML_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e004      	b.n	800521c <adc_calib+0xa4>
	while ((ADC1->CR & ADC_CR_ADCAL) != 0) /* (5) */
 8005212:	4b04      	ldr	r3, [pc, #16]	; (8005224 <adc_calib+0xac>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	dbec      	blt.n	80051f4 <adc_calib+0x7c>
		}
	}
	return BML_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	0018      	movs	r0, r3
 800521e:	46bd      	mov	sp, r7
 8005220:	b004      	add	sp, #16
 8005222:	bd80      	pop	{r7, pc}
 8005224:	40012400 	.word	0x40012400

08005228 <adc_ready>:
BML_StatusTypeDef adc_ready(uint16_t timeout) {
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	0002      	movs	r2, r0
 8005230:	1dbb      	adds	r3, r7, #6
 8005232:	801a      	strh	r2, [r3, #0]
	uint16_t i = timeout;
 8005234:	230e      	movs	r3, #14
 8005236:	18fb      	adds	r3, r7, r3
 8005238:	1dba      	adds	r2, r7, #6
 800523a:	8812      	ldrh	r2, [r2, #0]
 800523c:	801a      	strh	r2, [r3, #0]
	// ADC ENABLE
	if ((ADC1->ISR & ADC_ISR_ADRDY) != 0) /* (1) */
 800523e:	4b15      	ldr	r3, [pc, #84]	; (8005294 <adc_ready+0x6c>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2201      	movs	r2, #1
 8005244:	4013      	ands	r3, r2
 8005246:	d005      	beq.n	8005254 <adc_ready+0x2c>
	{
		ADC1->ISR |= ADC_ISR_ADRDY; /* (2) */
 8005248:	4b12      	ldr	r3, [pc, #72]	; (8005294 <adc_ready+0x6c>)
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	4b11      	ldr	r3, [pc, #68]	; (8005294 <adc_ready+0x6c>)
 800524e:	2101      	movs	r1, #1
 8005250:	430a      	orrs	r2, r1
 8005252:	601a      	str	r2, [r3, #0]
	}
	ADC1->CR |= ADC_CR_ADEN; /* (3) */
 8005254:	4b0f      	ldr	r3, [pc, #60]	; (8005294 <adc_ready+0x6c>)
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	4b0e      	ldr	r3, [pc, #56]	; (8005294 <adc_ready+0x6c>)
 800525a:	2101      	movs	r1, #1
 800525c:	430a      	orrs	r2, r1
 800525e:	609a      	str	r2, [r3, #8]
	while ((ADC1->ISR & ADC_ISR_ADRDY) == 0) /* (4) */
 8005260:	e00e      	b.n	8005280 <adc_ready+0x58>
	{
		ADC_Delay(1);
 8005262:	2001      	movs	r0, #1
 8005264:	f003 fd1e 	bl	8008ca4 <osDelay>
		i--;
 8005268:	210e      	movs	r1, #14
 800526a:	187b      	adds	r3, r7, r1
 800526c:	881a      	ldrh	r2, [r3, #0]
 800526e:	187b      	adds	r3, r7, r1
 8005270:	3a01      	subs	r2, #1
 8005272:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8005274:	187b      	adds	r3, r7, r1
 8005276:	881b      	ldrh	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <adc_ready+0x58>
			return BML_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e005      	b.n	800528c <adc_ready+0x64>
	while ((ADC1->ISR & ADC_ISR_ADRDY) == 0) /* (4) */
 8005280:	4b04      	ldr	r3, [pc, #16]	; (8005294 <adc_ready+0x6c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2201      	movs	r2, #1
 8005286:	4013      	ands	r3, r2
 8005288:	d0eb      	beq.n	8005262 <adc_ready+0x3a>
		}
		/* For robust implementation, add here time-out management */
	}
	return BML_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	0018      	movs	r0, r3
 800528e:	46bd      	mov	sp, r7
 8005290:	b004      	add	sp, #16
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40012400 	.word	0x40012400

08005298 <adc_clk_config>:
BML_StatusTypeDef adc_clk_config(uint16_t timeout) {
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	0002      	movs	r2, r0
 80052a0:	1dbb      	adds	r3, r7, #6
 80052a2:	801a      	strh	r2, [r3, #0]
	uint16_t i = timeout;
 80052a4:	230e      	movs	r3, #14
 80052a6:	18fb      	adds	r3, r7, r3
 80052a8:	1dba      	adds	r2, r7, #6
 80052aa:	8812      	ldrh	r2, [r2, #0]
 80052ac:	801a      	strh	r2, [r3, #0]
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN; /* (1) */
 80052ae:	4b13      	ldr	r3, [pc, #76]	; (80052fc <adc_clk_config+0x64>)
 80052b0:	699a      	ldr	r2, [r3, #24]
 80052b2:	4b12      	ldr	r3, [pc, #72]	; (80052fc <adc_clk_config+0x64>)
 80052b4:	2180      	movs	r1, #128	; 0x80
 80052b6:	0089      	lsls	r1, r1, #2
 80052b8:	430a      	orrs	r2, r1
 80052ba:	619a      	str	r2, [r3, #24]
	RCC->CR2 |= RCC_CR2_HSI14ON; /* (2) */
 80052bc:	4b0f      	ldr	r3, [pc, #60]	; (80052fc <adc_clk_config+0x64>)
 80052be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052c0:	4b0e      	ldr	r3, [pc, #56]	; (80052fc <adc_clk_config+0x64>)
 80052c2:	2101      	movs	r1, #1
 80052c4:	430a      	orrs	r2, r1
 80052c6:	635a      	str	r2, [r3, #52]	; 0x34
	while ((RCC->CR2 & RCC_CR2_HSI14RDY) == 0) /* (3) */
 80052c8:	e00e      	b.n	80052e8 <adc_clk_config+0x50>
	{
		ADC_Delay(1);
 80052ca:	2001      	movs	r0, #1
 80052cc:	f003 fcea 	bl	8008ca4 <osDelay>
		i--;
 80052d0:	210e      	movs	r1, #14
 80052d2:	187b      	adds	r3, r7, r1
 80052d4:	881a      	ldrh	r2, [r3, #0]
 80052d6:	187b      	adds	r3, r7, r1
 80052d8:	3a01      	subs	r2, #1
 80052da:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 80052dc:	187b      	adds	r3, r7, r1
 80052de:	881b      	ldrh	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <adc_clk_config+0x50>
			return BML_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e005      	b.n	80052f4 <adc_clk_config+0x5c>
	while ((RCC->CR2 & RCC_CR2_HSI14RDY) == 0) /* (3) */
 80052e8:	4b04      	ldr	r3, [pc, #16]	; (80052fc <adc_clk_config+0x64>)
 80052ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ec:	2202      	movs	r2, #2
 80052ee:	4013      	ands	r3, r2
 80052f0:	d0eb      	beq.n	80052ca <adc_clk_config+0x32>
		}
		/* For robust implementation, add here time-out management */
	}
	return BML_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	0018      	movs	r0, r3
 80052f6:	46bd      	mov	sp, r7
 80052f8:	b004      	add	sp, #16
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	40021000 	.word	0x40021000

08005300 <adc_sample_time>:
void adc_sample_time(uint8_t sample_time) {
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	0002      	movs	r2, r0
 8005308:	1dfb      	adds	r3, r7, #7
 800530a:	701a      	strb	r2, [r3, #0]
	ADC1->SMPR |= sample_time;
 800530c:	4b05      	ldr	r3, [pc, #20]	; (8005324 <adc_sample_time+0x24>)
 800530e:	6959      	ldr	r1, [r3, #20]
 8005310:	1dfb      	adds	r3, r7, #7
 8005312:	781a      	ldrb	r2, [r3, #0]
 8005314:	4b03      	ldr	r3, [pc, #12]	; (8005324 <adc_sample_time+0x24>)
 8005316:	430a      	orrs	r2, r1
 8005318:	615a      	str	r2, [r3, #20]
}
 800531a:	46c0      	nop			; (mov r8, r8)
 800531c:	46bd      	mov	sp, r7
 800531e:	b002      	add	sp, #8
 8005320:	bd80      	pop	{r7, pc}
 8005322:	46c0      	nop			; (mov r8, r8)
 8005324:	40012400 	.word	0x40012400

08005328 <adc_en>:
BML_StatusTypeDef adc_en(uint16_t timeout) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	0002      	movs	r2, r0
 8005330:	1dbb      	adds	r3, r7, #6
 8005332:	801a      	strh	r2, [r3, #0]
	if (adc_clk_config(timeout) == BML_OK && adc_calib(timeout) == BML_OK
 8005334:	1dbb      	adds	r3, r7, #6
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	0018      	movs	r0, r3
 800533a:	f7ff ffad 	bl	8005298 <adc_clk_config>
 800533e:	1e03      	subs	r3, r0, #0
 8005340:	d10f      	bne.n	8005362 <adc_en+0x3a>
 8005342:	1dbb      	adds	r3, r7, #6
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	0018      	movs	r0, r3
 8005348:	f7ff ff16 	bl	8005178 <adc_calib>
 800534c:	1e03      	subs	r3, r0, #0
 800534e:	d108      	bne.n	8005362 <adc_en+0x3a>
			&& adc_ready(timeout) == BML_OK) {
 8005350:	1dbb      	adds	r3, r7, #6
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	0018      	movs	r0, r3
 8005356:	f7ff ff67 	bl	8005228 <adc_ready>
 800535a:	1e03      	subs	r3, r0, #0
 800535c:	d101      	bne.n	8005362 <adc_en+0x3a>
		return BML_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	e000      	b.n	8005364 <adc_en+0x3c>
	}
	return BML_ERROR;
 8005362:	2301      	movs	r3, #1
}
 8005364:	0018      	movs	r0, r3
 8005366:	46bd      	mov	sp, r7
 8005368:	b002      	add	sp, #8
 800536a:	bd80      	pop	{r7, pc}

0800536c <adc_read>:
BML_StatusTypeDef adc_read(uint16_t *arr, uint8_t arr_len, uint16_t timeout) {
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	0008      	movs	r0, r1
 8005376:	0011      	movs	r1, r2
 8005378:	1cfb      	adds	r3, r7, #3
 800537a:	1c02      	adds	r2, r0, #0
 800537c:	701a      	strb	r2, [r3, #0]
 800537e:	003b      	movs	r3, r7
 8005380:	1c0a      	adds	r2, r1, #0
 8005382:	801a      	strh	r2, [r3, #0]
	uint16_t i = timeout;
 8005384:	230a      	movs	r3, #10
 8005386:	18fb      	adds	r3, r7, r3
 8005388:	003a      	movs	r2, r7
 800538a:	8812      	ldrh	r2, [r2, #0]
 800538c:	801a      	strh	r2, [r3, #0]

	ADC1->CR |= ADC_CR_ADSTART;
 800538e:	4b15      	ldr	r3, [pc, #84]	; (80053e4 <adc_read+0x78>)
 8005390:	689a      	ldr	r2, [r3, #8]
 8005392:	4b14      	ldr	r3, [pc, #80]	; (80053e4 <adc_read+0x78>)
 8005394:	2104      	movs	r1, #4
 8005396:	430a      	orrs	r2, r1
 8005398:	609a      	str	r2, [r3, #8]

	for (int i = 0; i < arr_len; i++) {
 800539a:	2300      	movs	r3, #0
 800539c:	60fb      	str	r3, [r7, #12]
 800539e:	e010      	b.n	80053c2 <adc_read+0x56>
		while ((ADC1->ISR & ADC_ISR_EOC) == LOW) {
 80053a0:	46c0      	nop			; (mov r8, r8)
 80053a2:	4b10      	ldr	r3, [pc, #64]	; (80053e4 <adc_read+0x78>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2204      	movs	r2, #4
 80053a8:	4013      	ands	r3, r2
 80053aa:	d0fa      	beq.n	80053a2 <adc_read+0x36>
//			i--;
//			if (i <= 0) {
//				return BML_TIMEOUT;
//			}
		}
		*(arr + i) = ADC1->DR;
 80053ac:	4b0d      	ldr	r3, [pc, #52]	; (80053e4 <adc_read+0x78>)
 80053ae:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	18d3      	adds	r3, r2, r3
 80053b8:	b28a      	uxth	r2, r1
 80053ba:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < arr_len; i++) {
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	3301      	adds	r3, #1
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	1cfb      	adds	r3, r7, #3
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	dbe9      	blt.n	80053a0 <adc_read+0x34>
//		i = timeout;
	}
	ADC1->CR |= ADC_CR_ADSTP;
 80053cc:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <adc_read+0x78>)
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	4b04      	ldr	r3, [pc, #16]	; (80053e4 <adc_read+0x78>)
 80053d2:	2110      	movs	r1, #16
 80053d4:	430a      	orrs	r2, r1
 80053d6:	609a      	str	r2, [r3, #8]
	return BML_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	0018      	movs	r0, r3
 80053dc:	46bd      	mov	sp, r7
 80053de:	b004      	add	sp, #16
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	46c0      	nop			; (mov r8, r8)
 80053e4:	40012400 	.word	0x40012400

080053e8 <adc_chsel>:
			return BML_TIMEOUT;
		}
		/* For robust implementation, add here time-out management */
	}
}
void adc_chsel(GPIO_TypeDef *port, uint16_t pin) {
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	000a      	movs	r2, r1
 80053f2:	1cbb      	adds	r3, r7, #2
 80053f4:	801a      	strh	r2, [r3, #0]

	if (port == GPIOA) {
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	2390      	movs	r3, #144	; 0x90
 80053fa:	05db      	lsls	r3, r3, #23
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d141      	bne.n	8005484 <adc_chsel+0x9c>
		switch (pin) {
 8005400:	1cbb      	adds	r3, r7, #2
 8005402:	881b      	ldrh	r3, [r3, #0]
 8005404:	2b07      	cmp	r3, #7
 8005406:	d900      	bls.n	800540a <adc_chsel+0x22>
 8005408:	e094      	b.n	8005534 <adc_chsel+0x14c>
 800540a:	009a      	lsls	r2, r3, #2
 800540c:	4b4e      	ldr	r3, [pc, #312]	; (8005548 <adc_chsel+0x160>)
 800540e:	18d3      	adds	r3, r2, r3
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	469f      	mov	pc, r3
		case 0:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL0;
 8005414:	4b4d      	ldr	r3, [pc, #308]	; (800554c <adc_chsel+0x164>)
 8005416:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005418:	4b4c      	ldr	r3, [pc, #304]	; (800554c <adc_chsel+0x164>)
 800541a:	2101      	movs	r1, #1
 800541c:	430a      	orrs	r2, r1
 800541e:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8005420:	e08d      	b.n	800553e <adc_chsel+0x156>
		case 1:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL1;
 8005422:	4b4a      	ldr	r3, [pc, #296]	; (800554c <adc_chsel+0x164>)
 8005424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005426:	4b49      	ldr	r3, [pc, #292]	; (800554c <adc_chsel+0x164>)
 8005428:	2102      	movs	r1, #2
 800542a:	430a      	orrs	r2, r1
 800542c:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 800542e:	e086      	b.n	800553e <adc_chsel+0x156>
		case 2:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL2;
 8005430:	4b46      	ldr	r3, [pc, #280]	; (800554c <adc_chsel+0x164>)
 8005432:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005434:	4b45      	ldr	r3, [pc, #276]	; (800554c <adc_chsel+0x164>)
 8005436:	2104      	movs	r1, #4
 8005438:	430a      	orrs	r2, r1
 800543a:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 800543c:	e07f      	b.n	800553e <adc_chsel+0x156>
		case 3:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL3;
 800543e:	4b43      	ldr	r3, [pc, #268]	; (800554c <adc_chsel+0x164>)
 8005440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005442:	4b42      	ldr	r3, [pc, #264]	; (800554c <adc_chsel+0x164>)
 8005444:	2108      	movs	r1, #8
 8005446:	430a      	orrs	r2, r1
 8005448:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 800544a:	e078      	b.n	800553e <adc_chsel+0x156>
		case 4:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL4;
 800544c:	4b3f      	ldr	r3, [pc, #252]	; (800554c <adc_chsel+0x164>)
 800544e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005450:	4b3e      	ldr	r3, [pc, #248]	; (800554c <adc_chsel+0x164>)
 8005452:	2110      	movs	r1, #16
 8005454:	430a      	orrs	r2, r1
 8005456:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8005458:	e071      	b.n	800553e <adc_chsel+0x156>
		case 5:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL5;
 800545a:	4b3c      	ldr	r3, [pc, #240]	; (800554c <adc_chsel+0x164>)
 800545c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800545e:	4b3b      	ldr	r3, [pc, #236]	; (800554c <adc_chsel+0x164>)
 8005460:	2120      	movs	r1, #32
 8005462:	430a      	orrs	r2, r1
 8005464:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8005466:	e06a      	b.n	800553e <adc_chsel+0x156>
		case 6:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL6;
 8005468:	4b38      	ldr	r3, [pc, #224]	; (800554c <adc_chsel+0x164>)
 800546a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800546c:	4b37      	ldr	r3, [pc, #220]	; (800554c <adc_chsel+0x164>)
 800546e:	2140      	movs	r1, #64	; 0x40
 8005470:	430a      	orrs	r2, r1
 8005472:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8005474:	e063      	b.n	800553e <adc_chsel+0x156>
		case 7:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL7;
 8005476:	4b35      	ldr	r3, [pc, #212]	; (800554c <adc_chsel+0x164>)
 8005478:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800547a:	4b34      	ldr	r3, [pc, #208]	; (800554c <adc_chsel+0x164>)
 800547c:	2180      	movs	r1, #128	; 0x80
 800547e:	430a      	orrs	r2, r1
 8005480:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8005482:	e05c      	b.n	800553e <adc_chsel+0x156>
		default:
			break;
		}
	} else if (port == GPIOB) {
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a32      	ldr	r2, [pc, #200]	; (8005550 <adc_chsel+0x168>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d116      	bne.n	80054ba <adc_chsel+0xd2>
		switch (pin) {
 800548c:	1cbb      	adds	r3, r7, #2
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <adc_chsel+0xb2>
 8005494:	2b01      	cmp	r3, #1
 8005496:	d008      	beq.n	80054aa <adc_chsel+0xc2>
			break;
		case 1:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL9;
			break;
		default:
			break;
 8005498:	e051      	b.n	800553e <adc_chsel+0x156>
			ADC1->CHSELR |= ADC_CHSELR_CHSEL8;
 800549a:	4b2c      	ldr	r3, [pc, #176]	; (800554c <adc_chsel+0x164>)
 800549c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800549e:	4b2b      	ldr	r3, [pc, #172]	; (800554c <adc_chsel+0x164>)
 80054a0:	2180      	movs	r1, #128	; 0x80
 80054a2:	0049      	lsls	r1, r1, #1
 80054a4:	430a      	orrs	r2, r1
 80054a6:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80054a8:	e049      	b.n	800553e <adc_chsel+0x156>
			ADC1->CHSELR |= ADC_CHSELR_CHSEL9;
 80054aa:	4b28      	ldr	r3, [pc, #160]	; (800554c <adc_chsel+0x164>)
 80054ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054ae:	4b27      	ldr	r3, [pc, #156]	; (800554c <adc_chsel+0x164>)
 80054b0:	2180      	movs	r1, #128	; 0x80
 80054b2:	0089      	lsls	r1, r1, #2
 80054b4:	430a      	orrs	r2, r1
 80054b6:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80054b8:	e041      	b.n	800553e <adc_chsel+0x156>
		}
	} else if (port == GPIOC) {
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a25      	ldr	r2, [pc, #148]	; (8005554 <adc_chsel+0x16c>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d13a      	bne.n	8005538 <adc_chsel+0x150>
		switch (pin) {
 80054c2:	1cbb      	adds	r3, r7, #2
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	2b05      	cmp	r3, #5
 80054c8:	d838      	bhi.n	800553c <adc_chsel+0x154>
 80054ca:	009a      	lsls	r2, r3, #2
 80054cc:	4b22      	ldr	r3, [pc, #136]	; (8005558 <adc_chsel+0x170>)
 80054ce:	18d3      	adds	r3, r2, r3
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	469f      	mov	pc, r3
		case 0:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL10;
 80054d4:	4b1d      	ldr	r3, [pc, #116]	; (800554c <adc_chsel+0x164>)
 80054d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054d8:	4b1c      	ldr	r3, [pc, #112]	; (800554c <adc_chsel+0x164>)
 80054da:	2180      	movs	r1, #128	; 0x80
 80054dc:	00c9      	lsls	r1, r1, #3
 80054de:	430a      	orrs	r2, r1
 80054e0:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80054e2:	e02c      	b.n	800553e <adc_chsel+0x156>
		case 1:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL11;
 80054e4:	4b19      	ldr	r3, [pc, #100]	; (800554c <adc_chsel+0x164>)
 80054e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054e8:	4b18      	ldr	r3, [pc, #96]	; (800554c <adc_chsel+0x164>)
 80054ea:	2180      	movs	r1, #128	; 0x80
 80054ec:	0109      	lsls	r1, r1, #4
 80054ee:	430a      	orrs	r2, r1
 80054f0:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80054f2:	e024      	b.n	800553e <adc_chsel+0x156>
		case 2:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL12;
 80054f4:	4b15      	ldr	r3, [pc, #84]	; (800554c <adc_chsel+0x164>)
 80054f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054f8:	4b14      	ldr	r3, [pc, #80]	; (800554c <adc_chsel+0x164>)
 80054fa:	2180      	movs	r1, #128	; 0x80
 80054fc:	0149      	lsls	r1, r1, #5
 80054fe:	430a      	orrs	r2, r1
 8005500:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8005502:	e01c      	b.n	800553e <adc_chsel+0x156>
		case 3:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL13;
 8005504:	4b11      	ldr	r3, [pc, #68]	; (800554c <adc_chsel+0x164>)
 8005506:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005508:	4b10      	ldr	r3, [pc, #64]	; (800554c <adc_chsel+0x164>)
 800550a:	2180      	movs	r1, #128	; 0x80
 800550c:	0189      	lsls	r1, r1, #6
 800550e:	430a      	orrs	r2, r1
 8005510:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8005512:	e014      	b.n	800553e <adc_chsel+0x156>
		case 4:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL14;
 8005514:	4b0d      	ldr	r3, [pc, #52]	; (800554c <adc_chsel+0x164>)
 8005516:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005518:	4b0c      	ldr	r3, [pc, #48]	; (800554c <adc_chsel+0x164>)
 800551a:	2180      	movs	r1, #128	; 0x80
 800551c:	01c9      	lsls	r1, r1, #7
 800551e:	430a      	orrs	r2, r1
 8005520:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8005522:	e00c      	b.n	800553e <adc_chsel+0x156>
		case 5:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL15;
 8005524:	4b09      	ldr	r3, [pc, #36]	; (800554c <adc_chsel+0x164>)
 8005526:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005528:	4b08      	ldr	r3, [pc, #32]	; (800554c <adc_chsel+0x164>)
 800552a:	2180      	movs	r1, #128	; 0x80
 800552c:	0209      	lsls	r1, r1, #8
 800552e:	430a      	orrs	r2, r1
 8005530:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8005532:	e004      	b.n	800553e <adc_chsel+0x156>
			break;
 8005534:	46c0      	nop			; (mov r8, r8)
 8005536:	e002      	b.n	800553e <adc_chsel+0x156>
		default:
			break;
		}
	}
 8005538:	46c0      	nop			; (mov r8, r8)
 800553a:	e000      	b.n	800553e <adc_chsel+0x156>
			break;
 800553c:	46c0      	nop			; (mov r8, r8)
}
 800553e:	46c0      	nop			; (mov r8, r8)
 8005540:	46bd      	mov	sp, r7
 8005542:	b002      	add	sp, #8
 8005544:	bd80      	pop	{r7, pc}
 8005546:	46c0      	nop			; (mov r8, r8)
 8005548:	0800f19c 	.word	0x0800f19c
 800554c:	40012400 	.word	0x40012400
 8005550:	48000400 	.word	0x48000400
 8005554:	48000800 	.word	0x48000800
 8005558:	0800f1bc 	.word	0x0800f1bc

0800555c <adc_config>:
void adc_config(uint8_t sample_time, uint8_t CONT, uint8_t SCANDIR,
		uint8_t AUTOFF, uint8_t WAIT, uint8_t DISCEN, uint8_t OVRMOD) {
 800555c:	b5b0      	push	{r4, r5, r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	0005      	movs	r5, r0
 8005564:	000c      	movs	r4, r1
 8005566:	0010      	movs	r0, r2
 8005568:	0019      	movs	r1, r3
 800556a:	1dfb      	adds	r3, r7, #7
 800556c:	1c2a      	adds	r2, r5, #0
 800556e:	701a      	strb	r2, [r3, #0]
 8005570:	1dbb      	adds	r3, r7, #6
 8005572:	1c22      	adds	r2, r4, #0
 8005574:	701a      	strb	r2, [r3, #0]
 8005576:	1d7b      	adds	r3, r7, #5
 8005578:	1c02      	adds	r2, r0, #0
 800557a:	701a      	strb	r2, [r3, #0]
 800557c:	1d3b      	adds	r3, r7, #4
 800557e:	1c0a      	adds	r2, r1, #0
 8005580:	701a      	strb	r2, [r3, #0]
	adc_sample_time(sample_time);
 8005582:	1dfb      	adds	r3, r7, #7
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	0018      	movs	r0, r3
 8005588:	f7ff feba 	bl	8005300 <adc_sample_time>
	if (DISCEN && !CONT) {
 800558c:	231c      	movs	r3, #28
 800558e:	18fb      	adds	r3, r7, r3
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00a      	beq.n	80055ac <adc_config+0x50>
 8005596:	1dbb      	adds	r3, r7, #6
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d106      	bne.n	80055ac <adc_config+0x50>
		ADC1->CFGR1 |= ADC_CFGR1_DISCEN;
 800559e:	4b24      	ldr	r3, [pc, #144]	; (8005630 <adc_config+0xd4>)
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	4b23      	ldr	r3, [pc, #140]	; (8005630 <adc_config+0xd4>)
 80055a4:	2180      	movs	r1, #128	; 0x80
 80055a6:	0249      	lsls	r1, r1, #9
 80055a8:	430a      	orrs	r2, r1
 80055aa:	60da      	str	r2, [r3, #12]
	}
	if (AUTOFF) {
 80055ac:	1d3b      	adds	r3, r7, #4
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d006      	beq.n	80055c2 <adc_config+0x66>
		ADC1->CFGR1 |= ADC_CFGR1_AUTOFF;
 80055b4:	4b1e      	ldr	r3, [pc, #120]	; (8005630 <adc_config+0xd4>)
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	4b1d      	ldr	r3, [pc, #116]	; (8005630 <adc_config+0xd4>)
 80055ba:	2180      	movs	r1, #128	; 0x80
 80055bc:	0209      	lsls	r1, r1, #8
 80055be:	430a      	orrs	r2, r1
 80055c0:	60da      	str	r2, [r3, #12]
	}
	if (WAIT) {
 80055c2:	2318      	movs	r3, #24
 80055c4:	18fb      	adds	r3, r7, r3
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d006      	beq.n	80055da <adc_config+0x7e>
		ADC1->CFGR1 |= ADC_CFGR1_WAIT;
 80055cc:	4b18      	ldr	r3, [pc, #96]	; (8005630 <adc_config+0xd4>)
 80055ce:	68da      	ldr	r2, [r3, #12]
 80055d0:	4b17      	ldr	r3, [pc, #92]	; (8005630 <adc_config+0xd4>)
 80055d2:	2180      	movs	r1, #128	; 0x80
 80055d4:	01c9      	lsls	r1, r1, #7
 80055d6:	430a      	orrs	r2, r1
 80055d8:	60da      	str	r2, [r3, #12]
	}
	if (CONT && !DISCEN) {
 80055da:	1dbb      	adds	r3, r7, #6
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00b      	beq.n	80055fa <adc_config+0x9e>
 80055e2:	231c      	movs	r3, #28
 80055e4:	18fb      	adds	r3, r7, r3
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d106      	bne.n	80055fa <adc_config+0x9e>
		ADC1->CFGR1 |= ADC_CFGR1_CONT;
 80055ec:	4b10      	ldr	r3, [pc, #64]	; (8005630 <adc_config+0xd4>)
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	4b0f      	ldr	r3, [pc, #60]	; (8005630 <adc_config+0xd4>)
 80055f2:	2180      	movs	r1, #128	; 0x80
 80055f4:	0189      	lsls	r1, r1, #6
 80055f6:	430a      	orrs	r2, r1
 80055f8:	60da      	str	r2, [r3, #12]
	}
	if (OVRMOD) {
 80055fa:	2320      	movs	r3, #32
 80055fc:	18fb      	adds	r3, r7, r3
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d006      	beq.n	8005612 <adc_config+0xb6>
		ADC1->CFGR1 |= ADC_CFGR1_OVRMOD;
 8005604:	4b0a      	ldr	r3, [pc, #40]	; (8005630 <adc_config+0xd4>)
 8005606:	68da      	ldr	r2, [r3, #12]
 8005608:	4b09      	ldr	r3, [pc, #36]	; (8005630 <adc_config+0xd4>)
 800560a:	2180      	movs	r1, #128	; 0x80
 800560c:	0149      	lsls	r1, r1, #5
 800560e:	430a      	orrs	r2, r1
 8005610:	60da      	str	r2, [r3, #12]
	}
	if (SCANDIR) {
 8005612:	1d7b      	adds	r3, r7, #5
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d005      	beq.n	8005626 <adc_config+0xca>
		ADC1->CFGR1 |= ADC_CFGR1_SCANDIR;
 800561a:	4b05      	ldr	r3, [pc, #20]	; (8005630 <adc_config+0xd4>)
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	4b04      	ldr	r3, [pc, #16]	; (8005630 <adc_config+0xd4>)
 8005620:	2104      	movs	r1, #4
 8005622:	430a      	orrs	r2, r1
 8005624:	60da      	str	r2, [r3, #12]
	}
}
 8005626:	46c0      	nop			; (mov r8, r8)
 8005628:	46bd      	mov	sp, r7
 800562a:	b002      	add	sp, #8
 800562c:	bdb0      	pop	{r4, r5, r7, pc}
 800562e:	46c0      	nop			; (mov r8, r8)
 8005630:	40012400 	.word	0x40012400

08005634 <__NVIC_EnableIRQ>:
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	0002      	movs	r2, r0
 800563c:	1dfb      	adds	r3, r7, #7
 800563e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005640:	1dfb      	adds	r3, r7, #7
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	2b7f      	cmp	r3, #127	; 0x7f
 8005646:	d809      	bhi.n	800565c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005648:	1dfb      	adds	r3, r7, #7
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	001a      	movs	r2, r3
 800564e:	231f      	movs	r3, #31
 8005650:	401a      	ands	r2, r3
 8005652:	4b04      	ldr	r3, [pc, #16]	; (8005664 <__NVIC_EnableIRQ+0x30>)
 8005654:	2101      	movs	r1, #1
 8005656:	4091      	lsls	r1, r2
 8005658:	000a      	movs	r2, r1
 800565a:	601a      	str	r2, [r3, #0]
}
 800565c:	46c0      	nop			; (mov r8, r8)
 800565e:	46bd      	mov	sp, r7
 8005660:	b002      	add	sp, #8
 8005662:	bd80      	pop	{r7, pc}
 8005664:	e000e100 	.word	0xe000e100

08005668 <map>:
		(0x07) };



uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min,
		uint16_t out_max) {
 8005668:	b5b0      	push	{r4, r5, r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	0005      	movs	r5, r0
 8005670:	000c      	movs	r4, r1
 8005672:	0010      	movs	r0, r2
 8005674:	0019      	movs	r1, r3
 8005676:	1dbb      	adds	r3, r7, #6
 8005678:	1c2a      	adds	r2, r5, #0
 800567a:	801a      	strh	r2, [r3, #0]
 800567c:	1d3b      	adds	r3, r7, #4
 800567e:	1c22      	adds	r2, r4, #0
 8005680:	801a      	strh	r2, [r3, #0]
 8005682:	1cbb      	adds	r3, r7, #2
 8005684:	1c02      	adds	r2, r0, #0
 8005686:	801a      	strh	r2, [r3, #0]
 8005688:	003b      	movs	r3, r7
 800568a:	1c0a      	adds	r2, r1, #0
 800568c:	801a      	strh	r2, [r3, #0]
	return (((x - in_min) * (out_max - out_min)) / ((in_max - in_min) + out_min));
 800568e:	1dbb      	adds	r3, r7, #6
 8005690:	881a      	ldrh	r2, [r3, #0]
 8005692:	1d3b      	adds	r3, r7, #4
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	1ad2      	subs	r2, r2, r3
 8005698:	2318      	movs	r3, #24
 800569a:	18fb      	adds	r3, r7, r3
 800569c:	8819      	ldrh	r1, [r3, #0]
 800569e:	003b      	movs	r3, r7
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	1acb      	subs	r3, r1, r3
 80056a4:	4353      	muls	r3, r2
 80056a6:	0018      	movs	r0, r3
 80056a8:	1cbb      	adds	r3, r7, #2
 80056aa:	881a      	ldrh	r2, [r3, #0]
 80056ac:	1d3b      	adds	r3, r7, #4
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	1ad2      	subs	r2, r2, r3
 80056b2:	003b      	movs	r3, r7
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	18d3      	adds	r3, r2, r3
 80056b8:	0019      	movs	r1, r3
 80056ba:	f7fa fdcb 	bl	8000254 <__divsi3>
 80056be:	0003      	movs	r3, r0
 80056c0:	b29b      	uxth	r3, r3
}
 80056c2:	0018      	movs	r0, r3
 80056c4:	46bd      	mov	sp, r7
 80056c6:	b002      	add	sp, #8
 80056c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080056cc <gpio_clk_en>:

/**********************Enable clock Function*************************************/
void gpio_clk_en(GPIO_TypeDef *port) {
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
	if (port == GPIOA) {
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	2390      	movs	r3, #144	; 0x90
 80056d8:	05db      	lsls	r3, r3, #23
 80056da:	429a      	cmp	r2, r3
 80056dc:	d107      	bne.n	80056ee <gpio_clk_en+0x22>
		GPIOA_CLK_EN;
 80056de:	4b1b      	ldr	r3, [pc, #108]	; (800574c <gpio_clk_en+0x80>)
 80056e0:	695a      	ldr	r2, [r3, #20]
 80056e2:	4b1a      	ldr	r3, [pc, #104]	; (800574c <gpio_clk_en+0x80>)
 80056e4:	2180      	movs	r1, #128	; 0x80
 80056e6:	0289      	lsls	r1, r1, #10
 80056e8:	430a      	orrs	r2, r1
 80056ea:	615a      	str	r2, [r3, #20]
	} else if (port == GPIOD) {
		GPIOD_CLK_EN;
	} else {
		GPIOF_CLK_EN;
	}
}
 80056ec:	e02a      	b.n	8005744 <gpio_clk_en+0x78>
	} else if (port == GPIOB) {
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a17      	ldr	r2, [pc, #92]	; (8005750 <gpio_clk_en+0x84>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d107      	bne.n	8005706 <gpio_clk_en+0x3a>
		GPIOB_CLK_EN;
 80056f6:	4b15      	ldr	r3, [pc, #84]	; (800574c <gpio_clk_en+0x80>)
 80056f8:	695a      	ldr	r2, [r3, #20]
 80056fa:	4b14      	ldr	r3, [pc, #80]	; (800574c <gpio_clk_en+0x80>)
 80056fc:	2180      	movs	r1, #128	; 0x80
 80056fe:	02c9      	lsls	r1, r1, #11
 8005700:	430a      	orrs	r2, r1
 8005702:	615a      	str	r2, [r3, #20]
}
 8005704:	e01e      	b.n	8005744 <gpio_clk_en+0x78>
	} else if (port == GPIOC) {
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a12      	ldr	r2, [pc, #72]	; (8005754 <gpio_clk_en+0x88>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d107      	bne.n	800571e <gpio_clk_en+0x52>
		GPIOC_CLK_EN;
 800570e:	4b0f      	ldr	r3, [pc, #60]	; (800574c <gpio_clk_en+0x80>)
 8005710:	695a      	ldr	r2, [r3, #20]
 8005712:	4b0e      	ldr	r3, [pc, #56]	; (800574c <gpio_clk_en+0x80>)
 8005714:	2180      	movs	r1, #128	; 0x80
 8005716:	0309      	lsls	r1, r1, #12
 8005718:	430a      	orrs	r2, r1
 800571a:	615a      	str	r2, [r3, #20]
}
 800571c:	e012      	b.n	8005744 <gpio_clk_en+0x78>
	} else if (port == GPIOD) {
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a0d      	ldr	r2, [pc, #52]	; (8005758 <gpio_clk_en+0x8c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d107      	bne.n	8005736 <gpio_clk_en+0x6a>
		GPIOD_CLK_EN;
 8005726:	4b09      	ldr	r3, [pc, #36]	; (800574c <gpio_clk_en+0x80>)
 8005728:	695a      	ldr	r2, [r3, #20]
 800572a:	4b08      	ldr	r3, [pc, #32]	; (800574c <gpio_clk_en+0x80>)
 800572c:	2180      	movs	r1, #128	; 0x80
 800572e:	0349      	lsls	r1, r1, #13
 8005730:	430a      	orrs	r2, r1
 8005732:	615a      	str	r2, [r3, #20]
}
 8005734:	e006      	b.n	8005744 <gpio_clk_en+0x78>
		GPIOF_CLK_EN;
 8005736:	4b05      	ldr	r3, [pc, #20]	; (800574c <gpio_clk_en+0x80>)
 8005738:	695a      	ldr	r2, [r3, #20]
 800573a:	4b04      	ldr	r3, [pc, #16]	; (800574c <gpio_clk_en+0x80>)
 800573c:	2180      	movs	r1, #128	; 0x80
 800573e:	03c9      	lsls	r1, r1, #15
 8005740:	430a      	orrs	r2, r1
 8005742:	615a      	str	r2, [r3, #20]
}
 8005744:	46c0      	nop			; (mov r8, r8)
 8005746:	46bd      	mov	sp, r7
 8005748:	b002      	add	sp, #8
 800574a:	bd80      	pop	{r7, pc}
 800574c:	40021000 	.word	0x40021000
 8005750:	48000400 	.word	0x48000400
 8005754:	48000800 	.word	0x48000800
 8005758:	48000c00 	.word	0x48000c00

0800575c <gpio_config>:
/**********************************************************************************/

/********************GPIO Configuration Functions**********************************/
void gpio_config(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode,
		uint32_t pinSpeed, uint32_t pinPUPD, uint32_t PHPL_OD) {
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
 8005768:	603b      	str	r3, [r7, #0]

	if (pinMode == OUTPUT_MODE) {
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d11c      	bne.n	80057aa <gpio_config+0x4e>
		gpio_clk_en(port);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	0018      	movs	r0, r3
 8005774:	f7ff ffaa 	bl	80056cc <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	68b9      	ldr	r1, [r7, #8]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	0018      	movs	r0, r3
 8005780:	f000 f858 	bl	8005834 <gpio_moder>
		gpio_speed(port, pinNumber, pinSpeed);
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	68b9      	ldr	r1, [r7, #8]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	0018      	movs	r0, r3
 800578c:	f000 f86a 	bl	8005864 <gpio_speed>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	68b9      	ldr	r1, [r7, #8]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	0018      	movs	r0, r3
 8005798:	f000 f87c 	bl	8005894 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 800579c:	69fa      	ldr	r2, [r7, #28]
 800579e:	68b9      	ldr	r1, [r7, #8]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	0018      	movs	r0, r3
 80057a4:	f000 f88e 	bl	80058c4 <gpio_PHPL_OD>
	} else if (pinMode == ANALOG_MODE) {
		gpio_clk_en(port);
		gpio_moder(port, pinNumber, pinMode);
		adc_chsel(port, pinNumber);
	}
}
 80057a8:	e040      	b.n	800582c <gpio_config+0xd0>
	} else if (pinMode == INPUT_MODE) {
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d110      	bne.n	80057d2 <gpio_config+0x76>
		gpio_clk_en(port);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	0018      	movs	r0, r3
 80057b4:	f7ff ff8a 	bl	80056cc <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	68b9      	ldr	r1, [r7, #8]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	0018      	movs	r0, r3
 80057c0:	f000 f838 	bl	8005834 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	68b9      	ldr	r1, [r7, #8]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	0018      	movs	r0, r3
 80057cc:	f000 f862 	bl	8005894 <gpio_PUPD>
}
 80057d0:	e02c      	b.n	800582c <gpio_config+0xd0>
	} else if (pinMode == ALT_MODE) {
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d116      	bne.n	8005806 <gpio_config+0xaa>
		gpio_clk_en(port);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	0018      	movs	r0, r3
 80057dc:	f7ff ff76 	bl	80056cc <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	68b9      	ldr	r1, [r7, #8]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	0018      	movs	r0, r3
 80057e8:	f000 f824 	bl	8005834 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	68b9      	ldr	r1, [r7, #8]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	0018      	movs	r0, r3
 80057f4:	f000 f84e 	bl	8005894 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 80057f8:	69fa      	ldr	r2, [r7, #28]
 80057fa:	68b9      	ldr	r1, [r7, #8]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	0018      	movs	r0, r3
 8005800:	f000 f860 	bl	80058c4 <gpio_PHPL_OD>
}
 8005804:	e012      	b.n	800582c <gpio_config+0xd0>
	} else if (pinMode == ANALOG_MODE) {
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b03      	cmp	r3, #3
 800580a:	d10f      	bne.n	800582c <gpio_config+0xd0>
		gpio_clk_en(port);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	0018      	movs	r0, r3
 8005810:	f7ff ff5c 	bl	80056cc <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	0018      	movs	r0, r3
 800581c:	f000 f80a 	bl	8005834 <gpio_moder>
		adc_chsel(port, pinNumber);
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	0011      	movs	r1, r2
 8005826:	0018      	movs	r0, r3
 8005828:	f7ff fdde 	bl	80053e8 <adc_chsel>
}
 800582c:	46c0      	nop			; (mov r8, r8)
 800582e:	46bd      	mov	sp, r7
 8005830:	b004      	add	sp, #16
 8005832:	bd80      	pop	{r7, pc}

08005834 <gpio_moder>:

void gpio_moder(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode) {	// Config the mode
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
	port->MODER |= (pinMode << (PINPOS_2B[pinNumber]));	// IN/OP/Alternate/ANALOG
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	4b06      	ldr	r3, [pc, #24]	; (8005860 <gpio_moder+0x2c>)
 8005846:	68b9      	ldr	r1, [r7, #8]
 8005848:	0089      	lsls	r1, r1, #2
 800584a:	58cb      	ldr	r3, [r1, r3]
 800584c:	6879      	ldr	r1, [r7, #4]
 800584e:	4099      	lsls	r1, r3
 8005850:	000b      	movs	r3, r1
 8005852:	431a      	orrs	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	601a      	str	r2, [r3, #0]
}
 8005858:	46c0      	nop			; (mov r8, r8)
 800585a:	46bd      	mov	sp, r7
 800585c:	b004      	add	sp, #16
 800585e:	bd80      	pop	{r7, pc}
 8005860:	20000018 	.word	0x20000018

08005864 <gpio_speed>:

void gpio_speed(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinSpeed) {// Config the speed
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
	port->OSPEEDR |= (pinSpeed << PINPOS_2B[pinNumber]);		// LOW/MED/HIGH
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	4b06      	ldr	r3, [pc, #24]	; (8005890 <gpio_speed+0x2c>)
 8005876:	68b9      	ldr	r1, [r7, #8]
 8005878:	0089      	lsls	r1, r1, #2
 800587a:	58cb      	ldr	r3, [r1, r3]
 800587c:	6879      	ldr	r1, [r7, #4]
 800587e:	4099      	lsls	r1, r3
 8005880:	000b      	movs	r3, r1
 8005882:	431a      	orrs	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	609a      	str	r2, [r3, #8]
}
 8005888:	46c0      	nop			; (mov r8, r8)
 800588a:	46bd      	mov	sp, r7
 800588c:	b004      	add	sp, #16
 800588e:	bd80      	pop	{r7, pc}
 8005890:	20000018 	.word	0x20000018

08005894 <gpio_PUPD>:

void gpio_PUPD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinPUPD) {// ENABLE/DISABLE
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
	port->PUPDR |= (pinPUPD << PINPOS_2B[pinNumber]);		// PULL-UP/PULL-DOWN
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	68da      	ldr	r2, [r3, #12]
 80058a4:	4b06      	ldr	r3, [pc, #24]	; (80058c0 <gpio_PUPD+0x2c>)
 80058a6:	68b9      	ldr	r1, [r7, #8]
 80058a8:	0089      	lsls	r1, r1, #2
 80058aa:	58cb      	ldr	r3, [r1, r3]
 80058ac:	6879      	ldr	r1, [r7, #4]
 80058ae:	4099      	lsls	r1, r3
 80058b0:	000b      	movs	r3, r1
 80058b2:	431a      	orrs	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	60da      	str	r2, [r3, #12]
}
 80058b8:	46c0      	nop			; (mov r8, r8)
 80058ba:	46bd      	mov	sp, r7
 80058bc:	b004      	add	sp, #16
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	20000018 	.word	0x20000018

080058c4 <gpio_PHPL_OD>:
void gpio_PHPL_OD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t PHPL_OD) {// ENABLE/DISABLE
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
	port->OTYPER |= (PHPL_OD << pinNumber);	// PUSH-PULL/OPEN DRAIN
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	6879      	ldr	r1, [r7, #4]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	4099      	lsls	r1, r3
 80058da:	000b      	movs	r3, r1
 80058dc:	431a      	orrs	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	605a      	str	r2, [r3, #4]
}
 80058e2:	46c0      	nop			; (mov r8, r8)
 80058e4:	46bd      	mov	sp, r7
 80058e6:	b004      	add	sp, #16
 80058e8:	bd80      	pop	{r7, pc}

080058ea <gpio_altfn>:

void gpio_altfn(GPIO_TypeDef *port, uint32_t pinNumber,
		uint32_t alternate_function) {
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b084      	sub	sp, #16
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	60f8      	str	r0, [r7, #12]
 80058f2:	60b9      	str	r1, [r7, #8]
 80058f4:	607a      	str	r2, [r7, #4]
	if (pinNumber < 8) {
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b07      	cmp	r3, #7
 80058fa:	d80a      	bhi.n	8005912 <gpio_altfn+0x28>
		port->AFR[0] |= (alternate_function << (4 * pinNumber));
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6a1a      	ldr	r2, [r3, #32]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	6879      	ldr	r1, [r7, #4]
 8005906:	4099      	lsls	r1, r3
 8005908:	000b      	movs	r3, r1
 800590a:	431a      	orrs	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	621a      	str	r2, [r3, #32]
	} else {
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
	}
}
 8005910:	e00a      	b.n	8005928 <gpio_altfn+0x3e>
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	3b08      	subs	r3, #8
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	6879      	ldr	r1, [r7, #4]
 800591e:	4099      	lsls	r1, r3
 8005920:	000b      	movs	r3, r1
 8005922:	431a      	orrs	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005928:	46c0      	nop			; (mov r8, r8)
 800592a:	46bd      	mov	sp, r7
 800592c:	b004      	add	sp, #16
 800592e:	bd80      	pop	{r7, pc}

08005930 <gpio_write>:

/************************************************************************************/

/************************GPIO OPERATION FUNCTION*************************************/
void gpio_write(GPIO_TypeDef *port, uint32_t pinNumber, uint8_t state) {
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	1dfb      	adds	r3, r7, #7
 800593c:	701a      	strb	r2, [r3, #0]
	if (state) {
 800593e:	1dfb      	adds	r3, r7, #7
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d007      	beq.n	8005956 <gpio_write+0x26>
		port->BSRR = (1 << pinNumber);
 8005946:	2201      	movs	r2, #1
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	409a      	lsls	r2, r3
 800594c:	0013      	movs	r3, r2
 800594e:	001a      	movs	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	619a      	str	r2, [r3, #24]
	} else {
		port->BSRR = (1 << (pinNumber + 16));
	}
}
 8005954:	e007      	b.n	8005966 <gpio_write+0x36>
		port->BSRR = (1 << (pinNumber + 16));
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	3310      	adds	r3, #16
 800595a:	2201      	movs	r2, #1
 800595c:	409a      	lsls	r2, r3
 800595e:	0013      	movs	r3, r2
 8005960:	001a      	movs	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	619a      	str	r2, [r3, #24]
}
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	46bd      	mov	sp, r7
 800596a:	b004      	add	sp, #16
 800596c:	bd80      	pop	{r7, pc}
	...

08005970 <gpio_IT_config>:
	return flag;
}
/**************************************************************************************/

/*******************************INTERRUPT CONFIGURATION*********************************/
void gpio_IT_config(GPIO_TypeDef *port, uint32_t pinNumber, uint8_t edge) {
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	1dfb      	adds	r3, r7, #7
 800597c:	701a      	strb	r2, [r3, #0]
	SYSCFG_CLK_EN;
 800597e:	4bc8      	ldr	r3, [pc, #800]	; (8005ca0 <gpio_IT_config+0x330>)
 8005980:	699a      	ldr	r2, [r3, #24]
 8005982:	4bc7      	ldr	r3, [pc, #796]	; (8005ca0 <gpio_IT_config+0x330>)
 8005984:	2101      	movs	r1, #1
 8005986:	430a      	orrs	r2, r1
 8005988:	619a      	str	r2, [r3, #24]
	if (port == GPIOA) {
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	2390      	movs	r3, #144	; 0x90
 800598e:	05db      	lsls	r3, r3, #23
 8005990:	429a      	cmp	r2, r3
 8005992:	d149      	bne.n	8005a28 <gpio_IT_config+0xb8>
		switch (pinNumber) {
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2b0f      	cmp	r3, #15
 8005998:	d900      	bls.n	800599c <gpio_IT_config+0x2c>
 800599a:	e147      	b.n	8005c2c <gpio_IT_config+0x2bc>
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	009a      	lsls	r2, r3, #2
 80059a0:	4bc0      	ldr	r3, [pc, #768]	; (8005ca4 <gpio_IT_config+0x334>)
 80059a2:	18d3      	adds	r3, r2, r3
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	469f      	mov	pc, r3
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 80059a8:	4bbf      	ldr	r3, [pc, #764]	; (8005ca8 <gpio_IT_config+0x338>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	609a      	str	r2, [r3, #8]
			break;
 80059ae:	e13d      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PA;
 80059b0:	4bbd      	ldr	r3, [pc, #756]	; (8005ca8 <gpio_IT_config+0x338>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	609a      	str	r2, [r3, #8]
			break;
 80059b6:	e139      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PA;
 80059b8:	4bbb      	ldr	r3, [pc, #748]	; (8005ca8 <gpio_IT_config+0x338>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	609a      	str	r2, [r3, #8]
			break;
 80059be:	e135      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PA;
 80059c0:	4bb9      	ldr	r3, [pc, #740]	; (8005ca8 <gpio_IT_config+0x338>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	609a      	str	r2, [r3, #8]
			break;
 80059c6:	e131      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PA;
 80059c8:	4bb7      	ldr	r3, [pc, #732]	; (8005ca8 <gpio_IT_config+0x338>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	60da      	str	r2, [r3, #12]
			break;
 80059ce:	e12d      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PA;
 80059d0:	4bb5      	ldr	r3, [pc, #724]	; (8005ca8 <gpio_IT_config+0x338>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	60da      	str	r2, [r3, #12]
			break;
 80059d6:	e129      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PA;
 80059d8:	4bb3      	ldr	r3, [pc, #716]	; (8005ca8 <gpio_IT_config+0x338>)
 80059da:	2200      	movs	r2, #0
 80059dc:	60da      	str	r2, [r3, #12]
			break;
 80059de:	e125      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PA;
 80059e0:	4bb1      	ldr	r3, [pc, #708]	; (8005ca8 <gpio_IT_config+0x338>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	60da      	str	r2, [r3, #12]
			break;
 80059e6:	e121      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PA;
 80059e8:	4baf      	ldr	r3, [pc, #700]	; (8005ca8 <gpio_IT_config+0x338>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	611a      	str	r2, [r3, #16]
			break;
 80059ee:	e11d      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PA;
 80059f0:	4bad      	ldr	r3, [pc, #692]	; (8005ca8 <gpio_IT_config+0x338>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	611a      	str	r2, [r3, #16]
			break;
 80059f6:	e119      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PA;
 80059f8:	4bab      	ldr	r3, [pc, #684]	; (8005ca8 <gpio_IT_config+0x338>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	611a      	str	r2, [r3, #16]
			break;
 80059fe:	e115      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PA;
 8005a00:	4ba9      	ldr	r3, [pc, #676]	; (8005ca8 <gpio_IT_config+0x338>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	611a      	str	r2, [r3, #16]
			break;
 8005a06:	e111      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PA;
 8005a08:	4ba7      	ldr	r3, [pc, #668]	; (8005ca8 <gpio_IT_config+0x338>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	615a      	str	r2, [r3, #20]
			break;
 8005a0e:	e10d      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PA;
 8005a10:	4ba5      	ldr	r3, [pc, #660]	; (8005ca8 <gpio_IT_config+0x338>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	615a      	str	r2, [r3, #20]
			break;
 8005a16:	e109      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PA;
 8005a18:	4ba3      	ldr	r3, [pc, #652]	; (8005ca8 <gpio_IT_config+0x338>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	615a      	str	r2, [r3, #20]
			break;
 8005a1e:	e105      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PA;
 8005a20:	4ba1      	ldr	r3, [pc, #644]	; (8005ca8 <gpio_IT_config+0x338>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	615a      	str	r2, [r3, #20]
			break;
 8005a26:	e101      	b.n	8005c2c <gpio_IT_config+0x2bc>
		}	// end of Port A
	} else if (port == GPIOB) {
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4aa0      	ldr	r2, [pc, #640]	; (8005cac <gpio_IT_config+0x33c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d151      	bne.n	8005ad4 <gpio_IT_config+0x164>
		switch (pinNumber) {
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2b0f      	cmp	r3, #15
 8005a34:	d900      	bls.n	8005a38 <gpio_IT_config+0xc8>
 8005a36:	e0f9      	b.n	8005c2c <gpio_IT_config+0x2bc>
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	009a      	lsls	r2, r3, #2
 8005a3c:	4b9c      	ldr	r3, [pc, #624]	; (8005cb0 <gpio_IT_config+0x340>)
 8005a3e:	18d3      	adds	r3, r2, r3
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	469f      	mov	pc, r3
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PB;
 8005a44:	4b98      	ldr	r3, [pc, #608]	; (8005ca8 <gpio_IT_config+0x338>)
 8005a46:	2201      	movs	r2, #1
 8005a48:	609a      	str	r2, [r3, #8]
			break;
 8005a4a:	e0ef      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PB;
 8005a4c:	4b96      	ldr	r3, [pc, #600]	; (8005ca8 <gpio_IT_config+0x338>)
 8005a4e:	2210      	movs	r2, #16
 8005a50:	609a      	str	r2, [r3, #8]
			break;
 8005a52:	e0eb      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PB;
 8005a54:	4b94      	ldr	r3, [pc, #592]	; (8005ca8 <gpio_IT_config+0x338>)
 8005a56:	2280      	movs	r2, #128	; 0x80
 8005a58:	0052      	lsls	r2, r2, #1
 8005a5a:	609a      	str	r2, [r3, #8]
			break;
 8005a5c:	e0e6      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PB;
 8005a5e:	4b92      	ldr	r3, [pc, #584]	; (8005ca8 <gpio_IT_config+0x338>)
 8005a60:	2280      	movs	r2, #128	; 0x80
 8005a62:	0152      	lsls	r2, r2, #5
 8005a64:	609a      	str	r2, [r3, #8]
			break;
 8005a66:	e0e1      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PB;
 8005a68:	4b8f      	ldr	r3, [pc, #572]	; (8005ca8 <gpio_IT_config+0x338>)
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	60da      	str	r2, [r3, #12]
			break;
 8005a6e:	e0dd      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PB;
 8005a70:	4b8d      	ldr	r3, [pc, #564]	; (8005ca8 <gpio_IT_config+0x338>)
 8005a72:	2210      	movs	r2, #16
 8005a74:	60da      	str	r2, [r3, #12]
			break;
 8005a76:	e0d9      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PB;
 8005a78:	4b8b      	ldr	r3, [pc, #556]	; (8005ca8 <gpio_IT_config+0x338>)
 8005a7a:	2280      	movs	r2, #128	; 0x80
 8005a7c:	0052      	lsls	r2, r2, #1
 8005a7e:	60da      	str	r2, [r3, #12]
			break;
 8005a80:	e0d4      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PB;
 8005a82:	4b89      	ldr	r3, [pc, #548]	; (8005ca8 <gpio_IT_config+0x338>)
 8005a84:	2280      	movs	r2, #128	; 0x80
 8005a86:	0152      	lsls	r2, r2, #5
 8005a88:	60da      	str	r2, [r3, #12]
			break;
 8005a8a:	e0cf      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PB;
 8005a8c:	4b86      	ldr	r3, [pc, #536]	; (8005ca8 <gpio_IT_config+0x338>)
 8005a8e:	2201      	movs	r2, #1
 8005a90:	611a      	str	r2, [r3, #16]
			break;
 8005a92:	e0cb      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PB;
 8005a94:	4b84      	ldr	r3, [pc, #528]	; (8005ca8 <gpio_IT_config+0x338>)
 8005a96:	2210      	movs	r2, #16
 8005a98:	611a      	str	r2, [r3, #16]
			break;
 8005a9a:	e0c7      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PB;
 8005a9c:	4b82      	ldr	r3, [pc, #520]	; (8005ca8 <gpio_IT_config+0x338>)
 8005a9e:	2280      	movs	r2, #128	; 0x80
 8005aa0:	0052      	lsls	r2, r2, #1
 8005aa2:	611a      	str	r2, [r3, #16]
			break;
 8005aa4:	e0c2      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PB;
 8005aa6:	4b80      	ldr	r3, [pc, #512]	; (8005ca8 <gpio_IT_config+0x338>)
 8005aa8:	2280      	movs	r2, #128	; 0x80
 8005aaa:	0152      	lsls	r2, r2, #5
 8005aac:	611a      	str	r2, [r3, #16]
			break;
 8005aae:	e0bd      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PB;
 8005ab0:	4b7d      	ldr	r3, [pc, #500]	; (8005ca8 <gpio_IT_config+0x338>)
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	615a      	str	r2, [r3, #20]
			break;
 8005ab6:	e0b9      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PB;
 8005ab8:	4b7b      	ldr	r3, [pc, #492]	; (8005ca8 <gpio_IT_config+0x338>)
 8005aba:	2210      	movs	r2, #16
 8005abc:	615a      	str	r2, [r3, #20]
			break;
 8005abe:	e0b5      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PB;
 8005ac0:	4b79      	ldr	r3, [pc, #484]	; (8005ca8 <gpio_IT_config+0x338>)
 8005ac2:	2280      	movs	r2, #128	; 0x80
 8005ac4:	0052      	lsls	r2, r2, #1
 8005ac6:	615a      	str	r2, [r3, #20]
			break;
 8005ac8:	e0b0      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PB;
 8005aca:	4b77      	ldr	r3, [pc, #476]	; (8005ca8 <gpio_IT_config+0x338>)
 8005acc:	2280      	movs	r2, #128	; 0x80
 8005ace:	0152      	lsls	r2, r2, #5
 8005ad0:	615a      	str	r2, [r3, #20]
			break;
 8005ad2:	e0ab      	b.n	8005c2c <gpio_IT_config+0x2bc>
		}	// end of Port B
	} else if (port == GPIOC) {
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4a77      	ldr	r2, [pc, #476]	; (8005cb4 <gpio_IT_config+0x344>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d151      	bne.n	8005b80 <gpio_IT_config+0x210>
		switch (pinNumber) {
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2b0f      	cmp	r3, #15
 8005ae0:	d900      	bls.n	8005ae4 <gpio_IT_config+0x174>
 8005ae2:	e0a3      	b.n	8005c2c <gpio_IT_config+0x2bc>
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	009a      	lsls	r2, r3, #2
 8005ae8:	4b73      	ldr	r3, [pc, #460]	; (8005cb8 <gpio_IT_config+0x348>)
 8005aea:	18d3      	adds	r3, r2, r3
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	469f      	mov	pc, r3
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PC;
 8005af0:	4b6d      	ldr	r3, [pc, #436]	; (8005ca8 <gpio_IT_config+0x338>)
 8005af2:	2202      	movs	r2, #2
 8005af4:	609a      	str	r2, [r3, #8]
			break;
 8005af6:	e099      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PC;
 8005af8:	4b6b      	ldr	r3, [pc, #428]	; (8005ca8 <gpio_IT_config+0x338>)
 8005afa:	2220      	movs	r2, #32
 8005afc:	609a      	str	r2, [r3, #8]
			break;
 8005afe:	e095      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PC;
 8005b00:	4b69      	ldr	r3, [pc, #420]	; (8005ca8 <gpio_IT_config+0x338>)
 8005b02:	2280      	movs	r2, #128	; 0x80
 8005b04:	0092      	lsls	r2, r2, #2
 8005b06:	609a      	str	r2, [r3, #8]
			break;
 8005b08:	e090      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PC;
 8005b0a:	4b67      	ldr	r3, [pc, #412]	; (8005ca8 <gpio_IT_config+0x338>)
 8005b0c:	2280      	movs	r2, #128	; 0x80
 8005b0e:	0192      	lsls	r2, r2, #6
 8005b10:	609a      	str	r2, [r3, #8]
			break;
 8005b12:	e08b      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PC;
 8005b14:	4b64      	ldr	r3, [pc, #400]	; (8005ca8 <gpio_IT_config+0x338>)
 8005b16:	2202      	movs	r2, #2
 8005b18:	60da      	str	r2, [r3, #12]
			break;
 8005b1a:	e087      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PC;
 8005b1c:	4b62      	ldr	r3, [pc, #392]	; (8005ca8 <gpio_IT_config+0x338>)
 8005b1e:	2220      	movs	r2, #32
 8005b20:	60da      	str	r2, [r3, #12]
			break;
 8005b22:	e083      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PC;
 8005b24:	4b60      	ldr	r3, [pc, #384]	; (8005ca8 <gpio_IT_config+0x338>)
 8005b26:	2280      	movs	r2, #128	; 0x80
 8005b28:	0092      	lsls	r2, r2, #2
 8005b2a:	60da      	str	r2, [r3, #12]
			break;
 8005b2c:	e07e      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PC;
 8005b2e:	4b5e      	ldr	r3, [pc, #376]	; (8005ca8 <gpio_IT_config+0x338>)
 8005b30:	2280      	movs	r2, #128	; 0x80
 8005b32:	0192      	lsls	r2, r2, #6
 8005b34:	60da      	str	r2, [r3, #12]
			break;
 8005b36:	e079      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PC;
 8005b38:	4b5b      	ldr	r3, [pc, #364]	; (8005ca8 <gpio_IT_config+0x338>)
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	611a      	str	r2, [r3, #16]
			break;
 8005b3e:	e075      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PC;
 8005b40:	4b59      	ldr	r3, [pc, #356]	; (8005ca8 <gpio_IT_config+0x338>)
 8005b42:	2220      	movs	r2, #32
 8005b44:	611a      	str	r2, [r3, #16]
			break;
 8005b46:	e071      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PC;
 8005b48:	4b57      	ldr	r3, [pc, #348]	; (8005ca8 <gpio_IT_config+0x338>)
 8005b4a:	2280      	movs	r2, #128	; 0x80
 8005b4c:	0092      	lsls	r2, r2, #2
 8005b4e:	611a      	str	r2, [r3, #16]
			break;
 8005b50:	e06c      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PC;
 8005b52:	4b55      	ldr	r3, [pc, #340]	; (8005ca8 <gpio_IT_config+0x338>)
 8005b54:	2280      	movs	r2, #128	; 0x80
 8005b56:	0192      	lsls	r2, r2, #6
 8005b58:	611a      	str	r2, [r3, #16]
			break;
 8005b5a:	e067      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PC;
 8005b5c:	4b52      	ldr	r3, [pc, #328]	; (8005ca8 <gpio_IT_config+0x338>)
 8005b5e:	2202      	movs	r2, #2
 8005b60:	615a      	str	r2, [r3, #20]
			break;
 8005b62:	e063      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PC;
 8005b64:	4b50      	ldr	r3, [pc, #320]	; (8005ca8 <gpio_IT_config+0x338>)
 8005b66:	2220      	movs	r2, #32
 8005b68:	615a      	str	r2, [r3, #20]
			break;
 8005b6a:	e05f      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PC;
 8005b6c:	4b4e      	ldr	r3, [pc, #312]	; (8005ca8 <gpio_IT_config+0x338>)
 8005b6e:	2280      	movs	r2, #128	; 0x80
 8005b70:	0092      	lsls	r2, r2, #2
 8005b72:	615a      	str	r2, [r3, #20]
			break;
 8005b74:	e05a      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PC;
 8005b76:	4b4c      	ldr	r3, [pc, #304]	; (8005ca8 <gpio_IT_config+0x338>)
 8005b78:	2280      	movs	r2, #128	; 0x80
 8005b7a:	0192      	lsls	r2, r2, #6
 8005b7c:	615a      	str	r2, [r3, #20]
			break;
 8005b7e:	e055      	b.n	8005c2c <gpio_IT_config+0x2bc>
		}	// end of Port C
	} else if (port == GPIOD) {
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4a4e      	ldr	r2, [pc, #312]	; (8005cbc <gpio_IT_config+0x34c>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d150      	bne.n	8005c2a <gpio_IT_config+0x2ba>
		switch (pinNumber) {
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	2b0f      	cmp	r3, #15
 8005b8c:	d84e      	bhi.n	8005c2c <gpio_IT_config+0x2bc>
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	009a      	lsls	r2, r3, #2
 8005b92:	4b4b      	ldr	r3, [pc, #300]	; (8005cc0 <gpio_IT_config+0x350>)
 8005b94:	18d3      	adds	r3, r2, r3
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	469f      	mov	pc, r3
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PD;
 8005b9a:	4b43      	ldr	r3, [pc, #268]	; (8005ca8 <gpio_IT_config+0x338>)
 8005b9c:	2203      	movs	r2, #3
 8005b9e:	609a      	str	r2, [r3, #8]
			break;
 8005ba0:	e044      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PD;
 8005ba2:	4b41      	ldr	r3, [pc, #260]	; (8005ca8 <gpio_IT_config+0x338>)
 8005ba4:	2230      	movs	r2, #48	; 0x30
 8005ba6:	609a      	str	r2, [r3, #8]
			break;
 8005ba8:	e040      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PD;
 8005baa:	4b3f      	ldr	r3, [pc, #252]	; (8005ca8 <gpio_IT_config+0x338>)
 8005bac:	22c0      	movs	r2, #192	; 0xc0
 8005bae:	0092      	lsls	r2, r2, #2
 8005bb0:	609a      	str	r2, [r3, #8]
			break;
 8005bb2:	e03b      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PD;
 8005bb4:	4b3c      	ldr	r3, [pc, #240]	; (8005ca8 <gpio_IT_config+0x338>)
 8005bb6:	22c0      	movs	r2, #192	; 0xc0
 8005bb8:	0192      	lsls	r2, r2, #6
 8005bba:	609a      	str	r2, [r3, #8]
			break;
 8005bbc:	e036      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PD;
 8005bbe:	4b3a      	ldr	r3, [pc, #232]	; (8005ca8 <gpio_IT_config+0x338>)
 8005bc0:	2203      	movs	r2, #3
 8005bc2:	60da      	str	r2, [r3, #12]
			break;
 8005bc4:	e032      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PD;
 8005bc6:	4b38      	ldr	r3, [pc, #224]	; (8005ca8 <gpio_IT_config+0x338>)
 8005bc8:	2230      	movs	r2, #48	; 0x30
 8005bca:	60da      	str	r2, [r3, #12]
			break;
 8005bcc:	e02e      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PD;
 8005bce:	4b36      	ldr	r3, [pc, #216]	; (8005ca8 <gpio_IT_config+0x338>)
 8005bd0:	22c0      	movs	r2, #192	; 0xc0
 8005bd2:	0092      	lsls	r2, r2, #2
 8005bd4:	60da      	str	r2, [r3, #12]
			break;
 8005bd6:	e029      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PD;
 8005bd8:	4b33      	ldr	r3, [pc, #204]	; (8005ca8 <gpio_IT_config+0x338>)
 8005bda:	22c0      	movs	r2, #192	; 0xc0
 8005bdc:	0192      	lsls	r2, r2, #6
 8005bde:	60da      	str	r2, [r3, #12]
			break;
 8005be0:	e024      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PD;
 8005be2:	4b31      	ldr	r3, [pc, #196]	; (8005ca8 <gpio_IT_config+0x338>)
 8005be4:	2203      	movs	r2, #3
 8005be6:	611a      	str	r2, [r3, #16]
			break;
 8005be8:	e020      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PD;
 8005bea:	4b2f      	ldr	r3, [pc, #188]	; (8005ca8 <gpio_IT_config+0x338>)
 8005bec:	2230      	movs	r2, #48	; 0x30
 8005bee:	611a      	str	r2, [r3, #16]
			break;
 8005bf0:	e01c      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PD;
 8005bf2:	4b2d      	ldr	r3, [pc, #180]	; (8005ca8 <gpio_IT_config+0x338>)
 8005bf4:	22c0      	movs	r2, #192	; 0xc0
 8005bf6:	0092      	lsls	r2, r2, #2
 8005bf8:	611a      	str	r2, [r3, #16]
			break;
 8005bfa:	e017      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PD;
 8005bfc:	4b2a      	ldr	r3, [pc, #168]	; (8005ca8 <gpio_IT_config+0x338>)
 8005bfe:	22c0      	movs	r2, #192	; 0xc0
 8005c00:	0192      	lsls	r2, r2, #6
 8005c02:	611a      	str	r2, [r3, #16]
			break;
 8005c04:	e012      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PD;
 8005c06:	4b28      	ldr	r3, [pc, #160]	; (8005ca8 <gpio_IT_config+0x338>)
 8005c08:	2203      	movs	r2, #3
 8005c0a:	615a      	str	r2, [r3, #20]
			break;
 8005c0c:	e00e      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PD;
 8005c0e:	4b26      	ldr	r3, [pc, #152]	; (8005ca8 <gpio_IT_config+0x338>)
 8005c10:	2230      	movs	r2, #48	; 0x30
 8005c12:	615a      	str	r2, [r3, #20]
			break;
 8005c14:	e00a      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PD;
 8005c16:	4b24      	ldr	r3, [pc, #144]	; (8005ca8 <gpio_IT_config+0x338>)
 8005c18:	22c0      	movs	r2, #192	; 0xc0
 8005c1a:	0092      	lsls	r2, r2, #2
 8005c1c:	615a      	str	r2, [r3, #20]
			break;
 8005c1e:	e005      	b.n	8005c2c <gpio_IT_config+0x2bc>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PD;
 8005c20:	4b21      	ldr	r3, [pc, #132]	; (8005ca8 <gpio_IT_config+0x338>)
 8005c22:	22c0      	movs	r2, #192	; 0xc0
 8005c24:	0192      	lsls	r2, r2, #6
 8005c26:	615a      	str	r2, [r3, #20]
			break;
 8005c28:	e000      	b.n	8005c2c <gpio_IT_config+0x2bc>
		}	// end of Port D
	}
 8005c2a:	46c0      	nop			; (mov r8, r8)

	if (edge == RISING_EDGE) {
 8005c2c:	1dfb      	adds	r3, r7, #7
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10a      	bne.n	8005c4a <gpio_IT_config+0x2da>
		EXTI->RTSR |= 1 << pinNumber;
 8005c34:	4b23      	ldr	r3, [pc, #140]	; (8005cc4 <gpio_IT_config+0x354>)
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	2101      	movs	r1, #1
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	4099      	lsls	r1, r3
 8005c3e:	000b      	movs	r3, r1
 8005c40:	0019      	movs	r1, r3
 8005c42:	4b20      	ldr	r3, [pc, #128]	; (8005cc4 <gpio_IT_config+0x354>)
 8005c44:	430a      	orrs	r2, r1
 8005c46:	609a      	str	r2, [r3, #8]
		EXTI->FTSR |= 1 << pinNumber;
	} else if (edge == RISING_FALLING_EDGE) {
		EXTI->RTSR |= 1 << pinNumber;
		EXTI->FTSR |= 1 << pinNumber;
	}
}
 8005c48:	e026      	b.n	8005c98 <gpio_IT_config+0x328>
	} else if (edge == FALLING_EDGE) {
 8005c4a:	1dfb      	adds	r3, r7, #7
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d10a      	bne.n	8005c68 <gpio_IT_config+0x2f8>
		EXTI->FTSR |= 1 << pinNumber;
 8005c52:	4b1c      	ldr	r3, [pc, #112]	; (8005cc4 <gpio_IT_config+0x354>)
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	2101      	movs	r1, #1
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	4099      	lsls	r1, r3
 8005c5c:	000b      	movs	r3, r1
 8005c5e:	0019      	movs	r1, r3
 8005c60:	4b18      	ldr	r3, [pc, #96]	; (8005cc4 <gpio_IT_config+0x354>)
 8005c62:	430a      	orrs	r2, r1
 8005c64:	60da      	str	r2, [r3, #12]
}
 8005c66:	e017      	b.n	8005c98 <gpio_IT_config+0x328>
	} else if (edge == RISING_FALLING_EDGE) {
 8005c68:	1dfb      	adds	r3, r7, #7
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d113      	bne.n	8005c98 <gpio_IT_config+0x328>
		EXTI->RTSR |= 1 << pinNumber;
 8005c70:	4b14      	ldr	r3, [pc, #80]	; (8005cc4 <gpio_IT_config+0x354>)
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	2101      	movs	r1, #1
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	4099      	lsls	r1, r3
 8005c7a:	000b      	movs	r3, r1
 8005c7c:	0019      	movs	r1, r3
 8005c7e:	4b11      	ldr	r3, [pc, #68]	; (8005cc4 <gpio_IT_config+0x354>)
 8005c80:	430a      	orrs	r2, r1
 8005c82:	609a      	str	r2, [r3, #8]
		EXTI->FTSR |= 1 << pinNumber;
 8005c84:	4b0f      	ldr	r3, [pc, #60]	; (8005cc4 <gpio_IT_config+0x354>)
 8005c86:	68da      	ldr	r2, [r3, #12]
 8005c88:	2101      	movs	r1, #1
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	4099      	lsls	r1, r3
 8005c8e:	000b      	movs	r3, r1
 8005c90:	0019      	movs	r1, r3
 8005c92:	4b0c      	ldr	r3, [pc, #48]	; (8005cc4 <gpio_IT_config+0x354>)
 8005c94:	430a      	orrs	r2, r1
 8005c96:	60da      	str	r2, [r3, #12]
}
 8005c98:	46c0      	nop			; (mov r8, r8)
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	b004      	add	sp, #16
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	40021000 	.word	0x40021000
 8005ca4:	0800f1d4 	.word	0x0800f1d4
 8005ca8:	40010000 	.word	0x40010000
 8005cac:	48000400 	.word	0x48000400
 8005cb0:	0800f214 	.word	0x0800f214
 8005cb4:	48000800 	.word	0x48000800
 8005cb8:	0800f254 	.word	0x0800f254
 8005cbc:	48000c00 	.word	0x48000c00
 8005cc0:	0800f294 	.word	0x0800f294
 8005cc4:	40010400 	.word	0x40010400

08005cc8 <gpio_IT_EN>:

void gpio_IT_EN(uint8_t pinNumber, IRQn_Type irqNumber) {//Interrupt Enable Function
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	0002      	movs	r2, r0
 8005cd0:	1dfb      	adds	r3, r7, #7
 8005cd2:	701a      	strb	r2, [r3, #0]
 8005cd4:	1dbb      	adds	r3, r7, #6
 8005cd6:	1c0a      	adds	r2, r1, #0
 8005cd8:	701a      	strb	r2, [r3, #0]
	EXTI->IMR |= 1 << pinNumber;	//enable interrupt in EXTI
 8005cda:	4b0a      	ldr	r3, [pc, #40]	; (8005d04 <gpio_IT_EN+0x3c>)
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	1dfb      	adds	r3, r7, #7
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	2101      	movs	r1, #1
 8005ce4:	4099      	lsls	r1, r3
 8005ce6:	000b      	movs	r3, r1
 8005ce8:	0019      	movs	r1, r3
 8005cea:	4b06      	ldr	r3, [pc, #24]	; (8005d04 <gpio_IT_EN+0x3c>)
 8005cec:	430a      	orrs	r2, r1
 8005cee:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(irqNumber);		//enable interrupt in NVIC
 8005cf0:	1dbb      	adds	r3, r7, #6
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	b25b      	sxtb	r3, r3
 8005cf6:	0018      	movs	r0, r3
 8005cf8:	f7ff fc9c 	bl	8005634 <__NVIC_EnableIRQ>
}
 8005cfc:	46c0      	nop			; (mov r8, r8)
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	b002      	add	sp, #8
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	40010400 	.word	0x40010400

08005d08 <gpio_IT_CHK>:

void gpio_IT_SW(uint8_t pinNumber) {			//Interrupt Software generate
	EXTI->SWIER |= 1 << pinNumber;				//TODO: Not Done for now
}

uint8_t gpio_IT_CHK(uint8_t pinNumber) {			//Interrupt check function
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	0002      	movs	r2, r0
 8005d10:	1dfb      	adds	r3, r7, #7
 8005d12:	701a      	strb	r2, [r3, #0]
	if ((EXTI->PR) & (1 << pinNumber)) {				//Check pending register
 8005d14:	4b07      	ldr	r3, [pc, #28]	; (8005d34 <gpio_IT_CHK+0x2c>)
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	1dfa      	adds	r2, r7, #7
 8005d1a:	7812      	ldrb	r2, [r2, #0]
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	4091      	lsls	r1, r2
 8005d20:	000a      	movs	r2, r1
 8005d22:	4013      	ands	r3, r2
 8005d24:	d001      	beq.n	8005d2a <gpio_IT_CHK+0x22>
		return 1;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e000      	b.n	8005d2c <gpio_IT_CHK+0x24>
	} else {
		return 0;
 8005d2a:	2300      	movs	r3, #0
	}
}
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	b002      	add	sp, #8
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	40010400 	.word	0x40010400

08005d38 <gpio_IT_CLR>:

void gpio_IT_CLR(uint8_t pinNumber) {				//Interrupt clear function
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	0002      	movs	r2, r0
 8005d40:	1dfb      	adds	r3, r7, #7
 8005d42:	701a      	strb	r2, [r3, #0]
	EXTI->PR = 1 << pinNumber;		//clear pending register
 8005d44:	1dfb      	adds	r3, r7, #7
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	409a      	lsls	r2, r3
 8005d4c:	4b02      	ldr	r3, [pc, #8]	; (8005d58 <gpio_IT_CLR+0x20>)
 8005d4e:	615a      	str	r2, [r3, #20]
}
 8005d50:	46c0      	nop			; (mov r8, r8)
 8005d52:	46bd      	mov	sp, r7
 8005d54:	b002      	add	sp, #8
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	40010400 	.word	0x40010400

08005d5c <I2C_EN>:
 *  Created on: Oct 23, 2022
 *      Author: hp
 */
#include "i2c.h"

void I2C_EN(I2C_TypeDef *i2c) {
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
	i2c->CR1 |= I2C_CR1_PE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	601a      	str	r2, [r3, #0]
}
 8005d70:	46c0      	nop			; (mov r8, r8)
 8005d72:	46bd      	mov	sp, r7
 8005d74:	b002      	add	sp, #8
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <I2C_DI>:

void I2C_DI(I2C_TypeDef *i2c) {
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
	i2c->CR1 &= ~I2C_CR1_PE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2201      	movs	r2, #1
 8005d86:	4393      	bics	r3, r2
 8005d88:	001a      	movs	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	601a      	str	r2, [r3, #0]
}
 8005d8e:	46c0      	nop			; (mov r8, r8)
 8005d90:	46bd      	mov	sp, r7
 8005d92:	b002      	add	sp, #8
 8005d94:	bd80      	pop	{r7, pc}
	...

08005d98 <I2C_INIT>:

void I2C_INIT(I2C_TypeDef *i2c, uint32_t timing) {
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
	if (i2c == I2C1) {
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a11      	ldr	r2, [pc, #68]	; (8005dec <I2C_INIT+0x54>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d107      	bne.n	8005dba <I2C_INIT+0x22>
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8005daa:	4b11      	ldr	r3, [pc, #68]	; (8005df0 <I2C_INIT+0x58>)
 8005dac:	69da      	ldr	r2, [r3, #28]
 8005dae:	4b10      	ldr	r3, [pc, #64]	; (8005df0 <I2C_INIT+0x58>)
 8005db0:	2180      	movs	r1, #128	; 0x80
 8005db2:	0389      	lsls	r1, r1, #14
 8005db4:	430a      	orrs	r2, r1
 8005db6:	61da      	str	r2, [r3, #28]
 8005db8:	e00a      	b.n	8005dd0 <I2C_INIT+0x38>
	} else if (i2c == I2C2) {
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a0d      	ldr	r2, [pc, #52]	; (8005df4 <I2C_INIT+0x5c>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d106      	bne.n	8005dd0 <I2C_INIT+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8005dc2:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <I2C_INIT+0x58>)
 8005dc4:	69da      	ldr	r2, [r3, #28]
 8005dc6:	4b0a      	ldr	r3, [pc, #40]	; (8005df0 <I2C_INIT+0x58>)
 8005dc8:	2180      	movs	r1, #128	; 0x80
 8005dca:	03c9      	lsls	r1, r1, #15
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	61da      	str	r2, [r3, #28]
	}
	i2c->CR1 = 0; /* software reset I2C1 */
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]
	i2c->TIMINGR = timing; /* 100 KHz, peripheral clock is 8/48 MHz */
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	611a      	str	r2, [r3, #16]
	I2C_EN(i2c);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	0018      	movs	r0, r3
 8005de0:	f7ff ffbc 	bl	8005d5c <I2C_EN>
}
 8005de4:	46c0      	nop			; (mov r8, r8)
 8005de6:	46bd      	mov	sp, r7
 8005de8:	b002      	add	sp, #8
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	40005400 	.word	0x40005400
 8005df0:	40021000 	.word	0x40021000
 8005df4:	40005800 	.word	0x40005800

08005df8 <I2C_CR2>:
	} else if (i2c == I2C2) {
		RCC->APB1ENR &= ~RCC_APB1ENR_I2C2EN;
	}
}

void I2C_CR2(I2C_TypeDef *i2c, uint32_t val) {
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
	i2c->CR2 = val;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	605a      	str	r2, [r3, #4]
}
 8005e08:	46c0      	nop			; (mov r8, r8)
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	b002      	add	sp, #8
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <I2C_DeviceReady>:

BML_StatusTypeDef I2C_DeviceReady(I2C_TypeDef *i2c, uint8_t saddr,
		uint16_t timeout) {
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	0008      	movs	r0, r1
 8005e1a:	0011      	movs	r1, r2
 8005e1c:	1cfb      	adds	r3, r7, #3
 8005e1e:	1c02      	adds	r2, r0, #0
 8005e20:	701a      	strb	r2, [r3, #0]
 8005e22:	003b      	movs	r3, r7
 8005e24:	1c0a      	adds	r2, r1, #0
 8005e26:	801a      	strh	r2, [r3, #0]
	uint16_t i = timeout;
 8005e28:	230e      	movs	r3, #14
 8005e2a:	18fb      	adds	r3, r7, r3
 8005e2c:	003a      	movs	r2, r7
 8005e2e:	8812      	ldrh	r2, [r2, #0]
 8005e30:	801a      	strh	r2, [r3, #0]
	uint8_t flag = 0;
 8005e32:	230d      	movs	r3, #13
 8005e34:	18fb      	adds	r3, r7, r3
 8005e36:	2200      	movs	r2, #0
 8005e38:	701a      	strb	r2, [r3, #0]
	while (i2c->ISR & I2C_ISR_BUSY) {/* wait until bus not busy */
 8005e3a:	e00e      	b.n	8005e5a <I2C_DeviceReady+0x4a>
		I2C_Delay(1);
 8005e3c:	2001      	movs	r0, #1
 8005e3e:	f002 ff31 	bl	8008ca4 <osDelay>
		i--;
 8005e42:	210e      	movs	r1, #14
 8005e44:	187b      	adds	r3, r7, r1
 8005e46:	881a      	ldrh	r2, [r3, #0]
 8005e48:	187b      	adds	r3, r7, r1
 8005e4a:	3a01      	subs	r2, #1
 8005e4c:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8005e4e:	187b      	adds	r3, r7, r1
 8005e50:	881b      	ldrh	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <I2C_DeviceReady+0x4a>
			return BML_BUSY;
 8005e56:	2302      	movs	r3, #2
 8005e58:	e035      	b.n	8005ec6 <I2C_DeviceReady+0xb6>
	while (i2c->ISR & I2C_ISR_BUSY) {/* wait until bus not busy */
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	699a      	ldr	r2, [r3, #24]
 8005e5e:	2380      	movs	r3, #128	; 0x80
 8005e60:	021b      	lsls	r3, r3, #8
 8005e62:	4013      	ands	r3, r2
 8005e64:	d1ea      	bne.n	8005e3c <I2C_DeviceReady+0x2c>
		}
	}
	I2C_CR2(i2c, I2C_CR2_START | (saddr << 1));
 8005e66:	1cfb      	adds	r3, r7, #3
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	001a      	movs	r2, r3
 8005e6e:	2380      	movs	r3, #128	; 0x80
 8005e70:	019b      	lsls	r3, r3, #6
 8005e72:	431a      	orrs	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	0011      	movs	r1, r2
 8005e78:	0018      	movs	r0, r3
 8005e7a:	f7ff ffbd 	bl	8005df8 <I2C_CR2>

	I2C_Delay(1);
 8005e7e:	2001      	movs	r0, #1
 8005e80:	f002 ff10 	bl	8008ca4 <osDelay>

	if (!(i2c->ISR & I2C_ISR_NACKF)) {
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	2210      	movs	r2, #16
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	d104      	bne.n	8005e98 <I2C_DeviceReady+0x88>
		flag = 1;
 8005e8e:	230d      	movs	r3, #13
 8005e90:	18fb      	adds	r3, r7, r3
 8005e92:	2201      	movs	r2, #1
 8005e94:	701a      	strb	r2, [r3, #0]
 8005e96:	e003      	b.n	8005ea0 <I2C_DeviceReady+0x90>
	} else {
		flag = 0;
 8005e98:	230d      	movs	r3, #13
 8005e9a:	18fb      	adds	r3, r7, r3
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	701a      	strb	r2, [r3, #0]
	}

	i2c->CR2 = 0;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	605a      	str	r2, [r3, #4]
	I2C_DI(i2c);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	0018      	movs	r0, r3
 8005eaa:	f7ff ff65 	bl	8005d78 <I2C_DI>
	I2C_EN(i2c);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	f7ff ff53 	bl	8005d5c <I2C_EN>
	if (flag == LOW) {
 8005eb6:	230d      	movs	r3, #13
 8005eb8:	18fb      	adds	r3, r7, r3
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <I2C_DeviceReady+0xb4>
		return BML_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e000      	b.n	8005ec6 <I2C_DeviceReady+0xb6>
	}
	return BML_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	b004      	add	sp, #16
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <I2C_MasterMultiRead>:

	return BML_OK;
}

BML_StatusTypeDef I2C_MasterMultiRead(I2C_TypeDef *i2c, uint8_t saddr,
		uint8_t maddr, uint32_t n, uint8_t *data, uint16_t timeout) {
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	0008      	movs	r0, r1
 8005eda:	0011      	movs	r1, r2
 8005edc:	607b      	str	r3, [r7, #4]
 8005ede:	230b      	movs	r3, #11
 8005ee0:	18fb      	adds	r3, r7, r3
 8005ee2:	1c02      	adds	r2, r0, #0
 8005ee4:	701a      	strb	r2, [r3, #0]
 8005ee6:	230a      	movs	r3, #10
 8005ee8:	18fb      	adds	r3, r7, r3
 8005eea:	1c0a      	adds	r2, r1, #0
 8005eec:	701a      	strb	r2, [r3, #0]
	uint16_t i = timeout;
 8005eee:	2316      	movs	r3, #22
 8005ef0:	18fb      	adds	r3, r7, r3
 8005ef2:	2224      	movs	r2, #36	; 0x24
 8005ef4:	18ba      	adds	r2, r7, r2
 8005ef6:	8812      	ldrh	r2, [r2, #0]
 8005ef8:	801a      	strh	r2, [r3, #0]
	while (i2c->ISR & I2C_ISR_BUSY) {
 8005efa:	e00e      	b.n	8005f1a <I2C_MasterMultiRead+0x4a>
		I2C_Delay(1);
 8005efc:	2001      	movs	r0, #1
 8005efe:	f002 fed1 	bl	8008ca4 <osDelay>
		i--;
 8005f02:	2116      	movs	r1, #22
 8005f04:	187b      	adds	r3, r7, r1
 8005f06:	881a      	ldrh	r2, [r3, #0]
 8005f08:	187b      	adds	r3, r7, r1
 8005f0a:	3a01      	subs	r2, #1
 8005f0c:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8005f0e:	187b      	adds	r3, r7, r1
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <I2C_MasterMultiRead+0x4a>
			return BML_BUSY;
 8005f16:	2302      	movs	r3, #2
 8005f18:	e0ac      	b.n	8006074 <I2C_MasterMultiRead+0x1a4>
	while (i2c->ISR & I2C_ISR_BUSY) {
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	699a      	ldr	r2, [r3, #24]
 8005f1e:	2380      	movs	r3, #128	; 0x80
 8005f20:	021b      	lsls	r3, r3, #8
 8005f22:	4013      	ands	r3, r2
 8005f24:	d1ea      	bne.n	8005efc <I2C_MasterMultiRead+0x2c>
		}
	} /* wait until bus not busy */
	i = timeout;
 8005f26:	2316      	movs	r3, #22
 8005f28:	18fb      	adds	r3, r7, r3
 8005f2a:	2224      	movs	r2, #36	; 0x24
 8005f2c:	18ba      	adds	r2, r7, r2
 8005f2e:	8812      	ldrh	r2, [r2, #0]
 8005f30:	801a      	strh	r2, [r3, #0]

	I2C_CR2(i2c, I2C_CR2_START | (1 << 16) | (saddr << 1));/* generate start and send slave address */
 8005f32:	230b      	movs	r3, #11
 8005f34:	18fb      	adds	r3, r7, r3
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	001a      	movs	r2, r3
 8005f3c:	2390      	movs	r3, #144	; 0x90
 8005f3e:	025b      	lsls	r3, r3, #9
 8005f40:	431a      	orrs	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	0011      	movs	r1, r2
 8005f46:	0018      	movs	r0, r3
 8005f48:	f7ff ff56 	bl	8005df8 <I2C_CR2>

	while (!(i2c->ISR & I2C_ISR_TXIS)) {
 8005f4c:	e00e      	b.n	8005f6c <I2C_MasterMultiRead+0x9c>
		I2C_Delay(1);
 8005f4e:	2001      	movs	r0, #1
 8005f50:	f002 fea8 	bl	8008ca4 <osDelay>
		i--;
 8005f54:	2116      	movs	r1, #22
 8005f56:	187b      	adds	r3, r7, r1
 8005f58:	881a      	ldrh	r2, [r3, #0]
 8005f5a:	187b      	adds	r3, r7, r1
 8005f5c:	3a01      	subs	r2, #1
 8005f5e:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8005f60:	187b      	adds	r3, r7, r1
 8005f62:	881b      	ldrh	r3, [r3, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <I2C_MasterMultiRead+0x9c>
			return BML_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e083      	b.n	8006074 <I2C_MasterMultiRead+0x1a4>
	while (!(i2c->ISR & I2C_ISR_TXIS)) {
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	2202      	movs	r2, #2
 8005f72:	4013      	ands	r3, r2
 8005f74:	d0eb      	beq.n	8005f4e <I2C_MasterMultiRead+0x7e>
		}
	}/* wait until transmitter is ready */

	i = timeout;
 8005f76:	2316      	movs	r3, #22
 8005f78:	18fb      	adds	r3, r7, r3
 8005f7a:	2224      	movs	r2, #36	; 0x24
 8005f7c:	18ba      	adds	r2, r7, r2
 8005f7e:	8812      	ldrh	r2, [r2, #0]
 8005f80:	801a      	strh	r2, [r3, #0]

	i2c->TXDR = maddr; /* send memory address */
 8005f82:	230a      	movs	r3, #10
 8005f84:	18fb      	adds	r3, r7, r3
 8005f86:	781a      	ldrb	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(i2c->ISR & I2C_ISR_TC)) {
 8005f8c:	e00e      	b.n	8005fac <I2C_MasterMultiRead+0xdc>
		I2C_Delay(1);
 8005f8e:	2001      	movs	r0, #1
 8005f90:	f002 fe88 	bl	8008ca4 <osDelay>
		i--;
 8005f94:	2116      	movs	r1, #22
 8005f96:	187b      	adds	r3, r7, r1
 8005f98:	881a      	ldrh	r2, [r3, #0]
 8005f9a:	187b      	adds	r3, r7, r1
 8005f9c:	3a01      	subs	r2, #1
 8005f9e:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8005fa0:	187b      	adds	r3, r7, r1
 8005fa2:	881b      	ldrh	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <I2C_MasterMultiRead+0xdc>
			return BML_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e063      	b.n	8006074 <I2C_MasterMultiRead+0x1a4>
	while (!(i2c->ISR & I2C_ISR_TC)) {
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	2240      	movs	r2, #64	; 0x40
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	d0eb      	beq.n	8005f8e <I2C_MasterMultiRead+0xbe>

	/* generate restart, send slave address, repeat read n bytes, set for auto end */

	I2C_CR2(i2c,
			I2C_CR2_START | I2C_CR2_RD_WRN | I2C_CR2_AUTOEND
					| ((n & 0xFF) << 16) | (saddr << 1));
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	041a      	lsls	r2, r3, #16
 8005fba:	23ff      	movs	r3, #255	; 0xff
 8005fbc:	041b      	lsls	r3, r3, #16
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	220b      	movs	r2, #11
 8005fc2:	18ba      	adds	r2, r7, r2
 8005fc4:	7812      	ldrb	r2, [r2, #0]
 8005fc6:	0052      	lsls	r2, r2, #1
 8005fc8:	4313      	orrs	r3, r2
	I2C_CR2(i2c,
 8005fca:	4a2c      	ldr	r2, [pc, #176]	; (800607c <I2C_MasterMultiRead+0x1ac>)
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	0011      	movs	r1, r2
 8005fd2:	0018      	movs	r0, r3
 8005fd4:	f7ff ff10 	bl	8005df8 <I2C_CR2>

	for (; n > 0; n--) {
 8005fd8:	e023      	b.n	8006022 <I2C_MasterMultiRead+0x152>
		while (!(i2c->ISR & I2C_ISR_RXNE)) {
			I2C_Delay(1);
 8005fda:	2001      	movs	r0, #1
 8005fdc:	f002 fe62 	bl	8008ca4 <osDelay>
			i--;
 8005fe0:	2116      	movs	r1, #22
 8005fe2:	187b      	adds	r3, r7, r1
 8005fe4:	881a      	ldrh	r2, [r3, #0]
 8005fe6:	187b      	adds	r3, r7, r1
 8005fe8:	3a01      	subs	r2, #1
 8005fea:	801a      	strh	r2, [r3, #0]
			if (i <= 0) {
 8005fec:	187b      	adds	r3, r7, r1
 8005fee:	881b      	ldrh	r3, [r3, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <I2C_MasterMultiRead+0x128>
				return BML_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e03d      	b.n	8006074 <I2C_MasterMultiRead+0x1a4>
		while (!(i2c->ISR & I2C_ISR_RXNE)) {
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	2204      	movs	r2, #4
 8005ffe:	4013      	ands	r3, r2
 8006000:	d0eb      	beq.n	8005fda <I2C_MasterMultiRead+0x10a>
			}
		} /* Wait until RXNE flag is set */
		i = timeout;
 8006002:	2316      	movs	r3, #22
 8006004:	18fb      	adds	r3, r7, r3
 8006006:	2224      	movs	r2, #36	; 0x24
 8006008:	18ba      	adds	r2, r7, r2
 800600a:	8812      	ldrh	r2, [r2, #0]
 800600c:	801a      	strh	r2, [r3, #0]
		*data++ = i2c->RXDR; /* Read data from DR */
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	623a      	str	r2, [r7, #32]
 8006018:	b2ca      	uxtb	r2, r1
 800601a:	701a      	strb	r2, [r3, #0]
	for (; n > 0; n--) {
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	3b01      	subs	r3, #1
 8006020:	607b      	str	r3, [r7, #4]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1e7      	bne.n	8005ff8 <I2C_MasterMultiRead+0x128>
	}

	while (!(i2c->ISR & I2C_ISR_STOPF)) {
 8006028:	e00e      	b.n	8006048 <I2C_MasterMultiRead+0x178>
		I2C_Delay(1);
 800602a:	2001      	movs	r0, #1
 800602c:	f002 fe3a 	bl	8008ca4 <osDelay>
		i--;
 8006030:	2116      	movs	r1, #22
 8006032:	187b      	adds	r3, r7, r1
 8006034:	881a      	ldrh	r2, [r3, #0]
 8006036:	187b      	adds	r3, r7, r1
 8006038:	3a01      	subs	r2, #1
 800603a:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 800603c:	187b      	adds	r3, r7, r1
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <I2C_MasterMultiRead+0x178>
			return BML_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e015      	b.n	8006074 <I2C_MasterMultiRead+0x1a4>
	while (!(i2c->ISR & I2C_ISR_STOPF)) {
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	2220      	movs	r2, #32
 800604e:	4013      	ands	r3, r2
 8006050:	d0eb      	beq.n	800602a <I2C_MasterMultiRead+0x15a>
		}
	} /* wait until stop flag is set */
	i = timeout;
 8006052:	2316      	movs	r3, #22
 8006054:	18fb      	adds	r3, r7, r3
 8006056:	2224      	movs	r2, #36	; 0x24
 8006058:	18ba      	adds	r2, r7, r2
 800605a:	8812      	ldrh	r2, [r2, #0]
 800605c:	801a      	strh	r2, [r3, #0]
	i2c->ICR = I2C_ISR_STOPF; /* clear stop flag */
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2220      	movs	r2, #32
 8006062:	61da      	str	r2, [r3, #28]
	I2C_CR2(i2c, I2C_CR2_AUTOEND);
 8006064:	2380      	movs	r3, #128	; 0x80
 8006066:	049a      	lsls	r2, r3, #18
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	0011      	movs	r1, r2
 800606c:	0018      	movs	r0, r3
 800606e:	f7ff fec3 	bl	8005df8 <I2C_CR2>

	return BML_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	0018      	movs	r0, r3
 8006076:	46bd      	mov	sp, r7
 8006078:	b006      	add	sp, #24
 800607a:	bd80      	pop	{r7, pc}
 800607c:	02002400 	.word	0x02002400

08006080 <TIM6_IRQHandler>:
	return ticks;
}
void ticks_reset() {
	ticks = 0;
}
void TIM6_IRQHandler(void) {		// Timer Interrupt helping in delay
 8006080:	b580      	push	{r7, lr}
 8006082:	af00      	add	r7, sp, #0
	ticks++;
 8006084:	4b07      	ldr	r3, [pc, #28]	; (80060a4 <TIM6_IRQHandler+0x24>)
 8006086:	881b      	ldrh	r3, [r3, #0]
 8006088:	3301      	adds	r3, #1
 800608a:	b29a      	uxth	r2, r3
 800608c:	4b05      	ldr	r3, [pc, #20]	; (80060a4 <TIM6_IRQHandler+0x24>)
 800608e:	801a      	strh	r2, [r3, #0]
	TIM6->SR &= ~TIM_SR_UIF;
 8006090:	4b05      	ldr	r3, [pc, #20]	; (80060a8 <TIM6_IRQHandler+0x28>)
 8006092:	691a      	ldr	r2, [r3, #16]
 8006094:	4b04      	ldr	r3, [pc, #16]	; (80060a8 <TIM6_IRQHandler+0x28>)
 8006096:	2101      	movs	r1, #1
 8006098:	438a      	bics	r2, r1
 800609a:	611a      	str	r2, [r3, #16]
}
 800609c:	46c0      	nop			; (mov r8, r8)
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	46c0      	nop			; (mov r8, r8)
 80060a4:	200007b0 	.word	0x200007b0
 80060a8:	40001000 	.word	0x40001000

080060ac <__NVIC_EnableIRQ>:
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	0002      	movs	r2, r0
 80060b4:	1dfb      	adds	r3, r7, #7
 80060b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80060b8:	1dfb      	adds	r3, r7, #7
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	2b7f      	cmp	r3, #127	; 0x7f
 80060be:	d809      	bhi.n	80060d4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060c0:	1dfb      	adds	r3, r7, #7
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	001a      	movs	r2, r3
 80060c6:	231f      	movs	r3, #31
 80060c8:	401a      	ands	r2, r3
 80060ca:	4b04      	ldr	r3, [pc, #16]	; (80060dc <__NVIC_EnableIRQ+0x30>)
 80060cc:	2101      	movs	r1, #1
 80060ce:	4091      	lsls	r1, r2
 80060d0:	000a      	movs	r2, r1
 80060d2:	601a      	str	r2, [r3, #0]
}
 80060d4:	46c0      	nop			; (mov r8, r8)
 80060d6:	46bd      	mov	sp, r7
 80060d8:	b002      	add	sp, #8
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	e000e100 	.word	0xe000e100

080060e0 <USART_INIT>:
 */
#include "uart.h"

void USART_INIT(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber,
		uint32_t bd_rate) {
 80060e0:	b590      	push	{r4, r7, lr}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af02      	add	r7, sp, #8
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
 80060ec:	603b      	str	r3, [r7, #0]

	USART_CLK_EN(usart);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	0018      	movs	r0, r3
 80060f2:	f000 f86f 	bl	80061d4 <USART_CLK_EN>

	USART_PIN_CONFIG(usart, tx_port, rx_port, tx_pinNumber, rx_pinNumber);
 80060f6:	683c      	ldr	r4, [r7, #0]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	68b9      	ldr	r1, [r7, #8]
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	0023      	movs	r3, r4
 8006104:	f000 f8a8 	bl	8006258 <USART_PIN_CONFIG>

	USART_BDR_SEL(usart, bd_rate);
 8006108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	0011      	movs	r1, r2
 800610e:	0018      	movs	r0, r3
 8006110:	f000 f9b6 	bl	8006480 <USART_BDR_SEL>

	usart->CR1 |= USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	220d      	movs	r2, #13
 800611a:	431a      	orrs	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	601a      	str	r2, [r3, #0]

}
 8006120:	46c0      	nop			; (mov r8, r8)
 8006122:	46bd      	mov	sp, r7
 8006124:	b005      	add	sp, #20
 8006126:	bd90      	pop	{r4, r7, pc}

08006128 <USART_IT_EN>:

void USART_IT_EN(USART_TypeDef *usart, uint8_t TX_IT, uint8_t RX_IT,
		uint8_t IDLE_IT) {
 8006128:	b590      	push	{r4, r7, lr}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	000c      	movs	r4, r1
 8006132:	0010      	movs	r0, r2
 8006134:	0019      	movs	r1, r3
 8006136:	1cfb      	adds	r3, r7, #3
 8006138:	1c22      	adds	r2, r4, #0
 800613a:	701a      	strb	r2, [r3, #0]
 800613c:	1cbb      	adds	r3, r7, #2
 800613e:	1c02      	adds	r2, r0, #0
 8006140:	701a      	strb	r2, [r3, #0]
 8006142:	1c7b      	adds	r3, r7, #1
 8006144:	1c0a      	adds	r2, r1, #0
 8006146:	701a      	strb	r2, [r3, #0]
	if (usart == USART1) {
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a1e      	ldr	r2, [pc, #120]	; (80061c4 <USART_IT_EN+0x9c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d103      	bne.n	8006158 <USART_IT_EN+0x30>
		NVIC_EnableIRQ(USART1_IRQn);
 8006150:	201b      	movs	r0, #27
 8006152:	f7ff ffab 	bl	80060ac <__NVIC_EnableIRQ>
 8006156:	e012      	b.n	800617e <USART_IT_EN+0x56>
	} else if (usart == USART2) {
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a1b      	ldr	r2, [pc, #108]	; (80061c8 <USART_IT_EN+0xa0>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d103      	bne.n	8006168 <USART_IT_EN+0x40>
		NVIC_EnableIRQ(USART2_IRQn);
 8006160:	201c      	movs	r0, #28
 8006162:	f7ff ffa3 	bl	80060ac <__NVIC_EnableIRQ>
 8006166:	e00a      	b.n	800617e <USART_IT_EN+0x56>
	} else if (usart == USART3 || usart == USART4) {
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a18      	ldr	r2, [pc, #96]	; (80061cc <USART_IT_EN+0xa4>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d003      	beq.n	8006178 <USART_IT_EN+0x50>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a17      	ldr	r2, [pc, #92]	; (80061d0 <USART_IT_EN+0xa8>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d102      	bne.n	800617e <USART_IT_EN+0x56>
		NVIC_EnableIRQ(USART3_4_IRQn);
 8006178:	201d      	movs	r0, #29
 800617a:	f7ff ff97 	bl	80060ac <__NVIC_EnableIRQ>
	}

	if (TX_IT) {
 800617e:	1cfb      	adds	r3, r7, #3
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d005      	beq.n	8006192 <USART_IT_EN+0x6a>
		usart->CR1 |= USART_CR1_TXEIE;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2280      	movs	r2, #128	; 0x80
 800618c:	431a      	orrs	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	601a      	str	r2, [r3, #0]
	}
	if (RX_IT) {
 8006192:	1cbb      	adds	r3, r7, #2
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d005      	beq.n	80061a6 <USART_IT_EN+0x7e>
		usart->CR1 |= USART_CR1_RXNEIE;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2220      	movs	r2, #32
 80061a0:	431a      	orrs	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	601a      	str	r2, [r3, #0]
	}
	if (IDLE_IT) {
 80061a6:	1c7b      	adds	r3, r7, #1
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d005      	beq.n	80061ba <USART_IT_EN+0x92>
		usart->CR1 |= USART_CR1_IDLEIE;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2210      	movs	r2, #16
 80061b4:	431a      	orrs	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	601a      	str	r2, [r3, #0]
	}
}
 80061ba:	46c0      	nop			; (mov r8, r8)
 80061bc:	46bd      	mov	sp, r7
 80061be:	b003      	add	sp, #12
 80061c0:	bd90      	pop	{r4, r7, pc}
 80061c2:	46c0      	nop			; (mov r8, r8)
 80061c4:	40013800 	.word	0x40013800
 80061c8:	40004400 	.word	0x40004400
 80061cc:	40004800 	.word	0x40004800
 80061d0:	40004c00 	.word	0x40004c00

080061d4 <USART_CLK_EN>:
// Initialize UART pins, Baudrate
void USART_CLK_EN(USART_TypeDef *usart) {
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
	if (usart == USART1) {
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a19      	ldr	r2, [pc, #100]	; (8006244 <USART_CLK_EN+0x70>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d107      	bne.n	80061f4 <USART_CLK_EN+0x20>
		USART1_CLK_EN;
 80061e4:	4b18      	ldr	r3, [pc, #96]	; (8006248 <USART_CLK_EN+0x74>)
 80061e6:	69da      	ldr	r2, [r3, #28]
 80061e8:	4b17      	ldr	r3, [pc, #92]	; (8006248 <USART_CLK_EN+0x74>)
 80061ea:	2180      	movs	r1, #128	; 0x80
 80061ec:	01c9      	lsls	r1, r1, #7
 80061ee:	430a      	orrs	r2, r1
 80061f0:	61da      	str	r2, [r3, #28]
	} else if (usart == USART3) {
		USART3_CLK_EN;
	} else if (usart == USART4) {
		USART4_CLK_EN;
	}
}
 80061f2:	e022      	b.n	800623a <USART_CLK_EN+0x66>
	} else if (usart == USART2) {
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a15      	ldr	r2, [pc, #84]	; (800624c <USART_CLK_EN+0x78>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d107      	bne.n	800620c <USART_CLK_EN+0x38>
		USART2_CLK_EN;
 80061fc:	4b12      	ldr	r3, [pc, #72]	; (8006248 <USART_CLK_EN+0x74>)
 80061fe:	69da      	ldr	r2, [r3, #28]
 8006200:	4b11      	ldr	r3, [pc, #68]	; (8006248 <USART_CLK_EN+0x74>)
 8006202:	2180      	movs	r1, #128	; 0x80
 8006204:	0289      	lsls	r1, r1, #10
 8006206:	430a      	orrs	r2, r1
 8006208:	61da      	str	r2, [r3, #28]
}
 800620a:	e016      	b.n	800623a <USART_CLK_EN+0x66>
	} else if (usart == USART3) {
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a10      	ldr	r2, [pc, #64]	; (8006250 <USART_CLK_EN+0x7c>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d107      	bne.n	8006224 <USART_CLK_EN+0x50>
		USART3_CLK_EN;
 8006214:	4b0c      	ldr	r3, [pc, #48]	; (8006248 <USART_CLK_EN+0x74>)
 8006216:	69da      	ldr	r2, [r3, #28]
 8006218:	4b0b      	ldr	r3, [pc, #44]	; (8006248 <USART_CLK_EN+0x74>)
 800621a:	2180      	movs	r1, #128	; 0x80
 800621c:	02c9      	lsls	r1, r1, #11
 800621e:	430a      	orrs	r2, r1
 8006220:	61da      	str	r2, [r3, #28]
}
 8006222:	e00a      	b.n	800623a <USART_CLK_EN+0x66>
	} else if (usart == USART4) {
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a0b      	ldr	r2, [pc, #44]	; (8006254 <USART_CLK_EN+0x80>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d106      	bne.n	800623a <USART_CLK_EN+0x66>
		USART4_CLK_EN;
 800622c:	4b06      	ldr	r3, [pc, #24]	; (8006248 <USART_CLK_EN+0x74>)
 800622e:	69da      	ldr	r2, [r3, #28]
 8006230:	4b05      	ldr	r3, [pc, #20]	; (8006248 <USART_CLK_EN+0x74>)
 8006232:	2180      	movs	r1, #128	; 0x80
 8006234:	0309      	lsls	r1, r1, #12
 8006236:	430a      	orrs	r2, r1
 8006238:	61da      	str	r2, [r3, #28]
}
 800623a:	46c0      	nop			; (mov r8, r8)
 800623c:	46bd      	mov	sp, r7
 800623e:	b002      	add	sp, #8
 8006240:	bd80      	pop	{r7, pc}
 8006242:	46c0      	nop			; (mov r8, r8)
 8006244:	40013800 	.word	0x40013800
 8006248:	40021000 	.word	0x40021000
 800624c:	40004400 	.word	0x40004400
 8006250:	40004800 	.word	0x40004800
 8006254:	40004c00 	.word	0x40004c00

08006258 <USART_PIN_CONFIG>:

void USART_PIN_CONFIG(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber) {
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af02      	add	r7, sp, #8
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
 8006264:	603b      	str	r3, [r7, #0]

	gpio_config(tx_port, tx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8006266:	6839      	ldr	r1, [r7, #0]
 8006268:	68b8      	ldr	r0, [r7, #8]
 800626a:	2300      	movs	r3, #0
 800626c:	9301      	str	r3, [sp, #4]
 800626e:	2300      	movs	r3, #0
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	2302      	movs	r3, #2
 8006274:	2202      	movs	r2, #2
 8006276:	f7ff fa71 	bl	800575c <gpio_config>
	gpio_config(rx_port, rx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 800627a:	69b9      	ldr	r1, [r7, #24]
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	2300      	movs	r3, #0
 8006280:	9301      	str	r3, [sp, #4]
 8006282:	2300      	movs	r3, #0
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	2302      	movs	r3, #2
 8006288:	2202      	movs	r2, #2
 800628a:	f7ff fa67 	bl	800575c <gpio_config>

	if (usart == USART1) {
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	4a75      	ldr	r2, [pc, #468]	; (8006468 <USART_PIN_CONFIG+0x210>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d13a      	bne.n	800630c <USART_PIN_CONFIG+0xb4>
		// TX
		if (tx_port == PORTA && tx_pinNumber == 9) {
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	2390      	movs	r3, #144	; 0x90
 800629a:	05db      	lsls	r3, r3, #23
 800629c:	429a      	cmp	r2, r3
 800629e:	d109      	bne.n	80062b4 <USART_PIN_CONFIG+0x5c>
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2b09      	cmp	r3, #9
 80062a4:	d106      	bne.n	80062b4 <USART_PIN_CONFIG+0x5c>
			gpio_altfn(tx_port, tx_pinNumber, USART1_TX_PA9);
 80062a6:	6839      	ldr	r1, [r7, #0]
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2201      	movs	r2, #1
 80062ac:	0018      	movs	r0, r3
 80062ae:	f7ff fb1c 	bl	80058ea <gpio_altfn>
 80062b2:	e00c      	b.n	80062ce <USART_PIN_CONFIG+0x76>
		} else if (tx_port == PORTB && tx_pinNumber == 6) {
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	4a6d      	ldr	r2, [pc, #436]	; (800646c <USART_PIN_CONFIG+0x214>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d108      	bne.n	80062ce <USART_PIN_CONFIG+0x76>
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2b06      	cmp	r3, #6
 80062c0:	d105      	bne.n	80062ce <USART_PIN_CONFIG+0x76>
			gpio_altfn(tx_port, tx_pinNumber, USART1_TX_PB6);
 80062c2:	6839      	ldr	r1, [r7, #0]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	2200      	movs	r2, #0
 80062c8:	0018      	movs	r0, r3
 80062ca:	f7ff fb0e 	bl	80058ea <gpio_altfn>
		}

		// RX
		if (rx_port == PORTA && rx_pinNumber == 10) {
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	2390      	movs	r3, #144	; 0x90
 80062d2:	05db      	lsls	r3, r3, #23
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d109      	bne.n	80062ec <USART_PIN_CONFIG+0x94>
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	2b0a      	cmp	r3, #10
 80062dc:	d106      	bne.n	80062ec <USART_PIN_CONFIG+0x94>
			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PA10);
 80062de:	69b9      	ldr	r1, [r7, #24]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	0018      	movs	r0, r3
 80062e6:	f7ff fb00 	bl	80058ea <gpio_altfn>
 80062ea:	e0b8      	b.n	800645e <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTB && rx_pinNumber == 7) {
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a5f      	ldr	r2, [pc, #380]	; (800646c <USART_PIN_CONFIG+0x214>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d000      	beq.n	80062f6 <USART_PIN_CONFIG+0x9e>
 80062f4:	e0b3      	b.n	800645e <USART_PIN_CONFIG+0x206>
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	2b07      	cmp	r3, #7
 80062fa:	d000      	beq.n	80062fe <USART_PIN_CONFIG+0xa6>
 80062fc:	e0af      	b.n	800645e <USART_PIN_CONFIG+0x206>
			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PB7);
 80062fe:	69b9      	ldr	r1, [r7, #24]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	0018      	movs	r0, r3
 8006306:	f7ff faf0 	bl	80058ea <gpio_altfn>
		}
	} else if (usart == USART4) {
		gpio_altfn(tx_port, tx_pinNumber, USART4_TX_PA0);
		gpio_altfn(rx_port, rx_pinNumber, USART4_RX_PA1);
	}
}
 800630a:	e0a8      	b.n	800645e <USART_PIN_CONFIG+0x206>
	} else if (usart == USART2) {
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4a58      	ldr	r2, [pc, #352]	; (8006470 <USART_PIN_CONFIG+0x218>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d13c      	bne.n	800638e <USART_PIN_CONFIG+0x136>
		if (tx_port == PORTA && tx_pinNumber == 2) {
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	2390      	movs	r3, #144	; 0x90
 8006318:	05db      	lsls	r3, r3, #23
 800631a:	429a      	cmp	r2, r3
 800631c:	d109      	bne.n	8006332 <USART_PIN_CONFIG+0xda>
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	2b02      	cmp	r3, #2
 8006322:	d106      	bne.n	8006332 <USART_PIN_CONFIG+0xda>
			gpio_altfn(tx_port, tx_pinNumber, USART2_TX_PA2);
 8006324:	6839      	ldr	r1, [r7, #0]
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	2201      	movs	r2, #1
 800632a:	0018      	movs	r0, r3
 800632c:	f7ff fadd 	bl	80058ea <gpio_altfn>
 8006330:	e00d      	b.n	800634e <USART_PIN_CONFIG+0xf6>
		} else if (tx_port == PORTA && tx_pinNumber == 14) {
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	2390      	movs	r3, #144	; 0x90
 8006336:	05db      	lsls	r3, r3, #23
 8006338:	429a      	cmp	r2, r3
 800633a:	d108      	bne.n	800634e <USART_PIN_CONFIG+0xf6>
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	2b0e      	cmp	r3, #14
 8006340:	d105      	bne.n	800634e <USART_PIN_CONFIG+0xf6>
			gpio_altfn(tx_port, tx_pinNumber, USART2_TX_PA14);
 8006342:	6839      	ldr	r1, [r7, #0]
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	2201      	movs	r2, #1
 8006348:	0018      	movs	r0, r3
 800634a:	f7ff face 	bl	80058ea <gpio_altfn>
		if (rx_port == PORTA && rx_pinNumber == 3) {
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	2390      	movs	r3, #144	; 0x90
 8006352:	05db      	lsls	r3, r3, #23
 8006354:	429a      	cmp	r2, r3
 8006356:	d109      	bne.n	800636c <USART_PIN_CONFIG+0x114>
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	2b03      	cmp	r3, #3
 800635c:	d106      	bne.n	800636c <USART_PIN_CONFIG+0x114>
			gpio_altfn(rx_port, rx_pinNumber, USART2_RX_PA3);
 800635e:	69b9      	ldr	r1, [r7, #24]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	0018      	movs	r0, r3
 8006366:	f7ff fac0 	bl	80058ea <gpio_altfn>
 800636a:	e078      	b.n	800645e <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTA && rx_pinNumber == 15) {
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	2390      	movs	r3, #144	; 0x90
 8006370:	05db      	lsls	r3, r3, #23
 8006372:	429a      	cmp	r2, r3
 8006374:	d000      	beq.n	8006378 <USART_PIN_CONFIG+0x120>
 8006376:	e072      	b.n	800645e <USART_PIN_CONFIG+0x206>
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	2b0f      	cmp	r3, #15
 800637c:	d000      	beq.n	8006380 <USART_PIN_CONFIG+0x128>
 800637e:	e06e      	b.n	800645e <USART_PIN_CONFIG+0x206>
			gpio_altfn(rx_port, rx_pinNumber, USART2_RX_PA15);
 8006380:	69b9      	ldr	r1, [r7, #24]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	0018      	movs	r0, r3
 8006388:	f7ff faaf 	bl	80058ea <gpio_altfn>
}
 800638c:	e067      	b.n	800645e <USART_PIN_CONFIG+0x206>
	} else if (usart == USART3) {
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	4a38      	ldr	r2, [pc, #224]	; (8006474 <USART_PIN_CONFIG+0x21c>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d152      	bne.n	800643c <USART_PIN_CONFIG+0x1e4>
		if (tx_port == PORTC && tx_pinNumber == 4) {
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	4a37      	ldr	r2, [pc, #220]	; (8006478 <USART_PIN_CONFIG+0x220>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d109      	bne.n	80063b2 <USART_PIN_CONFIG+0x15a>
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d106      	bne.n	80063b2 <USART_PIN_CONFIG+0x15a>
			gpio_altfn(tx_port, tx_pinNumber, USART3_TX_PC4);
 80063a4:	6839      	ldr	r1, [r7, #0]
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	2201      	movs	r2, #1
 80063aa:	0018      	movs	r0, r3
 80063ac:	f7ff fa9d 	bl	80058ea <gpio_altfn>
 80063b0:	e01a      	b.n	80063e8 <USART_PIN_CONFIG+0x190>
		} else if (tx_port == PORTB && tx_pinNumber == 10) {
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	4a2d      	ldr	r2, [pc, #180]	; (800646c <USART_PIN_CONFIG+0x214>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d109      	bne.n	80063ce <USART_PIN_CONFIG+0x176>
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b0a      	cmp	r3, #10
 80063be:	d106      	bne.n	80063ce <USART_PIN_CONFIG+0x176>
			gpio_altfn(tx_port, tx_pinNumber, USART3_TX_PB10);
 80063c0:	6839      	ldr	r1, [r7, #0]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	2204      	movs	r2, #4
 80063c6:	0018      	movs	r0, r3
 80063c8:	f7ff fa8f 	bl	80058ea <gpio_altfn>
 80063cc:	e00c      	b.n	80063e8 <USART_PIN_CONFIG+0x190>
		} else if (tx_port == PORTC && tx_pinNumber == 10) {
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	4a29      	ldr	r2, [pc, #164]	; (8006478 <USART_PIN_CONFIG+0x220>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d108      	bne.n	80063e8 <USART_PIN_CONFIG+0x190>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b0a      	cmp	r3, #10
 80063da:	d105      	bne.n	80063e8 <USART_PIN_CONFIG+0x190>
			gpio_altfn(tx_port, tx_pinNumber, USART3_TX_PC10);
 80063dc:	6839      	ldr	r1, [r7, #0]
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2201      	movs	r2, #1
 80063e2:	0018      	movs	r0, r3
 80063e4:	f7ff fa81 	bl	80058ea <gpio_altfn>
		if (rx_port == PORTC && rx_pinNumber == 5) {
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a23      	ldr	r2, [pc, #140]	; (8006478 <USART_PIN_CONFIG+0x220>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d109      	bne.n	8006404 <USART_PIN_CONFIG+0x1ac>
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	2b05      	cmp	r3, #5
 80063f4:	d106      	bne.n	8006404 <USART_PIN_CONFIG+0x1ac>
			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PC5);
 80063f6:	69b9      	ldr	r1, [r7, #24]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	0018      	movs	r0, r3
 80063fe:	f7ff fa74 	bl	80058ea <gpio_altfn>
 8006402:	e02c      	b.n	800645e <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTC && rx_pinNumber == 11) {
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a1c      	ldr	r2, [pc, #112]	; (8006478 <USART_PIN_CONFIG+0x220>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d109      	bne.n	8006420 <USART_PIN_CONFIG+0x1c8>
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	2b0b      	cmp	r3, #11
 8006410:	d106      	bne.n	8006420 <USART_PIN_CONFIG+0x1c8>
			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PC11);
 8006412:	69b9      	ldr	r1, [r7, #24]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	0018      	movs	r0, r3
 800641a:	f7ff fa66 	bl	80058ea <gpio_altfn>
 800641e:	e01e      	b.n	800645e <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTB && rx_pinNumber == 11) {
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a12      	ldr	r2, [pc, #72]	; (800646c <USART_PIN_CONFIG+0x214>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d11a      	bne.n	800645e <USART_PIN_CONFIG+0x206>
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	2b0b      	cmp	r3, #11
 800642c:	d117      	bne.n	800645e <USART_PIN_CONFIG+0x206>
			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PB11);
 800642e:	69b9      	ldr	r1, [r7, #24]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2204      	movs	r2, #4
 8006434:	0018      	movs	r0, r3
 8006436:	f7ff fa58 	bl	80058ea <gpio_altfn>
}
 800643a:	e010      	b.n	800645e <USART_PIN_CONFIG+0x206>
	} else if (usart == USART4) {
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	4a0f      	ldr	r2, [pc, #60]	; (800647c <USART_PIN_CONFIG+0x224>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d10c      	bne.n	800645e <USART_PIN_CONFIG+0x206>
		gpio_altfn(tx_port, tx_pinNumber, USART4_TX_PA0);
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2204      	movs	r2, #4
 800644a:	0018      	movs	r0, r3
 800644c:	f7ff fa4d 	bl	80058ea <gpio_altfn>
		gpio_altfn(rx_port, rx_pinNumber, USART4_RX_PA1);
 8006450:	69b9      	ldr	r1, [r7, #24]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2204      	movs	r2, #4
 8006456:	0018      	movs	r0, r3
 8006458:	f7ff fa47 	bl	80058ea <gpio_altfn>
}
 800645c:	e7ff      	b.n	800645e <USART_PIN_CONFIG+0x206>
 800645e:	46c0      	nop			; (mov r8, r8)
 8006460:	46bd      	mov	sp, r7
 8006462:	b004      	add	sp, #16
 8006464:	bd80      	pop	{r7, pc}
 8006466:	46c0      	nop			; (mov r8, r8)
 8006468:	40013800 	.word	0x40013800
 800646c:	48000400 	.word	0x48000400
 8006470:	40004400 	.word	0x40004400
 8006474:	40004800 	.word	0x40004800
 8006478:	48000800 	.word	0x48000800
 800647c:	40004c00 	.word	0x40004c00

08006480 <USART_BDR_SEL>:

void USART_BDR_SEL(USART_TypeDef *usart, uint32_t bd_rate) {
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]

//==============================================================//
// clkPer / (baudR x 16) = 48MHz / (9600 x 16) = 312.5 = 1388   //
//==============================================================//
	uint32_t baud = (uint32_t) (SystemCoreClock / bd_rate);
 800648a:	4b09      	ldr	r3, [pc, #36]	; (80064b0 <USART_BDR_SEL+0x30>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6839      	ldr	r1, [r7, #0]
 8006490:	0018      	movs	r0, r3
 8006492:	f7f9 fe55 	bl	8000140 <__udivsi3>
 8006496:	0003      	movs	r3, r0
 8006498:	60fb      	str	r3, [r7, #12]
	usart->BRR |= baud;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	431a      	orrs	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	60da      	str	r2, [r3, #12]
}
 80064a6:	46c0      	nop			; (mov r8, r8)
 80064a8:	46bd      	mov	sp, r7
 80064aa:	b004      	add	sp, #16
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	46c0      	nop			; (mov r8, r8)
 80064b0:	2000000c 	.word	0x2000000c

080064b4 <USART_WRITE>:

/* Write a character to USART1 */
BML_StatusTypeDef USART_WRITE(USART_TypeDef *usart, uint8_t *ch, uint32_t len, uint16_t timeout) {
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	001a      	movs	r2, r3
 80064c2:	1cbb      	adds	r3, r7, #2
 80064c4:	801a      	strh	r2, [r3, #0]
	uint16_t i = timeout;
 80064c6:	2314      	movs	r3, #20
 80064c8:	18fb      	adds	r3, r7, r3
 80064ca:	1cba      	adds	r2, r7, #2
 80064cc:	8812      	ldrh	r2, [r2, #0]
 80064ce:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < len; i++) {
 80064d0:	2317      	movs	r3, #23
 80064d2:	18fb      	adds	r3, r7, r3
 80064d4:	2200      	movs	r2, #0
 80064d6:	701a      	strb	r2, [r3, #0]
 80064d8:	e01c      	b.n	8006514 <USART_WRITE+0x60>
		if (len == 1) {
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d104      	bne.n	80064ea <USART_WRITE+0x36>
			usart->TDR = ch;
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	851a      	strh	r2, [r3, #40]	; 0x28
 80064e8:	e008      	b.n	80064fc <USART_WRITE+0x48>
		} else {
			usart->TDR = ch[i];
 80064ea:	2317      	movs	r3, #23
 80064ec:	18fb      	adds	r3, r7, r3
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	18d3      	adds	r3, r2, r3
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	851a      	strh	r2, [r3, #40]	; 0x28
		}
		while (!(usart->ISR & USART_ISR_TXE)){
 80064fc:	46c0      	nop			; (mov r8, r8)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	2280      	movs	r2, #128	; 0x80
 8006504:	4013      	ands	r3, r2
 8006506:	d0fa      	beq.n	80064fe <USART_WRITE+0x4a>
	for (uint8_t i = 0; i < len; i++) {
 8006508:	2117      	movs	r1, #23
 800650a:	187b      	adds	r3, r7, r1
 800650c:	781a      	ldrb	r2, [r3, #0]
 800650e:	187b      	adds	r3, r7, r1
 8006510:	3201      	adds	r2, #1
 8006512:	701a      	strb	r2, [r3, #0]
 8006514:	2317      	movs	r3, #23
 8006516:	18fb      	adds	r3, r7, r3
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	429a      	cmp	r2, r3
 800651e:	d8dc      	bhi.n	80064da <USART_WRITE+0x26>
//			if(i <= 0){
//				return BML_TIMEOUT;
//			}
		}
	}
	return BML_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	0018      	movs	r0, r3
 8006524:	46bd      	mov	sp, r7
 8006526:	b006      	add	sp, #24
 8006528:	bd80      	pop	{r7, pc}
	...

0800652c <print>:
	return chr;
}

//******************************* UART SERIAL PRINTING ***************************************//

void print(const char *fmt, ...) {
 800652c:	b40f      	push	{r0, r1, r2, r3}
 800652e:	b580      	push	{r7, lr}
 8006530:	b082      	sub	sp, #8
 8006532:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8006534:	2314      	movs	r3, #20
 8006536:	18fb      	adds	r3, r7, r3
 8006538:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	2180      	movs	r1, #128	; 0x80
 8006540:	0049      	lsls	r1, r1, #1
 8006542:	480c      	ldr	r0, [pc, #48]	; (8006574 <print+0x48>)
 8006544:	f005 feb6 	bl	800c2b4 <vsniprintf>
	va_end(args);

	uint16_t len = strlen(buffer);
 8006548:	4b0a      	ldr	r3, [pc, #40]	; (8006574 <print+0x48>)
 800654a:	0018      	movs	r0, r3
 800654c:	f7f9 fddc 	bl	8000108 <strlen>
 8006550:	0002      	movs	r2, r0
 8006552:	1dbb      	adds	r3, r7, #6
 8006554:	801a      	strh	r2, [r3, #0]
	USART_WRITE(UART_TYPE, buffer, len, 1000);
 8006556:	1dbb      	adds	r3, r7, #6
 8006558:	881a      	ldrh	r2, [r3, #0]
 800655a:	23fa      	movs	r3, #250	; 0xfa
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4905      	ldr	r1, [pc, #20]	; (8006574 <print+0x48>)
 8006560:	4805      	ldr	r0, [pc, #20]	; (8006578 <print+0x4c>)
 8006562:	f7ff ffa7 	bl	80064b4 <USART_WRITE>

}
 8006566:	46c0      	nop			; (mov r8, r8)
 8006568:	46bd      	mov	sp, r7
 800656a:	b002      	add	sp, #8
 800656c:	bc80      	pop	{r7}
 800656e:	bc08      	pop	{r3}
 8006570:	b004      	add	sp, #16
 8006572:	4718      	bx	r3
 8006574:	200007b4 	.word	0x200007b4
 8006578:	40004400 	.word	0x40004400

0800657c <uart_print_config>:

void uart_print_config(uint32_t baudRate) {
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af02      	add	r7, sp, #8
 8006582:	6078      	str	r0, [r7, #4]
	USART_INIT(UART_TYPE, UART_TX_PORT, UART_RX_PORT, UART_TX_PIN, UART_RX_PIN, baudRate);
 8006584:	2390      	movs	r3, #144	; 0x90
 8006586:	05da      	lsls	r2, r3, #23
 8006588:	2390      	movs	r3, #144	; 0x90
 800658a:	05d9      	lsls	r1, r3, #23
 800658c:	4805      	ldr	r0, [pc, #20]	; (80065a4 <uart_print_config+0x28>)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	9301      	str	r3, [sp, #4]
 8006592:	2303      	movs	r3, #3
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	2302      	movs	r3, #2
 8006598:	f7ff fda2 	bl	80060e0 <USART_INIT>
}
 800659c:	46c0      	nop			; (mov r8, r8)
 800659e:	46bd      	mov	sp, r7
 80065a0:	b002      	add	sp, #8
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	40004400 	.word	0x40004400

080065a8 <mlx90614_read16>:
		}
	}
	return crc;
}
//###################################################################################################
BML_StatusTypeDef mlx90614_read16(uint8_t address, int16_t *data) {
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af02      	add	r7, sp, #8
 80065ae:	0002      	movs	r2, r0
 80065b0:	6039      	str	r1, [r7, #0]
 80065b2:	1dfb      	adds	r3, r7, #7
 80065b4:	701a      	strb	r2, [r3, #0]
//	if (HAL_I2C_Mem_Read(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, address,
//			I2C_MEMADD_SIZE_8BIT, d, 3, 100) != HAL_OK) {
//		return false;
//	}

	if (I2C_MasterMultiRead(_MLX90614_I2C, _MLX90614_I2C_ADDRESS, address, 3, d,
 80065b6:	1dfb      	adds	r3, r7, #7
 80065b8:	781a      	ldrb	r2, [r3, #0]
 80065ba:	480f      	ldr	r0, [pc, #60]	; (80065f8 <mlx90614_read16+0x50>)
 80065bc:	2364      	movs	r3, #100	; 0x64
 80065be:	9301      	str	r3, [sp, #4]
 80065c0:	230c      	movs	r3, #12
 80065c2:	18fb      	adds	r3, r7, r3
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	2303      	movs	r3, #3
 80065c8:	215a      	movs	r1, #90	; 0x5a
 80065ca:	f7ff fc81 	bl	8005ed0 <I2C_MasterMultiRead>
 80065ce:	1e03      	subs	r3, r0, #0
 80065d0:	d001      	beq.n	80065d6 <mlx90614_read16+0x2e>
			100) != BML_OK) {
		return BML_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e00c      	b.n	80065f0 <mlx90614_read16+0x48>
	}

	*data = d[0] | (d[1] << 8);
 80065d6:	210c      	movs	r1, #12
 80065d8:	187b      	adds	r3, r7, r1
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	b21a      	sxth	r2, r3
 80065de:	187b      	adds	r3, r7, r1
 80065e0:	785b      	ldrb	r3, [r3, #1]
 80065e2:	021b      	lsls	r3, r3, #8
 80065e4:	b21b      	sxth	r3, r3
 80065e6:	4313      	orrs	r3, r2
 80065e8:	b21a      	sxth	r2, r3
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	801a      	strh	r2, [r3, #0]
	return BML_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	0018      	movs	r0, r3
 80065f2:	46bd      	mov	sp, r7
 80065f4:	b004      	add	sp, #16
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	40005400 	.word	0x40005400

080065fc <mlx90614_calcTemperature>:
		rawTemp = (int16_t) tempFloat;
	}
	return rawTemp;
}
//###################################################################################################
float mlx90614_calcTemperature(int16_t rawTemp) {
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	0002      	movs	r2, r0
 8006604:	1dbb      	adds	r3, r7, #6
 8006606:	801a      	strh	r2, [r3, #0]
	float retTemp;
	if (mlx90614.unit == MLX90614_UNIT_RAW) {
 8006608:	4b1e      	ldr	r3, [pc, #120]	; (8006684 <mlx90614_calcTemperature+0x88>)
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d108      	bne.n	8006622 <mlx90614_calcTemperature+0x26>
		retTemp = (float) rawTemp;
 8006610:	1dbb      	adds	r3, r7, #6
 8006612:	2200      	movs	r2, #0
 8006614:	5e9b      	ldrsh	r3, [r3, r2]
 8006616:	0018      	movs	r0, r3
 8006618:	f7fa fe2a 	bl	8001270 <__aeabi_i2f>
 800661c:	1c03      	adds	r3, r0, #0
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	e02b      	b.n	800667a <mlx90614_calcTemperature+0x7e>
	} else {
		retTemp = (float) (rawTemp) * 0.02f;
 8006622:	1dbb      	adds	r3, r7, #6
 8006624:	2200      	movs	r2, #0
 8006626:	5e9b      	ldrsh	r3, [r3, r2]
 8006628:	0018      	movs	r0, r3
 800662a:	f7fa fe21 	bl	8001270 <__aeabi_i2f>
 800662e:	1c03      	adds	r3, r0, #0
 8006630:	4915      	ldr	r1, [pc, #84]	; (8006688 <mlx90614_calcTemperature+0x8c>)
 8006632:	1c18      	adds	r0, r3, #0
 8006634:	f7fa fb48 	bl	8000cc8 <__aeabi_fmul>
 8006638:	1c03      	adds	r3, r0, #0
 800663a:	60fb      	str	r3, [r7, #12]
		if (mlx90614.unit != MLX90614_UNIT_K) {
 800663c:	4b11      	ldr	r3, [pc, #68]	; (8006684 <mlx90614_calcTemperature+0x88>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d01a      	beq.n	800667a <mlx90614_calcTemperature+0x7e>
			retTemp -= 273.15f;
 8006644:	4911      	ldr	r1, [pc, #68]	; (800668c <mlx90614_calcTemperature+0x90>)
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f7fa fc64 	bl	8000f14 <__aeabi_fsub>
 800664c:	1c03      	adds	r3, r0, #0
 800664e:	60fb      	str	r3, [r7, #12]
			if (mlx90614.unit == MLX90614_UNIT_F) {
 8006650:	4b0c      	ldr	r3, [pc, #48]	; (8006684 <mlx90614_calcTemperature+0x88>)
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	2b03      	cmp	r3, #3
 8006656:	d110      	bne.n	800667a <mlx90614_calcTemperature+0x7e>
				retTemp = retTemp * 9.0f / 5.0f + 32.0f;
 8006658:	490d      	ldr	r1, [pc, #52]	; (8006690 <mlx90614_calcTemperature+0x94>)
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f7fa fb34 	bl	8000cc8 <__aeabi_fmul>
 8006660:	1c03      	adds	r3, r0, #0
 8006662:	490c      	ldr	r1, [pc, #48]	; (8006694 <mlx90614_calcTemperature+0x98>)
 8006664:	1c18      	adds	r0, r3, #0
 8006666:	f7fa f967 	bl	8000938 <__aeabi_fdiv>
 800666a:	1c03      	adds	r3, r0, #0
 800666c:	2184      	movs	r1, #132	; 0x84
 800666e:	05c9      	lsls	r1, r1, #23
 8006670:	1c18      	adds	r0, r3, #0
 8006672:	f7f9 ffc3 	bl	80005fc <__aeabi_fadd>
 8006676:	1c03      	adds	r3, r0, #0
 8006678:	60fb      	str	r3, [r7, #12]
			}
		}
	}
	return retTemp;
 800667a:	68fb      	ldr	r3, [r7, #12]
}
 800667c:	1c18      	adds	r0, r3, #0
 800667e:	46bd      	mov	sp, r7
 8006680:	b004      	add	sp, #16
 8006682:	bd80      	pop	{r7, pc}
 8006684:	200008b4 	.word	0x200008b4
 8006688:	3ca3d70a 	.word	0x3ca3d70a
 800668c:	43889333 	.word	0x43889333
 8006690:	41100000 	.word	0x41100000
 8006694:	40a00000 	.word	0x40a00000

08006698 <mlx90614_init>:
//###################################################################################################
BML_StatusTypeDef mlx90614_init(void) {
 8006698:	b580      	push	{r7, lr}
 800669a:	af00      	add	r7, sp, #0
	memset(&mlx90614, 0, sizeof(mlx90614));
 800669c:	4b20      	ldr	r3, [pc, #128]	; (8006720 <mlx90614_init+0x88>)
 800669e:	2234      	movs	r2, #52	; 0x34
 80066a0:	2100      	movs	r1, #0
 80066a2:	0018      	movs	r0, r3
 80066a4:	f004 f8fe 	bl	800a8a4 <memset>
	mlx90614.unit = MLX90614_UNIT_C;
 80066a8:	4b1d      	ldr	r3, [pc, #116]	; (8006720 <mlx90614_init+0x88>)
 80066aa:	2202      	movs	r2, #2
 80066ac:	701a      	strb	r2, [r3, #0]

	I2C_INIT(_MLX90614_I2C, _MLX90614_I2C_SPEED);
 80066ae:	4a1d      	ldr	r2, [pc, #116]	; (8006724 <mlx90614_init+0x8c>)
 80066b0:	4b1d      	ldr	r3, [pc, #116]	; (8006728 <mlx90614_init+0x90>)
 80066b2:	0011      	movs	r1, r2
 80066b4:	0018      	movs	r0, r3
 80066b6:	f7ff fb6f 	bl	8005d98 <I2C_INIT>

//	if (HAL_I2C_IsDeviceReady(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, 1, 100)
//			!= HAL_OK)
//		return BML_ERROR;
	if(I2C_DeviceReady(_MLX90614_I2C, _MLX90614_I2C_ADDRESS, 100) != BML_OK){
 80066ba:	4b1b      	ldr	r3, [pc, #108]	; (8006728 <mlx90614_init+0x90>)
 80066bc:	2264      	movs	r2, #100	; 0x64
 80066be:	215a      	movs	r1, #90	; 0x5a
 80066c0:	0018      	movs	r0, r3
 80066c2:	f7ff fba5 	bl	8005e10 <I2C_DeviceReady>
 80066c6:	1e03      	subs	r3, r0, #0
 80066c8:	d001      	beq.n	80066ce <mlx90614_init+0x36>
		return BML_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e025      	b.n	800671a <mlx90614_init+0x82>
	}
	mlx90614_read16(MLX90614_REGISTER_CONFIG, (int16_t*) &mlx90614.configReg);
 80066ce:	4b17      	ldr	r3, [pc, #92]	; (800672c <mlx90614_init+0x94>)
 80066d0:	0019      	movs	r1, r3
 80066d2:	2025      	movs	r0, #37	; 0x25
 80066d4:	f7ff ff68 	bl	80065a8 <mlx90614_read16>
	if (mlx90614_readID(NULL) == BML_ERROR)
 80066d8:	2000      	movs	r0, #0
 80066da:	f000 f839 	bl	8006750 <mlx90614_readID>
 80066de:	0003      	movs	r3, r0
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d101      	bne.n	80066e8 <mlx90614_init+0x50>
		return BML_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e018      	b.n	800671a <mlx90614_init+0x82>
	if (mlx90614_getEmissivity(NULL) == BML_ERROR)
 80066e8:	2000      	movs	r0, #0
 80066ea:	f000 f86d 	bl	80067c8 <mlx90614_getEmissivity>
 80066ee:	0003      	movs	r3, r0
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d101      	bne.n	80066f8 <mlx90614_init+0x60>
		return BML_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e010      	b.n	800671a <mlx90614_init+0x82>
	if (mlx90614_getMax(NULL) == BML_ERROR)
 80066f8:	2000      	movs	r0, #0
 80066fa:	f000 f8a1 	bl	8006840 <mlx90614_getMax>
 80066fe:	0003      	movs	r3, r0
 8006700:	2b01      	cmp	r3, #1
 8006702:	d101      	bne.n	8006708 <mlx90614_init+0x70>
		return BML_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e008      	b.n	800671a <mlx90614_init+0x82>
	if (mlx90614_getMin(NULL) == BML_ERROR)
 8006708:	2000      	movs	r0, #0
 800670a:	f000 f8bb 	bl	8006884 <mlx90614_getMin>
 800670e:	0003      	movs	r3, r0
 8006710:	2b01      	cmp	r3, #1
 8006712:	d101      	bne.n	8006718 <mlx90614_init+0x80>
		return BML_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e000      	b.n	800671a <mlx90614_init+0x82>

	return BML_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	0018      	movs	r0, r3
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	200008b4 	.word	0x200008b4
 8006724:	2000090e 	.word	0x2000090e
 8006728:	40005400 	.word	0x40005400
 800672c:	200008e4 	.word	0x200008e4

08006730 <mlx90614_setUnit>:
//###################################################################################################
void mlx90614_setUnit(MLX90614_UNIT_t MLX90614_UNIT_) {
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	0002      	movs	r2, r0
 8006738:	1dfb      	adds	r3, r7, #7
 800673a:	701a      	strb	r2, [r3, #0]
	mlx90614.unit = MLX90614_UNIT_;
 800673c:	4b03      	ldr	r3, [pc, #12]	; (800674c <mlx90614_setUnit+0x1c>)
 800673e:	1dfa      	adds	r2, r7, #7
 8006740:	7812      	ldrb	r2, [r2, #0]
 8006742:	701a      	strb	r2, [r3, #0]
}
 8006744:	46c0      	nop			; (mov r8, r8)
 8006746:	46bd      	mov	sp, r7
 8006748:	b002      	add	sp, #8
 800674a:	bd80      	pop	{r7, pc}
 800674c:	200008b4 	.word	0x200008b4

08006750 <mlx90614_readID>:
//###################################################################################################
BML_StatusTypeDef mlx90614_readID(int16_t *id) {
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++) {
 8006758:	2300      	movs	r3, #0
 800675a:	60fb      	str	r3, [r7, #12]
 800675c:	e02a      	b.n	80067b4 <mlx90614_readID+0x64>
		int16_t temp = 0;
 800675e:	210a      	movs	r1, #10
 8006760:	187b      	adds	r3, r7, r1
 8006762:	2200      	movs	r2, #0
 8006764:	801a      	strh	r2, [r3, #0]
		if (mlx90614_read16(MLX90614_REGISTER_ID0 + i, &temp) == BML_ERROR)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	b2db      	uxtb	r3, r3
 800676a:	333c      	adds	r3, #60	; 0x3c
 800676c:	b2db      	uxtb	r3, r3
 800676e:	187a      	adds	r2, r7, r1
 8006770:	0011      	movs	r1, r2
 8006772:	0018      	movs	r0, r3
 8006774:	f7ff ff18 	bl	80065a8 <mlx90614_read16>
 8006778:	0003      	movs	r3, r0
 800677a:	2b01      	cmp	r3, #1
 800677c:	d101      	bne.n	8006782 <mlx90614_readID+0x32>
			return BML_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e01c      	b.n	80067bc <mlx90614_readID+0x6c>
		if (id != NULL)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d008      	beq.n	800679a <mlx90614_readID+0x4a>
			id[i] = (uint16_t) temp;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	005b      	lsls	r3, r3, #1
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	18d3      	adds	r3, r2, r3
 8006790:	220a      	movs	r2, #10
 8006792:	18ba      	adds	r2, r7, r2
 8006794:	2100      	movs	r1, #0
 8006796:	5e52      	ldrsh	r2, [r2, r1]
 8006798:	801a      	strh	r2, [r3, #0]
		mlx90614.id[i] = (uint16_t) temp;
 800679a:	230a      	movs	r3, #10
 800679c:	18fb      	adds	r3, r7, r3
 800679e:	2200      	movs	r2, #0
 80067a0:	5e9b      	ldrsh	r3, [r3, r2]
 80067a2:	b299      	uxth	r1, r3
 80067a4:	4b07      	ldr	r3, [pc, #28]	; (80067c4 <mlx90614_readID+0x74>)
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	3214      	adds	r2, #20
 80067aa:	0052      	lsls	r2, r2, #1
 80067ac:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < 4; i++) {
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	3301      	adds	r3, #1
 80067b2:	60fb      	str	r3, [r7, #12]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2b03      	cmp	r3, #3
 80067b8:	ddd1      	ble.n	800675e <mlx90614_readID+0xe>
	}
	return BML_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	0018      	movs	r0, r3
 80067be:	46bd      	mov	sp, r7
 80067c0:	b004      	add	sp, #16
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	200008b4 	.word	0x200008b4

080067c8 <mlx90614_getEmissivity>:
//###################################################################################################
BML_StatusTypeDef mlx90614_getEmissivity(float *emissivity) {
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
	if (mlx90614_read16(MLX90614_REGISTER_KE, &mlx90614.rawEmissivity) == BML_OK) {
 80067d0:	4b18      	ldr	r3, [pc, #96]	; (8006834 <mlx90614_getEmissivity+0x6c>)
 80067d2:	0019      	movs	r1, r3
 80067d4:	2024      	movs	r0, #36	; 0x24
 80067d6:	f7ff fee7 	bl	80065a8 <mlx90614_read16>
 80067da:	1e03      	subs	r3, r0, #0
 80067dc:	d124      	bne.n	8006828 <mlx90614_getEmissivity+0x60>
		mlx90614.emissivity = (((float) ((uint16_t) mlx90614.rawEmissivity))
 80067de:	4b16      	ldr	r3, [pc, #88]	; (8006838 <mlx90614_getEmissivity+0x70>)
 80067e0:	2202      	movs	r2, #2
 80067e2:	5e9b      	ldrsh	r3, [r3, r2]
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	0018      	movs	r0, r3
 80067e8:	f7fa fd90 	bl	800130c <__aeabi_ui2f>
 80067ec:	1c03      	adds	r3, r0, #0
				/ 65535.0f);
 80067ee:	4913      	ldr	r1, [pc, #76]	; (800683c <mlx90614_getEmissivity+0x74>)
 80067f0:	1c18      	adds	r0, r3, #0
 80067f2:	f7fa f8a1 	bl	8000938 <__aeabi_fdiv>
 80067f6:	1c03      	adds	r3, r0, #0
 80067f8:	1c1a      	adds	r2, r3, #0
		mlx90614.emissivity = (((float) ((uint16_t) mlx90614.rawEmissivity))
 80067fa:	4b0f      	ldr	r3, [pc, #60]	; (8006838 <mlx90614_getEmissivity+0x70>)
 80067fc:	611a      	str	r2, [r3, #16]
		if (emissivity != NULL)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00f      	beq.n	8006824 <mlx90614_getEmissivity+0x5c>
			*emissivity = (((float) ((uint16_t) mlx90614.rawEmissivity))
 8006804:	4b0c      	ldr	r3, [pc, #48]	; (8006838 <mlx90614_getEmissivity+0x70>)
 8006806:	2202      	movs	r2, #2
 8006808:	5e9b      	ldrsh	r3, [r3, r2]
 800680a:	b29b      	uxth	r3, r3
 800680c:	0018      	movs	r0, r3
 800680e:	f7fa fd7d 	bl	800130c <__aeabi_ui2f>
 8006812:	1c03      	adds	r3, r0, #0
					/ 65535.0f);
 8006814:	4909      	ldr	r1, [pc, #36]	; (800683c <mlx90614_getEmissivity+0x74>)
 8006816:	1c18      	adds	r0, r3, #0
 8006818:	f7fa f88e 	bl	8000938 <__aeabi_fdiv>
 800681c:	1c03      	adds	r3, r0, #0
 800681e:	1c1a      	adds	r2, r3, #0
			*emissivity = (((float) ((uint16_t) mlx90614.rawEmissivity))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	601a      	str	r2, [r3, #0]
		return BML_OK;
 8006824:	2300      	movs	r3, #0
 8006826:	e000      	b.n	800682a <mlx90614_getEmissivity+0x62>
	}
	return BML_ERROR;
 8006828:	2301      	movs	r3, #1
}
 800682a:	0018      	movs	r0, r3
 800682c:	46bd      	mov	sp, r7
 800682e:	b002      	add	sp, #8
 8006830:	bd80      	pop	{r7, pc}
 8006832:	46c0      	nop			; (mov r8, r8)
 8006834:	200008b6 	.word	0x200008b6
 8006838:	200008b4 	.word	0x200008b4
 800683c:	477fff00 	.word	0x477fff00

08006840 <mlx90614_getMax>:
BML_StatusTypeDef mlx90614_setMin(float minTemp) {
	mlx90614.rawMin = mlx90614_calcRawTemp(minTemp);
	return mlx90614_write16(MLX90614_REGISTER_TOMIN, mlx90614.rawMin);
}
//###################################################################################################
BML_StatusTypeDef mlx90614_getMax(float *maxTemp) {
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
	if (mlx90614_read16(MLX90614_REGISTER_TOMAX, &mlx90614.rawMax) == BML_OK) {
 8006848:	4b0c      	ldr	r3, [pc, #48]	; (800687c <mlx90614_getMax+0x3c>)
 800684a:	0019      	movs	r1, r3
 800684c:	2020      	movs	r0, #32
 800684e:	f7ff feab 	bl	80065a8 <mlx90614_read16>
 8006852:	1e03      	subs	r3, r0, #0
 8006854:	d10d      	bne.n	8006872 <mlx90614_getMax+0x32>
		if (maxTemp != NULL)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d008      	beq.n	800686e <mlx90614_getMax+0x2e>
			*maxTemp = mlx90614.rawMax;
 800685c:	4b08      	ldr	r3, [pc, #32]	; (8006880 <mlx90614_getMax+0x40>)
 800685e:	220a      	movs	r2, #10
 8006860:	5e9b      	ldrsh	r3, [r3, r2]
 8006862:	0018      	movs	r0, r3
 8006864:	f7fa fd04 	bl	8001270 <__aeabi_i2f>
 8006868:	1c02      	adds	r2, r0, #0
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	601a      	str	r2, [r3, #0]
		return BML_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	e000      	b.n	8006874 <mlx90614_getMax+0x34>
	}
	return BML_ERROR;
 8006872:	2301      	movs	r3, #1
}
 8006874:	0018      	movs	r0, r3
 8006876:	46bd      	mov	sp, r7
 8006878:	b002      	add	sp, #8
 800687a:	bd80      	pop	{r7, pc}
 800687c:	200008be 	.word	0x200008be
 8006880:	200008b4 	.word	0x200008b4

08006884 <mlx90614_getMin>:
//###################################################################################################
BML_StatusTypeDef mlx90614_getMin(float *minTemp) {
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
	if (mlx90614_read16(MLX90614_REGISTER_TOMIN, &mlx90614.rawMin) == BML_OK) {
 800688c:	4b0c      	ldr	r3, [pc, #48]	; (80068c0 <mlx90614_getMin+0x3c>)
 800688e:	0019      	movs	r1, r3
 8006890:	2021      	movs	r0, #33	; 0x21
 8006892:	f7ff fe89 	bl	80065a8 <mlx90614_read16>
 8006896:	1e03      	subs	r3, r0, #0
 8006898:	d10d      	bne.n	80068b6 <mlx90614_getMin+0x32>
		if (minTemp != NULL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d008      	beq.n	80068b2 <mlx90614_getMin+0x2e>
			*minTemp = mlx90614.rawMin;
 80068a0:	4b08      	ldr	r3, [pc, #32]	; (80068c4 <mlx90614_getMin+0x40>)
 80068a2:	220c      	movs	r2, #12
 80068a4:	5e9b      	ldrsh	r3, [r3, r2]
 80068a6:	0018      	movs	r0, r3
 80068a8:	f7fa fce2 	bl	8001270 <__aeabi_i2f>
 80068ac:	1c02      	adds	r2, r0, #0
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	601a      	str	r2, [r3, #0]
		return BML_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	e000      	b.n	80068b8 <mlx90614_getMin+0x34>
	}
	return BML_ERROR;
 80068b6:	2301      	movs	r3, #1
}
 80068b8:	0018      	movs	r0, r3
 80068ba:	46bd      	mov	sp, r7
 80068bc:	b002      	add	sp, #8
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	200008c0 	.word	0x200008c0
 80068c4:	200008b4 	.word	0x200008b4

080068c8 <mlx90614_getObject1>:
		return BML_OK;
	}
	return BML_ERROR;
}
//###################################################################################################
BML_StatusTypeDef mlx90614_getObject1(float *objectTemp) {
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
	if (mlx90614_read16(MLX90614_REGISTER_TOBJ1, &mlx90614.rawObject1) == BML_OK) {
 80068d0:	4b10      	ldr	r3, [pc, #64]	; (8006914 <mlx90614_getObject1+0x4c>)
 80068d2:	0019      	movs	r1, r3
 80068d4:	2007      	movs	r0, #7
 80068d6:	f7ff fe67 	bl	80065a8 <mlx90614_read16>
 80068da:	1e03      	subs	r3, r0, #0
 80068dc:	d114      	bne.n	8006908 <mlx90614_getObject1+0x40>
		if (mlx90614.rawObject1 & 0x8000)
 80068de:	4b0e      	ldr	r3, [pc, #56]	; (8006918 <mlx90614_getObject1+0x50>)
 80068e0:	2206      	movs	r2, #6
 80068e2:	5e9b      	ldrsh	r3, [r3, r2]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	da01      	bge.n	80068ec <mlx90614_getObject1+0x24>
			return BML_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e00e      	b.n	800690a <mlx90614_getObject1+0x42>
		if (objectTemp != NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d008      	beq.n	8006904 <mlx90614_getObject1+0x3c>
			*objectTemp = mlx90614_calcTemperature(mlx90614.rawObject1);
 80068f2:	4b09      	ldr	r3, [pc, #36]	; (8006918 <mlx90614_getObject1+0x50>)
 80068f4:	2206      	movs	r2, #6
 80068f6:	5e9b      	ldrsh	r3, [r3, r2]
 80068f8:	0018      	movs	r0, r3
 80068fa:	f7ff fe7f 	bl	80065fc <mlx90614_calcTemperature>
 80068fe:	1c02      	adds	r2, r0, #0
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	601a      	str	r2, [r3, #0]
		return BML_OK;
 8006904:	2300      	movs	r3, #0
 8006906:	e000      	b.n	800690a <mlx90614_getObject1+0x42>
	}
	return BML_ERROR;
 8006908:	2301      	movs	r3, #1
}
 800690a:	0018      	movs	r0, r3
 800690c:	46bd      	mov	sp, r7
 800690e:	b002      	add	sp, #8
 8006910:	bd80      	pop	{r7, pc}
 8006912:	46c0      	nop			; (mov r8, r8)
 8006914:	200008ba 	.word	0x200008ba
 8006918:	200008b4 	.word	0x200008b4

0800691c <LCD_DrawButton1>:

#include "graphics.h"
#include "Pictures.h"

void LCD_DrawButton1(char *c, int16_t x, int16_t y, int16_t w, int16_t h,
		int16_t r, uint16_t bgColor, uint16_t textColor, uint8_t bg_draw, uint16_t xPadding, uint16_t yPadding, uint8_t textSize) {
 800691c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800691e:	b087      	sub	sp, #28
 8006920:	af02      	add	r7, sp, #8
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	000c      	movs	r4, r1
 8006926:	0010      	movs	r0, r2
 8006928:	0019      	movs	r1, r3
 800692a:	250a      	movs	r5, #10
 800692c:	197b      	adds	r3, r7, r5
 800692e:	1c22      	adds	r2, r4, #0
 8006930:	801a      	strh	r2, [r3, #0]
 8006932:	2408      	movs	r4, #8
 8006934:	193b      	adds	r3, r7, r4
 8006936:	1c02      	adds	r2, r0, #0
 8006938:	801a      	strh	r2, [r3, #0]
 800693a:	1dbb      	adds	r3, r7, #6
 800693c:	1c0a      	adds	r2, r1, #0
 800693e:	801a      	strh	r2, [r3, #0]

	if (bg_draw == 1)
 8006940:	2330      	movs	r3, #48	; 0x30
 8006942:	2208      	movs	r2, #8
 8006944:	189b      	adds	r3, r3, r2
 8006946:	19db      	adds	r3, r3, r7
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d120      	bne.n	8006990 <LCD_DrawButton1+0x74>
		LCD_FillRoundRect(x + 5, y + 5, w, h, r, textColor);
 800694e:	197b      	adds	r3, r7, r5
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	3305      	adds	r3, #5
 8006954:	b29b      	uxth	r3, r3
 8006956:	b218      	sxth	r0, r3
 8006958:	193b      	adds	r3, r7, r4
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	3305      	adds	r3, #5
 800695e:	b29b      	uxth	r3, r3
 8006960:	b219      	sxth	r1, r3
 8006962:	2320      	movs	r3, #32
 8006964:	0015      	movs	r5, r2
 8006966:	189b      	adds	r3, r3, r2
 8006968:	19db      	adds	r3, r3, r7
 800696a:	2400      	movs	r4, #0
 800696c:	5f1c      	ldrsh	r4, [r3, r4]
 800696e:	1dbb      	adds	r3, r7, #6
 8006970:	2200      	movs	r2, #0
 8006972:	5e9a      	ldrsh	r2, [r3, r2]
 8006974:	232c      	movs	r3, #44	; 0x2c
 8006976:	195b      	adds	r3, r3, r5
 8006978:	19db      	adds	r3, r3, r7
 800697a:	881b      	ldrh	r3, [r3, #0]
 800697c:	9301      	str	r3, [sp, #4]
 800697e:	2324      	movs	r3, #36	; 0x24
 8006980:	195b      	adds	r3, r3, r5
 8006982:	19db      	adds	r3, r3, r7
 8006984:	2500      	movs	r5, #0
 8006986:	5f5b      	ldrsh	r3, [r3, r5]
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	0023      	movs	r3, r4
 800698c:	f001 fb64 	bl	8008058 <LCD_FillRoundRect>

	LCD_FillRoundRect(x, y, w, h, r, bgColor);
 8006990:	2320      	movs	r3, #32
 8006992:	2208      	movs	r2, #8
 8006994:	189b      	adds	r3, r3, r2
 8006996:	19db      	adds	r3, r3, r7
 8006998:	2200      	movs	r2, #0
 800699a:	5e9c      	ldrsh	r4, [r3, r2]
 800699c:	1dbb      	adds	r3, r7, #6
 800699e:	2100      	movs	r1, #0
 80069a0:	5e5b      	ldrsh	r3, [r3, r1]
 80069a2:	469c      	mov	ip, r3
 80069a4:	2508      	movs	r5, #8
 80069a6:	197b      	adds	r3, r7, r5
 80069a8:	2000      	movs	r0, #0
 80069aa:	5e19      	ldrsh	r1, [r3, r0]
 80069ac:	260a      	movs	r6, #10
 80069ae:	19bb      	adds	r3, r7, r6
 80069b0:	2000      	movs	r0, #0
 80069b2:	5e18      	ldrsh	r0, [r3, r0]
 80069b4:	2328      	movs	r3, #40	; 0x28
 80069b6:	2208      	movs	r2, #8
 80069b8:	189b      	adds	r3, r3, r2
 80069ba:	19db      	adds	r3, r3, r7
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	9301      	str	r3, [sp, #4]
 80069c0:	2324      	movs	r3, #36	; 0x24
 80069c2:	189b      	adds	r3, r3, r2
 80069c4:	19db      	adds	r3, r3, r7
 80069c6:	2200      	movs	r2, #0
 80069c8:	5e9b      	ldrsh	r3, [r3, r2]
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	0023      	movs	r3, r4
 80069ce:	4662      	mov	r2, ip
 80069d0:	f001 fb42 	bl	8008058 <LCD_FillRoundRect>
	LCD_DrawRoundRect(x, y, w, h, r, WHITE);
 80069d4:	2320      	movs	r3, #32
 80069d6:	2208      	movs	r2, #8
 80069d8:	189b      	adds	r3, r3, r2
 80069da:	19db      	adds	r3, r3, r7
 80069dc:	2200      	movs	r2, #0
 80069de:	5e9c      	ldrsh	r4, [r3, r2]
 80069e0:	1dbb      	adds	r3, r7, #6
 80069e2:	2100      	movs	r1, #0
 80069e4:	5e5b      	ldrsh	r3, [r3, r1]
 80069e6:	469c      	mov	ip, r3
 80069e8:	197b      	adds	r3, r7, r5
 80069ea:	2000      	movs	r0, #0
 80069ec:	5e19      	ldrsh	r1, [r3, r0]
 80069ee:	19bb      	adds	r3, r7, r6
 80069f0:	2000      	movs	r0, #0
 80069f2:	5e18      	ldrsh	r0, [r3, r0]
 80069f4:	4b1e      	ldr	r3, [pc, #120]	; (8006a70 <LCD_DrawButton1+0x154>)
 80069f6:	9301      	str	r3, [sp, #4]
 80069f8:	2324      	movs	r3, #36	; 0x24
 80069fa:	2208      	movs	r2, #8
 80069fc:	189b      	adds	r3, r3, r2
 80069fe:	19db      	adds	r3, r3, r7
 8006a00:	2200      	movs	r2, #0
 8006a02:	5e9b      	ldrsh	r3, [r3, r2]
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	0023      	movs	r3, r4
 8006a08:	4662      	mov	r2, ip
 8006a0a:	f000 fd2c 	bl	8007466 <LCD_DrawRoundRect>
	LCD_SetCursor(x + xPadding, y + yPadding);
 8006a0e:	19bb      	adds	r3, r7, r6
 8006a10:	2100      	movs	r1, #0
 8006a12:	5e5a      	ldrsh	r2, [r3, r1]
 8006a14:	2134      	movs	r1, #52	; 0x34
 8006a16:	2408      	movs	r4, #8
 8006a18:	190b      	adds	r3, r1, r4
 8006a1a:	19db      	adds	r3, r3, r7
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	18d3      	adds	r3, r2, r3
 8006a20:	0018      	movs	r0, r3
 8006a22:	197b      	adds	r3, r7, r5
 8006a24:	2100      	movs	r1, #0
 8006a26:	5e5a      	ldrsh	r2, [r3, r1]
 8006a28:	2138      	movs	r1, #56	; 0x38
 8006a2a:	190b      	adds	r3, r1, r4
 8006a2c:	19db      	adds	r3, r3, r7
 8006a2e:	881b      	ldrh	r3, [r3, #0]
 8006a30:	18d3      	adds	r3, r2, r3
 8006a32:	0019      	movs	r1, r3
 8006a34:	f001 fe42 	bl	80086bc <LCD_SetCursor>
	LCD_SetTextSize(textSize);
 8006a38:	223c      	movs	r2, #60	; 0x3c
 8006a3a:	1913      	adds	r3, r2, r4
 8006a3c:	19db      	adds	r3, r3, r7
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	0018      	movs	r0, r3
 8006a42:	f001 fe51 	bl	80086e8 <LCD_SetTextSize>
	LCD_SetTextColor(textColor, bgColor);
 8006a46:	2328      	movs	r3, #40	; 0x28
 8006a48:	191b      	adds	r3, r3, r4
 8006a4a:	19db      	adds	r3, r3, r7
 8006a4c:	881a      	ldrh	r2, [r3, #0]
 8006a4e:	232c      	movs	r3, #44	; 0x2c
 8006a50:	191b      	adds	r3, r3, r4
 8006a52:	19db      	adds	r3, r3, r7
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	0011      	movs	r1, r2
 8006a58:	0018      	movs	r0, r3
 8006a5a:	f001 fe5b 	bl	8008714 <LCD_SetTextColor>
	LCD_Printf(c);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	0018      	movs	r0, r3
 8006a62:	f001 fd2f 	bl	80084c4 <LCD_Printf>

}
 8006a66:	46c0      	nop			; (mov r8, r8)
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	b005      	add	sp, #20
 8006a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a6e:	46c0      	nop			; (mov r8, r8)
 8006a70:	0000ffff 	.word	0x0000ffff

08006a74 <LCD_DrawHBorder>:

void LCD_DrawHBorder(int16_t x, int16_t y, int16_t w, uint16_t color, int16_t BorderSize){
 8006a74:	b5b0      	push	{r4, r5, r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	0005      	movs	r5, r0
 8006a7c:	000c      	movs	r4, r1
 8006a7e:	0010      	movs	r0, r2
 8006a80:	0019      	movs	r1, r3
 8006a82:	1dbb      	adds	r3, r7, #6
 8006a84:	1c2a      	adds	r2, r5, #0
 8006a86:	801a      	strh	r2, [r3, #0]
 8006a88:	1d3b      	adds	r3, r7, #4
 8006a8a:	1c22      	adds	r2, r4, #0
 8006a8c:	801a      	strh	r2, [r3, #0]
 8006a8e:	1cbb      	adds	r3, r7, #2
 8006a90:	1c02      	adds	r2, r0, #0
 8006a92:	801a      	strh	r2, [r3, #0]
 8006a94:	003b      	movs	r3, r7
 8006a96:	1c0a      	adds	r2, r1, #0
 8006a98:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < BorderSize; i++){
 8006a9a:	230f      	movs	r3, #15
 8006a9c:	18fb      	adds	r3, r7, r3
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	701a      	strb	r2, [r3, #0]
 8006aa2:	e018      	b.n	8006ad6 <LCD_DrawHBorder+0x62>
		LCD_DrawFastHLine(x, y + i, w, color);
 8006aa4:	250f      	movs	r5, #15
 8006aa6:	197b      	adds	r3, r7, r5
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	1d3b      	adds	r3, r7, #4
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	18d3      	adds	r3, r2, r3
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	b219      	sxth	r1, r3
 8006ab6:	003b      	movs	r3, r7
 8006ab8:	881c      	ldrh	r4, [r3, #0]
 8006aba:	1cbb      	adds	r3, r7, #2
 8006abc:	2200      	movs	r2, #0
 8006abe:	5e9a      	ldrsh	r2, [r3, r2]
 8006ac0:	1dbb      	adds	r3, r7, #6
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	5e18      	ldrsh	r0, [r3, r0]
 8006ac6:	0023      	movs	r3, r4
 8006ac8:	f000 fbaa 	bl	8007220 <LCD_DrawFastHLine>
	for(uint8_t i = 0; i < BorderSize; i++){
 8006acc:	197b      	adds	r3, r7, r5
 8006ace:	781a      	ldrb	r2, [r3, #0]
 8006ad0:	197b      	adds	r3, r7, r5
 8006ad2:	3201      	adds	r2, #1
 8006ad4:	701a      	strb	r2, [r3, #0]
 8006ad6:	230f      	movs	r3, #15
 8006ad8:	18fb      	adds	r3, r7, r3
 8006ada:	781a      	ldrb	r2, [r3, #0]
 8006adc:	2320      	movs	r3, #32
 8006ade:	18fb      	adds	r3, r7, r3
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	5e5b      	ldrsh	r3, [r3, r1]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	dbdd      	blt.n	8006aa4 <LCD_DrawHBorder+0x30>
	}

}
 8006ae8:	46c0      	nop			; (mov r8, r8)
 8006aea:	46c0      	nop			; (mov r8, r8)
 8006aec:	46bd      	mov	sp, r7
 8006aee:	b004      	add	sp, #16
 8006af0:	bdb0      	pop	{r4, r5, r7, pc}

08006af2 <delay>:
		//-----FRAME RATE SETTING-------//
		0x0060, 0xA700, 0x0061, 0x0001, 0x0090, 0x0033, //RTNI setting
		//-------DISPLAY ON------//
		0x0007, 0x0133, };

void delay(unsigned int t) {
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b082      	sub	sp, #8
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
	for (; t > 0; t--) {
 8006afa:	e003      	b.n	8006b04 <delay+0x12>
		__asm("nop");
 8006afc:	46c0      	nop			; (mov r8, r8)
	for (; t > 0; t--) {
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	3b01      	subs	r3, #1
 8006b02:	607b      	str	r3, [r7, #4]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1f8      	bne.n	8006afc <delay+0xa>
	}
}
 8006b0a:	46c0      	nop			; (mov r8, r8)
 8006b0c:	46c0      	nop			; (mov r8, r8)
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	b002      	add	sp, #8
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <GPIO_Init>:
 * 
 * \param 
 * 
 * \return void
 */
static void GPIO_Init(void) {
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b08a      	sub	sp, #40	; 0x28
 8006b18:	af02      	add	r7, sp, #8
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__GPIOC_CLK_ENABLE()
 8006b1a:	4b5b      	ldr	r3, [pc, #364]	; (8006c88 <GPIO_Init+0x174>)
 8006b1c:	695a      	ldr	r2, [r3, #20]
 8006b1e:	4b5a      	ldr	r3, [pc, #360]	; (8006c88 <GPIO_Init+0x174>)
 8006b20:	2180      	movs	r1, #128	; 0x80
 8006b22:	0309      	lsls	r1, r1, #12
 8006b24:	430a      	orrs	r2, r1
 8006b26:	615a      	str	r2, [r3, #20]
 8006b28:	4b57      	ldr	r3, [pc, #348]	; (8006c88 <GPIO_Init+0x174>)
 8006b2a:	695a      	ldr	r2, [r3, #20]
 8006b2c:	2380      	movs	r3, #128	; 0x80
 8006b2e:	031b      	lsls	r3, r3, #12
 8006b30:	4013      	ands	r3, r2
 8006b32:	60bb      	str	r3, [r7, #8]
 8006b34:	68bb      	ldr	r3, [r7, #8]
	;
	__GPIOA_CLK_ENABLE()
 8006b36:	4b54      	ldr	r3, [pc, #336]	; (8006c88 <GPIO_Init+0x174>)
 8006b38:	695a      	ldr	r2, [r3, #20]
 8006b3a:	4b53      	ldr	r3, [pc, #332]	; (8006c88 <GPIO_Init+0x174>)
 8006b3c:	2180      	movs	r1, #128	; 0x80
 8006b3e:	0289      	lsls	r1, r1, #10
 8006b40:	430a      	orrs	r2, r1
 8006b42:	615a      	str	r2, [r3, #20]
 8006b44:	4b50      	ldr	r3, [pc, #320]	; (8006c88 <GPIO_Init+0x174>)
 8006b46:	695a      	ldr	r2, [r3, #20]
 8006b48:	2380      	movs	r3, #128	; 0x80
 8006b4a:	029b      	lsls	r3, r3, #10
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	607b      	str	r3, [r7, #4]
 8006b50:	687b      	ldr	r3, [r7, #4]
	;
	__GPIOB_CLK_ENABLE()
 8006b52:	4b4d      	ldr	r3, [pc, #308]	; (8006c88 <GPIO_Init+0x174>)
 8006b54:	695a      	ldr	r2, [r3, #20]
 8006b56:	4b4c      	ldr	r3, [pc, #304]	; (8006c88 <GPIO_Init+0x174>)
 8006b58:	2180      	movs	r1, #128	; 0x80
 8006b5a:	02c9      	lsls	r1, r1, #11
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	615a      	str	r2, [r3, #20]
 8006b60:	4b49      	ldr	r3, [pc, #292]	; (8006c88 <GPIO_Init+0x174>)
 8006b62:	695a      	ldr	r2, [r3, #20]
 8006b64:	2380      	movs	r3, #128	; 0x80
 8006b66:	02db      	lsls	r3, r3, #11
 8006b68:	4013      	ands	r3, r2
 8006b6a:	603b      	str	r3, [r7, #0]
 8006b6c:	683b      	ldr	r3, [r7, #0]
	;

//	/*Configure GPIO pins : PC1 PC7 */
	gpio_config(PORTC, 1, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8006b6e:	4847      	ldr	r0, [pc, #284]	; (8006c8c <GPIO_Init+0x178>)
 8006b70:	2300      	movs	r3, #0
 8006b72:	9301      	str	r3, [sp, #4]
 8006b74:	2300      	movs	r3, #0
 8006b76:	9300      	str	r3, [sp, #0]
 8006b78:	2302      	movs	r3, #2
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	2101      	movs	r1, #1
 8006b7e:	f7fe fded 	bl	800575c <gpio_config>
	gpio_config(PORTC, 7, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8006b82:	4842      	ldr	r0, [pc, #264]	; (8006c8c <GPIO_Init+0x178>)
 8006b84:	2300      	movs	r3, #0
 8006b86:	9301      	str	r3, [sp, #4]
 8006b88:	2300      	movs	r3, #0
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	2201      	movs	r2, #1
 8006b90:	2107      	movs	r1, #7
 8006b92:	f7fe fde3 	bl	800575c <gpio_config>

//	/*Configure GPIO pins : PA0 PA1 PA4 PA8 PA9 PA10 */
	gpio_config(PORTA, 0, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8006b96:	2390      	movs	r3, #144	; 0x90
 8006b98:	05d8      	lsls	r0, r3, #23
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	9301      	str	r3, [sp, #4]
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	2302      	movs	r3, #2
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	f7fe fdd8 	bl	800575c <gpio_config>
	gpio_config(PORTA, 1, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8006bac:	2390      	movs	r3, #144	; 0x90
 8006bae:	05d8      	lsls	r0, r3, #23
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	9301      	str	r3, [sp, #4]
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	2302      	movs	r3, #2
 8006bba:	2201      	movs	r2, #1
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	f7fe fdcd 	bl	800575c <gpio_config>
	gpio_config(PORTA, 4, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8006bc2:	2390      	movs	r3, #144	; 0x90
 8006bc4:	05d8      	lsls	r0, r3, #23
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	9301      	str	r3, [sp, #4]
 8006bca:	2300      	movs	r3, #0
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	2302      	movs	r3, #2
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	2104      	movs	r1, #4
 8006bd4:	f7fe fdc2 	bl	800575c <gpio_config>
	gpio_config(PORTA, 8, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8006bd8:	2390      	movs	r3, #144	; 0x90
 8006bda:	05d8      	lsls	r0, r3, #23
 8006bdc:	2300      	movs	r3, #0
 8006bde:	9301      	str	r3, [sp, #4]
 8006be0:	2300      	movs	r3, #0
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	2302      	movs	r3, #2
 8006be6:	2201      	movs	r2, #1
 8006be8:	2108      	movs	r1, #8
 8006bea:	f7fe fdb7 	bl	800575c <gpio_config>
	gpio_config(PORTA, 9, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8006bee:	2390      	movs	r3, #144	; 0x90
 8006bf0:	05d8      	lsls	r0, r3, #23
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	9301      	str	r3, [sp, #4]
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	2109      	movs	r1, #9
 8006c00:	f7fe fdac 	bl	800575c <gpio_config>
	gpio_config(PORTA, 10, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8006c04:	2390      	movs	r3, #144	; 0x90
 8006c06:	05d8      	lsls	r0, r3, #23
 8006c08:	2300      	movs	r3, #0
 8006c0a:	9301      	str	r3, [sp, #4]
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	2302      	movs	r3, #2
 8006c12:	2201      	movs	r2, #1
 8006c14:	210a      	movs	r1, #10
 8006c16:	f7fe fda1 	bl	800575c <gpio_config>

//	/*Configure GPIO pins : PB0 PB3 PB4 PB5 PB10 */
	gpio_config(PORTB, 0, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8006c1a:	481d      	ldr	r0, [pc, #116]	; (8006c90 <GPIO_Init+0x17c>)
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	9301      	str	r3, [sp, #4]
 8006c20:	2300      	movs	r3, #0
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	2302      	movs	r3, #2
 8006c26:	2201      	movs	r2, #1
 8006c28:	2100      	movs	r1, #0
 8006c2a:	f7fe fd97 	bl	800575c <gpio_config>
	gpio_config(PORTB, 3, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8006c2e:	4818      	ldr	r0, [pc, #96]	; (8006c90 <GPIO_Init+0x17c>)
 8006c30:	2300      	movs	r3, #0
 8006c32:	9301      	str	r3, [sp, #4]
 8006c34:	2300      	movs	r3, #0
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	2302      	movs	r3, #2
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	2103      	movs	r1, #3
 8006c3e:	f7fe fd8d 	bl	800575c <gpio_config>
	gpio_config(PORTB, 4, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8006c42:	4813      	ldr	r0, [pc, #76]	; (8006c90 <GPIO_Init+0x17c>)
 8006c44:	2300      	movs	r3, #0
 8006c46:	9301      	str	r3, [sp, #4]
 8006c48:	2300      	movs	r3, #0
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	2201      	movs	r2, #1
 8006c50:	2104      	movs	r1, #4
 8006c52:	f7fe fd83 	bl	800575c <gpio_config>
	gpio_config(PORTB, 5, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8006c56:	480e      	ldr	r0, [pc, #56]	; (8006c90 <GPIO_Init+0x17c>)
 8006c58:	2300      	movs	r3, #0
 8006c5a:	9301      	str	r3, [sp, #4]
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	2302      	movs	r3, #2
 8006c62:	2201      	movs	r2, #1
 8006c64:	2105      	movs	r1, #5
 8006c66:	f7fe fd79 	bl	800575c <gpio_config>
	gpio_config(PORTB, 10, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8006c6a:	4809      	ldr	r0, [pc, #36]	; (8006c90 <GPIO_Init+0x17c>)
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	9301      	str	r3, [sp, #4]
 8006c70:	2300      	movs	r3, #0
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	2302      	movs	r3, #2
 8006c76:	2201      	movs	r2, #1
 8006c78:	210a      	movs	r1, #10
 8006c7a:	f7fe fd6f 	bl	800575c <gpio_config>
//	gpio_config(PORTB, 10, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTB, 13, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTB, 14, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTB, 15, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTB, 1, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
}
 8006c7e:	46c0      	nop			; (mov r8, r8)
 8006c80:	46bd      	mov	sp, r7
 8006c82:	b008      	add	sp, #32
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	46c0      	nop			; (mov r8, r8)
 8006c88:	40021000 	.word	0x40021000
 8006c8c:	48000800 	.word	0x48000800
 8006c90:	48000400 	.word	0x48000400

08006c94 <LCD_Begin>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Begin(void) {
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
	m_width = TFTWIDTH;
 8006c9a:	4b4c      	ldr	r3, [pc, #304]	; (8006dcc <LCD_Begin+0x138>)
 8006c9c:	22f0      	movs	r2, #240	; 0xf0
 8006c9e:	801a      	strh	r2, [r3, #0]
	m_height = TFTHEIGHT;
 8006ca0:	4b4b      	ldr	r3, [pc, #300]	; (8006dd0 <LCD_Begin+0x13c>)
 8006ca2:	22a0      	movs	r2, #160	; 0xa0
 8006ca4:	0052      	lsls	r2, r2, #1
 8006ca6:	801a      	strh	r2, [r3, #0]
	m_rotation = 0;
 8006ca8:	4b4a      	ldr	r3, [pc, #296]	; (8006dd4 <LCD_Begin+0x140>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	701a      	strb	r2, [r3, #0]
	m_cursor_y = m_cursor_x = 0;
 8006cae:	4b4a      	ldr	r3, [pc, #296]	; (8006dd8 <LCD_Begin+0x144>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	801a      	strh	r2, [r3, #0]
 8006cb4:	4b48      	ldr	r3, [pc, #288]	; (8006dd8 <LCD_Begin+0x144>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	5e9a      	ldrsh	r2, [r3, r2]
 8006cba:	4b48      	ldr	r3, [pc, #288]	; (8006ddc <LCD_Begin+0x148>)
 8006cbc:	801a      	strh	r2, [r3, #0]
	m_textsize = 4;
 8006cbe:	4b48      	ldr	r3, [pc, #288]	; (8006de0 <LCD_Begin+0x14c>)
 8006cc0:	2204      	movs	r2, #4
 8006cc2:	701a      	strb	r2, [r3, #0]
	m_textcolor = m_textbgcolor = 0xFFFF;
 8006cc4:	4b47      	ldr	r3, [pc, #284]	; (8006de4 <LCD_Begin+0x150>)
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	4252      	negs	r2, r2
 8006cca:	801a      	strh	r2, [r3, #0]
 8006ccc:	4b45      	ldr	r3, [pc, #276]	; (8006de4 <LCD_Begin+0x150>)
 8006cce:	881a      	ldrh	r2, [r3, #0]
 8006cd0:	4b45      	ldr	r3, [pc, #276]	; (8006de8 <LCD_Begin+0x154>)
 8006cd2:	801a      	strh	r2, [r3, #0]
	m_wrap = 1;
 8006cd4:	4b45      	ldr	r3, [pc, #276]	; (8006dec <LCD_Begin+0x158>)
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	701a      	strb	r2, [r3, #0]

	uint8_t i = 0;
 8006cda:	1dfb      	adds	r3, r7, #7
 8006cdc:	2200      	movs	r2, #0
 8006cde:	701a      	strb	r2, [r3, #0]
	uint16_t a, d;

	GPIO_Init();
 8006ce0:	f7ff ff18 	bl	8006b14 <GPIO_Init>

	LCD_Reset();
 8006ce4:	f001 fc84 	bl	80085f0 <LCD_Reset>

	LCD_CS_LOW();
 8006ce8:	4b41      	ldr	r3, [pc, #260]	; (8006df0 <LCD_Begin+0x15c>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	2100      	movs	r1, #0
 8006cee:	0018      	movs	r0, r3
 8006cf0:	f7fe fe1e 	bl	8005930 <gpio_write>

	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 8006cf4:	e055      	b.n	8006da2 <LCD_Begin+0x10e>
		a = ST7781_regValues[i++];
 8006cf6:	1dfb      	adds	r3, r7, #7
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	1dfa      	adds	r2, r7, #7
 8006cfc:	1c59      	adds	r1, r3, #1
 8006cfe:	7011      	strb	r1, [r2, #0]
 8006d00:	0019      	movs	r1, r3
 8006d02:	1d3b      	adds	r3, r7, #4
 8006d04:	4a3b      	ldr	r2, [pc, #236]	; (8006df4 <LCD_Begin+0x160>)
 8006d06:	0049      	lsls	r1, r1, #1
 8006d08:	5a8a      	ldrh	r2, [r1, r2]
 8006d0a:	801a      	strh	r2, [r3, #0]
		d = ST7781_regValues[i++];
 8006d0c:	1dfb      	adds	r3, r7, #7
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	1dfa      	adds	r2, r7, #7
 8006d12:	1c59      	adds	r1, r3, #1
 8006d14:	7011      	strb	r1, [r2, #0]
 8006d16:	0019      	movs	r1, r3
 8006d18:	1cbb      	adds	r3, r7, #2
 8006d1a:	4a36      	ldr	r2, [pc, #216]	; (8006df4 <LCD_Begin+0x160>)
 8006d1c:	0049      	lsls	r1, r1, #1
 8006d1e:	5a8a      	ldrh	r2, [r1, r2]
 8006d20:	801a      	strh	r2, [r3, #0]
		if (a == TFTLCD_DELAY) {
 8006d22:	1d3b      	adds	r3, r7, #4
 8006d24:	881b      	ldrh	r3, [r3, #0]
 8006d26:	2bff      	cmp	r3, #255	; 0xff
 8006d28:	d105      	bne.n	8006d36 <LCD_Begin+0xa2>
			delay(d);
 8006d2a:	1cbb      	adds	r3, r7, #2
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	0018      	movs	r0, r3
 8006d30:	f7ff fedf 	bl	8006af2 <delay>
 8006d34:	e035      	b.n	8006da2 <LCD_Begin+0x10e>
		} else {
			LCD_WriteRegister16(a, d);
 8006d36:	1d3b      	adds	r3, r7, #4
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	0a1b      	lsrs	r3, r3, #8
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	1c7b      	adds	r3, r7, #1
 8006d40:	701a      	strb	r2, [r3, #0]
 8006d42:	003b      	movs	r3, r7
 8006d44:	1d3a      	adds	r2, r7, #4
 8006d46:	8812      	ldrh	r2, [r2, #0]
 8006d48:	701a      	strb	r2, [r3, #0]
 8006d4a:	2390      	movs	r3, #144	; 0x90
 8006d4c:	05db      	lsls	r3, r3, #23
 8006d4e:	2200      	movs	r2, #0
 8006d50:	2104      	movs	r1, #4
 8006d52:	0018      	movs	r0, r3
 8006d54:	f7fe fdec 	bl	8005930 <gpio_write>
 8006d58:	1c7b      	adds	r3, r7, #1
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	0018      	movs	r0, r3
 8006d5e:	f001 feb9 	bl	8008ad4 <LCD_Write8>
 8006d62:	003b      	movs	r3, r7
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	0018      	movs	r0, r3
 8006d68:	f001 feb4 	bl	8008ad4 <LCD_Write8>
 8006d6c:	1cbb      	adds	r3, r7, #2
 8006d6e:	881b      	ldrh	r3, [r3, #0]
 8006d70:	0a1b      	lsrs	r3, r3, #8
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	1c7b      	adds	r3, r7, #1
 8006d76:	701a      	strb	r2, [r3, #0]
 8006d78:	003b      	movs	r3, r7
 8006d7a:	1cba      	adds	r2, r7, #2
 8006d7c:	8812      	ldrh	r2, [r2, #0]
 8006d7e:	701a      	strb	r2, [r3, #0]
 8006d80:	2390      	movs	r3, #144	; 0x90
 8006d82:	05db      	lsls	r3, r3, #23
 8006d84:	2201      	movs	r2, #1
 8006d86:	2104      	movs	r1, #4
 8006d88:	0018      	movs	r0, r3
 8006d8a:	f7fe fdd1 	bl	8005930 <gpio_write>
 8006d8e:	1c7b      	adds	r3, r7, #1
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	0018      	movs	r0, r3
 8006d94:	f001 fe9e 	bl	8008ad4 <LCD_Write8>
 8006d98:	003b      	movs	r3, r7
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	0018      	movs	r0, r3
 8006d9e:	f001 fe99 	bl	8008ad4 <LCD_Write8>
	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 8006da2:	1dfb      	adds	r3, r7, #7
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	2b83      	cmp	r3, #131	; 0x83
 8006da8:	d9a5      	bls.n	8006cf6 <LCD_Begin+0x62>
		}
	}

	LCD_SetRotation(m_rotation);
 8006daa:	4b0a      	ldr	r3, [pc, #40]	; (8006dd4 <LCD_Begin+0x140>)
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	0018      	movs	r0, r3
 8006db0:	f001 fcca 	bl	8008748 <LCD_SetRotation>
	LCD_SetAddrWindow(0, 0, TFTWIDTH - 1, TFTHEIGHT - 1);
 8006db4:	2340      	movs	r3, #64	; 0x40
 8006db6:	33ff      	adds	r3, #255	; 0xff
 8006db8:	22ef      	movs	r2, #239	; 0xef
 8006dba:	2100      	movs	r1, #0
 8006dbc:	2000      	movs	r0, #0
 8006dbe:	f001 fcf7 	bl	80087b0 <LCD_SetAddrWindow>
}
 8006dc2:	46c0      	nop			; (mov r8, r8)
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	b002      	add	sp, #8
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	46c0      	nop			; (mov r8, r8)
 8006dcc:	200008e8 	.word	0x200008e8
 8006dd0:	200008ea 	.word	0x200008ea
 8006dd4:	200008f5 	.word	0x200008f5
 8006dd8:	200008ec 	.word	0x200008ec
 8006ddc:	200008ee 	.word	0x200008ee
 8006de0:	200008f4 	.word	0x200008f4
 8006de4:	200008f2 	.word	0x200008f2
 8006de8:	200008f0 	.word	0x200008f0
 8006dec:	200008f6 	.word	0x200008f6
 8006df0:	48000400 	.word	0x48000400
 8006df4:	0800f554 	.word	0x0800f554

08006df8 <LCD_DrawPixel>:
 * \param y		y-Coordinate
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 8006df8:	b5b0      	push	{r4, r5, r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	0004      	movs	r4, r0
 8006e00:	0008      	movs	r0, r1
 8006e02:	0011      	movs	r1, r2
 8006e04:	1dbb      	adds	r3, r7, #6
 8006e06:	1c22      	adds	r2, r4, #0
 8006e08:	801a      	strh	r2, [r3, #0]
 8006e0a:	1d3b      	adds	r3, r7, #4
 8006e0c:	1c02      	adds	r2, r0, #0
 8006e0e:	801a      	strh	r2, [r3, #0]
 8006e10:	1cbb      	adds	r3, r7, #2
 8006e12:	1c0a      	adds	r2, r1, #0
 8006e14:	801a      	strh	r2, [r3, #0]
	// Clip
	if ((x < 0) || (y < 0) || (x >= TFTWIDTH) || (y >= TFTHEIGHT))
 8006e16:	1dbb      	adds	r3, r7, #6
 8006e18:	2200      	movs	r2, #0
 8006e1a:	5e9b      	ldrsh	r3, [r3, r2]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	da00      	bge.n	8006e22 <LCD_DrawPixel+0x2a>
 8006e20:	e0fb      	b.n	800701a <LCD_DrawPixel+0x222>
 8006e22:	1d3b      	adds	r3, r7, #4
 8006e24:	2200      	movs	r2, #0
 8006e26:	5e9b      	ldrsh	r3, [r3, r2]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	da00      	bge.n	8006e2e <LCD_DrawPixel+0x36>
 8006e2c:	e0f5      	b.n	800701a <LCD_DrawPixel+0x222>
 8006e2e:	1dbb      	adds	r3, r7, #6
 8006e30:	2200      	movs	r2, #0
 8006e32:	5e9b      	ldrsh	r3, [r3, r2]
 8006e34:	2bef      	cmp	r3, #239	; 0xef
 8006e36:	dd00      	ble.n	8006e3a <LCD_DrawPixel+0x42>
 8006e38:	e0ef      	b.n	800701a <LCD_DrawPixel+0x222>
 8006e3a:	1d3b      	adds	r3, r7, #4
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	5e9a      	ldrsh	r2, [r3, r2]
 8006e40:	23a0      	movs	r3, #160	; 0xa0
 8006e42:	005b      	lsls	r3, r3, #1
 8006e44:	429a      	cmp	r2, r3
 8006e46:	db00      	blt.n	8006e4a <LCD_DrawPixel+0x52>
 8006e48:	e0e7      	b.n	800701a <LCD_DrawPixel+0x222>
		return;

	LCD_CS_LOW();
 8006e4a:	4b76      	ldr	r3, [pc, #472]	; (8007024 <LCD_DrawPixel+0x22c>)
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	2100      	movs	r1, #0
 8006e50:	0018      	movs	r0, r3
 8006e52:	f7fe fd6d 	bl	8005930 <gpio_write>

	int16_t t;
	switch (m_rotation) {
 8006e56:	4b74      	ldr	r3, [pc, #464]	; (8007028 <LCD_DrawPixel+0x230>)
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	d026      	beq.n	8006eac <LCD_DrawPixel+0xb4>
 8006e5e:	dc37      	bgt.n	8006ed0 <LCD_DrawPixel+0xd8>
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d002      	beq.n	8006e6a <LCD_DrawPixel+0x72>
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d011      	beq.n	8006e8c <LCD_DrawPixel+0x94>
 8006e68:	e032      	b.n	8006ed0 <LCD_DrawPixel+0xd8>
	case 1:
		t = x;
 8006e6a:	210e      	movs	r1, #14
 8006e6c:	187b      	adds	r3, r7, r1
 8006e6e:	1dba      	adds	r2, r7, #6
 8006e70:	8812      	ldrh	r2, [r2, #0]
 8006e72:	801a      	strh	r2, [r3, #0]
		x = TFTWIDTH - 1 - y;
 8006e74:	1d3b      	adds	r3, r7, #4
 8006e76:	881b      	ldrh	r3, [r3, #0]
 8006e78:	22ef      	movs	r2, #239	; 0xef
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	1dbb      	adds	r3, r7, #6
 8006e80:	801a      	strh	r2, [r3, #0]
		y = t;
 8006e82:	1d3b      	adds	r3, r7, #4
 8006e84:	187a      	adds	r2, r7, r1
 8006e86:	8812      	ldrh	r2, [r2, #0]
 8006e88:	801a      	strh	r2, [r3, #0]
		break;
 8006e8a:	e021      	b.n	8006ed0 <LCD_DrawPixel+0xd8>
	case 2:
		x = TFTWIDTH - 1 - x;
 8006e8c:	1dbb      	adds	r3, r7, #6
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	22ef      	movs	r2, #239	; 0xef
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	1dbb      	adds	r3, r7, #6
 8006e98:	801a      	strh	r2, [r3, #0]
		y = TFTHEIGHT - 1 - y;
 8006e9a:	1d3b      	adds	r3, r7, #4
 8006e9c:	881b      	ldrh	r3, [r3, #0]
 8006e9e:	2240      	movs	r2, #64	; 0x40
 8006ea0:	32ff      	adds	r2, #255	; 0xff
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	1d3b      	adds	r3, r7, #4
 8006ea8:	801a      	strh	r2, [r3, #0]
		break;
 8006eaa:	e011      	b.n	8006ed0 <LCD_DrawPixel+0xd8>
	case 3:
		t = x;
 8006eac:	210e      	movs	r1, #14
 8006eae:	187b      	adds	r3, r7, r1
 8006eb0:	1dba      	adds	r2, r7, #6
 8006eb2:	8812      	ldrh	r2, [r2, #0]
 8006eb4:	801a      	strh	r2, [r3, #0]
		x = y;
 8006eb6:	1dbb      	adds	r3, r7, #6
 8006eb8:	1d3a      	adds	r2, r7, #4
 8006eba:	8812      	ldrh	r2, [r2, #0]
 8006ebc:	801a      	strh	r2, [r3, #0]
		y = TFTHEIGHT - 1 - t;
 8006ebe:	187b      	adds	r3, r7, r1
 8006ec0:	881b      	ldrh	r3, [r3, #0]
 8006ec2:	2240      	movs	r2, #64	; 0x40
 8006ec4:	32ff      	adds	r2, #255	; 0xff
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	1d3b      	adds	r3, r7, #4
 8006ecc:	801a      	strh	r2, [r3, #0]
		break;
 8006ece:	46c0      	nop			; (mov r8, r8)
	}

	LCD_WriteRegister16(0x0020, x);
 8006ed0:	240d      	movs	r4, #13
 8006ed2:	193b      	adds	r3, r7, r4
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	701a      	strb	r2, [r3, #0]
 8006ed8:	250c      	movs	r5, #12
 8006eda:	197b      	adds	r3, r7, r5
 8006edc:	2220      	movs	r2, #32
 8006ede:	701a      	strb	r2, [r3, #0]
 8006ee0:	2390      	movs	r3, #144	; 0x90
 8006ee2:	05db      	lsls	r3, r3, #23
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	2104      	movs	r1, #4
 8006ee8:	0018      	movs	r0, r3
 8006eea:	f7fe fd21 	bl	8005930 <gpio_write>
 8006eee:	193b      	adds	r3, r7, r4
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	0018      	movs	r0, r3
 8006ef4:	f001 fdee 	bl	8008ad4 <LCD_Write8>
 8006ef8:	197b      	adds	r3, r7, r5
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	0018      	movs	r0, r3
 8006efe:	f001 fde9 	bl	8008ad4 <LCD_Write8>
 8006f02:	1dbb      	adds	r3, r7, #6
 8006f04:	2200      	movs	r2, #0
 8006f06:	5e9b      	ldrsh	r3, [r3, r2]
 8006f08:	121b      	asrs	r3, r3, #8
 8006f0a:	b21a      	sxth	r2, r3
 8006f0c:	193b      	adds	r3, r7, r4
 8006f0e:	701a      	strb	r2, [r3, #0]
 8006f10:	197b      	adds	r3, r7, r5
 8006f12:	1dba      	adds	r2, r7, #6
 8006f14:	8812      	ldrh	r2, [r2, #0]
 8006f16:	701a      	strb	r2, [r3, #0]
 8006f18:	2390      	movs	r3, #144	; 0x90
 8006f1a:	05db      	lsls	r3, r3, #23
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	2104      	movs	r1, #4
 8006f20:	0018      	movs	r0, r3
 8006f22:	f7fe fd05 	bl	8005930 <gpio_write>
 8006f26:	193b      	adds	r3, r7, r4
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	0018      	movs	r0, r3
 8006f2c:	f001 fdd2 	bl	8008ad4 <LCD_Write8>
 8006f30:	197b      	adds	r3, r7, r5
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	0018      	movs	r0, r3
 8006f36:	f001 fdcd 	bl	8008ad4 <LCD_Write8>
	LCD_WriteRegister16(0x0021, y);
 8006f3a:	240b      	movs	r4, #11
 8006f3c:	193b      	adds	r3, r7, r4
 8006f3e:	2200      	movs	r2, #0
 8006f40:	701a      	strb	r2, [r3, #0]
 8006f42:	250a      	movs	r5, #10
 8006f44:	197b      	adds	r3, r7, r5
 8006f46:	2221      	movs	r2, #33	; 0x21
 8006f48:	701a      	strb	r2, [r3, #0]
 8006f4a:	2390      	movs	r3, #144	; 0x90
 8006f4c:	05db      	lsls	r3, r3, #23
 8006f4e:	2200      	movs	r2, #0
 8006f50:	2104      	movs	r1, #4
 8006f52:	0018      	movs	r0, r3
 8006f54:	f7fe fcec 	bl	8005930 <gpio_write>
 8006f58:	193b      	adds	r3, r7, r4
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	0018      	movs	r0, r3
 8006f5e:	f001 fdb9 	bl	8008ad4 <LCD_Write8>
 8006f62:	197b      	adds	r3, r7, r5
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	0018      	movs	r0, r3
 8006f68:	f001 fdb4 	bl	8008ad4 <LCD_Write8>
 8006f6c:	1d3b      	adds	r3, r7, #4
 8006f6e:	2200      	movs	r2, #0
 8006f70:	5e9b      	ldrsh	r3, [r3, r2]
 8006f72:	121b      	asrs	r3, r3, #8
 8006f74:	b21a      	sxth	r2, r3
 8006f76:	193b      	adds	r3, r7, r4
 8006f78:	701a      	strb	r2, [r3, #0]
 8006f7a:	197b      	adds	r3, r7, r5
 8006f7c:	1d3a      	adds	r2, r7, #4
 8006f7e:	8812      	ldrh	r2, [r2, #0]
 8006f80:	701a      	strb	r2, [r3, #0]
 8006f82:	2390      	movs	r3, #144	; 0x90
 8006f84:	05db      	lsls	r3, r3, #23
 8006f86:	2201      	movs	r2, #1
 8006f88:	2104      	movs	r1, #4
 8006f8a:	0018      	movs	r0, r3
 8006f8c:	f7fe fcd0 	bl	8005930 <gpio_write>
 8006f90:	193b      	adds	r3, r7, r4
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	0018      	movs	r0, r3
 8006f96:	f001 fd9d 	bl	8008ad4 <LCD_Write8>
 8006f9a:	197b      	adds	r3, r7, r5
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	0018      	movs	r0, r3
 8006fa0:	f001 fd98 	bl	8008ad4 <LCD_Write8>
	LCD_WriteRegister16(0x0022, color);
 8006fa4:	2409      	movs	r4, #9
 8006fa6:	193b      	adds	r3, r7, r4
 8006fa8:	2200      	movs	r2, #0
 8006faa:	701a      	strb	r2, [r3, #0]
 8006fac:	2508      	movs	r5, #8
 8006fae:	197b      	adds	r3, r7, r5
 8006fb0:	2222      	movs	r2, #34	; 0x22
 8006fb2:	701a      	strb	r2, [r3, #0]
 8006fb4:	2390      	movs	r3, #144	; 0x90
 8006fb6:	05db      	lsls	r3, r3, #23
 8006fb8:	2200      	movs	r2, #0
 8006fba:	2104      	movs	r1, #4
 8006fbc:	0018      	movs	r0, r3
 8006fbe:	f7fe fcb7 	bl	8005930 <gpio_write>
 8006fc2:	193b      	adds	r3, r7, r4
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	0018      	movs	r0, r3
 8006fc8:	f001 fd84 	bl	8008ad4 <LCD_Write8>
 8006fcc:	197b      	adds	r3, r7, r5
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	0018      	movs	r0, r3
 8006fd2:	f001 fd7f 	bl	8008ad4 <LCD_Write8>
 8006fd6:	1cbb      	adds	r3, r7, #2
 8006fd8:	881b      	ldrh	r3, [r3, #0]
 8006fda:	0a1b      	lsrs	r3, r3, #8
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	193b      	adds	r3, r7, r4
 8006fe0:	701a      	strb	r2, [r3, #0]
 8006fe2:	197b      	adds	r3, r7, r5
 8006fe4:	1cba      	adds	r2, r7, #2
 8006fe6:	8812      	ldrh	r2, [r2, #0]
 8006fe8:	701a      	strb	r2, [r3, #0]
 8006fea:	2390      	movs	r3, #144	; 0x90
 8006fec:	05db      	lsls	r3, r3, #23
 8006fee:	2201      	movs	r2, #1
 8006ff0:	2104      	movs	r1, #4
 8006ff2:	0018      	movs	r0, r3
 8006ff4:	f7fe fc9c 	bl	8005930 <gpio_write>
 8006ff8:	193b      	adds	r3, r7, r4
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	0018      	movs	r0, r3
 8006ffe:	f001 fd69 	bl	8008ad4 <LCD_Write8>
 8007002:	197b      	adds	r3, r7, r5
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	0018      	movs	r0, r3
 8007008:	f001 fd64 	bl	8008ad4 <LCD_Write8>

	LCD_CS_HIGH();
 800700c:	4b05      	ldr	r3, [pc, #20]	; (8007024 <LCD_DrawPixel+0x22c>)
 800700e:	2201      	movs	r2, #1
 8007010:	2100      	movs	r1, #0
 8007012:	0018      	movs	r0, r3
 8007014:	f7fe fc8c 	bl	8005930 <gpio_write>
 8007018:	e000      	b.n	800701c <LCD_DrawPixel+0x224>
		return;
 800701a:	46c0      	nop			; (mov r8, r8)
}
 800701c:	46bd      	mov	sp, r7
 800701e:	b004      	add	sp, #16
 8007020:	bdb0      	pop	{r4, r5, r7, pc}
 8007022:	46c0      	nop			; (mov r8, r8)
 8007024:	48000400 	.word	0x48000400
 8007028:	200008f5 	.word	0x200008f5

0800702c <LCD_DrawLine>:
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2,
		uint16_t color) {
 800702c:	b5b0      	push	{r4, r5, r7, lr}
 800702e:	b088      	sub	sp, #32
 8007030:	af00      	add	r7, sp, #0
 8007032:	0005      	movs	r5, r0
 8007034:	000c      	movs	r4, r1
 8007036:	0010      	movs	r0, r2
 8007038:	0019      	movs	r1, r3
 800703a:	1dbb      	adds	r3, r7, #6
 800703c:	1c2a      	adds	r2, r5, #0
 800703e:	801a      	strh	r2, [r3, #0]
 8007040:	1d3b      	adds	r3, r7, #4
 8007042:	1c22      	adds	r2, r4, #0
 8007044:	801a      	strh	r2, [r3, #0]
 8007046:	1cbb      	adds	r3, r7, #2
 8007048:	1c02      	adds	r2, r0, #0
 800704a:	801a      	strh	r2, [r3, #0]
 800704c:	003b      	movs	r3, r7
 800704e:	1c0a      	adds	r2, r1, #0
 8007050:	801a      	strh	r2, [r3, #0]
	// Bresenham's algorithm - thx wikpedia

	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8007052:	003b      	movs	r3, r7
 8007054:	2200      	movs	r2, #0
 8007056:	5e9a      	ldrsh	r2, [r3, r2]
 8007058:	1d3b      	adds	r3, r7, #4
 800705a:	2100      	movs	r1, #0
 800705c:	5e5b      	ldrsh	r3, [r3, r1]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	17d9      	asrs	r1, r3, #31
 8007062:	185a      	adds	r2, r3, r1
 8007064:	404a      	eors	r2, r1
 8007066:	1cbb      	adds	r3, r7, #2
 8007068:	2100      	movs	r1, #0
 800706a:	5e59      	ldrsh	r1, [r3, r1]
 800706c:	1dbb      	adds	r3, r7, #6
 800706e:	2000      	movs	r0, #0
 8007070:	5e1b      	ldrsh	r3, [r3, r0]
 8007072:	1acb      	subs	r3, r1, r3
 8007074:	17d9      	asrs	r1, r3, #31
 8007076:	185b      	adds	r3, r3, r1
 8007078:	404b      	eors	r3, r1
 800707a:	2101      	movs	r1, #1
 800707c:	429a      	cmp	r2, r3
 800707e:	dc01      	bgt.n	8007084 <LCD_DrawLine+0x58>
 8007080:	2300      	movs	r3, #0
 8007082:	1c19      	adds	r1, r3, #0
 8007084:	b2ca      	uxtb	r2, r1
 8007086:	211a      	movs	r1, #26
 8007088:	187b      	adds	r3, r7, r1
 800708a:	801a      	strh	r2, [r3, #0]
	if (steep) {
 800708c:	187b      	adds	r3, r7, r1
 800708e:	2200      	movs	r2, #0
 8007090:	5e9b      	ldrsh	r3, [r3, r2]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d019      	beq.n	80070ca <LCD_DrawLine+0x9e>
		swap(x1, y1);
 8007096:	2118      	movs	r1, #24
 8007098:	187b      	adds	r3, r7, r1
 800709a:	1dba      	adds	r2, r7, #6
 800709c:	8812      	ldrh	r2, [r2, #0]
 800709e:	801a      	strh	r2, [r3, #0]
 80070a0:	1dbb      	adds	r3, r7, #6
 80070a2:	1d3a      	adds	r2, r7, #4
 80070a4:	8812      	ldrh	r2, [r2, #0]
 80070a6:	801a      	strh	r2, [r3, #0]
 80070a8:	1d3b      	adds	r3, r7, #4
 80070aa:	187a      	adds	r2, r7, r1
 80070ac:	8812      	ldrh	r2, [r2, #0]
 80070ae:	801a      	strh	r2, [r3, #0]
		swap(x2, y2);
 80070b0:	2116      	movs	r1, #22
 80070b2:	187b      	adds	r3, r7, r1
 80070b4:	1cba      	adds	r2, r7, #2
 80070b6:	8812      	ldrh	r2, [r2, #0]
 80070b8:	801a      	strh	r2, [r3, #0]
 80070ba:	1cbb      	adds	r3, r7, #2
 80070bc:	003a      	movs	r2, r7
 80070be:	8812      	ldrh	r2, [r2, #0]
 80070c0:	801a      	strh	r2, [r3, #0]
 80070c2:	003b      	movs	r3, r7
 80070c4:	187a      	adds	r2, r7, r1
 80070c6:	8812      	ldrh	r2, [r2, #0]
 80070c8:	801a      	strh	r2, [r3, #0]
	}

	if (x1 > x2) {
 80070ca:	1dba      	adds	r2, r7, #6
 80070cc:	1cbb      	adds	r3, r7, #2
 80070ce:	2100      	movs	r1, #0
 80070d0:	5e52      	ldrsh	r2, [r2, r1]
 80070d2:	2100      	movs	r1, #0
 80070d4:	5e5b      	ldrsh	r3, [r3, r1]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	dd19      	ble.n	800710e <LCD_DrawLine+0xe2>
		swap(x1, x2);
 80070da:	2114      	movs	r1, #20
 80070dc:	187b      	adds	r3, r7, r1
 80070de:	1dba      	adds	r2, r7, #6
 80070e0:	8812      	ldrh	r2, [r2, #0]
 80070e2:	801a      	strh	r2, [r3, #0]
 80070e4:	1dbb      	adds	r3, r7, #6
 80070e6:	1cba      	adds	r2, r7, #2
 80070e8:	8812      	ldrh	r2, [r2, #0]
 80070ea:	801a      	strh	r2, [r3, #0]
 80070ec:	1cbb      	adds	r3, r7, #2
 80070ee:	187a      	adds	r2, r7, r1
 80070f0:	8812      	ldrh	r2, [r2, #0]
 80070f2:	801a      	strh	r2, [r3, #0]
		swap(y1, y2);
 80070f4:	2112      	movs	r1, #18
 80070f6:	187b      	adds	r3, r7, r1
 80070f8:	1d3a      	adds	r2, r7, #4
 80070fa:	8812      	ldrh	r2, [r2, #0]
 80070fc:	801a      	strh	r2, [r3, #0]
 80070fe:	1d3b      	adds	r3, r7, #4
 8007100:	003a      	movs	r2, r7
 8007102:	8812      	ldrh	r2, [r2, #0]
 8007104:	801a      	strh	r2, [r3, #0]
 8007106:	003b      	movs	r3, r7
 8007108:	187a      	adds	r2, r7, r1
 800710a:	8812      	ldrh	r2, [r2, #0]
 800710c:	801a      	strh	r2, [r3, #0]
	}

	int16_t dx, dy;
	dx = x2 - x1;
 800710e:	1cbb      	adds	r3, r7, #2
 8007110:	881a      	ldrh	r2, [r3, #0]
 8007112:	1dbb      	adds	r3, r7, #6
 8007114:	881b      	ldrh	r3, [r3, #0]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	b29a      	uxth	r2, r3
 800711a:	2110      	movs	r1, #16
 800711c:	187b      	adds	r3, r7, r1
 800711e:	801a      	strh	r2, [r3, #0]
	dy = abs(y2 - y1);
 8007120:	003b      	movs	r3, r7
 8007122:	2200      	movs	r2, #0
 8007124:	5e9a      	ldrsh	r2, [r3, r2]
 8007126:	1d3b      	adds	r3, r7, #4
 8007128:	2000      	movs	r0, #0
 800712a:	5e1b      	ldrsh	r3, [r3, r0]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	17d8      	asrs	r0, r3, #31
 8007130:	181a      	adds	r2, r3, r0
 8007132:	4042      	eors	r2, r0
 8007134:	230e      	movs	r3, #14
 8007136:	18fb      	adds	r3, r7, r3
 8007138:	801a      	strh	r2, [r3, #0]

	int16_t err = dx / 2;
 800713a:	231e      	movs	r3, #30
 800713c:	18fa      	adds	r2, r7, r3
 800713e:	187b      	adds	r3, r7, r1
 8007140:	2100      	movs	r1, #0
 8007142:	5e5b      	ldrsh	r3, [r3, r1]
 8007144:	2b00      	cmp	r3, #0
 8007146:	da00      	bge.n	800714a <LCD_DrawLine+0x11e>
 8007148:	3301      	adds	r3, #1
 800714a:	105b      	asrs	r3, r3, #1
 800714c:	8013      	strh	r3, [r2, #0]
	int16_t ystep;

	if (y1 < y2) {
 800714e:	1d3a      	adds	r2, r7, #4
 8007150:	003b      	movs	r3, r7
 8007152:	2100      	movs	r1, #0
 8007154:	5e52      	ldrsh	r2, [r2, r1]
 8007156:	2100      	movs	r1, #0
 8007158:	5e5b      	ldrsh	r3, [r3, r1]
 800715a:	429a      	cmp	r2, r3
 800715c:	da04      	bge.n	8007168 <LCD_DrawLine+0x13c>
		ystep = 1;
 800715e:	231c      	movs	r3, #28
 8007160:	18fb      	adds	r3, r7, r3
 8007162:	2201      	movs	r2, #1
 8007164:	801a      	strh	r2, [r3, #0]
 8007166:	e04d      	b.n	8007204 <LCD_DrawLine+0x1d8>
	} else {
		ystep = -1;
 8007168:	231c      	movs	r3, #28
 800716a:	18fb      	adds	r3, r7, r3
 800716c:	2201      	movs	r2, #1
 800716e:	4252      	negs	r2, r2
 8007170:	801a      	strh	r2, [r3, #0]
	}

	for (; x1 <= x2; x1++) {
 8007172:	e047      	b.n	8007204 <LCD_DrawLine+0x1d8>
		if (steep) {
 8007174:	231a      	movs	r3, #26
 8007176:	18fb      	adds	r3, r7, r3
 8007178:	2200      	movs	r2, #0
 800717a:	5e9b      	ldrsh	r3, [r3, r2]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00c      	beq.n	800719a <LCD_DrawLine+0x16e>
			LCD_DrawPixel(y1, x1, color);
 8007180:	2330      	movs	r3, #48	; 0x30
 8007182:	18fb      	adds	r3, r7, r3
 8007184:	881a      	ldrh	r2, [r3, #0]
 8007186:	1dbb      	adds	r3, r7, #6
 8007188:	2100      	movs	r1, #0
 800718a:	5e59      	ldrsh	r1, [r3, r1]
 800718c:	1d3b      	adds	r3, r7, #4
 800718e:	2000      	movs	r0, #0
 8007190:	5e1b      	ldrsh	r3, [r3, r0]
 8007192:	0018      	movs	r0, r3
 8007194:	f7ff fe30 	bl	8006df8 <LCD_DrawPixel>
 8007198:	e00b      	b.n	80071b2 <LCD_DrawLine+0x186>
		} else {
			LCD_DrawPixel(x1, y1, color);
 800719a:	2330      	movs	r3, #48	; 0x30
 800719c:	18fb      	adds	r3, r7, r3
 800719e:	881a      	ldrh	r2, [r3, #0]
 80071a0:	1d3b      	adds	r3, r7, #4
 80071a2:	2100      	movs	r1, #0
 80071a4:	5e59      	ldrsh	r1, [r3, r1]
 80071a6:	1dbb      	adds	r3, r7, #6
 80071a8:	2000      	movs	r0, #0
 80071aa:	5e1b      	ldrsh	r3, [r3, r0]
 80071ac:	0018      	movs	r0, r3
 80071ae:	f7ff fe23 	bl	8006df8 <LCD_DrawPixel>
		}
		err -= dy;
 80071b2:	211e      	movs	r1, #30
 80071b4:	187b      	adds	r3, r7, r1
 80071b6:	881a      	ldrh	r2, [r3, #0]
 80071b8:	230e      	movs	r3, #14
 80071ba:	18fb      	adds	r3, r7, r3
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	187b      	adds	r3, r7, r1
 80071c4:	801a      	strh	r2, [r3, #0]
		if (err < 0) {
 80071c6:	187b      	adds	r3, r7, r1
 80071c8:	2200      	movs	r2, #0
 80071ca:	5e9b      	ldrsh	r3, [r3, r2]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	da11      	bge.n	80071f4 <LCD_DrawLine+0x1c8>
			y1 += ystep;
 80071d0:	1d3b      	adds	r3, r7, #4
 80071d2:	881a      	ldrh	r2, [r3, #0]
 80071d4:	231c      	movs	r3, #28
 80071d6:	18fb      	adds	r3, r7, r3
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	18d3      	adds	r3, r2, r3
 80071dc:	b29a      	uxth	r2, r3
 80071de:	1d3b      	adds	r3, r7, #4
 80071e0:	801a      	strh	r2, [r3, #0]
			err += dx;
 80071e2:	187b      	adds	r3, r7, r1
 80071e4:	881a      	ldrh	r2, [r3, #0]
 80071e6:	2310      	movs	r3, #16
 80071e8:	18fb      	adds	r3, r7, r3
 80071ea:	881b      	ldrh	r3, [r3, #0]
 80071ec:	18d3      	adds	r3, r2, r3
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	187b      	adds	r3, r7, r1
 80071f2:	801a      	strh	r2, [r3, #0]
	for (; x1 <= x2; x1++) {
 80071f4:	1dbb      	adds	r3, r7, #6
 80071f6:	2200      	movs	r2, #0
 80071f8:	5e9b      	ldrsh	r3, [r3, r2]
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	3301      	adds	r3, #1
 80071fe:	b29a      	uxth	r2, r3
 8007200:	1dbb      	adds	r3, r7, #6
 8007202:	801a      	strh	r2, [r3, #0]
 8007204:	1dba      	adds	r2, r7, #6
 8007206:	1cbb      	adds	r3, r7, #2
 8007208:	2100      	movs	r1, #0
 800720a:	5e52      	ldrsh	r2, [r2, r1]
 800720c:	2100      	movs	r1, #0
 800720e:	5e5b      	ldrsh	r3, [r3, r1]
 8007210:	429a      	cmp	r2, r3
 8007212:	ddaf      	ble.n	8007174 <LCD_DrawLine+0x148>
		}
	}
}
 8007214:	46c0      	nop			; (mov r8, r8)
 8007216:	46c0      	nop			; (mov r8, r8)
 8007218:	46bd      	mov	sp, r7
 800721a:	b008      	add	sp, #32
 800721c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007220 <LCD_DrawFastHLine>:
 * \param length	Length of the line
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawFastHLine(int16_t x, int16_t y, int16_t length, uint16_t color) {
 8007220:	b5b0      	push	{r4, r5, r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	0005      	movs	r5, r0
 8007228:	000c      	movs	r4, r1
 800722a:	0010      	movs	r0, r2
 800722c:	0019      	movs	r1, r3
 800722e:	1dbb      	adds	r3, r7, #6
 8007230:	1c2a      	adds	r2, r5, #0
 8007232:	801a      	strh	r2, [r3, #0]
 8007234:	1d3b      	adds	r3, r7, #4
 8007236:	1c22      	adds	r2, r4, #0
 8007238:	801a      	strh	r2, [r3, #0]
 800723a:	1cbb      	adds	r3, r7, #2
 800723c:	1c02      	adds	r2, r0, #0
 800723e:	801a      	strh	r2, [r3, #0]
 8007240:	003b      	movs	r3, r7
 8007242:	1c0a      	adds	r2, r1, #0
 8007244:	801a      	strh	r2, [r3, #0]
	int16_t x2;

	// Initial off-screen clipping
	if ((length <= 0) || (y < 0) || (y >= m_height) || (x >= m_width) || ((x2 =
 8007246:	1cbb      	adds	r3, r7, #2
 8007248:	2200      	movs	r2, #0
 800724a:	5e9b      	ldrsh	r3, [r3, r2]
 800724c:	2b00      	cmp	r3, #0
 800724e:	dc00      	bgt.n	8007252 <LCD_DrawFastHLine+0x32>
 8007250:	e075      	b.n	800733e <LCD_DrawFastHLine+0x11e>
 8007252:	1d3b      	adds	r3, r7, #4
 8007254:	2200      	movs	r2, #0
 8007256:	5e9b      	ldrsh	r3, [r3, r2]
 8007258:	2b00      	cmp	r3, #0
 800725a:	da00      	bge.n	800725e <LCD_DrawFastHLine+0x3e>
 800725c:	e06f      	b.n	800733e <LCD_DrawFastHLine+0x11e>
 800725e:	4b3a      	ldr	r3, [pc, #232]	; (8007348 <LCD_DrawFastHLine+0x128>)
 8007260:	2200      	movs	r2, #0
 8007262:	5e9b      	ldrsh	r3, [r3, r2]
 8007264:	1d3a      	adds	r2, r7, #4
 8007266:	2100      	movs	r1, #0
 8007268:	5e52      	ldrsh	r2, [r2, r1]
 800726a:	429a      	cmp	r2, r3
 800726c:	da67      	bge.n	800733e <LCD_DrawFastHLine+0x11e>
 800726e:	4b37      	ldr	r3, [pc, #220]	; (800734c <LCD_DrawFastHLine+0x12c>)
 8007270:	2200      	movs	r2, #0
 8007272:	5e9b      	ldrsh	r3, [r3, r2]
 8007274:	1dba      	adds	r2, r7, #6
 8007276:	2100      	movs	r1, #0
 8007278:	5e52      	ldrsh	r2, [r2, r1]
 800727a:	429a      	cmp	r2, r3
 800727c:	da5f      	bge.n	800733e <LCD_DrawFastHLine+0x11e>
			(x + length - 1)) < 0))
 800727e:	1dbb      	adds	r3, r7, #6
 8007280:	881a      	ldrh	r2, [r3, #0]
 8007282:	1cbb      	adds	r3, r7, #2
 8007284:	881b      	ldrh	r3, [r3, #0]
 8007286:	18d3      	adds	r3, r2, r3
 8007288:	b29b      	uxth	r3, r3
 800728a:	3b01      	subs	r3, #1
 800728c:	b29a      	uxth	r2, r3
	if ((length <= 0) || (y < 0) || (y >= m_height) || (x >= m_width) || ((x2 =
 800728e:	210e      	movs	r1, #14
 8007290:	187b      	adds	r3, r7, r1
 8007292:	801a      	strh	r2, [r3, #0]
 8007294:	187b      	adds	r3, r7, r1
 8007296:	2200      	movs	r2, #0
 8007298:	5e9b      	ldrsh	r3, [r3, r2]
 800729a:	2b00      	cmp	r3, #0
 800729c:	db4f      	blt.n	800733e <LCD_DrawFastHLine+0x11e>
		return;

	if (x < 0) { // Clip left
 800729e:	1dbb      	adds	r3, r7, #6
 80072a0:	2200      	movs	r2, #0
 80072a2:	5e9b      	ldrsh	r3, [r3, r2]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	da0a      	bge.n	80072be <LCD_DrawFastHLine+0x9e>
		length += x;
 80072a8:	1cbb      	adds	r3, r7, #2
 80072aa:	881a      	ldrh	r2, [r3, #0]
 80072ac:	1dbb      	adds	r3, r7, #6
 80072ae:	881b      	ldrh	r3, [r3, #0]
 80072b0:	18d3      	adds	r3, r2, r3
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	1cbb      	adds	r3, r7, #2
 80072b6:	801a      	strh	r2, [r3, #0]
		x = 0;
 80072b8:	1dbb      	adds	r3, r7, #6
 80072ba:	2200      	movs	r2, #0
 80072bc:	801a      	strh	r2, [r3, #0]
	}

	if (x2 >= m_width) { // Clip right
 80072be:	4b23      	ldr	r3, [pc, #140]	; (800734c <LCD_DrawFastHLine+0x12c>)
 80072c0:	2200      	movs	r2, #0
 80072c2:	5e9b      	ldrsh	r3, [r3, r2]
 80072c4:	210e      	movs	r1, #14
 80072c6:	187a      	adds	r2, r7, r1
 80072c8:	2000      	movs	r0, #0
 80072ca:	5e12      	ldrsh	r2, [r2, r0]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	db11      	blt.n	80072f4 <LCD_DrawFastHLine+0xd4>
		x2 = m_width - 1;
 80072d0:	4b1e      	ldr	r3, [pc, #120]	; (800734c <LCD_DrawFastHLine+0x12c>)
 80072d2:	2200      	movs	r2, #0
 80072d4:	5e9b      	ldrsh	r3, [r3, r2]
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	3b01      	subs	r3, #1
 80072da:	b29a      	uxth	r2, r3
 80072dc:	187b      	adds	r3, r7, r1
 80072de:	801a      	strh	r2, [r3, #0]
		length = x2 - x + 1;
 80072e0:	187b      	adds	r3, r7, r1
 80072e2:	881a      	ldrh	r2, [r3, #0]
 80072e4:	1dbb      	adds	r3, r7, #6
 80072e6:	881b      	ldrh	r3, [r3, #0]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	3301      	adds	r3, #1
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	1cbb      	adds	r3, r7, #2
 80072f2:	801a      	strh	r2, [r3, #0]
	}

	LCD_SetAddrWindow(x, y, x2, y);
 80072f4:	1dbb      	adds	r3, r7, #6
 80072f6:	2000      	movs	r0, #0
 80072f8:	5e18      	ldrsh	r0, [r3, r0]
 80072fa:	1d3b      	adds	r3, r7, #4
 80072fc:	2100      	movs	r1, #0
 80072fe:	5e59      	ldrsh	r1, [r3, r1]
 8007300:	230e      	movs	r3, #14
 8007302:	18fb      	adds	r3, r7, r3
 8007304:	2200      	movs	r2, #0
 8007306:	5e9a      	ldrsh	r2, [r3, r2]
 8007308:	1d3b      	adds	r3, r7, #4
 800730a:	2400      	movs	r4, #0
 800730c:	5f1b      	ldrsh	r3, [r3, r4]
 800730e:	f001 fa4f 	bl	80087b0 <LCD_SetAddrWindow>
	LCD_Flood(color, length);
 8007312:	1cbb      	adds	r3, r7, #2
 8007314:	2200      	movs	r2, #0
 8007316:	5e9a      	ldrsh	r2, [r3, r2]
 8007318:	003b      	movs	r3, r7
 800731a:	881b      	ldrh	r3, [r3, #0]
 800731c:	0011      	movs	r1, r2
 800731e:	0018      	movs	r0, r3
 8007320:	f000 ff30 	bl	8008184 <LCD_Flood>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 8007324:	4b09      	ldr	r3, [pc, #36]	; (800734c <LCD_DrawFastHLine+0x12c>)
 8007326:	2200      	movs	r2, #0
 8007328:	5e9b      	ldrsh	r3, [r3, r2]
 800732a:	1e5a      	subs	r2, r3, #1
 800732c:	4b06      	ldr	r3, [pc, #24]	; (8007348 <LCD_DrawFastHLine+0x128>)
 800732e:	2100      	movs	r1, #0
 8007330:	5e5b      	ldrsh	r3, [r3, r1]
 8007332:	3b01      	subs	r3, #1
 8007334:	2100      	movs	r1, #0
 8007336:	2000      	movs	r0, #0
 8007338:	f001 fa3a 	bl	80087b0 <LCD_SetAddrWindow>
 800733c:	e000      	b.n	8007340 <LCD_DrawFastHLine+0x120>
		return;
 800733e:	46c0      	nop			; (mov r8, r8)

}
 8007340:	46bd      	mov	sp, r7
 8007342:	b004      	add	sp, #16
 8007344:	bdb0      	pop	{r4, r5, r7, pc}
 8007346:	46c0      	nop			; (mov r8, r8)
 8007348:	200008ea 	.word	0x200008ea
 800734c:	200008e8 	.word	0x200008e8

08007350 <LCD_DrawFastVLine>:
 * \param h		High of the line
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8007350:	b5b0      	push	{r4, r5, r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af02      	add	r7, sp, #8
 8007356:	0005      	movs	r5, r0
 8007358:	000c      	movs	r4, r1
 800735a:	0010      	movs	r0, r2
 800735c:	0019      	movs	r1, r3
 800735e:	1dbb      	adds	r3, r7, #6
 8007360:	1c2a      	adds	r2, r5, #0
 8007362:	801a      	strh	r2, [r3, #0]
 8007364:	1d3b      	adds	r3, r7, #4
 8007366:	1c22      	adds	r2, r4, #0
 8007368:	801a      	strh	r2, [r3, #0]
 800736a:	1cbb      	adds	r3, r7, #2
 800736c:	1c02      	adds	r2, r0, #0
 800736e:	801a      	strh	r2, [r3, #0]
 8007370:	003b      	movs	r3, r7
 8007372:	1c0a      	adds	r2, r1, #0
 8007374:	801a      	strh	r2, [r3, #0]
	// Update in subclasses if desired!
	LCD_DrawLine(x, y, x, y + h - 1, color);
 8007376:	1d3b      	adds	r3, r7, #4
 8007378:	881a      	ldrh	r2, [r3, #0]
 800737a:	1cbb      	adds	r3, r7, #2
 800737c:	881b      	ldrh	r3, [r3, #0]
 800737e:	18d3      	adds	r3, r2, r3
 8007380:	b29b      	uxth	r3, r3
 8007382:	3b01      	subs	r3, #1
 8007384:	b29b      	uxth	r3, r3
 8007386:	b21c      	sxth	r4, r3
 8007388:	1dbb      	adds	r3, r7, #6
 800738a:	2200      	movs	r2, #0
 800738c:	5e9a      	ldrsh	r2, [r3, r2]
 800738e:	1d3b      	adds	r3, r7, #4
 8007390:	2100      	movs	r1, #0
 8007392:	5e59      	ldrsh	r1, [r3, r1]
 8007394:	1dbb      	adds	r3, r7, #6
 8007396:	2000      	movs	r0, #0
 8007398:	5e18      	ldrsh	r0, [r3, r0]
 800739a:	003b      	movs	r3, r7
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	0023      	movs	r3, r4
 80073a2:	f7ff fe43 	bl	800702c <LCD_DrawLine>
}
 80073a6:	46c0      	nop			; (mov r8, r8)
 80073a8:	46bd      	mov	sp, r7
 80073aa:	b002      	add	sp, #8
 80073ac:	bdb0      	pop	{r4, r5, r7, pc}

080073ae <LCD_DrawRect>:
 * \param h			Height of the rectangle to draw
 * \param color		Color
 * 
 * \return void
 */
void LCD_DrawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 80073ae:	b5b0      	push	{r4, r5, r7, lr}
 80073b0:	b082      	sub	sp, #8
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	0005      	movs	r5, r0
 80073b6:	000c      	movs	r4, r1
 80073b8:	0010      	movs	r0, r2
 80073ba:	0019      	movs	r1, r3
 80073bc:	1dbb      	adds	r3, r7, #6
 80073be:	1c2a      	adds	r2, r5, #0
 80073c0:	801a      	strh	r2, [r3, #0]
 80073c2:	1d3b      	adds	r3, r7, #4
 80073c4:	1c22      	adds	r2, r4, #0
 80073c6:	801a      	strh	r2, [r3, #0]
 80073c8:	1cbb      	adds	r3, r7, #2
 80073ca:	1c02      	adds	r2, r0, #0
 80073cc:	801a      	strh	r2, [r3, #0]
 80073ce:	003b      	movs	r3, r7
 80073d0:	1c0a      	adds	r2, r1, #0
 80073d2:	801a      	strh	r2, [r3, #0]
	LCD_DrawFastHLine(x, y, w, color);
 80073d4:	2518      	movs	r5, #24
 80073d6:	197b      	adds	r3, r7, r5
 80073d8:	881c      	ldrh	r4, [r3, #0]
 80073da:	1cbb      	adds	r3, r7, #2
 80073dc:	2200      	movs	r2, #0
 80073de:	5e9a      	ldrsh	r2, [r3, r2]
 80073e0:	1d3b      	adds	r3, r7, #4
 80073e2:	2100      	movs	r1, #0
 80073e4:	5e59      	ldrsh	r1, [r3, r1]
 80073e6:	1dbb      	adds	r3, r7, #6
 80073e8:	2000      	movs	r0, #0
 80073ea:	5e18      	ldrsh	r0, [r3, r0]
 80073ec:	0023      	movs	r3, r4
 80073ee:	f7ff ff17 	bl	8007220 <LCD_DrawFastHLine>
	LCD_DrawFastHLine(x, y + h - 1, w, color);
 80073f2:	1d3b      	adds	r3, r7, #4
 80073f4:	881a      	ldrh	r2, [r3, #0]
 80073f6:	003b      	movs	r3, r7
 80073f8:	881b      	ldrh	r3, [r3, #0]
 80073fa:	18d3      	adds	r3, r2, r3
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	3b01      	subs	r3, #1
 8007400:	b29b      	uxth	r3, r3
 8007402:	b219      	sxth	r1, r3
 8007404:	197b      	adds	r3, r7, r5
 8007406:	881c      	ldrh	r4, [r3, #0]
 8007408:	1cbb      	adds	r3, r7, #2
 800740a:	2200      	movs	r2, #0
 800740c:	5e9a      	ldrsh	r2, [r3, r2]
 800740e:	1dbb      	adds	r3, r7, #6
 8007410:	2000      	movs	r0, #0
 8007412:	5e18      	ldrsh	r0, [r3, r0]
 8007414:	0023      	movs	r3, r4
 8007416:	f7ff ff03 	bl	8007220 <LCD_DrawFastHLine>
	LCD_DrawFastVLine(x, y, h, color);
 800741a:	197b      	adds	r3, r7, r5
 800741c:	881c      	ldrh	r4, [r3, #0]
 800741e:	003b      	movs	r3, r7
 8007420:	2200      	movs	r2, #0
 8007422:	5e9a      	ldrsh	r2, [r3, r2]
 8007424:	1d3b      	adds	r3, r7, #4
 8007426:	2100      	movs	r1, #0
 8007428:	5e59      	ldrsh	r1, [r3, r1]
 800742a:	1dbb      	adds	r3, r7, #6
 800742c:	2000      	movs	r0, #0
 800742e:	5e18      	ldrsh	r0, [r3, r0]
 8007430:	0023      	movs	r3, r4
 8007432:	f7ff ff8d 	bl	8007350 <LCD_DrawFastVLine>
	LCD_DrawFastVLine(x + w - 1, y, h, color);
 8007436:	1dbb      	adds	r3, r7, #6
 8007438:	881a      	ldrh	r2, [r3, #0]
 800743a:	1cbb      	adds	r3, r7, #2
 800743c:	881b      	ldrh	r3, [r3, #0]
 800743e:	18d3      	adds	r3, r2, r3
 8007440:	b29b      	uxth	r3, r3
 8007442:	3b01      	subs	r3, #1
 8007444:	b29b      	uxth	r3, r3
 8007446:	b218      	sxth	r0, r3
 8007448:	197b      	adds	r3, r7, r5
 800744a:	881c      	ldrh	r4, [r3, #0]
 800744c:	003b      	movs	r3, r7
 800744e:	2200      	movs	r2, #0
 8007450:	5e9a      	ldrsh	r2, [r3, r2]
 8007452:	1d3b      	adds	r3, r7, #4
 8007454:	2100      	movs	r1, #0
 8007456:	5e59      	ldrsh	r1, [r3, r1]
 8007458:	0023      	movs	r3, r4
 800745a:	f7ff ff79 	bl	8007350 <LCD_DrawFastVLine>
}
 800745e:	46c0      	nop			; (mov r8, r8)
 8007460:	46bd      	mov	sp, r7
 8007462:	b002      	add	sp, #8
 8007464:	bdb0      	pop	{r4, r5, r7, pc}

08007466 <LCD_DrawRoundRect>:
 * \param color		Color
 * 
 * \return void
 */
void LCD_DrawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
		uint16_t color) {
 8007466:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007468:	b085      	sub	sp, #20
 800746a:	af02      	add	r7, sp, #8
 800746c:	0005      	movs	r5, r0
 800746e:	000c      	movs	r4, r1
 8007470:	0010      	movs	r0, r2
 8007472:	0019      	movs	r1, r3
 8007474:	1dbb      	adds	r3, r7, #6
 8007476:	1c2a      	adds	r2, r5, #0
 8007478:	801a      	strh	r2, [r3, #0]
 800747a:	1d3b      	adds	r3, r7, #4
 800747c:	1c22      	adds	r2, r4, #0
 800747e:	801a      	strh	r2, [r3, #0]
 8007480:	1cbb      	adds	r3, r7, #2
 8007482:	1c02      	adds	r2, r0, #0
 8007484:	801a      	strh	r2, [r3, #0]
 8007486:	003b      	movs	r3, r7
 8007488:	1c0a      	adds	r2, r1, #0
 800748a:	801a      	strh	r2, [r3, #0]
	// smarter version
	LCD_DrawFastHLine(x + r, y, w - 2 * r, color); // Top
 800748c:	1dbb      	adds	r3, r7, #6
 800748e:	881a      	ldrh	r2, [r3, #0]
 8007490:	2518      	movs	r5, #24
 8007492:	2408      	movs	r4, #8
 8007494:	192b      	adds	r3, r5, r4
 8007496:	19db      	adds	r3, r3, r7
 8007498:	881b      	ldrh	r3, [r3, #0]
 800749a:	18d3      	adds	r3, r2, r3
 800749c:	b29b      	uxth	r3, r3
 800749e:	b218      	sxth	r0, r3
 80074a0:	1cbb      	adds	r3, r7, #2
 80074a2:	881a      	ldrh	r2, [r3, #0]
 80074a4:	192b      	adds	r3, r5, r4
 80074a6:	19db      	adds	r3, r3, r7
 80074a8:	881b      	ldrh	r3, [r3, #0]
 80074aa:	18db      	adds	r3, r3, r3
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	b21a      	sxth	r2, r3
 80074b4:	261c      	movs	r6, #28
 80074b6:	1933      	adds	r3, r6, r4
 80074b8:	19db      	adds	r3, r3, r7
 80074ba:	881c      	ldrh	r4, [r3, #0]
 80074bc:	1d3b      	adds	r3, r7, #4
 80074be:	2100      	movs	r1, #0
 80074c0:	5e59      	ldrsh	r1, [r3, r1]
 80074c2:	0023      	movs	r3, r4
 80074c4:	f7ff feac 	bl	8007220 <LCD_DrawFastHLine>
	LCD_DrawFastHLine(x + r, y + h - 1, w - 2 * r, color); // Bottom
 80074c8:	1dbb      	adds	r3, r7, #6
 80074ca:	881a      	ldrh	r2, [r3, #0]
 80074cc:	2408      	movs	r4, #8
 80074ce:	192b      	adds	r3, r5, r4
 80074d0:	19db      	adds	r3, r3, r7
 80074d2:	881b      	ldrh	r3, [r3, #0]
 80074d4:	18d3      	adds	r3, r2, r3
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	b218      	sxth	r0, r3
 80074da:	1d3b      	adds	r3, r7, #4
 80074dc:	881a      	ldrh	r2, [r3, #0]
 80074de:	003b      	movs	r3, r7
 80074e0:	881b      	ldrh	r3, [r3, #0]
 80074e2:	18d3      	adds	r3, r2, r3
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	3b01      	subs	r3, #1
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	b219      	sxth	r1, r3
 80074ec:	1cbb      	adds	r3, r7, #2
 80074ee:	881a      	ldrh	r2, [r3, #0]
 80074f0:	192b      	adds	r3, r5, r4
 80074f2:	19db      	adds	r3, r3, r7
 80074f4:	881b      	ldrh	r3, [r3, #0]
 80074f6:	18db      	adds	r3, r3, r3
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	b21a      	sxth	r2, r3
 8007500:	1933      	adds	r3, r6, r4
 8007502:	19db      	adds	r3, r3, r7
 8007504:	881b      	ldrh	r3, [r3, #0]
 8007506:	f7ff fe8b 	bl	8007220 <LCD_DrawFastHLine>
	LCD_DrawFastVLine(x, y + r, h - 2 * r, color); // Left
 800750a:	1d3b      	adds	r3, r7, #4
 800750c:	881a      	ldrh	r2, [r3, #0]
 800750e:	192b      	adds	r3, r5, r4
 8007510:	19db      	adds	r3, r3, r7
 8007512:	881b      	ldrh	r3, [r3, #0]
 8007514:	18d3      	adds	r3, r2, r3
 8007516:	b29b      	uxth	r3, r3
 8007518:	b219      	sxth	r1, r3
 800751a:	003b      	movs	r3, r7
 800751c:	881a      	ldrh	r2, [r3, #0]
 800751e:	192b      	adds	r3, r5, r4
 8007520:	19db      	adds	r3, r3, r7
 8007522:	881b      	ldrh	r3, [r3, #0]
 8007524:	18db      	adds	r3, r3, r3
 8007526:	b29b      	uxth	r3, r3
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	b29b      	uxth	r3, r3
 800752c:	b21a      	sxth	r2, r3
 800752e:	1933      	adds	r3, r6, r4
 8007530:	19db      	adds	r3, r3, r7
 8007532:	881c      	ldrh	r4, [r3, #0]
 8007534:	1dbb      	adds	r3, r7, #6
 8007536:	2000      	movs	r0, #0
 8007538:	5e18      	ldrsh	r0, [r3, r0]
 800753a:	0023      	movs	r3, r4
 800753c:	f7ff ff08 	bl	8007350 <LCD_DrawFastVLine>
	LCD_DrawFastVLine(x + w - 1, y + r, h - 2 * r, color); // Right
 8007540:	1dbb      	adds	r3, r7, #6
 8007542:	881a      	ldrh	r2, [r3, #0]
 8007544:	1cbb      	adds	r3, r7, #2
 8007546:	881b      	ldrh	r3, [r3, #0]
 8007548:	18d3      	adds	r3, r2, r3
 800754a:	b29b      	uxth	r3, r3
 800754c:	3b01      	subs	r3, #1
 800754e:	b29b      	uxth	r3, r3
 8007550:	b218      	sxth	r0, r3
 8007552:	1d3b      	adds	r3, r7, #4
 8007554:	881a      	ldrh	r2, [r3, #0]
 8007556:	2408      	movs	r4, #8
 8007558:	192b      	adds	r3, r5, r4
 800755a:	19db      	adds	r3, r3, r7
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	18d3      	adds	r3, r2, r3
 8007560:	b29b      	uxth	r3, r3
 8007562:	b219      	sxth	r1, r3
 8007564:	003b      	movs	r3, r7
 8007566:	881a      	ldrh	r2, [r3, #0]
 8007568:	192b      	adds	r3, r5, r4
 800756a:	19db      	adds	r3, r3, r7
 800756c:	881b      	ldrh	r3, [r3, #0]
 800756e:	18db      	adds	r3, r3, r3
 8007570:	b29b      	uxth	r3, r3
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	b29b      	uxth	r3, r3
 8007576:	b21a      	sxth	r2, r3
 8007578:	1933      	adds	r3, r6, r4
 800757a:	19db      	adds	r3, r3, r7
 800757c:	881b      	ldrh	r3, [r3, #0]
 800757e:	f7ff fee7 	bl	8007350 <LCD_DrawFastVLine>
	// draw four corners
	LCD_DrawCircleHelper(x + r, y + r, r, 1, color);
 8007582:	1dbb      	adds	r3, r7, #6
 8007584:	881a      	ldrh	r2, [r3, #0]
 8007586:	192b      	adds	r3, r5, r4
 8007588:	19db      	adds	r3, r3, r7
 800758a:	881b      	ldrh	r3, [r3, #0]
 800758c:	18d3      	adds	r3, r2, r3
 800758e:	b29b      	uxth	r3, r3
 8007590:	b218      	sxth	r0, r3
 8007592:	1d3b      	adds	r3, r7, #4
 8007594:	881a      	ldrh	r2, [r3, #0]
 8007596:	1929      	adds	r1, r5, r4
 8007598:	19cb      	adds	r3, r1, r7
 800759a:	881b      	ldrh	r3, [r3, #0]
 800759c:	18d3      	adds	r3, r2, r3
 800759e:	b29b      	uxth	r3, r3
 80075a0:	b219      	sxth	r1, r3
 80075a2:	002c      	movs	r4, r5
 80075a4:	2308      	movs	r3, #8
 80075a6:	18ea      	adds	r2, r5, r3
 80075a8:	19d3      	adds	r3, r2, r7
 80075aa:	2200      	movs	r2, #0
 80075ac:	5e9a      	ldrsh	r2, [r3, r2]
 80075ae:	0035      	movs	r5, r6
 80075b0:	2608      	movs	r6, #8
 80075b2:	19ab      	adds	r3, r5, r6
 80075b4:	19db      	adds	r3, r3, r7
 80075b6:	881b      	ldrh	r3, [r3, #0]
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	2301      	movs	r3, #1
 80075bc:	f000 f873 	bl	80076a6 <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + w - r - 1, y + r, r, 2, color);
 80075c0:	1dbb      	adds	r3, r7, #6
 80075c2:	881a      	ldrh	r2, [r3, #0]
 80075c4:	1cbb      	adds	r3, r7, #2
 80075c6:	881b      	ldrh	r3, [r3, #0]
 80075c8:	18d3      	adds	r3, r2, r3
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	0031      	movs	r1, r6
 80075ce:	1863      	adds	r3, r4, r1
 80075d0:	19db      	adds	r3, r3, r7
 80075d2:	881b      	ldrh	r3, [r3, #0]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	3b01      	subs	r3, #1
 80075da:	b29b      	uxth	r3, r3
 80075dc:	b218      	sxth	r0, r3
 80075de:	1d3b      	adds	r3, r7, #4
 80075e0:	881a      	ldrh	r2, [r3, #0]
 80075e2:	000e      	movs	r6, r1
 80075e4:	19a3      	adds	r3, r4, r6
 80075e6:	19db      	adds	r3, r3, r7
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	18d3      	adds	r3, r2, r3
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	b219      	sxth	r1, r3
 80075f0:	19a3      	adds	r3, r4, r6
 80075f2:	19db      	adds	r3, r3, r7
 80075f4:	2200      	movs	r2, #0
 80075f6:	5e9a      	ldrsh	r2, [r3, r2]
 80075f8:	19ab      	adds	r3, r5, r6
 80075fa:	19db      	adds	r3, r3, r7
 80075fc:	881b      	ldrh	r3, [r3, #0]
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	2302      	movs	r3, #2
 8007602:	f000 f850 	bl	80076a6 <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 8007606:	1dbb      	adds	r3, r7, #6
 8007608:	881a      	ldrh	r2, [r3, #0]
 800760a:	1cbb      	adds	r3, r7, #2
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	18d3      	adds	r3, r2, r3
 8007610:	b29a      	uxth	r2, r3
 8007612:	0021      	movs	r1, r4
 8007614:	198b      	adds	r3, r1, r6
 8007616:	19db      	adds	r3, r3, r7
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	b29b      	uxth	r3, r3
 800761e:	3b01      	subs	r3, #1
 8007620:	b29b      	uxth	r3, r3
 8007622:	b218      	sxth	r0, r3
 8007624:	1d3b      	adds	r3, r7, #4
 8007626:	881a      	ldrh	r2, [r3, #0]
 8007628:	003b      	movs	r3, r7
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	18d3      	adds	r3, r2, r3
 800762e:	b29a      	uxth	r2, r3
 8007630:	000c      	movs	r4, r1
 8007632:	19a3      	adds	r3, r4, r6
 8007634:	19db      	adds	r3, r3, r7
 8007636:	881b      	ldrh	r3, [r3, #0]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	b29b      	uxth	r3, r3
 800763c:	3b01      	subs	r3, #1
 800763e:	b29b      	uxth	r3, r3
 8007640:	b219      	sxth	r1, r3
 8007642:	19a3      	adds	r3, r4, r6
 8007644:	19db      	adds	r3, r3, r7
 8007646:	2200      	movs	r2, #0
 8007648:	5e9a      	ldrsh	r2, [r3, r2]
 800764a:	19ab      	adds	r3, r5, r6
 800764c:	19db      	adds	r3, r3, r7
 800764e:	881b      	ldrh	r3, [r3, #0]
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	2304      	movs	r3, #4
 8007654:	f000 f827 	bl	80076a6 <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + r, y + h - r - 1, r, 8, color);
 8007658:	1dbb      	adds	r3, r7, #6
 800765a:	881a      	ldrh	r2, [r3, #0]
 800765c:	0021      	movs	r1, r4
 800765e:	198b      	adds	r3, r1, r6
 8007660:	19db      	adds	r3, r3, r7
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	18d3      	adds	r3, r2, r3
 8007666:	b29b      	uxth	r3, r3
 8007668:	b218      	sxth	r0, r3
 800766a:	1d3b      	adds	r3, r7, #4
 800766c:	881a      	ldrh	r2, [r3, #0]
 800766e:	003b      	movs	r3, r7
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	18d3      	adds	r3, r2, r3
 8007674:	b29a      	uxth	r2, r3
 8007676:	000c      	movs	r4, r1
 8007678:	198b      	adds	r3, r1, r6
 800767a:	19db      	adds	r3, r3, r7
 800767c:	881b      	ldrh	r3, [r3, #0]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	b29b      	uxth	r3, r3
 8007682:	3b01      	subs	r3, #1
 8007684:	b29b      	uxth	r3, r3
 8007686:	b219      	sxth	r1, r3
 8007688:	19a3      	adds	r3, r4, r6
 800768a:	19db      	adds	r3, r3, r7
 800768c:	2200      	movs	r2, #0
 800768e:	5e9a      	ldrsh	r2, [r3, r2]
 8007690:	19ab      	adds	r3, r5, r6
 8007692:	19db      	adds	r3, r3, r7
 8007694:	881b      	ldrh	r3, [r3, #0]
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	2308      	movs	r3, #8
 800769a:	f000 f804 	bl	80076a6 <LCD_DrawCircleHelper>
}
 800769e:	46c0      	nop			; (mov r8, r8)
 80076a0:	46bd      	mov	sp, r7
 80076a2:	b003      	add	sp, #12
 80076a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080076a6 <LCD_DrawCircleHelper>:
 * \param color			Color
 * 
 * \return void
 */
void LCD_DrawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
		uint16_t color) {
 80076a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076a8:	b087      	sub	sp, #28
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	0005      	movs	r5, r0
 80076ae:	000c      	movs	r4, r1
 80076b0:	0010      	movs	r0, r2
 80076b2:	0019      	movs	r1, r3
 80076b4:	1dbb      	adds	r3, r7, #6
 80076b6:	1c2a      	adds	r2, r5, #0
 80076b8:	801a      	strh	r2, [r3, #0]
 80076ba:	1d3b      	adds	r3, r7, #4
 80076bc:	1c22      	adds	r2, r4, #0
 80076be:	801a      	strh	r2, [r3, #0]
 80076c0:	1cbb      	adds	r3, r7, #2
 80076c2:	1c02      	adds	r2, r0, #0
 80076c4:	801a      	strh	r2, [r3, #0]
 80076c6:	1c7b      	adds	r3, r7, #1
 80076c8:	1c0a      	adds	r2, r1, #0
 80076ca:	701a      	strb	r2, [r3, #0]
	int16_t f = 1 - r;
 80076cc:	1cbb      	adds	r3, r7, #2
 80076ce:	881b      	ldrh	r3, [r3, #0]
 80076d0:	2201      	movs	r2, #1
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	2316      	movs	r3, #22
 80076d8:	18fb      	adds	r3, r7, r3
 80076da:	801a      	strh	r2, [r3, #0]
	int16_t ddF_x = 1;
 80076dc:	2314      	movs	r3, #20
 80076de:	18fb      	adds	r3, r7, r3
 80076e0:	2201      	movs	r2, #1
 80076e2:	801a      	strh	r2, [r3, #0]
	int16_t ddF_y = -2 * r;
 80076e4:	1cbb      	adds	r3, r7, #2
 80076e6:	881b      	ldrh	r3, [r3, #0]
 80076e8:	1c1a      	adds	r2, r3, #0
 80076ea:	03d2      	lsls	r2, r2, #15
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	18db      	adds	r3, r3, r3
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	2312      	movs	r3, #18
 80076f4:	18fb      	adds	r3, r7, r3
 80076f6:	801a      	strh	r2, [r3, #0]
	int16_t x = 0;
 80076f8:	2310      	movs	r3, #16
 80076fa:	18fb      	adds	r3, r7, r3
 80076fc:	2200      	movs	r2, #0
 80076fe:	801a      	strh	r2, [r3, #0]
	int16_t y = r;
 8007700:	230e      	movs	r3, #14
 8007702:	18fb      	adds	r3, r7, r3
 8007704:	1cba      	adds	r2, r7, #2
 8007706:	8812      	ldrh	r2, [r2, #0]
 8007708:	801a      	strh	r2, [r3, #0]

	while (x < y) {
 800770a:	e0fe      	b.n	800790a <LCD_DrawCircleHelper+0x264>
		if (f >= 0) {
 800770c:	2116      	movs	r1, #22
 800770e:	187b      	adds	r3, r7, r1
 8007710:	2200      	movs	r2, #0
 8007712:	5e9b      	ldrsh	r3, [r3, r2]
 8007714:	2b00      	cmp	r3, #0
 8007716:	db17      	blt.n	8007748 <LCD_DrawCircleHelper+0xa2>
			y--;
 8007718:	200e      	movs	r0, #14
 800771a:	183b      	adds	r3, r7, r0
 800771c:	2200      	movs	r2, #0
 800771e:	5e9b      	ldrsh	r3, [r3, r2]
 8007720:	b29b      	uxth	r3, r3
 8007722:	3b01      	subs	r3, #1
 8007724:	b29a      	uxth	r2, r3
 8007726:	183b      	adds	r3, r7, r0
 8007728:	801a      	strh	r2, [r3, #0]
			ddF_y += 2;
 800772a:	2012      	movs	r0, #18
 800772c:	183b      	adds	r3, r7, r0
 800772e:	881b      	ldrh	r3, [r3, #0]
 8007730:	3302      	adds	r3, #2
 8007732:	b29a      	uxth	r2, r3
 8007734:	183b      	adds	r3, r7, r0
 8007736:	801a      	strh	r2, [r3, #0]
			f += ddF_y;
 8007738:	187b      	adds	r3, r7, r1
 800773a:	881a      	ldrh	r2, [r3, #0]
 800773c:	183b      	adds	r3, r7, r0
 800773e:	881b      	ldrh	r3, [r3, #0]
 8007740:	18d3      	adds	r3, r2, r3
 8007742:	b29a      	uxth	r2, r3
 8007744:	187b      	adds	r3, r7, r1
 8007746:	801a      	strh	r2, [r3, #0]
		}
		x++;
 8007748:	2110      	movs	r1, #16
 800774a:	187b      	adds	r3, r7, r1
 800774c:	2200      	movs	r2, #0
 800774e:	5e9b      	ldrsh	r3, [r3, r2]
 8007750:	b29b      	uxth	r3, r3
 8007752:	3301      	adds	r3, #1
 8007754:	b29a      	uxth	r2, r3
 8007756:	187b      	adds	r3, r7, r1
 8007758:	801a      	strh	r2, [r3, #0]
		ddF_x += 2;
 800775a:	2014      	movs	r0, #20
 800775c:	183b      	adds	r3, r7, r0
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	3302      	adds	r3, #2
 8007762:	b29a      	uxth	r2, r3
 8007764:	183b      	adds	r3, r7, r0
 8007766:	801a      	strh	r2, [r3, #0]
		f += ddF_x;
 8007768:	2416      	movs	r4, #22
 800776a:	193b      	adds	r3, r7, r4
 800776c:	881a      	ldrh	r2, [r3, #0]
 800776e:	183b      	adds	r3, r7, r0
 8007770:	881b      	ldrh	r3, [r3, #0]
 8007772:	18d3      	adds	r3, r2, r3
 8007774:	b29a      	uxth	r2, r3
 8007776:	193b      	adds	r3, r7, r4
 8007778:	801a      	strh	r2, [r3, #0]
		if (cornername & 0x4) {
 800777a:	1c7b      	adds	r3, r7, #1
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	2204      	movs	r2, #4
 8007780:	4013      	ands	r3, r2
 8007782:	d02c      	beq.n	80077de <LCD_DrawCircleHelper+0x138>
			LCD_DrawPixel(x0 + x, y0 + y, color);
 8007784:	1dbb      	adds	r3, r7, #6
 8007786:	881a      	ldrh	r2, [r3, #0]
 8007788:	000c      	movs	r4, r1
 800778a:	187b      	adds	r3, r7, r1
 800778c:	881b      	ldrh	r3, [r3, #0]
 800778e:	18d3      	adds	r3, r2, r3
 8007790:	b29b      	uxth	r3, r3
 8007792:	b218      	sxth	r0, r3
 8007794:	1d3b      	adds	r3, r7, #4
 8007796:	881a      	ldrh	r2, [r3, #0]
 8007798:	250e      	movs	r5, #14
 800779a:	197b      	adds	r3, r7, r5
 800779c:	881b      	ldrh	r3, [r3, #0]
 800779e:	18d3      	adds	r3, r2, r3
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	b219      	sxth	r1, r3
 80077a4:	2628      	movs	r6, #40	; 0x28
 80077a6:	2308      	movs	r3, #8
 80077a8:	18f2      	adds	r2, r6, r3
 80077aa:	19d3      	adds	r3, r2, r7
 80077ac:	881b      	ldrh	r3, [r3, #0]
 80077ae:	001a      	movs	r2, r3
 80077b0:	f7ff fb22 	bl	8006df8 <LCD_DrawPixel>
			LCD_DrawPixel(x0 + y, y0 + x, color);
 80077b4:	1dbb      	adds	r3, r7, #6
 80077b6:	881a      	ldrh	r2, [r3, #0]
 80077b8:	197b      	adds	r3, r7, r5
 80077ba:	881b      	ldrh	r3, [r3, #0]
 80077bc:	18d3      	adds	r3, r2, r3
 80077be:	b29b      	uxth	r3, r3
 80077c0:	b218      	sxth	r0, r3
 80077c2:	1d3b      	adds	r3, r7, #4
 80077c4:	881a      	ldrh	r2, [r3, #0]
 80077c6:	193b      	adds	r3, r7, r4
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	18d3      	adds	r3, r2, r3
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	b219      	sxth	r1, r3
 80077d0:	2308      	movs	r3, #8
 80077d2:	18f3      	adds	r3, r6, r3
 80077d4:	19db      	adds	r3, r3, r7
 80077d6:	881b      	ldrh	r3, [r3, #0]
 80077d8:	001a      	movs	r2, r3
 80077da:	f7ff fb0d 	bl	8006df8 <LCD_DrawPixel>
		}
		if (cornername & 0x2) {
 80077de:	1c7b      	adds	r3, r7, #1
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	2202      	movs	r2, #2
 80077e4:	4013      	ands	r3, r2
 80077e6:	d02c      	beq.n	8007842 <LCD_DrawCircleHelper+0x19c>
			LCD_DrawPixel(x0 + x, y0 - y, color);
 80077e8:	1dbb      	adds	r3, r7, #6
 80077ea:	881a      	ldrh	r2, [r3, #0]
 80077ec:	2410      	movs	r4, #16
 80077ee:	193b      	adds	r3, r7, r4
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	18d3      	adds	r3, r2, r3
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	b218      	sxth	r0, r3
 80077f8:	1d3b      	adds	r3, r7, #4
 80077fa:	881a      	ldrh	r2, [r3, #0]
 80077fc:	250e      	movs	r5, #14
 80077fe:	197b      	adds	r3, r7, r5
 8007800:	881b      	ldrh	r3, [r3, #0]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	b29b      	uxth	r3, r3
 8007806:	b219      	sxth	r1, r3
 8007808:	2628      	movs	r6, #40	; 0x28
 800780a:	2308      	movs	r3, #8
 800780c:	18f2      	adds	r2, r6, r3
 800780e:	19d3      	adds	r3, r2, r7
 8007810:	881b      	ldrh	r3, [r3, #0]
 8007812:	001a      	movs	r2, r3
 8007814:	f7ff faf0 	bl	8006df8 <LCD_DrawPixel>
			LCD_DrawPixel(x0 + y, y0 - x, color);
 8007818:	1dbb      	adds	r3, r7, #6
 800781a:	881a      	ldrh	r2, [r3, #0]
 800781c:	197b      	adds	r3, r7, r5
 800781e:	881b      	ldrh	r3, [r3, #0]
 8007820:	18d3      	adds	r3, r2, r3
 8007822:	b29b      	uxth	r3, r3
 8007824:	b218      	sxth	r0, r3
 8007826:	1d3b      	adds	r3, r7, #4
 8007828:	881a      	ldrh	r2, [r3, #0]
 800782a:	193b      	adds	r3, r7, r4
 800782c:	881b      	ldrh	r3, [r3, #0]
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	b29b      	uxth	r3, r3
 8007832:	b219      	sxth	r1, r3
 8007834:	2308      	movs	r3, #8
 8007836:	18f3      	adds	r3, r6, r3
 8007838:	19db      	adds	r3, r3, r7
 800783a:	881b      	ldrh	r3, [r3, #0]
 800783c:	001a      	movs	r2, r3
 800783e:	f7ff fadb 	bl	8006df8 <LCD_DrawPixel>
		}
		if (cornername & 0x8) {
 8007842:	1c7b      	adds	r3, r7, #1
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	2208      	movs	r2, #8
 8007848:	4013      	ands	r3, r2
 800784a:	d02c      	beq.n	80078a6 <LCD_DrawCircleHelper+0x200>
			LCD_DrawPixel(x0 - y, y0 + x, color);
 800784c:	1dbb      	adds	r3, r7, #6
 800784e:	881a      	ldrh	r2, [r3, #0]
 8007850:	240e      	movs	r4, #14
 8007852:	193b      	adds	r3, r7, r4
 8007854:	881b      	ldrh	r3, [r3, #0]
 8007856:	1ad3      	subs	r3, r2, r3
 8007858:	b29b      	uxth	r3, r3
 800785a:	b218      	sxth	r0, r3
 800785c:	1d3b      	adds	r3, r7, #4
 800785e:	881a      	ldrh	r2, [r3, #0]
 8007860:	2510      	movs	r5, #16
 8007862:	197b      	adds	r3, r7, r5
 8007864:	881b      	ldrh	r3, [r3, #0]
 8007866:	18d3      	adds	r3, r2, r3
 8007868:	b29b      	uxth	r3, r3
 800786a:	b219      	sxth	r1, r3
 800786c:	2628      	movs	r6, #40	; 0x28
 800786e:	2308      	movs	r3, #8
 8007870:	18f2      	adds	r2, r6, r3
 8007872:	19d3      	adds	r3, r2, r7
 8007874:	881b      	ldrh	r3, [r3, #0]
 8007876:	001a      	movs	r2, r3
 8007878:	f7ff fabe 	bl	8006df8 <LCD_DrawPixel>
			LCD_DrawPixel(x0 - x, y0 + y, color);
 800787c:	1dbb      	adds	r3, r7, #6
 800787e:	881a      	ldrh	r2, [r3, #0]
 8007880:	197b      	adds	r3, r7, r5
 8007882:	881b      	ldrh	r3, [r3, #0]
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	b29b      	uxth	r3, r3
 8007888:	b218      	sxth	r0, r3
 800788a:	1d3b      	adds	r3, r7, #4
 800788c:	881a      	ldrh	r2, [r3, #0]
 800788e:	193b      	adds	r3, r7, r4
 8007890:	881b      	ldrh	r3, [r3, #0]
 8007892:	18d3      	adds	r3, r2, r3
 8007894:	b29b      	uxth	r3, r3
 8007896:	b219      	sxth	r1, r3
 8007898:	2308      	movs	r3, #8
 800789a:	18f3      	adds	r3, r6, r3
 800789c:	19db      	adds	r3, r3, r7
 800789e:	881b      	ldrh	r3, [r3, #0]
 80078a0:	001a      	movs	r2, r3
 80078a2:	f7ff faa9 	bl	8006df8 <LCD_DrawPixel>
		}
		if (cornername & 0x1) {
 80078a6:	1c7b      	adds	r3, r7, #1
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	2201      	movs	r2, #1
 80078ac:	4013      	ands	r3, r2
 80078ae:	d02c      	beq.n	800790a <LCD_DrawCircleHelper+0x264>
			LCD_DrawPixel(x0 - y, y0 - x, color);
 80078b0:	1dbb      	adds	r3, r7, #6
 80078b2:	881a      	ldrh	r2, [r3, #0]
 80078b4:	240e      	movs	r4, #14
 80078b6:	193b      	adds	r3, r7, r4
 80078b8:	881b      	ldrh	r3, [r3, #0]
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	b29b      	uxth	r3, r3
 80078be:	b218      	sxth	r0, r3
 80078c0:	1d3b      	adds	r3, r7, #4
 80078c2:	881a      	ldrh	r2, [r3, #0]
 80078c4:	2510      	movs	r5, #16
 80078c6:	197b      	adds	r3, r7, r5
 80078c8:	881b      	ldrh	r3, [r3, #0]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	b219      	sxth	r1, r3
 80078d0:	2628      	movs	r6, #40	; 0x28
 80078d2:	2308      	movs	r3, #8
 80078d4:	18f2      	adds	r2, r6, r3
 80078d6:	19d3      	adds	r3, r2, r7
 80078d8:	881b      	ldrh	r3, [r3, #0]
 80078da:	001a      	movs	r2, r3
 80078dc:	f7ff fa8c 	bl	8006df8 <LCD_DrawPixel>
			LCD_DrawPixel(x0 - x, y0 - y, color);
 80078e0:	1dbb      	adds	r3, r7, #6
 80078e2:	881a      	ldrh	r2, [r3, #0]
 80078e4:	197b      	adds	r3, r7, r5
 80078e6:	881b      	ldrh	r3, [r3, #0]
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	b218      	sxth	r0, r3
 80078ee:	1d3b      	adds	r3, r7, #4
 80078f0:	881a      	ldrh	r2, [r3, #0]
 80078f2:	193b      	adds	r3, r7, r4
 80078f4:	881b      	ldrh	r3, [r3, #0]
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	b219      	sxth	r1, r3
 80078fc:	2308      	movs	r3, #8
 80078fe:	18f3      	adds	r3, r6, r3
 8007900:	19db      	adds	r3, r3, r7
 8007902:	881b      	ldrh	r3, [r3, #0]
 8007904:	001a      	movs	r2, r3
 8007906:	f7ff fa77 	bl	8006df8 <LCD_DrawPixel>
	while (x < y) {
 800790a:	2310      	movs	r3, #16
 800790c:	18fa      	adds	r2, r7, r3
 800790e:	230e      	movs	r3, #14
 8007910:	18fb      	adds	r3, r7, r3
 8007912:	2100      	movs	r1, #0
 8007914:	5e52      	ldrsh	r2, [r2, r1]
 8007916:	2100      	movs	r1, #0
 8007918:	5e5b      	ldrsh	r3, [r3, r1]
 800791a:	429a      	cmp	r2, r3
 800791c:	da00      	bge.n	8007920 <LCD_DrawCircleHelper+0x27a>
 800791e:	e6f5      	b.n	800770c <LCD_DrawCircleHelper+0x66>
		}
	}
}
 8007920:	46c0      	nop			; (mov r8, r8)
 8007922:	46c0      	nop			; (mov r8, r8)
 8007924:	46bd      	mov	sp, r7
 8007926:	b007      	add	sp, #28
 8007928:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800792c <LCD_DrawChar>:
 * \param size		Character Size
 * 
 * \return void
 */
void LCD_DrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color,
		uint16_t bg, uint8_t size) {
 800792c:	b5b0      	push	{r4, r5, r7, lr}
 800792e:	b086      	sub	sp, #24
 8007930:	af02      	add	r7, sp, #8
 8007932:	0005      	movs	r5, r0
 8007934:	000c      	movs	r4, r1
 8007936:	0010      	movs	r0, r2
 8007938:	0019      	movs	r1, r3
 800793a:	1dbb      	adds	r3, r7, #6
 800793c:	1c2a      	adds	r2, r5, #0
 800793e:	801a      	strh	r2, [r3, #0]
 8007940:	1d3b      	adds	r3, r7, #4
 8007942:	1c22      	adds	r2, r4, #0
 8007944:	801a      	strh	r2, [r3, #0]
 8007946:	1cfb      	adds	r3, r7, #3
 8007948:	1c02      	adds	r2, r0, #0
 800794a:	701a      	strb	r2, [r3, #0]
 800794c:	003b      	movs	r3, r7
 800794e:	1c0a      	adds	r2, r1, #0
 8007950:	801a      	strh	r2, [r3, #0]
	if ((x >= m_width) || // Clip right
 8007952:	4b8f      	ldr	r3, [pc, #572]	; (8007b90 <LCD_DrawChar+0x264>)
 8007954:	2200      	movs	r2, #0
 8007956:	5e9b      	ldrsh	r3, [r3, r2]
 8007958:	1dba      	adds	r2, r7, #6
 800795a:	2100      	movs	r1, #0
 800795c:	5e52      	ldrsh	r2, [r2, r1]
 800795e:	429a      	cmp	r2, r3
 8007960:	db00      	blt.n	8007964 <LCD_DrawChar+0x38>
 8007962:	e110      	b.n	8007b86 <LCD_DrawChar+0x25a>
			(y >= m_height) || // Clip bottom
 8007964:	4b8b      	ldr	r3, [pc, #556]	; (8007b94 <LCD_DrawChar+0x268>)
 8007966:	2200      	movs	r2, #0
 8007968:	5e9b      	ldrsh	r3, [r3, r2]
	if ((x >= m_width) || // Clip right
 800796a:	1d3a      	adds	r2, r7, #4
 800796c:	2100      	movs	r1, #0
 800796e:	5e52      	ldrsh	r2, [r2, r1]
 8007970:	429a      	cmp	r2, r3
 8007972:	db00      	blt.n	8007976 <LCD_DrawChar+0x4a>
 8007974:	e107      	b.n	8007b86 <LCD_DrawChar+0x25a>
			((x + 6 * size - 1) < 0) || // Clip left
 8007976:	1dbb      	adds	r3, r7, #6
 8007978:	2100      	movs	r1, #0
 800797a:	5e59      	ldrsh	r1, [r3, r1]
 800797c:	2024      	movs	r0, #36	; 0x24
 800797e:	183b      	adds	r3, r7, r0
 8007980:	781a      	ldrb	r2, [r3, #0]
 8007982:	0013      	movs	r3, r2
 8007984:	005b      	lsls	r3, r3, #1
 8007986:	189b      	adds	r3, r3, r2
 8007988:	005b      	lsls	r3, r3, #1
 800798a:	18cb      	adds	r3, r1, r3
			(y >= m_height) || // Clip bottom
 800798c:	2b00      	cmp	r3, #0
 800798e:	dc00      	bgt.n	8007992 <LCD_DrawChar+0x66>
 8007990:	e0f9      	b.n	8007b86 <LCD_DrawChar+0x25a>
			((y + 8 * size - 1) < 0))   // Clip top
 8007992:	1d3b      	adds	r3, r7, #4
 8007994:	2200      	movs	r2, #0
 8007996:	5e9a      	ldrsh	r2, [r3, r2]
 8007998:	183b      	adds	r3, r7, r0
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	00db      	lsls	r3, r3, #3
 800799e:	18d3      	adds	r3, r2, r3
			((x + 6 * size - 1) < 0) || // Clip left
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	dc00      	bgt.n	80079a6 <LCD_DrawChar+0x7a>
 80079a4:	e0ef      	b.n	8007b86 <LCD_DrawChar+0x25a>
		return;

	for (int8_t i = 0; i < 6; i++) {
 80079a6:	230f      	movs	r3, #15
 80079a8:	18fb      	adds	r3, r7, r3
 80079aa:	2200      	movs	r2, #0
 80079ac:	701a      	strb	r2, [r3, #0]
 80079ae:	e0e2      	b.n	8007b76 <LCD_DrawChar+0x24a>
		uint8_t line;
		if (i == 5) {
 80079b0:	230f      	movs	r3, #15
 80079b2:	18fb      	adds	r3, r7, r3
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	b25b      	sxtb	r3, r3
 80079b8:	2b05      	cmp	r3, #5
 80079ba:	d104      	bne.n	80079c6 <LCD_DrawChar+0x9a>
			line = 0x0;
 80079bc:	230e      	movs	r3, #14
 80079be:	18fb      	adds	r3, r7, r3
 80079c0:	2200      	movs	r2, #0
 80079c2:	701a      	strb	r2, [r3, #0]
 80079c4:	e0ce      	b.n	8007b64 <LCD_DrawChar+0x238>
		} else {
			line = font[c * 5 + i];   //pgm_read_byte(font+(c*5)+i);
 80079c6:	1cfb      	adds	r3, r7, #3
 80079c8:	781a      	ldrb	r2, [r3, #0]
 80079ca:	0013      	movs	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	189a      	adds	r2, r3, r2
 80079d0:	230f      	movs	r3, #15
 80079d2:	18fb      	adds	r3, r7, r3
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	b25b      	sxtb	r3, r3
 80079d8:	18d2      	adds	r2, r2, r3
 80079da:	230e      	movs	r3, #14
 80079dc:	18fb      	adds	r3, r7, r3
 80079de:	496e      	ldr	r1, [pc, #440]	; (8007b98 <LCD_DrawChar+0x26c>)
 80079e0:	5c8a      	ldrb	r2, [r1, r2]
 80079e2:	701a      	strb	r2, [r3, #0]
			for (int8_t j = 0; j < 8; j++) {
 80079e4:	230d      	movs	r3, #13
 80079e6:	18fb      	adds	r3, r7, r3
 80079e8:	2200      	movs	r2, #0
 80079ea:	701a      	strb	r2, [r3, #0]
 80079ec:	e0b3      	b.n	8007b56 <LCD_DrawChar+0x22a>
				if (line & 0x1) {
 80079ee:	230e      	movs	r3, #14
 80079f0:	18fb      	adds	r3, r7, r3
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	2201      	movs	r2, #1
 80079f6:	4013      	ands	r3, r2
 80079f8:	d04b      	beq.n	8007a92 <LCD_DrawChar+0x166>
					if (size == 1) { // default size
 80079fa:	2324      	movs	r3, #36	; 0x24
 80079fc:	18fb      	adds	r3, r7, r3
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d119      	bne.n	8007a38 <LCD_DrawChar+0x10c>
						LCD_DrawPixel(x + i, y + j, color);
 8007a04:	230f      	movs	r3, #15
 8007a06:	18fb      	adds	r3, r7, r3
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	b25b      	sxtb	r3, r3
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	1dbb      	adds	r3, r7, #6
 8007a10:	881b      	ldrh	r3, [r3, #0]
 8007a12:	18d3      	adds	r3, r2, r3
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	b218      	sxth	r0, r3
 8007a18:	230d      	movs	r3, #13
 8007a1a:	18fb      	adds	r3, r7, r3
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	b25b      	sxtb	r3, r3
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	1d3b      	adds	r3, r7, #4
 8007a24:	881b      	ldrh	r3, [r3, #0]
 8007a26:	18d3      	adds	r3, r2, r3
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	b219      	sxth	r1, r3
 8007a2c:	003b      	movs	r3, r7
 8007a2e:	881b      	ldrh	r3, [r3, #0]
 8007a30:	001a      	movs	r2, r3
 8007a32:	f7ff f9e1 	bl	8006df8 <LCD_DrawPixel>
 8007a36:	e07f      	b.n	8007b38 <LCD_DrawChar+0x20c>
					} else {  // big size
						LCD_FillRect(x + (i * size), y + (j * size), size, size,
 8007a38:	230f      	movs	r3, #15
 8007a3a:	18fb      	adds	r3, r7, r3
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	b25b      	sxtb	r3, r3
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	2124      	movs	r1, #36	; 0x24
 8007a44:	187a      	adds	r2, r7, r1
 8007a46:	7812      	ldrb	r2, [r2, #0]
 8007a48:	b292      	uxth	r2, r2
 8007a4a:	4353      	muls	r3, r2
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	1dbb      	adds	r3, r7, #6
 8007a50:	881b      	ldrh	r3, [r3, #0]
 8007a52:	18d3      	adds	r3, r2, r3
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	b218      	sxth	r0, r3
 8007a58:	230d      	movs	r3, #13
 8007a5a:	18fb      	adds	r3, r7, r3
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	b25b      	sxtb	r3, r3
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	000c      	movs	r4, r1
 8007a64:	187a      	adds	r2, r7, r1
 8007a66:	7812      	ldrb	r2, [r2, #0]
 8007a68:	b292      	uxth	r2, r2
 8007a6a:	4353      	muls	r3, r2
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	1d3b      	adds	r3, r7, #4
 8007a70:	881b      	ldrh	r3, [r3, #0]
 8007a72:	18d3      	adds	r3, r2, r3
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	b219      	sxth	r1, r3
 8007a78:	193b      	adds	r3, r7, r4
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	b21a      	sxth	r2, r3
 8007a7e:	193b      	adds	r3, r7, r4
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	b21c      	sxth	r4, r3
 8007a84:	003b      	movs	r3, r7
 8007a86:	881b      	ldrh	r3, [r3, #0]
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	0023      	movs	r3, r4
 8007a8c:	f000 fa08 	bl	8007ea0 <LCD_FillRect>
 8007a90:	e052      	b.n	8007b38 <LCD_DrawChar+0x20c>
								color);
					}
				} else if (bg != color) {
 8007a92:	2420      	movs	r4, #32
 8007a94:	193b      	adds	r3, r7, r4
 8007a96:	0039      	movs	r1, r7
 8007a98:	881a      	ldrh	r2, [r3, #0]
 8007a9a:	880b      	ldrh	r3, [r1, #0]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d04b      	beq.n	8007b38 <LCD_DrawChar+0x20c>
					if (size == 1) { // default size
 8007aa0:	2324      	movs	r3, #36	; 0x24
 8007aa2:	18fb      	adds	r3, r7, r3
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d119      	bne.n	8007ade <LCD_DrawChar+0x1b2>
						LCD_DrawPixel(x + i, y + j, bg);
 8007aaa:	230f      	movs	r3, #15
 8007aac:	18fb      	adds	r3, r7, r3
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	b25b      	sxtb	r3, r3
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	1dbb      	adds	r3, r7, #6
 8007ab6:	881b      	ldrh	r3, [r3, #0]
 8007ab8:	18d3      	adds	r3, r2, r3
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	b218      	sxth	r0, r3
 8007abe:	230d      	movs	r3, #13
 8007ac0:	18fb      	adds	r3, r7, r3
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	b25b      	sxtb	r3, r3
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	1d3b      	adds	r3, r7, #4
 8007aca:	881b      	ldrh	r3, [r3, #0]
 8007acc:	18d3      	adds	r3, r2, r3
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	b219      	sxth	r1, r3
 8007ad2:	193b      	adds	r3, r7, r4
 8007ad4:	881b      	ldrh	r3, [r3, #0]
 8007ad6:	001a      	movs	r2, r3
 8007ad8:	f7ff f98e 	bl	8006df8 <LCD_DrawPixel>
 8007adc:	e02c      	b.n	8007b38 <LCD_DrawChar+0x20c>
					} else {  // big size
						LCD_FillRect(x + i * size, y + j * size, size, size,
 8007ade:	230f      	movs	r3, #15
 8007ae0:	18fb      	adds	r3, r7, r3
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	b25b      	sxtb	r3, r3
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	2124      	movs	r1, #36	; 0x24
 8007aea:	187a      	adds	r2, r7, r1
 8007aec:	7812      	ldrb	r2, [r2, #0]
 8007aee:	b292      	uxth	r2, r2
 8007af0:	4353      	muls	r3, r2
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	1dbb      	adds	r3, r7, #6
 8007af6:	881b      	ldrh	r3, [r3, #0]
 8007af8:	18d3      	adds	r3, r2, r3
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	b218      	sxth	r0, r3
 8007afe:	230d      	movs	r3, #13
 8007b00:	18fb      	adds	r3, r7, r3
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	b25b      	sxtb	r3, r3
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	000c      	movs	r4, r1
 8007b0a:	187a      	adds	r2, r7, r1
 8007b0c:	7812      	ldrb	r2, [r2, #0]
 8007b0e:	b292      	uxth	r2, r2
 8007b10:	4353      	muls	r3, r2
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	1d3b      	adds	r3, r7, #4
 8007b16:	881b      	ldrh	r3, [r3, #0]
 8007b18:	18d3      	adds	r3, r2, r3
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	b219      	sxth	r1, r3
 8007b1e:	193b      	adds	r3, r7, r4
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	b21a      	sxth	r2, r3
 8007b24:	193b      	adds	r3, r7, r4
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	b21c      	sxth	r4, r3
 8007b2a:	2320      	movs	r3, #32
 8007b2c:	18fb      	adds	r3, r7, r3
 8007b2e:	881b      	ldrh	r3, [r3, #0]
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	0023      	movs	r3, r4
 8007b34:	f000 f9b4 	bl	8007ea0 <LCD_FillRect>
								bg);
					}
				}
				line >>= 1;
 8007b38:	220e      	movs	r2, #14
 8007b3a:	18bb      	adds	r3, r7, r2
 8007b3c:	18ba      	adds	r2, r7, r2
 8007b3e:	7812      	ldrb	r2, [r2, #0]
 8007b40:	0852      	lsrs	r2, r2, #1
 8007b42:	701a      	strb	r2, [r3, #0]
			for (int8_t j = 0; j < 8; j++) {
 8007b44:	210d      	movs	r1, #13
 8007b46:	187b      	adds	r3, r7, r1
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	b25b      	sxtb	r3, r3
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	3301      	adds	r3, #1
 8007b50:	b2da      	uxtb	r2, r3
 8007b52:	187b      	adds	r3, r7, r1
 8007b54:	701a      	strb	r2, [r3, #0]
 8007b56:	230d      	movs	r3, #13
 8007b58:	18fb      	adds	r3, r7, r3
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	b25b      	sxtb	r3, r3
 8007b5e:	2b07      	cmp	r3, #7
 8007b60:	dc00      	bgt.n	8007b64 <LCD_DrawChar+0x238>
 8007b62:	e744      	b.n	80079ee <LCD_DrawChar+0xc2>
	for (int8_t i = 0; i < 6; i++) {
 8007b64:	210f      	movs	r1, #15
 8007b66:	187b      	adds	r3, r7, r1
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	b25b      	sxtb	r3, r3
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	3301      	adds	r3, #1
 8007b70:	b2da      	uxtb	r2, r3
 8007b72:	187b      	adds	r3, r7, r1
 8007b74:	701a      	strb	r2, [r3, #0]
 8007b76:	230f      	movs	r3, #15
 8007b78:	18fb      	adds	r3, r7, r3
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	b25b      	sxtb	r3, r3
 8007b7e:	2b05      	cmp	r3, #5
 8007b80:	dc00      	bgt.n	8007b84 <LCD_DrawChar+0x258>
 8007b82:	e715      	b.n	80079b0 <LCD_DrawChar+0x84>
 8007b84:	e000      	b.n	8007b88 <LCD_DrawChar+0x25c>
		return;
 8007b86:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
}
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	b004      	add	sp, #16
 8007b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8007b8e:	46c0      	nop			; (mov r8, r8)
 8007b90:	200008e8 	.word	0x200008e8
 8007b94:	200008ea 	.word	0x200008ea
 8007b98:	0800f2d4 	.word	0x0800f2d4

08007b9c <LCD_FillCircleHelper>:
 * \param color			Color
 * 
 * \return void
 */
void LCD_FillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
		int16_t delta, uint16_t color) {
 8007b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b9e:	b089      	sub	sp, #36	; 0x24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	0005      	movs	r5, r0
 8007ba4:	000c      	movs	r4, r1
 8007ba6:	0010      	movs	r0, r2
 8007ba8:	0019      	movs	r1, r3
 8007baa:	230e      	movs	r3, #14
 8007bac:	18fb      	adds	r3, r7, r3
 8007bae:	1c2a      	adds	r2, r5, #0
 8007bb0:	801a      	strh	r2, [r3, #0]
 8007bb2:	230c      	movs	r3, #12
 8007bb4:	18fb      	adds	r3, r7, r3
 8007bb6:	1c22      	adds	r2, r4, #0
 8007bb8:	801a      	strh	r2, [r3, #0]
 8007bba:	230a      	movs	r3, #10
 8007bbc:	18fb      	adds	r3, r7, r3
 8007bbe:	1c02      	adds	r2, r0, #0
 8007bc0:	801a      	strh	r2, [r3, #0]
 8007bc2:	2309      	movs	r3, #9
 8007bc4:	18fb      	adds	r3, r7, r3
 8007bc6:	1c0a      	adds	r2, r1, #0
 8007bc8:	701a      	strb	r2, [r3, #0]
	int16_t f = 1 - r;
 8007bca:	230a      	movs	r3, #10
 8007bcc:	18fb      	adds	r3, r7, r3
 8007bce:	881b      	ldrh	r3, [r3, #0]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	2316      	movs	r3, #22
 8007bd8:	2108      	movs	r1, #8
 8007bda:	185b      	adds	r3, r3, r1
 8007bdc:	19db      	adds	r3, r3, r7
 8007bde:	801a      	strh	r2, [r3, #0]
	int16_t ddF_x = 1;
 8007be0:	2314      	movs	r3, #20
 8007be2:	2208      	movs	r2, #8
 8007be4:	189b      	adds	r3, r3, r2
 8007be6:	19db      	adds	r3, r3, r7
 8007be8:	2201      	movs	r2, #1
 8007bea:	801a      	strh	r2, [r3, #0]
	int16_t ddF_y = -2 * r;
 8007bec:	230a      	movs	r3, #10
 8007bee:	18fb      	adds	r3, r7, r3
 8007bf0:	881b      	ldrh	r3, [r3, #0]
 8007bf2:	1c1a      	adds	r2, r3, #0
 8007bf4:	03d2      	lsls	r2, r2, #15
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	18db      	adds	r3, r3, r3
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	2312      	movs	r3, #18
 8007bfe:	2108      	movs	r1, #8
 8007c00:	185b      	adds	r3, r3, r1
 8007c02:	19db      	adds	r3, r3, r7
 8007c04:	801a      	strh	r2, [r3, #0]
	int16_t x = 0;
 8007c06:	2310      	movs	r3, #16
 8007c08:	2208      	movs	r2, #8
 8007c0a:	189b      	adds	r3, r3, r2
 8007c0c:	19db      	adds	r3, r3, r7
 8007c0e:	2200      	movs	r2, #0
 8007c10:	801a      	strh	r2, [r3, #0]
	int16_t y = r;
 8007c12:	230e      	movs	r3, #14
 8007c14:	2208      	movs	r2, #8
 8007c16:	189b      	adds	r3, r3, r2
 8007c18:	19db      	adds	r3, r3, r7
 8007c1a:	220a      	movs	r2, #10
 8007c1c:	18ba      	adds	r2, r7, r2
 8007c1e:	8812      	ldrh	r2, [r2, #0]
 8007c20:	801a      	strh	r2, [r3, #0]

	while (x < y) {
 8007c22:	e129      	b.n	8007e78 <LCD_FillCircleHelper+0x2dc>
		if (f >= 0) {
 8007c24:	2116      	movs	r1, #22
 8007c26:	2308      	movs	r3, #8
 8007c28:	18cb      	adds	r3, r1, r3
 8007c2a:	19db      	adds	r3, r3, r7
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	5e9b      	ldrsh	r3, [r3, r2]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	db25      	blt.n	8007c80 <LCD_FillCircleHelper+0xe4>
			y--;
 8007c34:	200e      	movs	r0, #14
 8007c36:	2308      	movs	r3, #8
 8007c38:	18c3      	adds	r3, r0, r3
 8007c3a:	19db      	adds	r3, r3, r7
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	5e9b      	ldrsh	r3, [r3, r2]
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	3b01      	subs	r3, #1
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	2308      	movs	r3, #8
 8007c48:	18c3      	adds	r3, r0, r3
 8007c4a:	19db      	adds	r3, r3, r7
 8007c4c:	801a      	strh	r2, [r3, #0]
			ddF_y += 2;
 8007c4e:	2012      	movs	r0, #18
 8007c50:	2308      	movs	r3, #8
 8007c52:	18c3      	adds	r3, r0, r3
 8007c54:	19db      	adds	r3, r3, r7
 8007c56:	881b      	ldrh	r3, [r3, #0]
 8007c58:	3302      	adds	r3, #2
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	2308      	movs	r3, #8
 8007c5e:	18c3      	adds	r3, r0, r3
 8007c60:	19db      	adds	r3, r3, r7
 8007c62:	801a      	strh	r2, [r3, #0]
			f += ddF_y;
 8007c64:	2308      	movs	r3, #8
 8007c66:	18cb      	adds	r3, r1, r3
 8007c68:	19db      	adds	r3, r3, r7
 8007c6a:	881a      	ldrh	r2, [r3, #0]
 8007c6c:	2308      	movs	r3, #8
 8007c6e:	18c3      	adds	r3, r0, r3
 8007c70:	19db      	adds	r3, r3, r7
 8007c72:	881b      	ldrh	r3, [r3, #0]
 8007c74:	18d3      	adds	r3, r2, r3
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	2308      	movs	r3, #8
 8007c7a:	18cb      	adds	r3, r1, r3
 8007c7c:	19db      	adds	r3, r3, r7
 8007c7e:	801a      	strh	r2, [r3, #0]
		}
		x++;
 8007c80:	2410      	movs	r4, #16
 8007c82:	2308      	movs	r3, #8
 8007c84:	18e3      	adds	r3, r4, r3
 8007c86:	19db      	adds	r3, r3, r7
 8007c88:	2200      	movs	r2, #0
 8007c8a:	5e9b      	ldrsh	r3, [r3, r2]
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	3301      	adds	r3, #1
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	2308      	movs	r3, #8
 8007c94:	18e3      	adds	r3, r4, r3
 8007c96:	19db      	adds	r3, r3, r7
 8007c98:	801a      	strh	r2, [r3, #0]
		ddF_x += 2;
 8007c9a:	2114      	movs	r1, #20
 8007c9c:	2308      	movs	r3, #8
 8007c9e:	18cb      	adds	r3, r1, r3
 8007ca0:	19db      	adds	r3, r3, r7
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	3302      	adds	r3, #2
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	2308      	movs	r3, #8
 8007caa:	18cb      	adds	r3, r1, r3
 8007cac:	19db      	adds	r3, r3, r7
 8007cae:	801a      	strh	r2, [r3, #0]
		f += ddF_x;
 8007cb0:	2016      	movs	r0, #22
 8007cb2:	2308      	movs	r3, #8
 8007cb4:	18c3      	adds	r3, r0, r3
 8007cb6:	19db      	adds	r3, r3, r7
 8007cb8:	881a      	ldrh	r2, [r3, #0]
 8007cba:	2308      	movs	r3, #8
 8007cbc:	18cb      	adds	r3, r1, r3
 8007cbe:	19db      	adds	r3, r3, r7
 8007cc0:	881b      	ldrh	r3, [r3, #0]
 8007cc2:	18d3      	adds	r3, r2, r3
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	2308      	movs	r3, #8
 8007cc8:	18c3      	adds	r3, r0, r3
 8007cca:	19db      	adds	r3, r3, r7
 8007ccc:	801a      	strh	r2, [r3, #0]

		if (cornername & 0x1) {
 8007cce:	2309      	movs	r3, #9
 8007cd0:	18fb      	adds	r3, r7, r3
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	d063      	beq.n	8007da2 <LCD_FillCircleHelper+0x206>
			LCD_DrawFastVLine(x0 + x, y0 - y, 2 * y + 1 + delta, color);
 8007cda:	230e      	movs	r3, #14
 8007cdc:	18fb      	adds	r3, r7, r3
 8007cde:	881a      	ldrh	r2, [r3, #0]
 8007ce0:	607c      	str	r4, [r7, #4]
 8007ce2:	2308      	movs	r3, #8
 8007ce4:	18e3      	adds	r3, r4, r3
 8007ce6:	19db      	adds	r3, r3, r7
 8007ce8:	881b      	ldrh	r3, [r3, #0]
 8007cea:	18d3      	adds	r3, r2, r3
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	b218      	sxth	r0, r3
 8007cf0:	230c      	movs	r3, #12
 8007cf2:	18fb      	adds	r3, r7, r3
 8007cf4:	881a      	ldrh	r2, [r3, #0]
 8007cf6:	250e      	movs	r5, #14
 8007cf8:	2308      	movs	r3, #8
 8007cfa:	18eb      	adds	r3, r5, r3
 8007cfc:	19db      	adds	r3, r3, r7
 8007cfe:	881b      	ldrh	r3, [r3, #0]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	b219      	sxth	r1, r3
 8007d06:	2308      	movs	r3, #8
 8007d08:	18eb      	adds	r3, r5, r3
 8007d0a:	19db      	adds	r3, r3, r7
 8007d0c:	881b      	ldrh	r3, [r3, #0]
 8007d0e:	18db      	adds	r3, r3, r3
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	2628      	movs	r6, #40	; 0x28
 8007d14:	2408      	movs	r4, #8
 8007d16:	1933      	adds	r3, r6, r4
 8007d18:	603b      	str	r3, [r7, #0]
 8007d1a:	2308      	movs	r3, #8
 8007d1c:	469c      	mov	ip, r3
 8007d1e:	44bc      	add	ip, r7
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	4463      	add	r3, ip
 8007d24:	881b      	ldrh	r3, [r3, #0]
 8007d26:	18d3      	adds	r3, r2, r3
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	b21a      	sxth	r2, r3
 8007d30:	232c      	movs	r3, #44	; 0x2c
 8007d32:	191b      	adds	r3, r3, r4
 8007d34:	2408      	movs	r4, #8
 8007d36:	46a4      	mov	ip, r4
 8007d38:	44bc      	add	ip, r7
 8007d3a:	4463      	add	r3, ip
 8007d3c:	881b      	ldrh	r3, [r3, #0]
 8007d3e:	f7ff fb07 	bl	8007350 <LCD_DrawFastVLine>
			LCD_DrawFastVLine(x0 + y, y0 - x, 2 * x + 1 + delta, color);
 8007d42:	230e      	movs	r3, #14
 8007d44:	18fb      	adds	r3, r7, r3
 8007d46:	881a      	ldrh	r2, [r3, #0]
 8007d48:	2308      	movs	r3, #8
 8007d4a:	18eb      	adds	r3, r5, r3
 8007d4c:	19db      	adds	r3, r3, r7
 8007d4e:	881b      	ldrh	r3, [r3, #0]
 8007d50:	18d3      	adds	r3, r2, r3
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	b218      	sxth	r0, r3
 8007d56:	230c      	movs	r3, #12
 8007d58:	18fb      	adds	r3, r7, r3
 8007d5a:	881a      	ldrh	r2, [r3, #0]
 8007d5c:	687c      	ldr	r4, [r7, #4]
 8007d5e:	2308      	movs	r3, #8
 8007d60:	18e3      	adds	r3, r4, r3
 8007d62:	19db      	adds	r3, r3, r7
 8007d64:	881b      	ldrh	r3, [r3, #0]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	b219      	sxth	r1, r3
 8007d6c:	2308      	movs	r3, #8
 8007d6e:	18e3      	adds	r3, r4, r3
 8007d70:	19db      	adds	r3, r3, r7
 8007d72:	881b      	ldrh	r3, [r3, #0]
 8007d74:	18db      	adds	r3, r3, r3
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	2408      	movs	r4, #8
 8007d7a:	1933      	adds	r3, r6, r4
 8007d7c:	2508      	movs	r5, #8
 8007d7e:	46ac      	mov	ip, r5
 8007d80:	44bc      	add	ip, r7
 8007d82:	4463      	add	r3, ip
 8007d84:	881b      	ldrh	r3, [r3, #0]
 8007d86:	18d3      	adds	r3, r2, r3
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	b21a      	sxth	r2, r3
 8007d90:	232c      	movs	r3, #44	; 0x2c
 8007d92:	191b      	adds	r3, r3, r4
 8007d94:	2408      	movs	r4, #8
 8007d96:	46a4      	mov	ip, r4
 8007d98:	44bc      	add	ip, r7
 8007d9a:	4463      	add	r3, ip
 8007d9c:	881b      	ldrh	r3, [r3, #0]
 8007d9e:	f7ff fad7 	bl	8007350 <LCD_DrawFastVLine>
		}
		if (cornername & 0x2) {
 8007da2:	2309      	movs	r3, #9
 8007da4:	18fb      	adds	r3, r7, r3
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	2202      	movs	r2, #2
 8007daa:	4013      	ands	r3, r2
 8007dac:	d064      	beq.n	8007e78 <LCD_FillCircleHelper+0x2dc>
			LCD_DrawFastVLine(x0 - x, y0 - y, 2 * y + 1 + delta, color);
 8007dae:	230e      	movs	r3, #14
 8007db0:	18fb      	adds	r3, r7, r3
 8007db2:	881a      	ldrh	r2, [r3, #0]
 8007db4:	2410      	movs	r4, #16
 8007db6:	607c      	str	r4, [r7, #4]
 8007db8:	2308      	movs	r3, #8
 8007dba:	18e3      	adds	r3, r4, r3
 8007dbc:	19db      	adds	r3, r3, r7
 8007dbe:	881b      	ldrh	r3, [r3, #0]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	b218      	sxth	r0, r3
 8007dc6:	230c      	movs	r3, #12
 8007dc8:	18fb      	adds	r3, r7, r3
 8007dca:	881a      	ldrh	r2, [r3, #0]
 8007dcc:	250e      	movs	r5, #14
 8007dce:	2308      	movs	r3, #8
 8007dd0:	18eb      	adds	r3, r5, r3
 8007dd2:	19db      	adds	r3, r3, r7
 8007dd4:	881b      	ldrh	r3, [r3, #0]
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	b219      	sxth	r1, r3
 8007ddc:	2308      	movs	r3, #8
 8007dde:	18eb      	adds	r3, r5, r3
 8007de0:	19db      	adds	r3, r3, r7
 8007de2:	881b      	ldrh	r3, [r3, #0]
 8007de4:	18db      	adds	r3, r3, r3
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	2628      	movs	r6, #40	; 0x28
 8007dea:	2408      	movs	r4, #8
 8007dec:	1933      	adds	r3, r6, r4
 8007dee:	603b      	str	r3, [r7, #0]
 8007df0:	2308      	movs	r3, #8
 8007df2:	469c      	mov	ip, r3
 8007df4:	44bc      	add	ip, r7
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	4463      	add	r3, ip
 8007dfa:	881b      	ldrh	r3, [r3, #0]
 8007dfc:	18d3      	adds	r3, r2, r3
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	3301      	adds	r3, #1
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	b21a      	sxth	r2, r3
 8007e06:	232c      	movs	r3, #44	; 0x2c
 8007e08:	191b      	adds	r3, r3, r4
 8007e0a:	2408      	movs	r4, #8
 8007e0c:	46a4      	mov	ip, r4
 8007e0e:	44bc      	add	ip, r7
 8007e10:	4463      	add	r3, ip
 8007e12:	881b      	ldrh	r3, [r3, #0]
 8007e14:	f7ff fa9c 	bl	8007350 <LCD_DrawFastVLine>
			LCD_DrawFastVLine(x0 - y, y0 - x, 2 * x + 1 + delta, color);
 8007e18:	230e      	movs	r3, #14
 8007e1a:	18fb      	adds	r3, r7, r3
 8007e1c:	881a      	ldrh	r2, [r3, #0]
 8007e1e:	2308      	movs	r3, #8
 8007e20:	18eb      	adds	r3, r5, r3
 8007e22:	19db      	adds	r3, r3, r7
 8007e24:	881b      	ldrh	r3, [r3, #0]
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	b218      	sxth	r0, r3
 8007e2c:	230c      	movs	r3, #12
 8007e2e:	18fb      	adds	r3, r7, r3
 8007e30:	881a      	ldrh	r2, [r3, #0]
 8007e32:	687c      	ldr	r4, [r7, #4]
 8007e34:	2308      	movs	r3, #8
 8007e36:	18e3      	adds	r3, r4, r3
 8007e38:	19db      	adds	r3, r3, r7
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	b219      	sxth	r1, r3
 8007e42:	2308      	movs	r3, #8
 8007e44:	18e3      	adds	r3, r4, r3
 8007e46:	19db      	adds	r3, r3, r7
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	18db      	adds	r3, r3, r3
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	2408      	movs	r4, #8
 8007e50:	1933      	adds	r3, r6, r4
 8007e52:	2508      	movs	r5, #8
 8007e54:	46ac      	mov	ip, r5
 8007e56:	44bc      	add	ip, r7
 8007e58:	4463      	add	r3, ip
 8007e5a:	881b      	ldrh	r3, [r3, #0]
 8007e5c:	18d3      	adds	r3, r2, r3
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	3301      	adds	r3, #1
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	b21a      	sxth	r2, r3
 8007e66:	232c      	movs	r3, #44	; 0x2c
 8007e68:	191b      	adds	r3, r3, r4
 8007e6a:	2408      	movs	r4, #8
 8007e6c:	46a4      	mov	ip, r4
 8007e6e:	44bc      	add	ip, r7
 8007e70:	4463      	add	r3, ip
 8007e72:	881b      	ldrh	r3, [r3, #0]
 8007e74:	f7ff fa6c 	bl	8007350 <LCD_DrawFastVLine>
	while (x < y) {
 8007e78:	2310      	movs	r3, #16
 8007e7a:	2208      	movs	r2, #8
 8007e7c:	189b      	adds	r3, r3, r2
 8007e7e:	19da      	adds	r2, r3, r7
 8007e80:	230e      	movs	r3, #14
 8007e82:	2108      	movs	r1, #8
 8007e84:	185b      	adds	r3, r3, r1
 8007e86:	19db      	adds	r3, r3, r7
 8007e88:	2100      	movs	r1, #0
 8007e8a:	5e52      	ldrsh	r2, [r2, r1]
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	5e5b      	ldrsh	r3, [r3, r1]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	da00      	bge.n	8007e96 <LCD_FillCircleHelper+0x2fa>
 8007e94:	e6c6      	b.n	8007c24 <LCD_FillCircleHelper+0x88>
		}
	}
}
 8007e96:	46c0      	nop			; (mov r8, r8)
 8007e98:	46c0      	nop			; (mov r8, r8)
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	b009      	add	sp, #36	; 0x24
 8007e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ea0 <LCD_FillRect>:
 * \param fillcolor		Color
 * 
 * \return void
 */
void LCD_FillRect(int16_t x, int16_t y1, int16_t w, int16_t h,
		uint16_t fillcolor) {
 8007ea0:	b5b0      	push	{r4, r5, r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	0005      	movs	r5, r0
 8007ea8:	000c      	movs	r4, r1
 8007eaa:	0010      	movs	r0, r2
 8007eac:	0019      	movs	r1, r3
 8007eae:	1dbb      	adds	r3, r7, #6
 8007eb0:	1c2a      	adds	r2, r5, #0
 8007eb2:	801a      	strh	r2, [r3, #0]
 8007eb4:	1d3b      	adds	r3, r7, #4
 8007eb6:	1c22      	adds	r2, r4, #0
 8007eb8:	801a      	strh	r2, [r3, #0]
 8007eba:	1cbb      	adds	r3, r7, #2
 8007ebc:	1c02      	adds	r2, r0, #0
 8007ebe:	801a      	strh	r2, [r3, #0]
 8007ec0:	003b      	movs	r3, r7
 8007ec2:	1c0a      	adds	r2, r1, #0
 8007ec4:	801a      	strh	r2, [r3, #0]
	int16_t x2, y2;

	// Initial off-screen clipping
	if ((w <= 0) || (h <= 0) || (x >= m_width) || (y1 >= m_height)
 8007ec6:	1cbb      	adds	r3, r7, #2
 8007ec8:	2200      	movs	r2, #0
 8007eca:	5e9b      	ldrsh	r3, [r3, r2]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	dc00      	bgt.n	8007ed2 <LCD_FillRect+0x32>
 8007ed0:	e0ba      	b.n	8008048 <LCD_FillRect+0x1a8>
 8007ed2:	003b      	movs	r3, r7
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	5e9b      	ldrsh	r3, [r3, r2]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	dc00      	bgt.n	8007ede <LCD_FillRect+0x3e>
 8007edc:	e0b4      	b.n	8008048 <LCD_FillRect+0x1a8>
 8007ede:	4b5c      	ldr	r3, [pc, #368]	; (8008050 <LCD_FillRect+0x1b0>)
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	5e9b      	ldrsh	r3, [r3, r2]
 8007ee4:	1dba      	adds	r2, r7, #6
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	5e52      	ldrsh	r2, [r2, r1]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	db00      	blt.n	8007ef0 <LCD_FillRect+0x50>
 8007eee:	e0ab      	b.n	8008048 <LCD_FillRect+0x1a8>
 8007ef0:	4b58      	ldr	r3, [pc, #352]	; (8008054 <LCD_FillRect+0x1b4>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	5e9b      	ldrsh	r3, [r3, r2]
 8007ef6:	1d3a      	adds	r2, r7, #4
 8007ef8:	2100      	movs	r1, #0
 8007efa:	5e52      	ldrsh	r2, [r2, r1]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	db00      	blt.n	8007f02 <LCD_FillRect+0x62>
 8007f00:	e0a2      	b.n	8008048 <LCD_FillRect+0x1a8>
			|| ((x2 = x + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 8007f02:	1dbb      	adds	r3, r7, #6
 8007f04:	881a      	ldrh	r2, [r3, #0]
 8007f06:	1cbb      	adds	r3, r7, #2
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	18d3      	adds	r3, r2, r3
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	210e      	movs	r1, #14
 8007f14:	187b      	adds	r3, r7, r1
 8007f16:	801a      	strh	r2, [r3, #0]
 8007f18:	187b      	adds	r3, r7, r1
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	5e9b      	ldrsh	r3, [r3, r2]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	da00      	bge.n	8007f24 <LCD_FillRect+0x84>
 8007f22:	e091      	b.n	8008048 <LCD_FillRect+0x1a8>
 8007f24:	1d3b      	adds	r3, r7, #4
 8007f26:	881a      	ldrh	r2, [r3, #0]
 8007f28:	003b      	movs	r3, r7
 8007f2a:	881b      	ldrh	r3, [r3, #0]
 8007f2c:	18d3      	adds	r3, r2, r3
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	3b01      	subs	r3, #1
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	210c      	movs	r1, #12
 8007f36:	187b      	adds	r3, r7, r1
 8007f38:	801a      	strh	r2, [r3, #0]
 8007f3a:	187b      	adds	r3, r7, r1
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	5e9b      	ldrsh	r3, [r3, r2]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	da00      	bge.n	8007f46 <LCD_FillRect+0xa6>
 8007f44:	e080      	b.n	8008048 <LCD_FillRect+0x1a8>
		return;
	if (x < 0) { // Clip left
 8007f46:	1dbb      	adds	r3, r7, #6
 8007f48:	2200      	movs	r2, #0
 8007f4a:	5e9b      	ldrsh	r3, [r3, r2]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	da0a      	bge.n	8007f66 <LCD_FillRect+0xc6>
		w += x;
 8007f50:	1cbb      	adds	r3, r7, #2
 8007f52:	881a      	ldrh	r2, [r3, #0]
 8007f54:	1dbb      	adds	r3, r7, #6
 8007f56:	881b      	ldrh	r3, [r3, #0]
 8007f58:	18d3      	adds	r3, r2, r3
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	1cbb      	adds	r3, r7, #2
 8007f5e:	801a      	strh	r2, [r3, #0]
		x = 0;
 8007f60:	1dbb      	adds	r3, r7, #6
 8007f62:	2200      	movs	r2, #0
 8007f64:	801a      	strh	r2, [r3, #0]
	}
	if (y1 < 0) { // Clip top
 8007f66:	1d3b      	adds	r3, r7, #4
 8007f68:	2200      	movs	r2, #0
 8007f6a:	5e9b      	ldrsh	r3, [r3, r2]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	da0a      	bge.n	8007f86 <LCD_FillRect+0xe6>
		h += y1;
 8007f70:	003b      	movs	r3, r7
 8007f72:	881a      	ldrh	r2, [r3, #0]
 8007f74:	1d3b      	adds	r3, r7, #4
 8007f76:	881b      	ldrh	r3, [r3, #0]
 8007f78:	18d3      	adds	r3, r2, r3
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	003b      	movs	r3, r7
 8007f7e:	801a      	strh	r2, [r3, #0]
		y1 = 0;
 8007f80:	1d3b      	adds	r3, r7, #4
 8007f82:	2200      	movs	r2, #0
 8007f84:	801a      	strh	r2, [r3, #0]
	}
	if (x2 >= m_width) { // Clip right
 8007f86:	4b32      	ldr	r3, [pc, #200]	; (8008050 <LCD_FillRect+0x1b0>)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	5e9b      	ldrsh	r3, [r3, r2]
 8007f8c:	210e      	movs	r1, #14
 8007f8e:	187a      	adds	r2, r7, r1
 8007f90:	2000      	movs	r0, #0
 8007f92:	5e12      	ldrsh	r2, [r2, r0]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	db11      	blt.n	8007fbc <LCD_FillRect+0x11c>
		x2 = m_width - 1;
 8007f98:	4b2d      	ldr	r3, [pc, #180]	; (8008050 <LCD_FillRect+0x1b0>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	5e9b      	ldrsh	r3, [r3, r2]
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	187b      	adds	r3, r7, r1
 8007fa6:	801a      	strh	r2, [r3, #0]
		w = x2 - x + 1;
 8007fa8:	187b      	adds	r3, r7, r1
 8007faa:	881a      	ldrh	r2, [r3, #0]
 8007fac:	1dbb      	adds	r3, r7, #6
 8007fae:	881b      	ldrh	r3, [r3, #0]
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	1cbb      	adds	r3, r7, #2
 8007fba:	801a      	strh	r2, [r3, #0]
	}
	if (y2 >= m_height) { // Clip bottom
 8007fbc:	4b25      	ldr	r3, [pc, #148]	; (8008054 <LCD_FillRect+0x1b4>)
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	5e9b      	ldrsh	r3, [r3, r2]
 8007fc2:	210c      	movs	r1, #12
 8007fc4:	187a      	adds	r2, r7, r1
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	5e12      	ldrsh	r2, [r2, r0]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	db11      	blt.n	8007ff2 <LCD_FillRect+0x152>
		y2 = m_height - 1;
 8007fce:	4b21      	ldr	r3, [pc, #132]	; (8008054 <LCD_FillRect+0x1b4>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	5e9b      	ldrsh	r3, [r3, r2]
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	187b      	adds	r3, r7, r1
 8007fdc:	801a      	strh	r2, [r3, #0]
		h = y2 - y1 + 1;
 8007fde:	187b      	adds	r3, r7, r1
 8007fe0:	881a      	ldrh	r2, [r3, #0]
 8007fe2:	1d3b      	adds	r3, r7, #4
 8007fe4:	881b      	ldrh	r3, [r3, #0]
 8007fe6:	1ad3      	subs	r3, r2, r3
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	3301      	adds	r3, #1
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	003b      	movs	r3, r7
 8007ff0:	801a      	strh	r2, [r3, #0]
	}

	LCD_SetAddrWindow(x, y1, x2, y2);
 8007ff2:	1dbb      	adds	r3, r7, #6
 8007ff4:	2000      	movs	r0, #0
 8007ff6:	5e18      	ldrsh	r0, [r3, r0]
 8007ff8:	1d3b      	adds	r3, r7, #4
 8007ffa:	2100      	movs	r1, #0
 8007ffc:	5e59      	ldrsh	r1, [r3, r1]
 8007ffe:	230e      	movs	r3, #14
 8008000:	18fb      	adds	r3, r7, r3
 8008002:	2200      	movs	r2, #0
 8008004:	5e9a      	ldrsh	r2, [r3, r2]
 8008006:	230c      	movs	r3, #12
 8008008:	18fb      	adds	r3, r7, r3
 800800a:	2400      	movs	r4, #0
 800800c:	5f1b      	ldrsh	r3, [r3, r4]
 800800e:	f000 fbcf 	bl	80087b0 <LCD_SetAddrWindow>
	LCD_Flood(fillcolor, (uint32_t) w * (uint32_t) h);
 8008012:	1cbb      	adds	r3, r7, #2
 8008014:	2200      	movs	r2, #0
 8008016:	5e9b      	ldrsh	r3, [r3, r2]
 8008018:	003a      	movs	r2, r7
 800801a:	2100      	movs	r1, #0
 800801c:	5e52      	ldrsh	r2, [r2, r1]
 800801e:	435a      	muls	r2, r3
 8008020:	2320      	movs	r3, #32
 8008022:	18fb      	adds	r3, r7, r3
 8008024:	881b      	ldrh	r3, [r3, #0]
 8008026:	0011      	movs	r1, r2
 8008028:	0018      	movs	r0, r3
 800802a:	f000 f8ab 	bl	8008184 <LCD_Flood>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 800802e:	4b08      	ldr	r3, [pc, #32]	; (8008050 <LCD_FillRect+0x1b0>)
 8008030:	2200      	movs	r2, #0
 8008032:	5e9b      	ldrsh	r3, [r3, r2]
 8008034:	1e5a      	subs	r2, r3, #1
 8008036:	4b07      	ldr	r3, [pc, #28]	; (8008054 <LCD_FillRect+0x1b4>)
 8008038:	2100      	movs	r1, #0
 800803a:	5e5b      	ldrsh	r3, [r3, r1]
 800803c:	3b01      	subs	r3, #1
 800803e:	2100      	movs	r1, #0
 8008040:	2000      	movs	r0, #0
 8008042:	f000 fbb5 	bl	80087b0 <LCD_SetAddrWindow>
 8008046:	e000      	b.n	800804a <LCD_FillRect+0x1aa>
		return;
 8008048:	46c0      	nop			; (mov r8, r8)
}
 800804a:	46bd      	mov	sp, r7
 800804c:	b004      	add	sp, #16
 800804e:	bdb0      	pop	{r4, r5, r7, pc}
 8008050:	200008e8 	.word	0x200008e8
 8008054:	200008ea 	.word	0x200008ea

08008058 <LCD_FillRoundRect>:
 * \param fillcolor		Color
 * 
 * \return void
 */
void LCD_FillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
		uint16_t color) {
 8008058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800805a:	b085      	sub	sp, #20
 800805c:	af02      	add	r7, sp, #8
 800805e:	0005      	movs	r5, r0
 8008060:	000c      	movs	r4, r1
 8008062:	0010      	movs	r0, r2
 8008064:	0019      	movs	r1, r3
 8008066:	1dbb      	adds	r3, r7, #6
 8008068:	1c2a      	adds	r2, r5, #0
 800806a:	801a      	strh	r2, [r3, #0]
 800806c:	1d3b      	adds	r3, r7, #4
 800806e:	1c22      	adds	r2, r4, #0
 8008070:	801a      	strh	r2, [r3, #0]
 8008072:	1cbb      	adds	r3, r7, #2
 8008074:	1c02      	adds	r2, r0, #0
 8008076:	801a      	strh	r2, [r3, #0]
 8008078:	003b      	movs	r3, r7
 800807a:	1c0a      	adds	r2, r1, #0
 800807c:	801a      	strh	r2, [r3, #0]
	// smarter version
	LCD_FillRect(x + r, y, w - 2 * r, h, color);
 800807e:	1dbb      	adds	r3, r7, #6
 8008080:	881a      	ldrh	r2, [r3, #0]
 8008082:	2518      	movs	r5, #24
 8008084:	2408      	movs	r4, #8
 8008086:	192b      	adds	r3, r5, r4
 8008088:	19db      	adds	r3, r3, r7
 800808a:	881b      	ldrh	r3, [r3, #0]
 800808c:	18d3      	adds	r3, r2, r3
 800808e:	b29b      	uxth	r3, r3
 8008090:	b218      	sxth	r0, r3
 8008092:	1cbb      	adds	r3, r7, #2
 8008094:	881a      	ldrh	r2, [r3, #0]
 8008096:	1929      	adds	r1, r5, r4
 8008098:	19cb      	adds	r3, r1, r7
 800809a:	881b      	ldrh	r3, [r3, #0]
 800809c:	18db      	adds	r3, r3, r3
 800809e:	b29b      	uxth	r3, r3
 80080a0:	1ad3      	subs	r3, r2, r3
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	b21a      	sxth	r2, r3
 80080a6:	003b      	movs	r3, r7
 80080a8:	2400      	movs	r4, #0
 80080aa:	5f1c      	ldrsh	r4, [r3, r4]
 80080ac:	1d3b      	adds	r3, r7, #4
 80080ae:	2100      	movs	r1, #0
 80080b0:	5e59      	ldrsh	r1, [r3, r1]
 80080b2:	261c      	movs	r6, #28
 80080b4:	2308      	movs	r3, #8
 80080b6:	18f3      	adds	r3, r6, r3
 80080b8:	19db      	adds	r3, r3, r7
 80080ba:	881b      	ldrh	r3, [r3, #0]
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	0023      	movs	r3, r4
 80080c0:	f7ff feee 	bl	8007ea0 <LCD_FillRect>

	// draw four corners
	LCD_FillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 80080c4:	1dbb      	adds	r3, r7, #6
 80080c6:	881a      	ldrh	r2, [r3, #0]
 80080c8:	1cbb      	adds	r3, r7, #2
 80080ca:	881b      	ldrh	r3, [r3, #0]
 80080cc:	18d3      	adds	r3, r2, r3
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	2408      	movs	r4, #8
 80080d2:	192b      	adds	r3, r5, r4
 80080d4:	19db      	adds	r3, r3, r7
 80080d6:	881b      	ldrh	r3, [r3, #0]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	b29b      	uxth	r3, r3
 80080dc:	3b01      	subs	r3, #1
 80080de:	b29b      	uxth	r3, r3
 80080e0:	b218      	sxth	r0, r3
 80080e2:	1d3b      	adds	r3, r7, #4
 80080e4:	881a      	ldrh	r2, [r3, #0]
 80080e6:	192b      	adds	r3, r5, r4
 80080e8:	19db      	adds	r3, r3, r7
 80080ea:	881b      	ldrh	r3, [r3, #0]
 80080ec:	18d3      	adds	r3, r2, r3
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	b219      	sxth	r1, r3
 80080f2:	003b      	movs	r3, r7
 80080f4:	881a      	ldrh	r2, [r3, #0]
 80080f6:	192b      	adds	r3, r5, r4
 80080f8:	19db      	adds	r3, r3, r7
 80080fa:	881b      	ldrh	r3, [r3, #0]
 80080fc:	18db      	adds	r3, r3, r3
 80080fe:	b29b      	uxth	r3, r3
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	b29b      	uxth	r3, r3
 8008104:	3b01      	subs	r3, #1
 8008106:	b29b      	uxth	r3, r3
 8008108:	b21a      	sxth	r2, r3
 800810a:	192b      	adds	r3, r5, r4
 800810c:	19db      	adds	r3, r3, r7
 800810e:	2400      	movs	r4, #0
 8008110:	5f1c      	ldrsh	r4, [r3, r4]
 8008112:	2308      	movs	r3, #8
 8008114:	18f3      	adds	r3, r6, r3
 8008116:	19db      	adds	r3, r3, r7
 8008118:	881b      	ldrh	r3, [r3, #0]
 800811a:	9301      	str	r3, [sp, #4]
 800811c:	9200      	str	r2, [sp, #0]
 800811e:	2301      	movs	r3, #1
 8008120:	0022      	movs	r2, r4
 8008122:	f7ff fd3b 	bl	8007b9c <LCD_FillCircleHelper>
	LCD_FillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 8008126:	1dbb      	adds	r3, r7, #6
 8008128:	881a      	ldrh	r2, [r3, #0]
 800812a:	002c      	movs	r4, r5
 800812c:	2508      	movs	r5, #8
 800812e:	1963      	adds	r3, r4, r5
 8008130:	19db      	adds	r3, r3, r7
 8008132:	881b      	ldrh	r3, [r3, #0]
 8008134:	18d3      	adds	r3, r2, r3
 8008136:	b29b      	uxth	r3, r3
 8008138:	b218      	sxth	r0, r3
 800813a:	1d3b      	adds	r3, r7, #4
 800813c:	881a      	ldrh	r2, [r3, #0]
 800813e:	1963      	adds	r3, r4, r5
 8008140:	19db      	adds	r3, r3, r7
 8008142:	881b      	ldrh	r3, [r3, #0]
 8008144:	18d3      	adds	r3, r2, r3
 8008146:	b29b      	uxth	r3, r3
 8008148:	b219      	sxth	r1, r3
 800814a:	003b      	movs	r3, r7
 800814c:	881a      	ldrh	r2, [r3, #0]
 800814e:	1963      	adds	r3, r4, r5
 8008150:	19db      	adds	r3, r3, r7
 8008152:	881b      	ldrh	r3, [r3, #0]
 8008154:	18db      	adds	r3, r3, r3
 8008156:	b29b      	uxth	r3, r3
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	b29b      	uxth	r3, r3
 800815c:	3b01      	subs	r3, #1
 800815e:	b29b      	uxth	r3, r3
 8008160:	b21a      	sxth	r2, r3
 8008162:	1963      	adds	r3, r4, r5
 8008164:	19db      	adds	r3, r3, r7
 8008166:	2400      	movs	r4, #0
 8008168:	5f1c      	ldrsh	r4, [r3, r4]
 800816a:	1973      	adds	r3, r6, r5
 800816c:	19db      	adds	r3, r3, r7
 800816e:	881b      	ldrh	r3, [r3, #0]
 8008170:	9301      	str	r3, [sp, #4]
 8008172:	9200      	str	r2, [sp, #0]
 8008174:	2302      	movs	r3, #2
 8008176:	0022      	movs	r2, r4
 8008178:	f7ff fd10 	bl	8007b9c <LCD_FillCircleHelper>
}
 800817c:	46c0      	nop			; (mov r8, r8)
 800817e:	46bd      	mov	sp, r7
 8008180:	b003      	add	sp, #12
 8008182:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008184 <LCD_Flood>:
 * \param color	Color
 * \param len	Length
 * 
 * \return void
 */
void LCD_Flood(uint16_t color, uint32_t len) {
 8008184:	b5b0      	push	{r4, r5, r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	0002      	movs	r2, r0
 800818c:	6039      	str	r1, [r7, #0]
 800818e:	1dbb      	adds	r3, r7, #6
 8008190:	801a      	strh	r2, [r3, #0]
	uint16_t blocks;
	uint8_t i, hi = color >> 8, lo = color;
 8008192:	1dbb      	adds	r3, r7, #6
 8008194:	881b      	ldrh	r3, [r3, #0]
 8008196:	0a1b      	lsrs	r3, r3, #8
 8008198:	b29a      	uxth	r2, r3
 800819a:	240c      	movs	r4, #12
 800819c:	193b      	adds	r3, r7, r4
 800819e:	701a      	strb	r2, [r3, #0]
 80081a0:	250b      	movs	r5, #11
 80081a2:	197b      	adds	r3, r7, r5
 80081a4:	1dba      	adds	r2, r7, #6
 80081a6:	8812      	ldrh	r2, [r2, #0]
 80081a8:	701a      	strb	r2, [r3, #0]

	LCD_CS_LOW();
 80081aa:	4bc5      	ldr	r3, [pc, #788]	; (80084c0 <LCD_Flood+0x33c>)
 80081ac:	2200      	movs	r2, #0
 80081ae:	2100      	movs	r1, #0
 80081b0:	0018      	movs	r0, r3
 80081b2:	f7fd fbbd 	bl	8005930 <gpio_write>
	LCD_CD_LOW();
 80081b6:	2390      	movs	r3, #144	; 0x90
 80081b8:	05db      	lsls	r3, r3, #23
 80081ba:	2200      	movs	r2, #0
 80081bc:	2104      	movs	r1, #4
 80081be:	0018      	movs	r0, r3
 80081c0:	f7fd fbb6 	bl	8005930 <gpio_write>
	LCD_Write8(0x00); // High byte of GRAM register...
 80081c4:	2000      	movs	r0, #0
 80081c6:	f000 fc85 	bl	8008ad4 <LCD_Write8>
	LCD_Write8(0x22); // Write data to GRAM
 80081ca:	2022      	movs	r0, #34	; 0x22
 80081cc:	f000 fc82 	bl	8008ad4 <LCD_Write8>

	// Write first pixel normally, decrement counter by 1
	LCD_CD_HIGH();
 80081d0:	2390      	movs	r3, #144	; 0x90
 80081d2:	05db      	lsls	r3, r3, #23
 80081d4:	2201      	movs	r2, #1
 80081d6:	2104      	movs	r1, #4
 80081d8:	0018      	movs	r0, r3
 80081da:	f7fd fba9 	bl	8005930 <gpio_write>
	LCD_Write8(hi);
 80081de:	193b      	adds	r3, r7, r4
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	0018      	movs	r0, r3
 80081e4:	f000 fc76 	bl	8008ad4 <LCD_Write8>
	LCD_Write8(lo);
 80081e8:	197b      	adds	r3, r7, r5
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	0018      	movs	r0, r3
 80081ee:	f000 fc71 	bl	8008ad4 <LCD_Write8>
	len--;
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	3b01      	subs	r3, #1
 80081f6:	603b      	str	r3, [r7, #0]

	blocks = (uint16_t) (len / 64); // 64 pixels/block
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	099a      	lsrs	r2, r3, #6
 80081fc:	230e      	movs	r3, #14
 80081fe:	18fb      	adds	r3, r7, r3
 8008200:	801a      	strh	r2, [r3, #0]
	if (hi == lo) {
 8008202:	193a      	adds	r2, r7, r4
 8008204:	197b      	adds	r3, r7, r5
 8008206:	7812      	ldrb	r2, [r2, #0]
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	429a      	cmp	r2, r3
 800820c:	d000      	beq.n	8008210 <LCD_Flood+0x8c>
 800820e:	e129      	b.n	8008464 <LCD_Flood+0x2e0>
		// High and low bytes are identical.  Leave prior data
		// on the port(s) and just toggle the write strobe.
		while (blocks--) {
 8008210:	e0ae      	b.n	8008370 <LCD_Flood+0x1ec>
			i = 16; // 64 pixels/block / 4 pixels/pass
 8008212:	230d      	movs	r3, #13
 8008214:	18fb      	adds	r3, r7, r3
 8008216:	2210      	movs	r2, #16
 8008218:	701a      	strb	r2, [r3, #0]
			do {
				LCD_WR_STROBE();
 800821a:	2390      	movs	r3, #144	; 0x90
 800821c:	05db      	lsls	r3, r3, #23
 800821e:	2200      	movs	r2, #0
 8008220:	2101      	movs	r1, #1
 8008222:	0018      	movs	r0, r3
 8008224:	f7fd fb84 	bl	8005930 <gpio_write>
 8008228:	2001      	movs	r0, #1
 800822a:	f7fe fc62 	bl	8006af2 <delay>
 800822e:	2390      	movs	r3, #144	; 0x90
 8008230:	05db      	lsls	r3, r3, #23
 8008232:	2201      	movs	r2, #1
 8008234:	2101      	movs	r1, #1
 8008236:	0018      	movs	r0, r3
 8008238:	f7fd fb7a 	bl	8005930 <gpio_write>
 800823c:	2001      	movs	r0, #1
 800823e:	f7fe fc58 	bl	8006af2 <delay>
				LCD_WR_STROBE();
 8008242:	2390      	movs	r3, #144	; 0x90
 8008244:	05db      	lsls	r3, r3, #23
 8008246:	2200      	movs	r2, #0
 8008248:	2101      	movs	r1, #1
 800824a:	0018      	movs	r0, r3
 800824c:	f7fd fb70 	bl	8005930 <gpio_write>
 8008250:	2001      	movs	r0, #1
 8008252:	f7fe fc4e 	bl	8006af2 <delay>
 8008256:	2390      	movs	r3, #144	; 0x90
 8008258:	05db      	lsls	r3, r3, #23
 800825a:	2201      	movs	r2, #1
 800825c:	2101      	movs	r1, #1
 800825e:	0018      	movs	r0, r3
 8008260:	f7fd fb66 	bl	8005930 <gpio_write>
 8008264:	2001      	movs	r0, #1
 8008266:	f7fe fc44 	bl	8006af2 <delay>
				LCD_WR_STROBE();
 800826a:	2390      	movs	r3, #144	; 0x90
 800826c:	05db      	lsls	r3, r3, #23
 800826e:	2200      	movs	r2, #0
 8008270:	2101      	movs	r1, #1
 8008272:	0018      	movs	r0, r3
 8008274:	f7fd fb5c 	bl	8005930 <gpio_write>
 8008278:	2001      	movs	r0, #1
 800827a:	f7fe fc3a 	bl	8006af2 <delay>
 800827e:	2390      	movs	r3, #144	; 0x90
 8008280:	05db      	lsls	r3, r3, #23
 8008282:	2201      	movs	r2, #1
 8008284:	2101      	movs	r1, #1
 8008286:	0018      	movs	r0, r3
 8008288:	f7fd fb52 	bl	8005930 <gpio_write>
 800828c:	2001      	movs	r0, #1
 800828e:	f7fe fc30 	bl	8006af2 <delay>
				LCD_WR_STROBE(); // 2 bytes/pixel
 8008292:	2390      	movs	r3, #144	; 0x90
 8008294:	05db      	lsls	r3, r3, #23
 8008296:	2200      	movs	r2, #0
 8008298:	2101      	movs	r1, #1
 800829a:	0018      	movs	r0, r3
 800829c:	f7fd fb48 	bl	8005930 <gpio_write>
 80082a0:	2001      	movs	r0, #1
 80082a2:	f7fe fc26 	bl	8006af2 <delay>
 80082a6:	2390      	movs	r3, #144	; 0x90
 80082a8:	05db      	lsls	r3, r3, #23
 80082aa:	2201      	movs	r2, #1
 80082ac:	2101      	movs	r1, #1
 80082ae:	0018      	movs	r0, r3
 80082b0:	f7fd fb3e 	bl	8005930 <gpio_write>
 80082b4:	2001      	movs	r0, #1
 80082b6:	f7fe fc1c 	bl	8006af2 <delay>
				LCD_WR_STROBE();
 80082ba:	2390      	movs	r3, #144	; 0x90
 80082bc:	05db      	lsls	r3, r3, #23
 80082be:	2200      	movs	r2, #0
 80082c0:	2101      	movs	r1, #1
 80082c2:	0018      	movs	r0, r3
 80082c4:	f7fd fb34 	bl	8005930 <gpio_write>
 80082c8:	2001      	movs	r0, #1
 80082ca:	f7fe fc12 	bl	8006af2 <delay>
 80082ce:	2390      	movs	r3, #144	; 0x90
 80082d0:	05db      	lsls	r3, r3, #23
 80082d2:	2201      	movs	r2, #1
 80082d4:	2101      	movs	r1, #1
 80082d6:	0018      	movs	r0, r3
 80082d8:	f7fd fb2a 	bl	8005930 <gpio_write>
 80082dc:	2001      	movs	r0, #1
 80082de:	f7fe fc08 	bl	8006af2 <delay>
				LCD_WR_STROBE();
 80082e2:	2390      	movs	r3, #144	; 0x90
 80082e4:	05db      	lsls	r3, r3, #23
 80082e6:	2200      	movs	r2, #0
 80082e8:	2101      	movs	r1, #1
 80082ea:	0018      	movs	r0, r3
 80082ec:	f7fd fb20 	bl	8005930 <gpio_write>
 80082f0:	2001      	movs	r0, #1
 80082f2:	f7fe fbfe 	bl	8006af2 <delay>
 80082f6:	2390      	movs	r3, #144	; 0x90
 80082f8:	05db      	lsls	r3, r3, #23
 80082fa:	2201      	movs	r2, #1
 80082fc:	2101      	movs	r1, #1
 80082fe:	0018      	movs	r0, r3
 8008300:	f7fd fb16 	bl	8005930 <gpio_write>
 8008304:	2001      	movs	r0, #1
 8008306:	f7fe fbf4 	bl	8006af2 <delay>
				LCD_WR_STROBE();
 800830a:	2390      	movs	r3, #144	; 0x90
 800830c:	05db      	lsls	r3, r3, #23
 800830e:	2200      	movs	r2, #0
 8008310:	2101      	movs	r1, #1
 8008312:	0018      	movs	r0, r3
 8008314:	f7fd fb0c 	bl	8005930 <gpio_write>
 8008318:	2001      	movs	r0, #1
 800831a:	f7fe fbea 	bl	8006af2 <delay>
 800831e:	2390      	movs	r3, #144	; 0x90
 8008320:	05db      	lsls	r3, r3, #23
 8008322:	2201      	movs	r2, #1
 8008324:	2101      	movs	r1, #1
 8008326:	0018      	movs	r0, r3
 8008328:	f7fd fb02 	bl	8005930 <gpio_write>
 800832c:	2001      	movs	r0, #1
 800832e:	f7fe fbe0 	bl	8006af2 <delay>
				LCD_WR_STROBE(); // x 4 pixels
 8008332:	2390      	movs	r3, #144	; 0x90
 8008334:	05db      	lsls	r3, r3, #23
 8008336:	2200      	movs	r2, #0
 8008338:	2101      	movs	r1, #1
 800833a:	0018      	movs	r0, r3
 800833c:	f7fd faf8 	bl	8005930 <gpio_write>
 8008340:	2001      	movs	r0, #1
 8008342:	f7fe fbd6 	bl	8006af2 <delay>
 8008346:	2390      	movs	r3, #144	; 0x90
 8008348:	05db      	lsls	r3, r3, #23
 800834a:	2201      	movs	r2, #1
 800834c:	2101      	movs	r1, #1
 800834e:	0018      	movs	r0, r3
 8008350:	f7fd faee 	bl	8005930 <gpio_write>
 8008354:	2001      	movs	r0, #1
 8008356:	f7fe fbcc 	bl	8006af2 <delay>
			} while (--i);
 800835a:	210d      	movs	r1, #13
 800835c:	187b      	adds	r3, r7, r1
 800835e:	187a      	adds	r2, r7, r1
 8008360:	7812      	ldrb	r2, [r2, #0]
 8008362:	3a01      	subs	r2, #1
 8008364:	701a      	strb	r2, [r3, #0]
 8008366:	187b      	adds	r3, r7, r1
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d000      	beq.n	8008370 <LCD_Flood+0x1ec>
 800836e:	e754      	b.n	800821a <LCD_Flood+0x96>
		while (blocks--) {
 8008370:	220e      	movs	r2, #14
 8008372:	18bb      	adds	r3, r7, r2
 8008374:	881b      	ldrh	r3, [r3, #0]
 8008376:	18ba      	adds	r2, r7, r2
 8008378:	1e59      	subs	r1, r3, #1
 800837a:	8011      	strh	r1, [r2, #0]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d000      	beq.n	8008382 <LCD_Flood+0x1fe>
 8008380:	e747      	b.n	8008212 <LCD_Flood+0x8e>
		}
		// Fill any remaining pixels (1 to 64)
		for (i = (uint8_t) len & 63; i--;) {
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	b2da      	uxtb	r2, r3
 8008386:	230d      	movs	r3, #13
 8008388:	18fb      	adds	r3, r7, r3
 800838a:	213f      	movs	r1, #63	; 0x3f
 800838c:	400a      	ands	r2, r1
 800838e:	701a      	strb	r2, [r3, #0]
 8008390:	e027      	b.n	80083e2 <LCD_Flood+0x25e>
			LCD_WR_STROBE();
 8008392:	2390      	movs	r3, #144	; 0x90
 8008394:	05db      	lsls	r3, r3, #23
 8008396:	2200      	movs	r2, #0
 8008398:	2101      	movs	r1, #1
 800839a:	0018      	movs	r0, r3
 800839c:	f7fd fac8 	bl	8005930 <gpio_write>
 80083a0:	2001      	movs	r0, #1
 80083a2:	f7fe fba6 	bl	8006af2 <delay>
 80083a6:	2390      	movs	r3, #144	; 0x90
 80083a8:	05db      	lsls	r3, r3, #23
 80083aa:	2201      	movs	r2, #1
 80083ac:	2101      	movs	r1, #1
 80083ae:	0018      	movs	r0, r3
 80083b0:	f7fd fabe 	bl	8005930 <gpio_write>
 80083b4:	2001      	movs	r0, #1
 80083b6:	f7fe fb9c 	bl	8006af2 <delay>
			LCD_WR_STROBE();
 80083ba:	2390      	movs	r3, #144	; 0x90
 80083bc:	05db      	lsls	r3, r3, #23
 80083be:	2200      	movs	r2, #0
 80083c0:	2101      	movs	r1, #1
 80083c2:	0018      	movs	r0, r3
 80083c4:	f7fd fab4 	bl	8005930 <gpio_write>
 80083c8:	2001      	movs	r0, #1
 80083ca:	f7fe fb92 	bl	8006af2 <delay>
 80083ce:	2390      	movs	r3, #144	; 0x90
 80083d0:	05db      	lsls	r3, r3, #23
 80083d2:	2201      	movs	r2, #1
 80083d4:	2101      	movs	r1, #1
 80083d6:	0018      	movs	r0, r3
 80083d8:	f7fd faaa 	bl	8005930 <gpio_write>
 80083dc:	2001      	movs	r0, #1
 80083de:	f7fe fb88 	bl	8006af2 <delay>
		for (i = (uint8_t) len & 63; i--;) {
 80083e2:	220d      	movs	r2, #13
 80083e4:	18bb      	adds	r3, r7, r2
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	18ba      	adds	r2, r7, r2
 80083ea:	1e59      	subs	r1, r3, #1
 80083ec:	7011      	strb	r1, [r2, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1cf      	bne.n	8008392 <LCD_Flood+0x20e>
 80083f2:	e05b      	b.n	80084ac <LCD_Flood+0x328>
		}
	} else {
		while (blocks--) {
			i = 16; // 64 pixels/block / 4 pixels/pass
 80083f4:	230d      	movs	r3, #13
 80083f6:	18fb      	adds	r3, r7, r3
 80083f8:	2210      	movs	r2, #16
 80083fa:	701a      	strb	r2, [r3, #0]
			do {
				LCD_Write8(hi);
 80083fc:	240c      	movs	r4, #12
 80083fe:	193b      	adds	r3, r7, r4
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	0018      	movs	r0, r3
 8008404:	f000 fb66 	bl	8008ad4 <LCD_Write8>
				LCD_Write8(lo);
 8008408:	250b      	movs	r5, #11
 800840a:	197b      	adds	r3, r7, r5
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	0018      	movs	r0, r3
 8008410:	f000 fb60 	bl	8008ad4 <LCD_Write8>
				LCD_Write8(hi);
 8008414:	193b      	adds	r3, r7, r4
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	0018      	movs	r0, r3
 800841a:	f000 fb5b 	bl	8008ad4 <LCD_Write8>
				LCD_Write8(lo);
 800841e:	197b      	adds	r3, r7, r5
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	0018      	movs	r0, r3
 8008424:	f000 fb56 	bl	8008ad4 <LCD_Write8>
				LCD_Write8(hi);
 8008428:	193b      	adds	r3, r7, r4
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	0018      	movs	r0, r3
 800842e:	f000 fb51 	bl	8008ad4 <LCD_Write8>
				LCD_Write8(lo);
 8008432:	197b      	adds	r3, r7, r5
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	0018      	movs	r0, r3
 8008438:	f000 fb4c 	bl	8008ad4 <LCD_Write8>
				LCD_Write8(hi);
 800843c:	193b      	adds	r3, r7, r4
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	0018      	movs	r0, r3
 8008442:	f000 fb47 	bl	8008ad4 <LCD_Write8>
				LCD_Write8(lo);
 8008446:	197b      	adds	r3, r7, r5
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	0018      	movs	r0, r3
 800844c:	f000 fb42 	bl	8008ad4 <LCD_Write8>
			} while (--i);
 8008450:	210d      	movs	r1, #13
 8008452:	187b      	adds	r3, r7, r1
 8008454:	187a      	adds	r2, r7, r1
 8008456:	7812      	ldrb	r2, [r2, #0]
 8008458:	3a01      	subs	r2, #1
 800845a:	701a      	strb	r2, [r3, #0]
 800845c:	187b      	adds	r3, r7, r1
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1cb      	bne.n	80083fc <LCD_Flood+0x278>
		while (blocks--) {
 8008464:	220e      	movs	r2, #14
 8008466:	18bb      	adds	r3, r7, r2
 8008468:	881b      	ldrh	r3, [r3, #0]
 800846a:	18ba      	adds	r2, r7, r2
 800846c:	1e59      	subs	r1, r3, #1
 800846e:	8011      	strh	r1, [r2, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1bf      	bne.n	80083f4 <LCD_Flood+0x270>
		}
		for (i = (uint8_t) len & 63; i--;) {
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	b2da      	uxtb	r2, r3
 8008478:	230d      	movs	r3, #13
 800847a:	18fb      	adds	r3, r7, r3
 800847c:	213f      	movs	r1, #63	; 0x3f
 800847e:	400a      	ands	r2, r1
 8008480:	701a      	strb	r2, [r3, #0]
 8008482:	e00b      	b.n	800849c <LCD_Flood+0x318>
			LCD_Write8(hi);
 8008484:	230c      	movs	r3, #12
 8008486:	18fb      	adds	r3, r7, r3
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	0018      	movs	r0, r3
 800848c:	f000 fb22 	bl	8008ad4 <LCD_Write8>
			LCD_Write8(lo);
 8008490:	230b      	movs	r3, #11
 8008492:	18fb      	adds	r3, r7, r3
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	0018      	movs	r0, r3
 8008498:	f000 fb1c 	bl	8008ad4 <LCD_Write8>
		for (i = (uint8_t) len & 63; i--;) {
 800849c:	220d      	movs	r2, #13
 800849e:	18bb      	adds	r3, r7, r2
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	18ba      	adds	r2, r7, r2
 80084a4:	1e59      	subs	r1, r3, #1
 80084a6:	7011      	strb	r1, [r2, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1eb      	bne.n	8008484 <LCD_Flood+0x300>
		}
	}
	LCD_CS_HIGH();
 80084ac:	4b04      	ldr	r3, [pc, #16]	; (80084c0 <LCD_Flood+0x33c>)
 80084ae:	2201      	movs	r2, #1
 80084b0:	2100      	movs	r1, #0
 80084b2:	0018      	movs	r0, r3
 80084b4:	f7fd fa3c 	bl	8005930 <gpio_write>
}
 80084b8:	46c0      	nop			; (mov r8, r8)
 80084ba:	46bd      	mov	sp, r7
 80084bc:	b004      	add	sp, #16
 80084be:	bdb0      	pop	{r4, r5, r7, pc}
 80084c0:	48000400 	.word	0x48000400

080084c4 <LCD_Printf>:
 * \param fmt	Format text
 * \param 
 * 
 * \return void
 */
void LCD_Printf(const char *fmt, ...) {
 80084c4:	b40f      	push	{r0, r1, r2, r3}
 80084c6:	b5b0      	push	{r4, r5, r7, lr}
 80084c8:	b084      	sub	sp, #16
 80084ca:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 80084cc:	231c      	movs	r3, #28
 80084ce:	18fb      	adds	r3, r7, r3
 80084d0:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	69b9      	ldr	r1, [r7, #24]
 80084d6:	4b3e      	ldr	r3, [pc, #248]	; (80085d0 <LCD_Printf+0x10c>)
 80084d8:	0018      	movs	r0, r3
 80084da:	f003 ff0d 	bl	800c2f8 <vsiprintf>
	va_end(lst);

	p = buf;
 80084de:	4b3c      	ldr	r3, [pc, #240]	; (80085d0 <LCD_Printf+0x10c>)
 80084e0:	607b      	str	r3, [r7, #4]
	while (*p) {
 80084e2:	e069      	b.n	80085b8 <LCD_Printf+0xf4>
		if (*p == '\n') {
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	2b0a      	cmp	r3, #10
 80084ea:	d111      	bne.n	8008510 <LCD_Printf+0x4c>
			m_cursor_y += m_textsize * 8;
 80084ec:	4b39      	ldr	r3, [pc, #228]	; (80085d4 <LCD_Printf+0x110>)
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	00db      	lsls	r3, r3, #3
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	4b38      	ldr	r3, [pc, #224]	; (80085d8 <LCD_Printf+0x114>)
 80084f8:	2100      	movs	r1, #0
 80084fa:	5e5b      	ldrsh	r3, [r3, r1]
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	18d3      	adds	r3, r2, r3
 8008500:	b29b      	uxth	r3, r3
 8008502:	b21a      	sxth	r2, r3
 8008504:	4b34      	ldr	r3, [pc, #208]	; (80085d8 <LCD_Printf+0x114>)
 8008506:	801a      	strh	r2, [r3, #0]
			m_cursor_x = 0;
 8008508:	4b34      	ldr	r3, [pc, #208]	; (80085dc <LCD_Printf+0x118>)
 800850a:	2200      	movs	r2, #0
 800850c:	801a      	strh	r2, [r3, #0]
 800850e:	e050      	b.n	80085b2 <LCD_Printf+0xee>
		} else if (*p == '\r') {
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	2b0d      	cmp	r3, #13
 8008516:	d04c      	beq.n	80085b2 <LCD_Printf+0xee>
			// skip em
		} else {
			LCD_DrawChar(m_cursor_x, m_cursor_y, *p, m_textcolor, m_textbgcolor,
 8008518:	4b30      	ldr	r3, [pc, #192]	; (80085dc <LCD_Printf+0x118>)
 800851a:	2000      	movs	r0, #0
 800851c:	5e18      	ldrsh	r0, [r3, r0]
 800851e:	4b2e      	ldr	r3, [pc, #184]	; (80085d8 <LCD_Printf+0x114>)
 8008520:	2100      	movs	r1, #0
 8008522:	5e59      	ldrsh	r1, [r3, r1]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	781c      	ldrb	r4, [r3, #0]
 8008528:	4b2d      	ldr	r3, [pc, #180]	; (80085e0 <LCD_Printf+0x11c>)
 800852a:	881d      	ldrh	r5, [r3, #0]
 800852c:	4b2d      	ldr	r3, [pc, #180]	; (80085e4 <LCD_Printf+0x120>)
 800852e:	881b      	ldrh	r3, [r3, #0]
 8008530:	4a28      	ldr	r2, [pc, #160]	; (80085d4 <LCD_Printf+0x110>)
 8008532:	7812      	ldrb	r2, [r2, #0]
 8008534:	9201      	str	r2, [sp, #4]
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	002b      	movs	r3, r5
 800853a:	0022      	movs	r2, r4
 800853c:	f7ff f9f6 	bl	800792c <LCD_DrawChar>
					m_textsize);
			m_cursor_x += m_textsize * 6;
 8008540:	4b24      	ldr	r3, [pc, #144]	; (80085d4 <LCD_Printf+0x110>)
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	b29b      	uxth	r3, r3
 8008546:	1c1a      	adds	r2, r3, #0
 8008548:	1c13      	adds	r3, r2, #0
 800854a:	18db      	adds	r3, r3, r3
 800854c:	189b      	adds	r3, r3, r2
 800854e:	18db      	adds	r3, r3, r3
 8008550:	b29a      	uxth	r2, r3
 8008552:	4b22      	ldr	r3, [pc, #136]	; (80085dc <LCD_Printf+0x118>)
 8008554:	2100      	movs	r1, #0
 8008556:	5e5b      	ldrsh	r3, [r3, r1]
 8008558:	b29b      	uxth	r3, r3
 800855a:	18d3      	adds	r3, r2, r3
 800855c:	b29b      	uxth	r3, r3
 800855e:	b21a      	sxth	r2, r3
 8008560:	4b1e      	ldr	r3, [pc, #120]	; (80085dc <LCD_Printf+0x118>)
 8008562:	801a      	strh	r2, [r3, #0]
			if (m_wrap && (m_cursor_x > (m_width - m_textsize * 6))) {
 8008564:	4b20      	ldr	r3, [pc, #128]	; (80085e8 <LCD_Printf+0x124>)
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d022      	beq.n	80085b2 <LCD_Printf+0xee>
 800856c:	4b1b      	ldr	r3, [pc, #108]	; (80085dc <LCD_Printf+0x118>)
 800856e:	2200      	movs	r2, #0
 8008570:	5e9b      	ldrsh	r3, [r3, r2]
 8008572:	0019      	movs	r1, r3
 8008574:	4b1d      	ldr	r3, [pc, #116]	; (80085ec <LCD_Printf+0x128>)
 8008576:	2200      	movs	r2, #0
 8008578:	5e9b      	ldrsh	r3, [r3, r2]
 800857a:	0018      	movs	r0, r3
 800857c:	4b15      	ldr	r3, [pc, #84]	; (80085d4 <LCD_Printf+0x110>)
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	001a      	movs	r2, r3
 8008582:	0013      	movs	r3, r2
 8008584:	0092      	lsls	r2, r2, #2
 8008586:	1a9b      	subs	r3, r3, r2
 8008588:	005b      	lsls	r3, r3, #1
 800858a:	18c3      	adds	r3, r0, r3
 800858c:	4299      	cmp	r1, r3
 800858e:	dd10      	ble.n	80085b2 <LCD_Printf+0xee>
				m_cursor_y += m_textsize * 8;
 8008590:	4b10      	ldr	r3, [pc, #64]	; (80085d4 <LCD_Printf+0x110>)
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	b29b      	uxth	r3, r3
 8008596:	00db      	lsls	r3, r3, #3
 8008598:	b29a      	uxth	r2, r3
 800859a:	4b0f      	ldr	r3, [pc, #60]	; (80085d8 <LCD_Printf+0x114>)
 800859c:	2100      	movs	r1, #0
 800859e:	5e5b      	ldrsh	r3, [r3, r1]
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	18d3      	adds	r3, r2, r3
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	b21a      	sxth	r2, r3
 80085a8:	4b0b      	ldr	r3, [pc, #44]	; (80085d8 <LCD_Printf+0x114>)
 80085aa:	801a      	strh	r2, [r3, #0]
				m_cursor_x = 0;
 80085ac:	4b0b      	ldr	r3, [pc, #44]	; (80085dc <LCD_Printf+0x118>)
 80085ae:	2200      	movs	r2, #0
 80085b0:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	3301      	adds	r3, #1
 80085b6:	607b      	str	r3, [r7, #4]
	while (*p) {
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d191      	bne.n	80084e4 <LCD_Printf+0x20>
	}
}
 80085c0:	46c0      	nop			; (mov r8, r8)
 80085c2:	46c0      	nop			; (mov r8, r8)
 80085c4:	46bd      	mov	sp, r7
 80085c6:	b002      	add	sp, #8
 80085c8:	bcb0      	pop	{r4, r5, r7}
 80085ca:	bc08      	pop	{r3}
 80085cc:	b004      	add	sp, #16
 80085ce:	4718      	bx	r3
 80085d0:	200008f8 	.word	0x200008f8
 80085d4:	200008f4 	.word	0x200008f4
 80085d8:	200008ee 	.word	0x200008ee
 80085dc:	200008ec 	.word	0x200008ec
 80085e0:	200008f0 	.word	0x200008f0
 80085e4:	200008f2 	.word	0x200008f2
 80085e8:	200008f6 	.word	0x200008f6
 80085ec:	200008e8 	.word	0x200008e8

080085f0 <LCD_Reset>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Reset(void) {
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
	LCD_CS_HIGH();
 80085f6:	4b2f      	ldr	r3, [pc, #188]	; (80086b4 <LCD_Reset+0xc4>)
 80085f8:	2201      	movs	r2, #1
 80085fa:	2100      	movs	r1, #0
 80085fc:	0018      	movs	r0, r3
 80085fe:	f7fd f997 	bl	8005930 <gpio_write>
	LCD_WR_HIGH();
 8008602:	2390      	movs	r3, #144	; 0x90
 8008604:	05db      	lsls	r3, r3, #23
 8008606:	2201      	movs	r2, #1
 8008608:	2101      	movs	r1, #1
 800860a:	0018      	movs	r0, r3
 800860c:	f7fd f990 	bl	8005930 <gpio_write>
	LCD_RD_HIGH();
 8008610:	2390      	movs	r3, #144	; 0x90
 8008612:	05db      	lsls	r3, r3, #23
 8008614:	2201      	movs	r2, #1
 8008616:	2100      	movs	r1, #0
 8008618:	0018      	movs	r0, r3
 800861a:	f7fd f989 	bl	8005930 <gpio_write>

	LCD_RST_LOW();
 800861e:	4b26      	ldr	r3, [pc, #152]	; (80086b8 <LCD_Reset+0xc8>)
 8008620:	2200      	movs	r2, #0
 8008622:	2101      	movs	r1, #1
 8008624:	0018      	movs	r0, r3
 8008626:	f7fd f983 	bl	8005930 <gpio_write>
	delay(100);
 800862a:	2064      	movs	r0, #100	; 0x64
 800862c:	f7fe fa61 	bl	8006af2 <delay>
	LCD_RST_HIGH();
 8008630:	4b21      	ldr	r3, [pc, #132]	; (80086b8 <LCD_Reset+0xc8>)
 8008632:	2201      	movs	r2, #1
 8008634:	2101      	movs	r1, #1
 8008636:	0018      	movs	r0, r3
 8008638:	f7fd f97a 	bl	8005930 <gpio_write>

	// Data transfer sync
	LCD_CS_LOW();
 800863c:	4b1d      	ldr	r3, [pc, #116]	; (80086b4 <LCD_Reset+0xc4>)
 800863e:	2200      	movs	r2, #0
 8008640:	2100      	movs	r1, #0
 8008642:	0018      	movs	r0, r3
 8008644:	f7fd f974 	bl	8005930 <gpio_write>

	LCD_CD_LOW();
 8008648:	2390      	movs	r3, #144	; 0x90
 800864a:	05db      	lsls	r3, r3, #23
 800864c:	2200      	movs	r2, #0
 800864e:	2104      	movs	r1, #4
 8008650:	0018      	movs	r0, r3
 8008652:	f7fd f96d 	bl	8005930 <gpio_write>
	LCD_Write8(0x00);
 8008656:	2000      	movs	r0, #0
 8008658:	f000 fa3c 	bl	8008ad4 <LCD_Write8>
	for (uint8_t i = 0; i < 3; i++)
 800865c:	1dfb      	adds	r3, r7, #7
 800865e:	2200      	movs	r2, #0
 8008660:	701a      	strb	r2, [r3, #0]
 8008662:	e018      	b.n	8008696 <LCD_Reset+0xa6>
		LCD_WR_STROBE(); // Three extra 0x00s
 8008664:	2390      	movs	r3, #144	; 0x90
 8008666:	05db      	lsls	r3, r3, #23
 8008668:	2200      	movs	r2, #0
 800866a:	2101      	movs	r1, #1
 800866c:	0018      	movs	r0, r3
 800866e:	f7fd f95f 	bl	8005930 <gpio_write>
 8008672:	2001      	movs	r0, #1
 8008674:	f7fe fa3d 	bl	8006af2 <delay>
 8008678:	2390      	movs	r3, #144	; 0x90
 800867a:	05db      	lsls	r3, r3, #23
 800867c:	2201      	movs	r2, #1
 800867e:	2101      	movs	r1, #1
 8008680:	0018      	movs	r0, r3
 8008682:	f7fd f955 	bl	8005930 <gpio_write>
 8008686:	2001      	movs	r0, #1
 8008688:	f7fe fa33 	bl	8006af2 <delay>
	for (uint8_t i = 0; i < 3; i++)
 800868c:	1dfb      	adds	r3, r7, #7
 800868e:	781a      	ldrb	r2, [r3, #0]
 8008690:	1dfb      	adds	r3, r7, #7
 8008692:	3201      	adds	r2, #1
 8008694:	701a      	strb	r2, [r3, #0]
 8008696:	1dfb      	adds	r3, r7, #7
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	2b02      	cmp	r3, #2
 800869c:	d9e2      	bls.n	8008664 <LCD_Reset+0x74>
	LCD_CS_HIGH();
 800869e:	4b05      	ldr	r3, [pc, #20]	; (80086b4 <LCD_Reset+0xc4>)
 80086a0:	2201      	movs	r2, #1
 80086a2:	2100      	movs	r1, #0
 80086a4:	0018      	movs	r0, r3
 80086a6:	f7fd f943 	bl	8005930 <gpio_write>
}
 80086aa:	46c0      	nop			; (mov r8, r8)
 80086ac:	46bd      	mov	sp, r7
 80086ae:	b002      	add	sp, #8
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	46c0      	nop			; (mov r8, r8)
 80086b4:	48000400 	.word	0x48000400
 80086b8:	48000800 	.word	0x48000800

080086bc <LCD_SetCursor>:
 * \param x		The x-coordinate
 * \param y		The y-coordinate
 * 
 * \return void
 */
void LCD_SetCursor(unsigned int x, unsigned int y) {
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
	m_cursor_x = x;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	b21a      	sxth	r2, r3
 80086ca:	4b05      	ldr	r3, [pc, #20]	; (80086e0 <LCD_SetCursor+0x24>)
 80086cc:	801a      	strh	r2, [r3, #0]
	m_cursor_y = y;
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	b21a      	sxth	r2, r3
 80086d2:	4b04      	ldr	r3, [pc, #16]	; (80086e4 <LCD_SetCursor+0x28>)
 80086d4:	801a      	strh	r2, [r3, #0]
}
 80086d6:	46c0      	nop			; (mov r8, r8)
 80086d8:	46bd      	mov	sp, r7
 80086da:	b002      	add	sp, #8
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	46c0      	nop			; (mov r8, r8)
 80086e0:	200008ec 	.word	0x200008ec
 80086e4:	200008ee 	.word	0x200008ee

080086e8 <LCD_SetTextSize>:
 * 
 * \param s	Size
 * 
 * \return void
 */
void LCD_SetTextSize(uint8_t s) {
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	0002      	movs	r2, r0
 80086f0:	1dfb      	adds	r3, r7, #7
 80086f2:	701a      	strb	r2, [r3, #0]
	m_textsize = (s > 0) ? s : 1;
 80086f4:	1dfb      	adds	r3, r7, #7
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d002      	beq.n	8008702 <LCD_SetTextSize+0x1a>
 80086fc:	1dfb      	adds	r3, r7, #7
 80086fe:	781a      	ldrb	r2, [r3, #0]
 8008700:	e000      	b.n	8008704 <LCD_SetTextSize+0x1c>
 8008702:	2201      	movs	r2, #1
 8008704:	4b02      	ldr	r3, [pc, #8]	; (8008710 <LCD_SetTextSize+0x28>)
 8008706:	701a      	strb	r2, [r3, #0]
}
 8008708:	46c0      	nop			; (mov r8, r8)
 800870a:	46bd      	mov	sp, r7
 800870c:	b002      	add	sp, #8
 800870e:	bd80      	pop	{r7, pc}
 8008710:	200008f4 	.word	0x200008f4

08008714 <LCD_SetTextColor>:
 * \param c		Text color
 * \param b		Background color
 * 
 * \return void
 */
void LCD_SetTextColor(uint16_t c, uint16_t b) {
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	0002      	movs	r2, r0
 800871c:	1dbb      	adds	r3, r7, #6
 800871e:	801a      	strh	r2, [r3, #0]
 8008720:	1d3b      	adds	r3, r7, #4
 8008722:	1c0a      	adds	r2, r1, #0
 8008724:	801a      	strh	r2, [r3, #0]
	m_textcolor = c;
 8008726:	4b06      	ldr	r3, [pc, #24]	; (8008740 <LCD_SetTextColor+0x2c>)
 8008728:	1dba      	adds	r2, r7, #6
 800872a:	8812      	ldrh	r2, [r2, #0]
 800872c:	801a      	strh	r2, [r3, #0]
	m_textbgcolor = b;
 800872e:	4b05      	ldr	r3, [pc, #20]	; (8008744 <LCD_SetTextColor+0x30>)
 8008730:	1d3a      	adds	r2, r7, #4
 8008732:	8812      	ldrh	r2, [r2, #0]
 8008734:	801a      	strh	r2, [r3, #0]
}
 8008736:	46c0      	nop			; (mov r8, r8)
 8008738:	46bd      	mov	sp, r7
 800873a:	b002      	add	sp, #8
 800873c:	bd80      	pop	{r7, pc}
 800873e:	46c0      	nop			; (mov r8, r8)
 8008740:	200008f0 	.word	0x200008f0
 8008744:	200008f2 	.word	0x200008f2

08008748 <LCD_SetRotation>:
 * 
 * \param x	rotation
 * 
 * \return void
 */
void LCD_SetRotation(uint8_t x) {
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	0002      	movs	r2, r0
 8008750:	1dfb      	adds	r3, r7, #7
 8008752:	701a      	strb	r2, [r3, #0]
	m_rotation = (x & 3);
 8008754:	1dfb      	adds	r3, r7, #7
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	2203      	movs	r2, #3
 800875a:	4013      	ands	r3, r2
 800875c:	b2da      	uxtb	r2, r3
 800875e:	4b11      	ldr	r3, [pc, #68]	; (80087a4 <LCD_SetRotation+0x5c>)
 8008760:	701a      	strb	r2, [r3, #0]
	switch (m_rotation) {
 8008762:	4b10      	ldr	r3, [pc, #64]	; (80087a4 <LCD_SetRotation+0x5c>)
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	2b03      	cmp	r3, #3
 8008768:	d010      	beq.n	800878c <LCD_SetRotation+0x44>
 800876a:	dc17      	bgt.n	800879c <LCD_SetRotation+0x54>
 800876c:	2b02      	cmp	r3, #2
 800876e:	d005      	beq.n	800877c <LCD_SetRotation+0x34>
 8008770:	dc14      	bgt.n	800879c <LCD_SetRotation+0x54>
 8008772:	2b00      	cmp	r3, #0
 8008774:	d002      	beq.n	800877c <LCD_SetRotation+0x34>
 8008776:	2b01      	cmp	r3, #1
 8008778:	d008      	beq.n	800878c <LCD_SetRotation+0x44>
	case 3:
		m_width = TFTHEIGHT;
		m_height = TFTWIDTH;
		break;
	}
}
 800877a:	e00f      	b.n	800879c <LCD_SetRotation+0x54>
		m_width = TFTWIDTH;
 800877c:	4b0a      	ldr	r3, [pc, #40]	; (80087a8 <LCD_SetRotation+0x60>)
 800877e:	22f0      	movs	r2, #240	; 0xf0
 8008780:	801a      	strh	r2, [r3, #0]
		m_height = TFTHEIGHT;
 8008782:	4b0a      	ldr	r3, [pc, #40]	; (80087ac <LCD_SetRotation+0x64>)
 8008784:	22a0      	movs	r2, #160	; 0xa0
 8008786:	0052      	lsls	r2, r2, #1
 8008788:	801a      	strh	r2, [r3, #0]
		break;
 800878a:	e007      	b.n	800879c <LCD_SetRotation+0x54>
		m_width = TFTHEIGHT;
 800878c:	4b06      	ldr	r3, [pc, #24]	; (80087a8 <LCD_SetRotation+0x60>)
 800878e:	22a0      	movs	r2, #160	; 0xa0
 8008790:	0052      	lsls	r2, r2, #1
 8008792:	801a      	strh	r2, [r3, #0]
		m_height = TFTWIDTH;
 8008794:	4b05      	ldr	r3, [pc, #20]	; (80087ac <LCD_SetRotation+0x64>)
 8008796:	22f0      	movs	r2, #240	; 0xf0
 8008798:	801a      	strh	r2, [r3, #0]
		break;
 800879a:	46c0      	nop			; (mov r8, r8)
}
 800879c:	46c0      	nop			; (mov r8, r8)
 800879e:	46bd      	mov	sp, r7
 80087a0:	b002      	add	sp, #8
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	200008f5 	.word	0x200008f5
 80087a8:	200008e8 	.word	0x200008e8
 80087ac:	200008ea 	.word	0x200008ea

080087b0 <LCD_SetAddrWindow>:
 * \param x2
 * \param y2
 * 
 * \return void
 */
void LCD_SetAddrWindow(int x1, int y1, int x2, int y2) {
 80087b0:	b5b0      	push	{r4, r5, r7, lr}
 80087b2:	b08a      	sub	sp, #40	; 0x28
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
 80087bc:	603b      	str	r3, [r7, #0]

	LCD_CS_LOW();
 80087be:	4bc3      	ldr	r3, [pc, #780]	; (8008acc <LCD_SetAddrWindow+0x31c>)
 80087c0:	2200      	movs	r2, #0
 80087c2:	2100      	movs	r1, #0
 80087c4:	0018      	movs	r0, r3
 80087c6:	f7fd f8b3 	bl	8005930 <gpio_write>
	// set to the top-left corner -- although fill operations can be
	// done in any direction, the current screen rotation is applied
	// because some users find it disconcerting when a fill does not
	// occur top-to-bottom.
	int x, y, t;
	switch (m_rotation) {
 80087ca:	4bc1      	ldr	r3, [pc, #772]	; (8008ad0 <LCD_SetAddrWindow+0x320>)
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	2b03      	cmp	r3, #3
 80087d0:	d037      	beq.n	8008842 <LCD_SetAddrWindow+0x92>
 80087d2:	dc03      	bgt.n	80087dc <LCD_SetAddrWindow+0x2c>
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d006      	beq.n	80087e6 <LCD_SetAddrWindow+0x36>
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d017      	beq.n	800880c <LCD_SetAddrWindow+0x5c>
	default:
		x = x1;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	627b      	str	r3, [r7, #36]	; 0x24
		y = y1;
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	623b      	str	r3, [r7, #32]
		break;
 80087e4:	e042      	b.n	800886c <LCD_SetAddrWindow+0xbc>
	case 1:
		t = y1;
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	61fb      	str	r3, [r7, #28]
		y1 = x1;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	60bb      	str	r3, [r7, #8]
		x1 = TFTWIDTH - 1 - y2;
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	22ef      	movs	r2, #239	; 0xef
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	60fb      	str	r3, [r7, #12]
		y2 = x2;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	603b      	str	r3, [r7, #0]
		x2 = TFTWIDTH - 1 - t;
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	22ef      	movs	r2, #239	; 0xef
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	607b      	str	r3, [r7, #4]
		x = x2;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	627b      	str	r3, [r7, #36]	; 0x24
		y = y1;
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	623b      	str	r3, [r7, #32]
		break;
 800880a:	e02f      	b.n	800886c <LCD_SetAddrWindow+0xbc>
	case 2:
		t = x1;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	61fb      	str	r3, [r7, #28]
		x1 = TFTWIDTH - 1 - x2;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	22ef      	movs	r2, #239	; 0xef
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	60fb      	str	r3, [r7, #12]
		x2 = TFTWIDTH - 1 - t;
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	22ef      	movs	r2, #239	; 0xef
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	607b      	str	r3, [r7, #4]
		t = y1;
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	61fb      	str	r3, [r7, #28]
		y1 = TFTHEIGHT - 1 - y2;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	2240      	movs	r2, #64	; 0x40
 8008828:	32ff      	adds	r2, #255	; 0xff
 800882a:	1ad3      	subs	r3, r2, r3
 800882c:	60bb      	str	r3, [r7, #8]
		y2 = TFTHEIGHT - 1 - t;
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	2240      	movs	r2, #64	; 0x40
 8008832:	32ff      	adds	r2, #255	; 0xff
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	603b      	str	r3, [r7, #0]
		x = x2;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	627b      	str	r3, [r7, #36]	; 0x24
		y = y2;
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	623b      	str	r3, [r7, #32]
		break;
 8008840:	e014      	b.n	800886c <LCD_SetAddrWindow+0xbc>
	case 3:
		t = x1;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	61fb      	str	r3, [r7, #28]
		x1 = y1;
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	60fb      	str	r3, [r7, #12]
		y1 = TFTHEIGHT - 1 - x2;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2240      	movs	r2, #64	; 0x40
 800884e:	32ff      	adds	r2, #255	; 0xff
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	60bb      	str	r3, [r7, #8]
		x2 = y2;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	607b      	str	r3, [r7, #4]
		y2 = TFTHEIGHT - 1 - t;
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	2240      	movs	r2, #64	; 0x40
 800885c:	32ff      	adds	r2, #255	; 0xff
 800885e:	1ad3      	subs	r3, r2, r3
 8008860:	603b      	str	r3, [r7, #0]
		x = x1;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	627b      	str	r3, [r7, #36]	; 0x24
		y = y2;
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	623b      	str	r3, [r7, #32]
		break;
 800886a:	46c0      	nop			; (mov r8, r8)
	}

	LCD_WriteRegister16(0x0050, x1); // Set address window
 800886c:	241b      	movs	r4, #27
 800886e:	193b      	adds	r3, r7, r4
 8008870:	2200      	movs	r2, #0
 8008872:	701a      	strb	r2, [r3, #0]
 8008874:	251a      	movs	r5, #26
 8008876:	197b      	adds	r3, r7, r5
 8008878:	2250      	movs	r2, #80	; 0x50
 800887a:	701a      	strb	r2, [r3, #0]
 800887c:	2390      	movs	r3, #144	; 0x90
 800887e:	05db      	lsls	r3, r3, #23
 8008880:	2200      	movs	r2, #0
 8008882:	2104      	movs	r1, #4
 8008884:	0018      	movs	r0, r3
 8008886:	f7fd f853 	bl	8005930 <gpio_write>
 800888a:	193b      	adds	r3, r7, r4
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	0018      	movs	r0, r3
 8008890:	f000 f920 	bl	8008ad4 <LCD_Write8>
 8008894:	197b      	adds	r3, r7, r5
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	0018      	movs	r0, r3
 800889a:	f000 f91b 	bl	8008ad4 <LCD_Write8>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	121a      	asrs	r2, r3, #8
 80088a2:	193b      	adds	r3, r7, r4
 80088a4:	701a      	strb	r2, [r3, #0]
 80088a6:	197b      	adds	r3, r7, r5
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	701a      	strb	r2, [r3, #0]
 80088ac:	2390      	movs	r3, #144	; 0x90
 80088ae:	05db      	lsls	r3, r3, #23
 80088b0:	2201      	movs	r2, #1
 80088b2:	2104      	movs	r1, #4
 80088b4:	0018      	movs	r0, r3
 80088b6:	f7fd f83b 	bl	8005930 <gpio_write>
 80088ba:	193b      	adds	r3, r7, r4
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	0018      	movs	r0, r3
 80088c0:	f000 f908 	bl	8008ad4 <LCD_Write8>
 80088c4:	197b      	adds	r3, r7, r5
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	0018      	movs	r0, r3
 80088ca:	f000 f903 	bl	8008ad4 <LCD_Write8>
	LCD_WriteRegister16(0x0051, x2);
 80088ce:	2419      	movs	r4, #25
 80088d0:	193b      	adds	r3, r7, r4
 80088d2:	2200      	movs	r2, #0
 80088d4:	701a      	strb	r2, [r3, #0]
 80088d6:	2518      	movs	r5, #24
 80088d8:	197b      	adds	r3, r7, r5
 80088da:	2251      	movs	r2, #81	; 0x51
 80088dc:	701a      	strb	r2, [r3, #0]
 80088de:	2390      	movs	r3, #144	; 0x90
 80088e0:	05db      	lsls	r3, r3, #23
 80088e2:	2200      	movs	r2, #0
 80088e4:	2104      	movs	r1, #4
 80088e6:	0018      	movs	r0, r3
 80088e8:	f7fd f822 	bl	8005930 <gpio_write>
 80088ec:	193b      	adds	r3, r7, r4
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	0018      	movs	r0, r3
 80088f2:	f000 f8ef 	bl	8008ad4 <LCD_Write8>
 80088f6:	197b      	adds	r3, r7, r5
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	0018      	movs	r0, r3
 80088fc:	f000 f8ea 	bl	8008ad4 <LCD_Write8>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	121a      	asrs	r2, r3, #8
 8008904:	193b      	adds	r3, r7, r4
 8008906:	701a      	strb	r2, [r3, #0]
 8008908:	197b      	adds	r3, r7, r5
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	701a      	strb	r2, [r3, #0]
 800890e:	2390      	movs	r3, #144	; 0x90
 8008910:	05db      	lsls	r3, r3, #23
 8008912:	2201      	movs	r2, #1
 8008914:	2104      	movs	r1, #4
 8008916:	0018      	movs	r0, r3
 8008918:	f7fd f80a 	bl	8005930 <gpio_write>
 800891c:	193b      	adds	r3, r7, r4
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	0018      	movs	r0, r3
 8008922:	f000 f8d7 	bl	8008ad4 <LCD_Write8>
 8008926:	197b      	adds	r3, r7, r5
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	0018      	movs	r0, r3
 800892c:	f000 f8d2 	bl	8008ad4 <LCD_Write8>
	LCD_WriteRegister16(0x0052, y1);
 8008930:	2417      	movs	r4, #23
 8008932:	193b      	adds	r3, r7, r4
 8008934:	2200      	movs	r2, #0
 8008936:	701a      	strb	r2, [r3, #0]
 8008938:	2516      	movs	r5, #22
 800893a:	197b      	adds	r3, r7, r5
 800893c:	2252      	movs	r2, #82	; 0x52
 800893e:	701a      	strb	r2, [r3, #0]
 8008940:	2390      	movs	r3, #144	; 0x90
 8008942:	05db      	lsls	r3, r3, #23
 8008944:	2200      	movs	r2, #0
 8008946:	2104      	movs	r1, #4
 8008948:	0018      	movs	r0, r3
 800894a:	f7fc fff1 	bl	8005930 <gpio_write>
 800894e:	193b      	adds	r3, r7, r4
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	0018      	movs	r0, r3
 8008954:	f000 f8be 	bl	8008ad4 <LCD_Write8>
 8008958:	197b      	adds	r3, r7, r5
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	0018      	movs	r0, r3
 800895e:	f000 f8b9 	bl	8008ad4 <LCD_Write8>
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	121a      	asrs	r2, r3, #8
 8008966:	193b      	adds	r3, r7, r4
 8008968:	701a      	strb	r2, [r3, #0]
 800896a:	197b      	adds	r3, r7, r5
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	701a      	strb	r2, [r3, #0]
 8008970:	2390      	movs	r3, #144	; 0x90
 8008972:	05db      	lsls	r3, r3, #23
 8008974:	2201      	movs	r2, #1
 8008976:	2104      	movs	r1, #4
 8008978:	0018      	movs	r0, r3
 800897a:	f7fc ffd9 	bl	8005930 <gpio_write>
 800897e:	193b      	adds	r3, r7, r4
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	0018      	movs	r0, r3
 8008984:	f000 f8a6 	bl	8008ad4 <LCD_Write8>
 8008988:	197b      	adds	r3, r7, r5
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	0018      	movs	r0, r3
 800898e:	f000 f8a1 	bl	8008ad4 <LCD_Write8>
	LCD_WriteRegister16(0x0053, y2);
 8008992:	2415      	movs	r4, #21
 8008994:	193b      	adds	r3, r7, r4
 8008996:	2200      	movs	r2, #0
 8008998:	701a      	strb	r2, [r3, #0]
 800899a:	2514      	movs	r5, #20
 800899c:	197b      	adds	r3, r7, r5
 800899e:	2253      	movs	r2, #83	; 0x53
 80089a0:	701a      	strb	r2, [r3, #0]
 80089a2:	2390      	movs	r3, #144	; 0x90
 80089a4:	05db      	lsls	r3, r3, #23
 80089a6:	2200      	movs	r2, #0
 80089a8:	2104      	movs	r1, #4
 80089aa:	0018      	movs	r0, r3
 80089ac:	f7fc ffc0 	bl	8005930 <gpio_write>
 80089b0:	193b      	adds	r3, r7, r4
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	0018      	movs	r0, r3
 80089b6:	f000 f88d 	bl	8008ad4 <LCD_Write8>
 80089ba:	197b      	adds	r3, r7, r5
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	0018      	movs	r0, r3
 80089c0:	f000 f888 	bl	8008ad4 <LCD_Write8>
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	121a      	asrs	r2, r3, #8
 80089c8:	193b      	adds	r3, r7, r4
 80089ca:	701a      	strb	r2, [r3, #0]
 80089cc:	197b      	adds	r3, r7, r5
 80089ce:	683a      	ldr	r2, [r7, #0]
 80089d0:	701a      	strb	r2, [r3, #0]
 80089d2:	2390      	movs	r3, #144	; 0x90
 80089d4:	05db      	lsls	r3, r3, #23
 80089d6:	2201      	movs	r2, #1
 80089d8:	2104      	movs	r1, #4
 80089da:	0018      	movs	r0, r3
 80089dc:	f7fc ffa8 	bl	8005930 <gpio_write>
 80089e0:	193b      	adds	r3, r7, r4
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	0018      	movs	r0, r3
 80089e6:	f000 f875 	bl	8008ad4 <LCD_Write8>
 80089ea:	197b      	adds	r3, r7, r5
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	0018      	movs	r0, r3
 80089f0:	f000 f870 	bl	8008ad4 <LCD_Write8>
	LCD_WriteRegister16(0x0020, x); // Set address counter to top left
 80089f4:	2413      	movs	r4, #19
 80089f6:	193b      	adds	r3, r7, r4
 80089f8:	2200      	movs	r2, #0
 80089fa:	701a      	strb	r2, [r3, #0]
 80089fc:	2512      	movs	r5, #18
 80089fe:	197b      	adds	r3, r7, r5
 8008a00:	2220      	movs	r2, #32
 8008a02:	701a      	strb	r2, [r3, #0]
 8008a04:	2390      	movs	r3, #144	; 0x90
 8008a06:	05db      	lsls	r3, r3, #23
 8008a08:	2200      	movs	r2, #0
 8008a0a:	2104      	movs	r1, #4
 8008a0c:	0018      	movs	r0, r3
 8008a0e:	f7fc ff8f 	bl	8005930 <gpio_write>
 8008a12:	193b      	adds	r3, r7, r4
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	0018      	movs	r0, r3
 8008a18:	f000 f85c 	bl	8008ad4 <LCD_Write8>
 8008a1c:	197b      	adds	r3, r7, r5
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	0018      	movs	r0, r3
 8008a22:	f000 f857 	bl	8008ad4 <LCD_Write8>
 8008a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a28:	121a      	asrs	r2, r3, #8
 8008a2a:	193b      	adds	r3, r7, r4
 8008a2c:	701a      	strb	r2, [r3, #0]
 8008a2e:	197b      	adds	r3, r7, r5
 8008a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a32:	701a      	strb	r2, [r3, #0]
 8008a34:	2390      	movs	r3, #144	; 0x90
 8008a36:	05db      	lsls	r3, r3, #23
 8008a38:	2201      	movs	r2, #1
 8008a3a:	2104      	movs	r1, #4
 8008a3c:	0018      	movs	r0, r3
 8008a3e:	f7fc ff77 	bl	8005930 <gpio_write>
 8008a42:	193b      	adds	r3, r7, r4
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	0018      	movs	r0, r3
 8008a48:	f000 f844 	bl	8008ad4 <LCD_Write8>
 8008a4c:	197b      	adds	r3, r7, r5
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	0018      	movs	r0, r3
 8008a52:	f000 f83f 	bl	8008ad4 <LCD_Write8>
	LCD_WriteRegister16(0x0021, y);
 8008a56:	2411      	movs	r4, #17
 8008a58:	193b      	adds	r3, r7, r4
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	701a      	strb	r2, [r3, #0]
 8008a5e:	2510      	movs	r5, #16
 8008a60:	197b      	adds	r3, r7, r5
 8008a62:	2221      	movs	r2, #33	; 0x21
 8008a64:	701a      	strb	r2, [r3, #0]
 8008a66:	2390      	movs	r3, #144	; 0x90
 8008a68:	05db      	lsls	r3, r3, #23
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	2104      	movs	r1, #4
 8008a6e:	0018      	movs	r0, r3
 8008a70:	f7fc ff5e 	bl	8005930 <gpio_write>
 8008a74:	193b      	adds	r3, r7, r4
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	0018      	movs	r0, r3
 8008a7a:	f000 f82b 	bl	8008ad4 <LCD_Write8>
 8008a7e:	197b      	adds	r3, r7, r5
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	0018      	movs	r0, r3
 8008a84:	f000 f826 	bl	8008ad4 <LCD_Write8>
 8008a88:	6a3b      	ldr	r3, [r7, #32]
 8008a8a:	121a      	asrs	r2, r3, #8
 8008a8c:	193b      	adds	r3, r7, r4
 8008a8e:	701a      	strb	r2, [r3, #0]
 8008a90:	197b      	adds	r3, r7, r5
 8008a92:	6a3a      	ldr	r2, [r7, #32]
 8008a94:	701a      	strb	r2, [r3, #0]
 8008a96:	2390      	movs	r3, #144	; 0x90
 8008a98:	05db      	lsls	r3, r3, #23
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	2104      	movs	r1, #4
 8008a9e:	0018      	movs	r0, r3
 8008aa0:	f7fc ff46 	bl	8005930 <gpio_write>
 8008aa4:	193b      	adds	r3, r7, r4
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	0018      	movs	r0, r3
 8008aaa:	f000 f813 	bl	8008ad4 <LCD_Write8>
 8008aae:	197b      	adds	r3, r7, r5
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	0018      	movs	r0, r3
 8008ab4:	f000 f80e 	bl	8008ad4 <LCD_Write8>

	LCD_CS_HIGH();
 8008ab8:	4b04      	ldr	r3, [pc, #16]	; (8008acc <LCD_SetAddrWindow+0x31c>)
 8008aba:	2201      	movs	r2, #1
 8008abc:	2100      	movs	r1, #0
 8008abe:	0018      	movs	r0, r3
 8008ac0:	f7fc ff36 	bl	8005930 <gpio_write>
}
 8008ac4:	46c0      	nop			; (mov r8, r8)
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	b00a      	add	sp, #40	; 0x28
 8008aca:	bdb0      	pop	{r4, r5, r7, pc}
 8008acc:	48000400 	.word	0x48000400
 8008ad0:	200008f5 	.word	0x200008f5

08008ad4 <LCD_Write8>:
 * 
 * \param data	8-Bit Data
 * 
 * \return void
 */
static inline void LCD_Write8(uint8_t data) {
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	0002      	movs	r2, r0
 8008adc:	1dfb      	adds	r3, r7, #7
 8008ade:	701a      	strb	r2, [r3, #0]
	// GPIOB, GPIO_PIN_5  -> BIT 4 -> 0x10
	// GPIOB, GPIO_PIN_4  -> BIT 5 -> 0x20
	// GPIOB, GPIO_PIN_10 -> BIT 6 -> 0x40
	// GPIOA, GPIO_PIN_8  -> BIT 7 -> 0x80

	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 8008ae0:	2390      	movs	r3, #144	; 0x90
 8008ae2:	05db      	lsls	r3, r3, #23
 8008ae4:	695b      	ldr	r3, [r3, #20]
 8008ae6:	4a33      	ldr	r2, [pc, #204]	; (8008bb4 <LCD_Write8+0xe0>)
 8008ae8:	401a      	ands	r2, r3
 8008aea:	1dfb      	adds	r3, r7, #7
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	025b      	lsls	r3, r3, #9
 8008af0:	0019      	movs	r1, r3
 8008af2:	2380      	movs	r3, #128	; 0x80
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	400b      	ands	r3, r1
 8008af8:	431a      	orrs	r2, r3
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 8008afa:	1dfb      	adds	r3, r7, #7
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	021b      	lsls	r3, r3, #8
 8008b00:	0019      	movs	r1, r3
 8008b02:	2380      	movs	r3, #128	; 0x80
 8008b04:	00db      	lsls	r3, r3, #3
 8008b06:	400b      	ands	r3, r1
 8008b08:	431a      	orrs	r2, r3
 8008b0a:	0011      	movs	r1, r2
 8008b0c:	1dfb      	adds	r3, r7, #7
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	005b      	lsls	r3, r3, #1
 8008b12:	001a      	movs	r2, r3
 8008b14:	2380      	movs	r3, #128	; 0x80
 8008b16:	005b      	lsls	r3, r3, #1
 8008b18:	401a      	ands	r2, r3
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 8008b1a:	2390      	movs	r3, #144	; 0x90
 8008b1c:	05db      	lsls	r3, r3, #23
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 8008b1e:	430a      	orrs	r2, r1
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 8008b20:	615a      	str	r2, [r3, #20]
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 8008b22:	4b25      	ldr	r3, [pc, #148]	; (8008bb8 <LCD_Write8+0xe4>)
 8008b24:	695b      	ldr	r3, [r3, #20]
 8008b26:	4a25      	ldr	r2, [pc, #148]	; (8008bbc <LCD_Write8+0xe8>)
 8008b28:	401a      	ands	r2, r3
 8008b2a:	1dfb      	adds	r3, r7, #7
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	2108      	movs	r1, #8
 8008b30:	400b      	ands	r3, r1
 8008b32:	431a      	orrs	r2, r3
 8008b34:	1dfb      	adds	r3, r7, #7
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	005b      	lsls	r3, r3, #1
 8008b3a:	0019      	movs	r1, r3
 8008b3c:	2320      	movs	r3, #32
 8008b3e:	400b      	ands	r3, r1
 8008b40:	431a      	orrs	r2, r3
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 8008b42:	1dfb      	adds	r3, r7, #7
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	105b      	asrs	r3, r3, #1
 8008b48:	0019      	movs	r1, r3
 8008b4a:	2310      	movs	r3, #16
 8008b4c:	400b      	ands	r3, r1
 8008b4e:	431a      	orrs	r2, r3
 8008b50:	0011      	movs	r1, r2
 8008b52:	1dfb      	adds	r3, r7, #7
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	011b      	lsls	r3, r3, #4
 8008b58:	001a      	movs	r2, r3
 8008b5a:	2380      	movs	r3, #128	; 0x80
 8008b5c:	00db      	lsls	r3, r3, #3
 8008b5e:	401a      	ands	r2, r3
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 8008b60:	4b15      	ldr	r3, [pc, #84]	; (8008bb8 <LCD_Write8+0xe4>)
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 8008b62:	430a      	orrs	r2, r1
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 8008b64:	615a      	str	r2, [r3, #20]
	GPIOC->ODR = (GPIOC->ODR & 0xFF7F) | ((data & 0x02) << 6);
 8008b66:	4b16      	ldr	r3, [pc, #88]	; (8008bc0 <LCD_Write8+0xec>)
 8008b68:	695b      	ldr	r3, [r3, #20]
 8008b6a:	4a16      	ldr	r2, [pc, #88]	; (8008bc4 <LCD_Write8+0xf0>)
 8008b6c:	4013      	ands	r3, r2
 8008b6e:	0019      	movs	r1, r3
 8008b70:	1dfb      	adds	r3, r7, #7
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	019b      	lsls	r3, r3, #6
 8008b76:	001a      	movs	r2, r3
 8008b78:	2380      	movs	r3, #128	; 0x80
 8008b7a:	401a      	ands	r2, r3
 8008b7c:	4b10      	ldr	r3, [pc, #64]	; (8008bc0 <LCD_Write8+0xec>)
 8008b7e:	430a      	orrs	r2, r1
 8008b80:	615a      	str	r2, [r3, #20]
//	GPIOB->ODR = (GPIOB->ODR & 0x1BC5) | ((data & 0x01) << 3)
//			| ((data & 0x02) << 4) | ((data & 0x04) << 2) | ((data & 0x08) << 7)
//			| ((data & 0x10) << 9) | ((data & 0x20) << 9) | ((data & 0x40) << 9)
//			| ((data & 0x80) >> 6);

	LCD_WR_STROBE();
 8008b82:	2390      	movs	r3, #144	; 0x90
 8008b84:	05db      	lsls	r3, r3, #23
 8008b86:	2200      	movs	r2, #0
 8008b88:	2101      	movs	r1, #1
 8008b8a:	0018      	movs	r0, r3
 8008b8c:	f7fc fed0 	bl	8005930 <gpio_write>
 8008b90:	2001      	movs	r0, #1
 8008b92:	f7fd ffae 	bl	8006af2 <delay>
 8008b96:	2390      	movs	r3, #144	; 0x90
 8008b98:	05db      	lsls	r3, r3, #23
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	2101      	movs	r1, #1
 8008b9e:	0018      	movs	r0, r3
 8008ba0:	f7fc fec6 	bl	8005930 <gpio_write>
 8008ba4:	2001      	movs	r0, #1
 8008ba6:	f7fd ffa4 	bl	8006af2 <delay>
}
 8008baa:	46c0      	nop			; (mov r8, r8)
 8008bac:	46bd      	mov	sp, r7
 8008bae:	b002      	add	sp, #8
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	46c0      	nop			; (mov r8, r8)
 8008bb4:	0000f8ff 	.word	0x0000f8ff
 8008bb8:	48000400 	.word	0x48000400
 8008bbc:	0000fbc7 	.word	0x0000fbc7
 8008bc0:	48000800 	.word	0x48000800
 8008bc4:	0000ff7f 	.word	0x0000ff7f

08008bc8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	0002      	movs	r2, r0
 8008bd0:	1dbb      	adds	r3, r7, #6
 8008bd2:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008bd8:	1dbb      	adds	r3, r7, #6
 8008bda:	2200      	movs	r2, #0
 8008bdc:	5e9b      	ldrsh	r3, [r3, r2]
 8008bde:	2b84      	cmp	r3, #132	; 0x84
 8008be0:	d006      	beq.n	8008bf0 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8008be2:	1dbb      	adds	r3, r7, #6
 8008be4:	2200      	movs	r2, #0
 8008be6:	5e9a      	ldrsh	r2, [r3, r2]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	18d3      	adds	r3, r2, r3
 8008bec:	3303      	adds	r3, #3
 8008bee:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
}
 8008bf2:	0018      	movs	r0, r3
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	b004      	add	sp, #16
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008bfe:	f000 fdaf 	bl	8009760 <vTaskStartScheduler>
  
  return osOK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	0018      	movs	r0, r3
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008c0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c0c:	b089      	sub	sp, #36	; 0x24
 8008c0e:	af04      	add	r7, sp, #16
 8008c10:	6078      	str	r0, [r7, #4]
 8008c12:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	695b      	ldr	r3, [r3, #20]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d020      	beq.n	8008c5e <osThreadCreate+0x54>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d01c      	beq.n	8008c5e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	685c      	ldr	r4, [r3, #4]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681d      	ldr	r5, [r3, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	691e      	ldr	r6, [r3, #16]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2208      	movs	r2, #8
 8008c34:	5e9b      	ldrsh	r3, [r3, r2]
 8008c36:	0018      	movs	r0, r3
 8008c38:	f7ff ffc6 	bl	8008bc8 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	695a      	ldr	r2, [r3, #20]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008c44:	6839      	ldr	r1, [r7, #0]
 8008c46:	9302      	str	r3, [sp, #8]
 8008c48:	9201      	str	r2, [sp, #4]
 8008c4a:	9000      	str	r0, [sp, #0]
 8008c4c:	000b      	movs	r3, r1
 8008c4e:	0032      	movs	r2, r6
 8008c50:	0029      	movs	r1, r5
 8008c52:	0020      	movs	r0, r4
 8008c54:	f000 fbda 	bl	800940c <xTaskCreateStatic>
 8008c58:	0003      	movs	r3, r0
 8008c5a:	60fb      	str	r3, [r7, #12]
 8008c5c:	e01d      	b.n	8008c9a <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	685c      	ldr	r4, [r3, #4]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008c6a:	b29e      	uxth	r6, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2208      	movs	r2, #8
 8008c70:	5e9b      	ldrsh	r3, [r3, r2]
 8008c72:	0018      	movs	r0, r3
 8008c74:	f7ff ffa8 	bl	8008bc8 <makeFreeRtosPriority>
 8008c78:	0001      	movs	r1, r0
 8008c7a:	683a      	ldr	r2, [r7, #0]
 8008c7c:	230c      	movs	r3, #12
 8008c7e:	18fb      	adds	r3, r7, r3
 8008c80:	9301      	str	r3, [sp, #4]
 8008c82:	9100      	str	r1, [sp, #0]
 8008c84:	0013      	movs	r3, r2
 8008c86:	0032      	movs	r2, r6
 8008c88:	0029      	movs	r1, r5
 8008c8a:	0020      	movs	r0, r4
 8008c8c:	f000 fc01 	bl	8009492 <xTaskCreate>
 8008c90:	0003      	movs	r3, r0
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d001      	beq.n	8008c9a <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8008c96:	2300      	movs	r3, #0
 8008c98:	e000      	b.n	8008c9c <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
}
 8008c9c:	0018      	movs	r0, r3
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	b005      	add	sp, #20
 8008ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008ca4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d001      	beq.n	8008cba <osDelay+0x16>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	e000      	b.n	8008cbc <osDelay+0x18>
 8008cba:	2301      	movs	r3, #1
 8008cbc:	0018      	movs	r0, r3
 8008cbe:	f000 fd29 	bl	8009714 <vTaskDelay>
  
  return osOK;
 8008cc2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008cc4:	0018      	movs	r0, r3
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	b004      	add	sp, #16
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b086      	sub	sp, #24
 8008cd0:	af02      	add	r7, sp, #8
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00f      	beq.n	8008cfe <osSemaphoreCreate+0x32>
    if (count == 1) {
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d10a      	bne.n	8008cfa <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	2203      	movs	r2, #3
 8008cea:	9200      	str	r2, [sp, #0]
 8008cec:	2200      	movs	r2, #0
 8008cee:	2100      	movs	r1, #0
 8008cf0:	2001      	movs	r0, #1
 8008cf2:	f000 f943 	bl	8008f7c <xQueueGenericCreateStatic>
 8008cf6:	0003      	movs	r3, r0
 8008cf8:	e017      	b.n	8008d2a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	e015      	b.n	8008d2a <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d111      	bne.n	8008d28 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8008d04:	2203      	movs	r2, #3
 8008d06:	2100      	movs	r1, #0
 8008d08:	2001      	movs	r0, #1
 8008d0a:	f000 f982 	bl	8009012 <xQueueGenericCreate>
 8008d0e:	0003      	movs	r3, r0
 8008d10:	60fb      	str	r3, [r7, #12]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d005      	beq.n	8008d24 <osSemaphoreCreate+0x58>
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	2100      	movs	r1, #0
 8008d20:	f000 f9cf 	bl	80090c2 <xQueueGenericSend>
      return sema;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	e000      	b.n	8008d2a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8008d28:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008d2a:	0018      	movs	r0, r3
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	b004      	add	sp, #16
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008d32:	b590      	push	{r4, r7, lr}
 8008d34:	b085      	sub	sp, #20
 8008d36:	af02      	add	r7, sp, #8
 8008d38:	6078      	str	r0, [r7, #4]
 8008d3a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d011      	beq.n	8008d68 <osMessageCreate+0x36>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00d      	beq.n	8008d68 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6818      	ldr	r0, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6859      	ldr	r1, [r3, #4]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	689a      	ldr	r2, [r3, #8]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	2400      	movs	r4, #0
 8008d5e:	9400      	str	r4, [sp, #0]
 8008d60:	f000 f90c 	bl	8008f7c <xQueueGenericCreateStatic>
 8008d64:	0003      	movs	r3, r0
 8008d66:	e008      	b.n	8008d7a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6818      	ldr	r0, [r3, #0]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	0019      	movs	r1, r3
 8008d74:	f000 f94d 	bl	8009012 <xQueueGenericCreate>
 8008d78:	0003      	movs	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008d7a:	0018      	movs	r0, r3
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	b003      	add	sp, #12
 8008d80:	bd90      	pop	{r4, r7, pc}

08008d82 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b082      	sub	sp, #8
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	3308      	adds	r3, #8
 8008d8e:	001a      	movs	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	4252      	negs	r2, r2
 8008d9a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	3308      	adds	r3, #8
 8008da0:	001a      	movs	r2, r3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	3308      	adds	r3, #8
 8008daa:	001a      	movs	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008db6:	46c0      	nop			; (mov r8, r8)
 8008db8:	46bd      	mov	sp, r7
 8008dba:	b002      	add	sp, #8
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b082      	sub	sp, #8
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008dcc:	46c0      	nop			; (mov r8, r8)
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	b002      	add	sp, #8
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	68fa      	ldr	r2, [r7, #12]
 8008de8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	689a      	ldr	r2, [r3, #8]
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	683a      	ldr	r2, [r7, #0]
 8008df8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	683a      	ldr	r2, [r7, #0]
 8008dfe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	1c5a      	adds	r2, r3, #1
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	601a      	str	r2, [r3, #0]
}
 8008e10:	46c0      	nop			; (mov r8, r8)
 8008e12:	46bd      	mov	sp, r7
 8008e14:	b004      	add	sp, #16
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	d103      	bne.n	8008e36 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	60fb      	str	r3, [r7, #12]
 8008e34:	e00c      	b.n	8008e50 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	3308      	adds	r3, #8
 8008e3a:	60fb      	str	r3, [r7, #12]
 8008e3c:	e002      	b.n	8008e44 <vListInsert+0x2c>
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	60fb      	str	r3, [r7, #12]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	68ba      	ldr	r2, [r7, #8]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d2f6      	bcs.n	8008e3e <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	685a      	ldr	r2, [r3, #4]
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	683a      	ldr	r2, [r7, #0]
 8008e5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	683a      	ldr	r2, [r7, #0]
 8008e6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	1c5a      	adds	r2, r3, #1
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	601a      	str	r2, [r3, #0]
}
 8008e7c:	46c0      	nop			; (mov r8, r8)
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	b004      	add	sp, #16
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	6892      	ldr	r2, [r2, #8]
 8008e9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	6852      	ldr	r2, [r2, #4]
 8008ea4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d103      	bne.n	8008eb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	689a      	ldr	r2, [r3, #8]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	1e5a      	subs	r2, r3, #1
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
}
 8008ecc:	0018      	movs	r0, r3
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	b004      	add	sp, #16
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d101      	bne.n	8008eec <xQueueGenericReset+0x18>
 8008ee8:	b672      	cpsid	i
 8008eea:	e7fe      	b.n	8008eea <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8008eec:	f001 f958 	bl	800a1a0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efc:	434b      	muls	r3, r1
 8008efe:	18d2      	adds	r2, r2, r3
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f1a:	1e59      	subs	r1, r3, #1
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f20:	434b      	muls	r3, r1
 8008f22:	18d2      	adds	r2, r2, r3
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2244      	movs	r2, #68	; 0x44
 8008f2c:	21ff      	movs	r1, #255	; 0xff
 8008f2e:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2245      	movs	r2, #69	; 0x45
 8008f34:	21ff      	movs	r1, #255	; 0xff
 8008f36:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10d      	bne.n	8008f5a <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d013      	beq.n	8008f6e <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	3310      	adds	r3, #16
 8008f4a:	0018      	movs	r0, r3
 8008f4c:	f000 fe24 	bl	8009b98 <xTaskRemoveFromEventList>
 8008f50:	1e03      	subs	r3, r0, #0
 8008f52:	d00c      	beq.n	8008f6e <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008f54:	f001 f914 	bl	800a180 <vPortYield>
 8008f58:	e009      	b.n	8008f6e <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	3310      	adds	r3, #16
 8008f5e:	0018      	movs	r0, r3
 8008f60:	f7ff ff0f 	bl	8008d82 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	3324      	adds	r3, #36	; 0x24
 8008f68:	0018      	movs	r0, r3
 8008f6a:	f7ff ff0a 	bl	8008d82 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008f6e:	f001 f929 	bl	800a1c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008f72:	2301      	movs	r3, #1
}
 8008f74:	0018      	movs	r0, r3
 8008f76:	46bd      	mov	sp, r7
 8008f78:	b004      	add	sp, #16
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008f7c:	b590      	push	{r4, r7, lr}
 8008f7e:	b089      	sub	sp, #36	; 0x24
 8008f80:	af02      	add	r7, sp, #8
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
 8008f88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d101      	bne.n	8008f94 <xQueueGenericCreateStatic+0x18>
 8008f90:	b672      	cpsid	i
 8008f92:	e7fe      	b.n	8008f92 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d101      	bne.n	8008f9e <xQueueGenericCreateStatic+0x22>
 8008f9a:	b672      	cpsid	i
 8008f9c:	e7fe      	b.n	8008f9c <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d002      	beq.n	8008faa <xQueueGenericCreateStatic+0x2e>
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d001      	beq.n	8008fae <xQueueGenericCreateStatic+0x32>
 8008faa:	2301      	movs	r3, #1
 8008fac:	e000      	b.n	8008fb0 <xQueueGenericCreateStatic+0x34>
 8008fae:	2300      	movs	r3, #0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d101      	bne.n	8008fb8 <xQueueGenericCreateStatic+0x3c>
 8008fb4:	b672      	cpsid	i
 8008fb6:	e7fe      	b.n	8008fb6 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d102      	bne.n	8008fc4 <xQueueGenericCreateStatic+0x48>
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d101      	bne.n	8008fc8 <xQueueGenericCreateStatic+0x4c>
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e000      	b.n	8008fca <xQueueGenericCreateStatic+0x4e>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d101      	bne.n	8008fd2 <xQueueGenericCreateStatic+0x56>
 8008fce:	b672      	cpsid	i
 8008fd0:	e7fe      	b.n	8008fd0 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008fd2:	2348      	movs	r3, #72	; 0x48
 8008fd4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	2b48      	cmp	r3, #72	; 0x48
 8008fda:	d001      	beq.n	8008fe0 <xQueueGenericCreateStatic+0x64>
 8008fdc:	b672      	cpsid	i
 8008fde:	e7fe      	b.n	8008fde <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00e      	beq.n	8009008 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	2246      	movs	r2, #70	; 0x46
 8008fee:	2101      	movs	r1, #1
 8008ff0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ff2:	2328      	movs	r3, #40	; 0x28
 8008ff4:	18fb      	adds	r3, r7, r3
 8008ff6:	781c      	ldrb	r4, [r3, #0]
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	68b9      	ldr	r1, [r7, #8]
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	9300      	str	r3, [sp, #0]
 8009002:	0023      	movs	r3, r4
 8009004:	f000 f83b 	bl	800907e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009008:	697b      	ldr	r3, [r7, #20]
	}
 800900a:	0018      	movs	r0, r3
 800900c:	46bd      	mov	sp, r7
 800900e:	b007      	add	sp, #28
 8009010:	bd90      	pop	{r4, r7, pc}

08009012 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009012:	b590      	push	{r4, r7, lr}
 8009014:	b08b      	sub	sp, #44	; 0x2c
 8009016:	af02      	add	r7, sp, #8
 8009018:	60f8      	str	r0, [r7, #12]
 800901a:	60b9      	str	r1, [r7, #8]
 800901c:	1dfb      	adds	r3, r7, #7
 800901e:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d101      	bne.n	800902a <xQueueGenericCreate+0x18>
 8009026:	b672      	cpsid	i
 8009028:	e7fe      	b.n	8009028 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d102      	bne.n	8009036 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009030:	2300      	movs	r3, #0
 8009032:	61fb      	str	r3, [r7, #28]
 8009034:	e003      	b.n	800903e <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	4353      	muls	r3, r2
 800903c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	3348      	adds	r3, #72	; 0x48
 8009042:	0018      	movs	r0, r3
 8009044:	f001 f944 	bl	800a2d0 <pvPortMalloc>
 8009048:	0003      	movs	r3, r0
 800904a:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d010      	beq.n	8009074 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	3348      	adds	r3, #72	; 0x48
 8009056:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	2246      	movs	r2, #70	; 0x46
 800905c:	2100      	movs	r1, #0
 800905e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009060:	1dfb      	adds	r3, r7, #7
 8009062:	781c      	ldrb	r4, [r3, #0]
 8009064:	697a      	ldr	r2, [r7, #20]
 8009066:	68b9      	ldr	r1, [r7, #8]
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	9300      	str	r3, [sp, #0]
 800906e:	0023      	movs	r3, r4
 8009070:	f000 f805 	bl	800907e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009074:	69bb      	ldr	r3, [r7, #24]
	}
 8009076:	0018      	movs	r0, r3
 8009078:	46bd      	mov	sp, r7
 800907a:	b009      	add	sp, #36	; 0x24
 800907c:	bd90      	pop	{r4, r7, pc}

0800907e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b084      	sub	sp, #16
 8009082:	af00      	add	r7, sp, #0
 8009084:	60f8      	str	r0, [r7, #12]
 8009086:	60b9      	str	r1, [r7, #8]
 8009088:	607a      	str	r2, [r7, #4]
 800908a:	001a      	movs	r2, r3
 800908c:	1cfb      	adds	r3, r7, #3
 800908e:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d103      	bne.n	800909e <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	69ba      	ldr	r2, [r7, #24]
 800909a:	601a      	str	r2, [r3, #0]
 800909c:	e002      	b.n	80090a4 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80090a4:	69bb      	ldr	r3, [r7, #24]
 80090a6:	68fa      	ldr	r2, [r7, #12]
 80090a8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	2101      	movs	r1, #1
 80090b4:	0018      	movs	r0, r3
 80090b6:	f7ff ff0d 	bl	8008ed4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80090ba:	46c0      	nop			; (mov r8, r8)
 80090bc:	46bd      	mov	sp, r7
 80090be:	b004      	add	sp, #16
 80090c0:	bd80      	pop	{r7, pc}

080090c2 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80090c2:	b580      	push	{r7, lr}
 80090c4:	b08a      	sub	sp, #40	; 0x28
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	60f8      	str	r0, [r7, #12]
 80090ca:	60b9      	str	r1, [r7, #8]
 80090cc:	607a      	str	r2, [r7, #4]
 80090ce:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80090d0:	2300      	movs	r3, #0
 80090d2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80090d8:	6a3b      	ldr	r3, [r7, #32]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <xQueueGenericSend+0x20>
 80090de:	b672      	cpsid	i
 80090e0:	e7fe      	b.n	80090e0 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d103      	bne.n	80090f0 <xQueueGenericSend+0x2e>
 80090e8:	6a3b      	ldr	r3, [r7, #32]
 80090ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d101      	bne.n	80090f4 <xQueueGenericSend+0x32>
 80090f0:	2301      	movs	r3, #1
 80090f2:	e000      	b.n	80090f6 <xQueueGenericSend+0x34>
 80090f4:	2300      	movs	r3, #0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d101      	bne.n	80090fe <xQueueGenericSend+0x3c>
 80090fa:	b672      	cpsid	i
 80090fc:	e7fe      	b.n	80090fc <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	2b02      	cmp	r3, #2
 8009102:	d103      	bne.n	800910c <xQueueGenericSend+0x4a>
 8009104:	6a3b      	ldr	r3, [r7, #32]
 8009106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009108:	2b01      	cmp	r3, #1
 800910a:	d101      	bne.n	8009110 <xQueueGenericSend+0x4e>
 800910c:	2301      	movs	r3, #1
 800910e:	e000      	b.n	8009112 <xQueueGenericSend+0x50>
 8009110:	2300      	movs	r3, #0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d101      	bne.n	800911a <xQueueGenericSend+0x58>
 8009116:	b672      	cpsid	i
 8009118:	e7fe      	b.n	8009118 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800911a:	f000 fedb 	bl	8009ed4 <xTaskGetSchedulerState>
 800911e:	1e03      	subs	r3, r0, #0
 8009120:	d102      	bne.n	8009128 <xQueueGenericSend+0x66>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d101      	bne.n	800912c <xQueueGenericSend+0x6a>
 8009128:	2301      	movs	r3, #1
 800912a:	e000      	b.n	800912e <xQueueGenericSend+0x6c>
 800912c:	2300      	movs	r3, #0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d101      	bne.n	8009136 <xQueueGenericSend+0x74>
 8009132:	b672      	cpsid	i
 8009134:	e7fe      	b.n	8009134 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009136:	f001 f833 	bl	800a1a0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800913a:	6a3b      	ldr	r3, [r7, #32]
 800913c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800913e:	6a3b      	ldr	r3, [r7, #32]
 8009140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009142:	429a      	cmp	r2, r3
 8009144:	d302      	bcc.n	800914c <xQueueGenericSend+0x8a>
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	2b02      	cmp	r3, #2
 800914a:	d11e      	bne.n	800918a <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800914c:	683a      	ldr	r2, [r7, #0]
 800914e:	68b9      	ldr	r1, [r7, #8]
 8009150:	6a3b      	ldr	r3, [r7, #32]
 8009152:	0018      	movs	r0, r3
 8009154:	f000 f879 	bl	800924a <prvCopyDataToQueue>
 8009158:	0003      	movs	r3, r0
 800915a:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800915c:	6a3b      	ldr	r3, [r7, #32]
 800915e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009160:	2b00      	cmp	r3, #0
 8009162:	d009      	beq.n	8009178 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009164:	6a3b      	ldr	r3, [r7, #32]
 8009166:	3324      	adds	r3, #36	; 0x24
 8009168:	0018      	movs	r0, r3
 800916a:	f000 fd15 	bl	8009b98 <xTaskRemoveFromEventList>
 800916e:	1e03      	subs	r3, r0, #0
 8009170:	d007      	beq.n	8009182 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009172:	f001 f805 	bl	800a180 <vPortYield>
 8009176:	e004      	b.n	8009182 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d001      	beq.n	8009182 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800917e:	f000 ffff 	bl	800a180 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009182:	f001 f81f 	bl	800a1c4 <vPortExitCritical>
				return pdPASS;
 8009186:	2301      	movs	r3, #1
 8009188:	e05b      	b.n	8009242 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d103      	bne.n	8009198 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009190:	f001 f818 	bl	800a1c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009194:	2300      	movs	r3, #0
 8009196:	e054      	b.n	8009242 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919a:	2b00      	cmp	r3, #0
 800919c:	d106      	bne.n	80091ac <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800919e:	2314      	movs	r3, #20
 80091a0:	18fb      	adds	r3, r7, r3
 80091a2:	0018      	movs	r0, r3
 80091a4:	f000 fd54 	bl	8009c50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091a8:	2301      	movs	r3, #1
 80091aa:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80091ac:	f001 f80a 	bl	800a1c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80091b0:	f000 fb2e 	bl	8009810 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091b4:	f000 fff4 	bl	800a1a0 <vPortEnterCritical>
 80091b8:	6a3b      	ldr	r3, [r7, #32]
 80091ba:	2244      	movs	r2, #68	; 0x44
 80091bc:	5c9b      	ldrb	r3, [r3, r2]
 80091be:	b25b      	sxtb	r3, r3
 80091c0:	3301      	adds	r3, #1
 80091c2:	d103      	bne.n	80091cc <xQueueGenericSend+0x10a>
 80091c4:	6a3b      	ldr	r3, [r7, #32]
 80091c6:	2244      	movs	r2, #68	; 0x44
 80091c8:	2100      	movs	r1, #0
 80091ca:	5499      	strb	r1, [r3, r2]
 80091cc:	6a3b      	ldr	r3, [r7, #32]
 80091ce:	2245      	movs	r2, #69	; 0x45
 80091d0:	5c9b      	ldrb	r3, [r3, r2]
 80091d2:	b25b      	sxtb	r3, r3
 80091d4:	3301      	adds	r3, #1
 80091d6:	d103      	bne.n	80091e0 <xQueueGenericSend+0x11e>
 80091d8:	6a3b      	ldr	r3, [r7, #32]
 80091da:	2245      	movs	r2, #69	; 0x45
 80091dc:	2100      	movs	r1, #0
 80091de:	5499      	strb	r1, [r3, r2]
 80091e0:	f000 fff0 	bl	800a1c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091e4:	1d3a      	adds	r2, r7, #4
 80091e6:	2314      	movs	r3, #20
 80091e8:	18fb      	adds	r3, r7, r3
 80091ea:	0011      	movs	r1, r2
 80091ec:	0018      	movs	r0, r3
 80091ee:	f000 fd43 	bl	8009c78 <xTaskCheckForTimeOut>
 80091f2:	1e03      	subs	r3, r0, #0
 80091f4:	d11e      	bne.n	8009234 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80091f6:	6a3b      	ldr	r3, [r7, #32]
 80091f8:	0018      	movs	r0, r3
 80091fa:	f000 f8ef 	bl	80093dc <prvIsQueueFull>
 80091fe:	1e03      	subs	r3, r0, #0
 8009200:	d011      	beq.n	8009226 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009202:	6a3b      	ldr	r3, [r7, #32]
 8009204:	3310      	adds	r3, #16
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	0011      	movs	r1, r2
 800920a:	0018      	movs	r0, r3
 800920c:	f000 fca6 	bl	8009b5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009210:	6a3b      	ldr	r3, [r7, #32]
 8009212:	0018      	movs	r0, r3
 8009214:	f000 f884 	bl	8009320 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009218:	f000 fb06 	bl	8009828 <xTaskResumeAll>
 800921c:	1e03      	subs	r3, r0, #0
 800921e:	d18a      	bne.n	8009136 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8009220:	f000 ffae 	bl	800a180 <vPortYield>
 8009224:	e787      	b.n	8009136 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009226:	6a3b      	ldr	r3, [r7, #32]
 8009228:	0018      	movs	r0, r3
 800922a:	f000 f879 	bl	8009320 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800922e:	f000 fafb 	bl	8009828 <xTaskResumeAll>
 8009232:	e780      	b.n	8009136 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009234:	6a3b      	ldr	r3, [r7, #32]
 8009236:	0018      	movs	r0, r3
 8009238:	f000 f872 	bl	8009320 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800923c:	f000 faf4 	bl	8009828 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009240:	2300      	movs	r3, #0
		}
	}
}
 8009242:	0018      	movs	r0, r3
 8009244:	46bd      	mov	sp, r7
 8009246:	b00a      	add	sp, #40	; 0x28
 8009248:	bd80      	pop	{r7, pc}

0800924a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b086      	sub	sp, #24
 800924e:	af00      	add	r7, sp, #0
 8009250:	60f8      	str	r0, [r7, #12]
 8009252:	60b9      	str	r1, [r7, #8]
 8009254:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009256:	2300      	movs	r3, #0
 8009258:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800925e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009264:	2b00      	cmp	r3, #0
 8009266:	d10e      	bne.n	8009286 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d14e      	bne.n	800930e <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	0018      	movs	r0, r3
 8009276:	f000 fe49 	bl	8009f0c <xTaskPriorityDisinherit>
 800927a:	0003      	movs	r3, r0
 800927c:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2200      	movs	r2, #0
 8009282:	605a      	str	r2, [r3, #4]
 8009284:	e043      	b.n	800930e <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d119      	bne.n	80092c0 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6898      	ldr	r0, [r3, #8]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	0019      	movs	r1, r3
 8009298:	f001 fafb 	bl	800a892 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	689a      	ldr	r2, [r3, #8]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a4:	18d2      	adds	r2, r2, r3
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	689a      	ldr	r2, [r3, #8]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d32b      	bcc.n	800930e <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	609a      	str	r2, [r3, #8]
 80092be:	e026      	b.n	800930e <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	68d8      	ldr	r0, [r3, #12]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	0019      	movs	r1, r3
 80092cc:	f001 fae1 	bl	800a892 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	68da      	ldr	r2, [r3, #12]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d8:	425b      	negs	r3, r3
 80092da:	18d2      	adds	r2, r2, r3
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	68da      	ldr	r2, [r3, #12]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d207      	bcs.n	80092fc <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	685a      	ldr	r2, [r3, #4]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092f4:	425b      	negs	r3, r3
 80092f6:	18d2      	adds	r2, r2, r3
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2b02      	cmp	r3, #2
 8009300:	d105      	bne.n	800930e <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d002      	beq.n	800930e <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	3b01      	subs	r3, #1
 800930c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	1c5a      	adds	r2, r3, #1
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009316:	697b      	ldr	r3, [r7, #20]
}
 8009318:	0018      	movs	r0, r3
 800931a:	46bd      	mov	sp, r7
 800931c:	b006      	add	sp, #24
 800931e:	bd80      	pop	{r7, pc}

08009320 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009328:	f000 ff3a 	bl	800a1a0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800932c:	230f      	movs	r3, #15
 800932e:	18fb      	adds	r3, r7, r3
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	2145      	movs	r1, #69	; 0x45
 8009334:	5c52      	ldrb	r2, [r2, r1]
 8009336:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009338:	e013      	b.n	8009362 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933e:	2b00      	cmp	r3, #0
 8009340:	d016      	beq.n	8009370 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	3324      	adds	r3, #36	; 0x24
 8009346:	0018      	movs	r0, r3
 8009348:	f000 fc26 	bl	8009b98 <xTaskRemoveFromEventList>
 800934c:	1e03      	subs	r3, r0, #0
 800934e:	d001      	beq.n	8009354 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009350:	f000 fce2 	bl	8009d18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009354:	210f      	movs	r1, #15
 8009356:	187b      	adds	r3, r7, r1
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	3b01      	subs	r3, #1
 800935c:	b2da      	uxtb	r2, r3
 800935e:	187b      	adds	r3, r7, r1
 8009360:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009362:	230f      	movs	r3, #15
 8009364:	18fb      	adds	r3, r7, r3
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	b25b      	sxtb	r3, r3
 800936a:	2b00      	cmp	r3, #0
 800936c:	dce5      	bgt.n	800933a <prvUnlockQueue+0x1a>
 800936e:	e000      	b.n	8009372 <prvUnlockQueue+0x52>
					break;
 8009370:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2245      	movs	r2, #69	; 0x45
 8009376:	21ff      	movs	r1, #255	; 0xff
 8009378:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800937a:	f000 ff23 	bl	800a1c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800937e:	f000 ff0f 	bl	800a1a0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009382:	230e      	movs	r3, #14
 8009384:	18fb      	adds	r3, r7, r3
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	2144      	movs	r1, #68	; 0x44
 800938a:	5c52      	ldrb	r2, [r2, r1]
 800938c:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800938e:	e013      	b.n	80093b8 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	691b      	ldr	r3, [r3, #16]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d016      	beq.n	80093c6 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	3310      	adds	r3, #16
 800939c:	0018      	movs	r0, r3
 800939e:	f000 fbfb 	bl	8009b98 <xTaskRemoveFromEventList>
 80093a2:	1e03      	subs	r3, r0, #0
 80093a4:	d001      	beq.n	80093aa <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80093a6:	f000 fcb7 	bl	8009d18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80093aa:	210e      	movs	r1, #14
 80093ac:	187b      	adds	r3, r7, r1
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	3b01      	subs	r3, #1
 80093b2:	b2da      	uxtb	r2, r3
 80093b4:	187b      	adds	r3, r7, r1
 80093b6:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093b8:	230e      	movs	r3, #14
 80093ba:	18fb      	adds	r3, r7, r3
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	b25b      	sxtb	r3, r3
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	dce5      	bgt.n	8009390 <prvUnlockQueue+0x70>
 80093c4:	e000      	b.n	80093c8 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80093c6:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2244      	movs	r2, #68	; 0x44
 80093cc:	21ff      	movs	r1, #255	; 0xff
 80093ce:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80093d0:	f000 fef8 	bl	800a1c4 <vPortExitCritical>
}
 80093d4:	46c0      	nop			; (mov r8, r8)
 80093d6:	46bd      	mov	sp, r7
 80093d8:	b004      	add	sp, #16
 80093da:	bd80      	pop	{r7, pc}

080093dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093e4:	f000 fedc 	bl	800a1a0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d102      	bne.n	80093fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80093f4:	2301      	movs	r3, #1
 80093f6:	60fb      	str	r3, [r7, #12]
 80093f8:	e001      	b.n	80093fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80093fa:	2300      	movs	r3, #0
 80093fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80093fe:	f000 fee1 	bl	800a1c4 <vPortExitCritical>

	return xReturn;
 8009402:	68fb      	ldr	r3, [r7, #12]
}
 8009404:	0018      	movs	r0, r3
 8009406:	46bd      	mov	sp, r7
 8009408:	b004      	add	sp, #16
 800940a:	bd80      	pop	{r7, pc}

0800940c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800940c:	b590      	push	{r4, r7, lr}
 800940e:	b08d      	sub	sp, #52	; 0x34
 8009410:	af04      	add	r7, sp, #16
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
 8009418:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800941a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800941c:	2b00      	cmp	r3, #0
 800941e:	d101      	bne.n	8009424 <xTaskCreateStatic+0x18>
 8009420:	b672      	cpsid	i
 8009422:	e7fe      	b.n	8009422 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8009424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009426:	2b00      	cmp	r3, #0
 8009428:	d101      	bne.n	800942e <xTaskCreateStatic+0x22>
 800942a:	b672      	cpsid	i
 800942c:	e7fe      	b.n	800942c <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800942e:	23b4      	movs	r3, #180	; 0xb4
 8009430:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	2bb4      	cmp	r3, #180	; 0xb4
 8009436:	d001      	beq.n	800943c <xTaskCreateStatic+0x30>
 8009438:	b672      	cpsid	i
 800943a:	e7fe      	b.n	800943a <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800943c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943e:	2b00      	cmp	r3, #0
 8009440:	d020      	beq.n	8009484 <xTaskCreateStatic+0x78>
 8009442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009444:	2b00      	cmp	r3, #0
 8009446:	d01d      	beq.n	8009484 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944a:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009450:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	22b1      	movs	r2, #177	; 0xb1
 8009456:	2102      	movs	r1, #2
 8009458:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800945a:	683c      	ldr	r4, [r7, #0]
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	68b9      	ldr	r1, [r7, #8]
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	2300      	movs	r3, #0
 8009464:	9303      	str	r3, [sp, #12]
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	9302      	str	r3, [sp, #8]
 800946a:	2318      	movs	r3, #24
 800946c:	18fb      	adds	r3, r7, r3
 800946e:	9301      	str	r3, [sp, #4]
 8009470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	0023      	movs	r3, r4
 8009476:	f000 f859 	bl	800952c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	0018      	movs	r0, r3
 800947e:	f000 f8e5 	bl	800964c <prvAddNewTaskToReadyList>
 8009482:	e001      	b.n	8009488 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8009484:	2300      	movs	r3, #0
 8009486:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009488:	69bb      	ldr	r3, [r7, #24]
	}
 800948a:	0018      	movs	r0, r3
 800948c:	46bd      	mov	sp, r7
 800948e:	b009      	add	sp, #36	; 0x24
 8009490:	bd90      	pop	{r4, r7, pc}

08009492 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009492:	b590      	push	{r4, r7, lr}
 8009494:	b08d      	sub	sp, #52	; 0x34
 8009496:	af04      	add	r7, sp, #16
 8009498:	60f8      	str	r0, [r7, #12]
 800949a:	60b9      	str	r1, [r7, #8]
 800949c:	603b      	str	r3, [r7, #0]
 800949e:	1dbb      	adds	r3, r7, #6
 80094a0:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094a2:	1dbb      	adds	r3, r7, #6
 80094a4:	881b      	ldrh	r3, [r3, #0]
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	0018      	movs	r0, r3
 80094aa:	f000 ff11 	bl	800a2d0 <pvPortMalloc>
 80094ae:	0003      	movs	r3, r0
 80094b0:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d010      	beq.n	80094da <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80094b8:	20b4      	movs	r0, #180	; 0xb4
 80094ba:	f000 ff09 	bl	800a2d0 <pvPortMalloc>
 80094be:	0003      	movs	r3, r0
 80094c0:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d003      	beq.n	80094d0 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80094c8:	69fb      	ldr	r3, [r7, #28]
 80094ca:	697a      	ldr	r2, [r7, #20]
 80094cc:	631a      	str	r2, [r3, #48]	; 0x30
 80094ce:	e006      	b.n	80094de <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	0018      	movs	r0, r3
 80094d4:	f000 ffa2 	bl	800a41c <vPortFree>
 80094d8:	e001      	b.n	80094de <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80094da:	2300      	movs	r3, #0
 80094dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80094de:	69fb      	ldr	r3, [r7, #28]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d01a      	beq.n	800951a <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	22b1      	movs	r2, #177	; 0xb1
 80094e8:	2100      	movs	r1, #0
 80094ea:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80094ec:	1dbb      	adds	r3, r7, #6
 80094ee:	881a      	ldrh	r2, [r3, #0]
 80094f0:	683c      	ldr	r4, [r7, #0]
 80094f2:	68b9      	ldr	r1, [r7, #8]
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	2300      	movs	r3, #0
 80094f8:	9303      	str	r3, [sp, #12]
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	9302      	str	r3, [sp, #8]
 80094fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009500:	9301      	str	r3, [sp, #4]
 8009502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009504:	9300      	str	r3, [sp, #0]
 8009506:	0023      	movs	r3, r4
 8009508:	f000 f810 	bl	800952c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	0018      	movs	r0, r3
 8009510:	f000 f89c 	bl	800964c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009514:	2301      	movs	r3, #1
 8009516:	61bb      	str	r3, [r7, #24]
 8009518:	e002      	b.n	8009520 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800951a:	2301      	movs	r3, #1
 800951c:	425b      	negs	r3, r3
 800951e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009520:	69bb      	ldr	r3, [r7, #24]
	}
 8009522:	0018      	movs	r0, r3
 8009524:	46bd      	mov	sp, r7
 8009526:	b009      	add	sp, #36	; 0x24
 8009528:	bd90      	pop	{r4, r7, pc}
	...

0800952c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b086      	sub	sp, #24
 8009530:	af00      	add	r7, sp, #0
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	607a      	str	r2, [r7, #4]
 8009538:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800953a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	493e      	ldr	r1, [pc, #248]	; (800963c <prvInitialiseNewTask+0x110>)
 8009542:	468c      	mov	ip, r1
 8009544:	4463      	add	r3, ip
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	18d3      	adds	r3, r2, r3
 800954a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	2207      	movs	r2, #7
 8009550:	4393      	bics	r3, r2
 8009552:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	2207      	movs	r2, #7
 8009558:	4013      	ands	r3, r2
 800955a:	d001      	beq.n	8009560 <prvInitialiseNewTask+0x34>
 800955c:	b672      	cpsid	i
 800955e:	e7fe      	b.n	800955e <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009560:	2300      	movs	r3, #0
 8009562:	617b      	str	r3, [r7, #20]
 8009564:	e013      	b.n	800958e <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009566:	68ba      	ldr	r2, [r7, #8]
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	18d3      	adds	r3, r2, r3
 800956c:	7818      	ldrb	r0, [r3, #0]
 800956e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009570:	2134      	movs	r1, #52	; 0x34
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	18d3      	adds	r3, r2, r3
 8009576:	185b      	adds	r3, r3, r1
 8009578:	1c02      	adds	r2, r0, #0
 800957a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800957c:	68ba      	ldr	r2, [r7, #8]
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	18d3      	adds	r3, r2, r3
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d006      	beq.n	8009596 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	3301      	adds	r3, #1
 800958c:	617b      	str	r3, [r7, #20]
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	2b0f      	cmp	r3, #15
 8009592:	d9e8      	bls.n	8009566 <prvInitialiseNewTask+0x3a>
 8009594:	e000      	b.n	8009598 <prvInitialiseNewTask+0x6c>
		{
			break;
 8009596:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959a:	2243      	movs	r2, #67	; 0x43
 800959c:	2100      	movs	r1, #0
 800959e:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80095a0:	6a3b      	ldr	r3, [r7, #32]
 80095a2:	2b06      	cmp	r3, #6
 80095a4:	d901      	bls.n	80095aa <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80095a6:	2306      	movs	r3, #6
 80095a8:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80095aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ac:	6a3a      	ldr	r2, [r7, #32]
 80095ae:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80095b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b2:	6a3a      	ldr	r2, [r7, #32]
 80095b4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80095b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b8:	2200      	movs	r2, #0
 80095ba:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80095bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095be:	3304      	adds	r3, #4
 80095c0:	0018      	movs	r0, r3
 80095c2:	f7ff fbfc 	bl	8008dbe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80095c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c8:	3318      	adds	r3, #24
 80095ca:	0018      	movs	r0, r3
 80095cc:	f7ff fbf7 	bl	8008dbe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80095d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095d4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095d6:	6a3b      	ldr	r3, [r7, #32]
 80095d8:	2207      	movs	r2, #7
 80095da:	1ad2      	subs	r2, r2, r3
 80095dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095de:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80095e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095e4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80095e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e8:	22ac      	movs	r2, #172	; 0xac
 80095ea:	2100      	movs	r1, #0
 80095ec:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80095ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f0:	22b0      	movs	r2, #176	; 0xb0
 80095f2:	2100      	movs	r1, #0
 80095f4:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80095f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f8:	334c      	adds	r3, #76	; 0x4c
 80095fa:	2260      	movs	r2, #96	; 0x60
 80095fc:	2100      	movs	r1, #0
 80095fe:	0018      	movs	r0, r3
 8009600:	f001 f950 	bl	800a8a4 <memset>
 8009604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009606:	4a0e      	ldr	r2, [pc, #56]	; (8009640 <prvInitialiseNewTask+0x114>)
 8009608:	651a      	str	r2, [r3, #80]	; 0x50
 800960a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960c:	4a0d      	ldr	r2, [pc, #52]	; (8009644 <prvInitialiseNewTask+0x118>)
 800960e:	655a      	str	r2, [r3, #84]	; 0x54
 8009610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009612:	4a0d      	ldr	r2, [pc, #52]	; (8009648 <prvInitialiseNewTask+0x11c>)
 8009614:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009616:	683a      	ldr	r2, [r7, #0]
 8009618:	68f9      	ldr	r1, [r7, #12]
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	0018      	movs	r0, r3
 800961e:	f000 fd25 	bl	800a06c <pxPortInitialiseStack>
 8009622:	0002      	movs	r2, r0
 8009624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009626:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962a:	2b00      	cmp	r3, #0
 800962c:	d002      	beq.n	8009634 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800962e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009632:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009634:	46c0      	nop			; (mov r8, r8)
 8009636:	46bd      	mov	sp, r7
 8009638:	b006      	add	sp, #24
 800963a:	bd80      	pop	{r7, pc}
 800963c:	3fffffff 	.word	0x3fffffff
 8009640:	0800f67c 	.word	0x0800f67c
 8009644:	0800f69c 	.word	0x0800f69c
 8009648:	0800f65c 	.word	0x0800f65c

0800964c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009654:	f000 fda4 	bl	800a1a0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009658:	4b28      	ldr	r3, [pc, #160]	; (80096fc <prvAddNewTaskToReadyList+0xb0>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	1c5a      	adds	r2, r3, #1
 800965e:	4b27      	ldr	r3, [pc, #156]	; (80096fc <prvAddNewTaskToReadyList+0xb0>)
 8009660:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8009662:	4b27      	ldr	r3, [pc, #156]	; (8009700 <prvAddNewTaskToReadyList+0xb4>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d109      	bne.n	800967e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800966a:	4b25      	ldr	r3, [pc, #148]	; (8009700 <prvAddNewTaskToReadyList+0xb4>)
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009670:	4b22      	ldr	r3, [pc, #136]	; (80096fc <prvAddNewTaskToReadyList+0xb0>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d110      	bne.n	800969a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009678:	f000 fb68 	bl	8009d4c <prvInitialiseTaskLists>
 800967c:	e00d      	b.n	800969a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800967e:	4b21      	ldr	r3, [pc, #132]	; (8009704 <prvAddNewTaskToReadyList+0xb8>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d109      	bne.n	800969a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009686:	4b1e      	ldr	r3, [pc, #120]	; (8009700 <prvAddNewTaskToReadyList+0xb4>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009690:	429a      	cmp	r2, r3
 8009692:	d802      	bhi.n	800969a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009694:	4b1a      	ldr	r3, [pc, #104]	; (8009700 <prvAddNewTaskToReadyList+0xb4>)
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800969a:	4b1b      	ldr	r3, [pc, #108]	; (8009708 <prvAddNewTaskToReadyList+0xbc>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	1c5a      	adds	r2, r3, #1
 80096a0:	4b19      	ldr	r3, [pc, #100]	; (8009708 <prvAddNewTaskToReadyList+0xbc>)
 80096a2:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a8:	4b18      	ldr	r3, [pc, #96]	; (800970c <prvAddNewTaskToReadyList+0xc0>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d903      	bls.n	80096b8 <prvAddNewTaskToReadyList+0x6c>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096b4:	4b15      	ldr	r3, [pc, #84]	; (800970c <prvAddNewTaskToReadyList+0xc0>)
 80096b6:	601a      	str	r2, [r3, #0]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096bc:	0013      	movs	r3, r2
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	189b      	adds	r3, r3, r2
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	4a12      	ldr	r2, [pc, #72]	; (8009710 <prvAddNewTaskToReadyList+0xc4>)
 80096c6:	189a      	adds	r2, r3, r2
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	3304      	adds	r3, #4
 80096cc:	0019      	movs	r1, r3
 80096ce:	0010      	movs	r0, r2
 80096d0:	f7ff fb80 	bl	8008dd4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80096d4:	f000 fd76 	bl	800a1c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80096d8:	4b0a      	ldr	r3, [pc, #40]	; (8009704 <prvAddNewTaskToReadyList+0xb8>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d008      	beq.n	80096f2 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80096e0:	4b07      	ldr	r3, [pc, #28]	; (8009700 <prvAddNewTaskToReadyList+0xb4>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d201      	bcs.n	80096f2 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80096ee:	f000 fd47 	bl	800a180 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096f2:	46c0      	nop			; (mov r8, r8)
 80096f4:	46bd      	mov	sp, r7
 80096f6:	b002      	add	sp, #8
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	46c0      	nop			; (mov r8, r8)
 80096fc:	20000af8 	.word	0x20000af8
 8009700:	200009f8 	.word	0x200009f8
 8009704:	20000b04 	.word	0x20000b04
 8009708:	20000b14 	.word	0x20000b14
 800970c:	20000b00 	.word	0x20000b00
 8009710:	200009fc 	.word	0x200009fc

08009714 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800971c:	2300      	movs	r3, #0
 800971e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d010      	beq.n	8009748 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009726:	4b0d      	ldr	r3, [pc, #52]	; (800975c <vTaskDelay+0x48>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d001      	beq.n	8009732 <vTaskDelay+0x1e>
 800972e:	b672      	cpsid	i
 8009730:	e7fe      	b.n	8009730 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8009732:	f000 f86d 	bl	8009810 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2100      	movs	r1, #0
 800973a:	0018      	movs	r0, r3
 800973c:	f000 fc42 	bl	8009fc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009740:	f000 f872 	bl	8009828 <xTaskResumeAll>
 8009744:	0003      	movs	r3, r0
 8009746:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d101      	bne.n	8009752 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800974e:	f000 fd17 	bl	800a180 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009752:	46c0      	nop			; (mov r8, r8)
 8009754:	46bd      	mov	sp, r7
 8009756:	b004      	add	sp, #16
 8009758:	bd80      	pop	{r7, pc}
 800975a:	46c0      	nop			; (mov r8, r8)
 800975c:	20000b20 	.word	0x20000b20

08009760 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009760:	b590      	push	{r4, r7, lr}
 8009762:	b089      	sub	sp, #36	; 0x24
 8009764:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009766:	2300      	movs	r3, #0
 8009768:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800976a:	2300      	movs	r3, #0
 800976c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800976e:	003a      	movs	r2, r7
 8009770:	1d39      	adds	r1, r7, #4
 8009772:	2308      	movs	r3, #8
 8009774:	18fb      	adds	r3, r7, r3
 8009776:	0018      	movs	r0, r3
 8009778:	f7f9 fcde 	bl	8003138 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800977c:	683c      	ldr	r4, [r7, #0]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	68ba      	ldr	r2, [r7, #8]
 8009782:	491b      	ldr	r1, [pc, #108]	; (80097f0 <vTaskStartScheduler+0x90>)
 8009784:	481b      	ldr	r0, [pc, #108]	; (80097f4 <vTaskStartScheduler+0x94>)
 8009786:	9202      	str	r2, [sp, #8]
 8009788:	9301      	str	r3, [sp, #4]
 800978a:	2300      	movs	r3, #0
 800978c:	9300      	str	r3, [sp, #0]
 800978e:	2300      	movs	r3, #0
 8009790:	0022      	movs	r2, r4
 8009792:	f7ff fe3b 	bl	800940c <xTaskCreateStatic>
 8009796:	0002      	movs	r2, r0
 8009798:	4b17      	ldr	r3, [pc, #92]	; (80097f8 <vTaskStartScheduler+0x98>)
 800979a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800979c:	4b16      	ldr	r3, [pc, #88]	; (80097f8 <vTaskStartScheduler+0x98>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d002      	beq.n	80097aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80097a4:	2301      	movs	r3, #1
 80097a6:	60fb      	str	r3, [r7, #12]
 80097a8:	e001      	b.n	80097ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80097aa:	2300      	movs	r3, #0
 80097ac:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d113      	bne.n	80097dc <vTaskStartScheduler+0x7c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80097b4:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80097b6:	4b11      	ldr	r3, [pc, #68]	; (80097fc <vTaskStartScheduler+0x9c>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	334c      	adds	r3, #76	; 0x4c
 80097bc:	001a      	movs	r2, r3
 80097be:	4b10      	ldr	r3, [pc, #64]	; (8009800 <vTaskStartScheduler+0xa0>)
 80097c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80097c2:	4b10      	ldr	r3, [pc, #64]	; (8009804 <vTaskStartScheduler+0xa4>)
 80097c4:	2201      	movs	r2, #1
 80097c6:	4252      	negs	r2, r2
 80097c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80097ca:	4b0f      	ldr	r3, [pc, #60]	; (8009808 <vTaskStartScheduler+0xa8>)
 80097cc:	2201      	movs	r2, #1
 80097ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80097d0:	4b0e      	ldr	r3, [pc, #56]	; (800980c <vTaskStartScheduler+0xac>)
 80097d2:	2200      	movs	r2, #0
 80097d4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80097d6:	f000 fcaf 	bl	800a138 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80097da:	e004      	b.n	80097e6 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	3301      	adds	r3, #1
 80097e0:	d101      	bne.n	80097e6 <vTaskStartScheduler+0x86>
 80097e2:	b672      	cpsid	i
 80097e4:	e7fe      	b.n	80097e4 <vTaskStartScheduler+0x84>
}
 80097e6:	46c0      	nop			; (mov r8, r8)
 80097e8:	46bd      	mov	sp, r7
 80097ea:	b005      	add	sp, #20
 80097ec:	bd90      	pop	{r4, r7, pc}
 80097ee:	46c0      	nop			; (mov r8, r8)
 80097f0:	0800f044 	.word	0x0800f044
 80097f4:	08009d2d 	.word	0x08009d2d
 80097f8:	20000b1c 	.word	0x20000b1c
 80097fc:	200009f8 	.word	0x200009f8
 8009800:	2000005c 	.word	0x2000005c
 8009804:	20000b18 	.word	0x20000b18
 8009808:	20000b04 	.word	0x20000b04
 800980c:	20000afc 	.word	0x20000afc

08009810 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009810:	b580      	push	{r7, lr}
 8009812:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009814:	4b03      	ldr	r3, [pc, #12]	; (8009824 <vTaskSuspendAll+0x14>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	1c5a      	adds	r2, r3, #1
 800981a:	4b02      	ldr	r3, [pc, #8]	; (8009824 <vTaskSuspendAll+0x14>)
 800981c:	601a      	str	r2, [r3, #0]
}
 800981e:	46c0      	nop			; (mov r8, r8)
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	20000b20 	.word	0x20000b20

08009828 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800982e:	2300      	movs	r3, #0
 8009830:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009832:	2300      	movs	r3, #0
 8009834:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009836:	4b3a      	ldr	r3, [pc, #232]	; (8009920 <xTaskResumeAll+0xf8>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d101      	bne.n	8009842 <xTaskResumeAll+0x1a>
 800983e:	b672      	cpsid	i
 8009840:	e7fe      	b.n	8009840 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009842:	f000 fcad 	bl	800a1a0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009846:	4b36      	ldr	r3, [pc, #216]	; (8009920 <xTaskResumeAll+0xf8>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	1e5a      	subs	r2, r3, #1
 800984c:	4b34      	ldr	r3, [pc, #208]	; (8009920 <xTaskResumeAll+0xf8>)
 800984e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009850:	4b33      	ldr	r3, [pc, #204]	; (8009920 <xTaskResumeAll+0xf8>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d15b      	bne.n	8009910 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009858:	4b32      	ldr	r3, [pc, #200]	; (8009924 <xTaskResumeAll+0xfc>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d057      	beq.n	8009910 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009860:	e02f      	b.n	80098c2 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009862:	4b31      	ldr	r3, [pc, #196]	; (8009928 <xTaskResumeAll+0x100>)
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	3318      	adds	r3, #24
 800986e:	0018      	movs	r0, r3
 8009870:	f7ff fb08 	bl	8008e84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	3304      	adds	r3, #4
 8009878:	0018      	movs	r0, r3
 800987a:	f7ff fb03 	bl	8008e84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009882:	4b2a      	ldr	r3, [pc, #168]	; (800992c <xTaskResumeAll+0x104>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	429a      	cmp	r2, r3
 8009888:	d903      	bls.n	8009892 <xTaskResumeAll+0x6a>
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800988e:	4b27      	ldr	r3, [pc, #156]	; (800992c <xTaskResumeAll+0x104>)
 8009890:	601a      	str	r2, [r3, #0]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009896:	0013      	movs	r3, r2
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	189b      	adds	r3, r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4a24      	ldr	r2, [pc, #144]	; (8009930 <xTaskResumeAll+0x108>)
 80098a0:	189a      	adds	r2, r3, r2
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	3304      	adds	r3, #4
 80098a6:	0019      	movs	r1, r3
 80098a8:	0010      	movs	r0, r2
 80098aa:	f7ff fa93 	bl	8008dd4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098b2:	4b20      	ldr	r3, [pc, #128]	; (8009934 <xTaskResumeAll+0x10c>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d302      	bcc.n	80098c2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80098bc:	4b1e      	ldr	r3, [pc, #120]	; (8009938 <xTaskResumeAll+0x110>)
 80098be:	2201      	movs	r2, #1
 80098c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80098c2:	4b19      	ldr	r3, [pc, #100]	; (8009928 <xTaskResumeAll+0x100>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d1cb      	bne.n	8009862 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d001      	beq.n	80098d4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80098d0:	f000 fadc 	bl	8009e8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80098d4:	4b19      	ldr	r3, [pc, #100]	; (800993c <xTaskResumeAll+0x114>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d00f      	beq.n	8009900 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80098e0:	f000 f82e 	bl	8009940 <xTaskIncrementTick>
 80098e4:	1e03      	subs	r3, r0, #0
 80098e6:	d002      	beq.n	80098ee <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80098e8:	4b13      	ldr	r3, [pc, #76]	; (8009938 <xTaskResumeAll+0x110>)
 80098ea:	2201      	movs	r2, #1
 80098ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	3b01      	subs	r3, #1
 80098f2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d1f2      	bne.n	80098e0 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80098fa:	4b10      	ldr	r3, [pc, #64]	; (800993c <xTaskResumeAll+0x114>)
 80098fc:	2200      	movs	r2, #0
 80098fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009900:	4b0d      	ldr	r3, [pc, #52]	; (8009938 <xTaskResumeAll+0x110>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d003      	beq.n	8009910 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009908:	2301      	movs	r3, #1
 800990a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800990c:	f000 fc38 	bl	800a180 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009910:	f000 fc58 	bl	800a1c4 <vPortExitCritical>

	return xAlreadyYielded;
 8009914:	68bb      	ldr	r3, [r7, #8]
}
 8009916:	0018      	movs	r0, r3
 8009918:	46bd      	mov	sp, r7
 800991a:	b004      	add	sp, #16
 800991c:	bd80      	pop	{r7, pc}
 800991e:	46c0      	nop			; (mov r8, r8)
 8009920:	20000b20 	.word	0x20000b20
 8009924:	20000af8 	.word	0x20000af8
 8009928:	20000ab8 	.word	0x20000ab8
 800992c:	20000b00 	.word	0x20000b00
 8009930:	200009fc 	.word	0x200009fc
 8009934:	200009f8 	.word	0x200009f8
 8009938:	20000b0c 	.word	0x20000b0c
 800993c:	20000b08 	.word	0x20000b08

08009940 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b086      	sub	sp, #24
 8009944:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009946:	2300      	movs	r3, #0
 8009948:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800994a:	4b4c      	ldr	r3, [pc, #304]	; (8009a7c <xTaskIncrementTick+0x13c>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d000      	beq.n	8009954 <xTaskIncrementTick+0x14>
 8009952:	e083      	b.n	8009a5c <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009954:	4b4a      	ldr	r3, [pc, #296]	; (8009a80 <xTaskIncrementTick+0x140>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	3301      	adds	r3, #1
 800995a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800995c:	4b48      	ldr	r3, [pc, #288]	; (8009a80 <xTaskIncrementTick+0x140>)
 800995e:	693a      	ldr	r2, [r7, #16]
 8009960:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d117      	bne.n	8009998 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8009968:	4b46      	ldr	r3, [pc, #280]	; (8009a84 <xTaskIncrementTick+0x144>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d001      	beq.n	8009976 <xTaskIncrementTick+0x36>
 8009972:	b672      	cpsid	i
 8009974:	e7fe      	b.n	8009974 <xTaskIncrementTick+0x34>
 8009976:	4b43      	ldr	r3, [pc, #268]	; (8009a84 <xTaskIncrementTick+0x144>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	60fb      	str	r3, [r7, #12]
 800997c:	4b42      	ldr	r3, [pc, #264]	; (8009a88 <xTaskIncrementTick+0x148>)
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	4b40      	ldr	r3, [pc, #256]	; (8009a84 <xTaskIncrementTick+0x144>)
 8009982:	601a      	str	r2, [r3, #0]
 8009984:	4b40      	ldr	r3, [pc, #256]	; (8009a88 <xTaskIncrementTick+0x148>)
 8009986:	68fa      	ldr	r2, [r7, #12]
 8009988:	601a      	str	r2, [r3, #0]
 800998a:	4b40      	ldr	r3, [pc, #256]	; (8009a8c <xTaskIncrementTick+0x14c>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	1c5a      	adds	r2, r3, #1
 8009990:	4b3e      	ldr	r3, [pc, #248]	; (8009a8c <xTaskIncrementTick+0x14c>)
 8009992:	601a      	str	r2, [r3, #0]
 8009994:	f000 fa7a 	bl	8009e8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009998:	4b3d      	ldr	r3, [pc, #244]	; (8009a90 <xTaskIncrementTick+0x150>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	693a      	ldr	r2, [r7, #16]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d34e      	bcc.n	8009a40 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099a2:	4b38      	ldr	r3, [pc, #224]	; (8009a84 <xTaskIncrementTick+0x144>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d101      	bne.n	80099b0 <xTaskIncrementTick+0x70>
 80099ac:	2301      	movs	r3, #1
 80099ae:	e000      	b.n	80099b2 <xTaskIncrementTick+0x72>
 80099b0:	2300      	movs	r3, #0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d004      	beq.n	80099c0 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099b6:	4b36      	ldr	r3, [pc, #216]	; (8009a90 <xTaskIncrementTick+0x150>)
 80099b8:	2201      	movs	r2, #1
 80099ba:	4252      	negs	r2, r2
 80099bc:	601a      	str	r2, [r3, #0]
					break;
 80099be:	e03f      	b.n	8009a40 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80099c0:	4b30      	ldr	r3, [pc, #192]	; (8009a84 <xTaskIncrementTick+0x144>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	68db      	ldr	r3, [r3, #12]
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80099d0:	693a      	ldr	r2, [r7, #16]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d203      	bcs.n	80099e0 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80099d8:	4b2d      	ldr	r3, [pc, #180]	; (8009a90 <xTaskIncrementTick+0x150>)
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	601a      	str	r2, [r3, #0]
						break;
 80099de:	e02f      	b.n	8009a40 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	3304      	adds	r3, #4
 80099e4:	0018      	movs	r0, r3
 80099e6:	f7ff fa4d 	bl	8008e84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d004      	beq.n	80099fc <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	3318      	adds	r3, #24
 80099f6:	0018      	movs	r0, r3
 80099f8:	f7ff fa44 	bl	8008e84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a00:	4b24      	ldr	r3, [pc, #144]	; (8009a94 <xTaskIncrementTick+0x154>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d903      	bls.n	8009a10 <xTaskIncrementTick+0xd0>
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a0c:	4b21      	ldr	r3, [pc, #132]	; (8009a94 <xTaskIncrementTick+0x154>)
 8009a0e:	601a      	str	r2, [r3, #0]
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a14:	0013      	movs	r3, r2
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	189b      	adds	r3, r3, r2
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	4a1e      	ldr	r2, [pc, #120]	; (8009a98 <xTaskIncrementTick+0x158>)
 8009a1e:	189a      	adds	r2, r3, r2
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	3304      	adds	r3, #4
 8009a24:	0019      	movs	r1, r3
 8009a26:	0010      	movs	r0, r2
 8009a28:	f7ff f9d4 	bl	8008dd4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a30:	4b1a      	ldr	r3, [pc, #104]	; (8009a9c <xTaskIncrementTick+0x15c>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d3b3      	bcc.n	80099a2 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a3e:	e7b0      	b.n	80099a2 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a40:	4b16      	ldr	r3, [pc, #88]	; (8009a9c <xTaskIncrementTick+0x15c>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a46:	4914      	ldr	r1, [pc, #80]	; (8009a98 <xTaskIncrementTick+0x158>)
 8009a48:	0013      	movs	r3, r2
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	189b      	adds	r3, r3, r2
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	585b      	ldr	r3, [r3, r1]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d907      	bls.n	8009a66 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009a56:	2301      	movs	r3, #1
 8009a58:	617b      	str	r3, [r7, #20]
 8009a5a:	e004      	b.n	8009a66 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009a5c:	4b10      	ldr	r3, [pc, #64]	; (8009aa0 <xTaskIncrementTick+0x160>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	1c5a      	adds	r2, r3, #1
 8009a62:	4b0f      	ldr	r3, [pc, #60]	; (8009aa0 <xTaskIncrementTick+0x160>)
 8009a64:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009a66:	4b0f      	ldr	r3, [pc, #60]	; (8009aa4 <xTaskIncrementTick+0x164>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d001      	beq.n	8009a72 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009a72:	697b      	ldr	r3, [r7, #20]
}
 8009a74:	0018      	movs	r0, r3
 8009a76:	46bd      	mov	sp, r7
 8009a78:	b006      	add	sp, #24
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	20000b20 	.word	0x20000b20
 8009a80:	20000afc 	.word	0x20000afc
 8009a84:	20000ab0 	.word	0x20000ab0
 8009a88:	20000ab4 	.word	0x20000ab4
 8009a8c:	20000b10 	.word	0x20000b10
 8009a90:	20000b18 	.word	0x20000b18
 8009a94:	20000b00 	.word	0x20000b00
 8009a98:	200009fc 	.word	0x200009fc
 8009a9c:	200009f8 	.word	0x200009f8
 8009aa0:	20000b08 	.word	0x20000b08
 8009aa4:	20000b0c 	.word	0x20000b0c

08009aa8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009aae:	4b25      	ldr	r3, [pc, #148]	; (8009b44 <vTaskSwitchContext+0x9c>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d003      	beq.n	8009abe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009ab6:	4b24      	ldr	r3, [pc, #144]	; (8009b48 <vTaskSwitchContext+0xa0>)
 8009ab8:	2201      	movs	r2, #1
 8009aba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009abc:	e03d      	b.n	8009b3a <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8009abe:	4b22      	ldr	r3, [pc, #136]	; (8009b48 <vTaskSwitchContext+0xa0>)
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009ac4:	4b21      	ldr	r3, [pc, #132]	; (8009b4c <vTaskSwitchContext+0xa4>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	607b      	str	r3, [r7, #4]
 8009aca:	e007      	b.n	8009adc <vTaskSwitchContext+0x34>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d101      	bne.n	8009ad6 <vTaskSwitchContext+0x2e>
 8009ad2:	b672      	cpsid	i
 8009ad4:	e7fe      	b.n	8009ad4 <vTaskSwitchContext+0x2c>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	3b01      	subs	r3, #1
 8009ada:	607b      	str	r3, [r7, #4]
 8009adc:	491c      	ldr	r1, [pc, #112]	; (8009b50 <vTaskSwitchContext+0xa8>)
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	0013      	movs	r3, r2
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	189b      	adds	r3, r3, r2
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	585b      	ldr	r3, [r3, r1]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d0ee      	beq.n	8009acc <vTaskSwitchContext+0x24>
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	0013      	movs	r3, r2
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	189b      	adds	r3, r3, r2
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	4a15      	ldr	r2, [pc, #84]	; (8009b50 <vTaskSwitchContext+0xa8>)
 8009afa:	189b      	adds	r3, r3, r2
 8009afc:	603b      	str	r3, [r7, #0]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	685a      	ldr	r2, [r3, #4]
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	605a      	str	r2, [r3, #4]
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	685a      	ldr	r2, [r3, #4]
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	3308      	adds	r3, #8
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d104      	bne.n	8009b1e <vTaskSwitchContext+0x76>
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	685a      	ldr	r2, [r3, #4]
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	605a      	str	r2, [r3, #4]
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	68da      	ldr	r2, [r3, #12]
 8009b24:	4b0b      	ldr	r3, [pc, #44]	; (8009b54 <vTaskSwitchContext+0xac>)
 8009b26:	601a      	str	r2, [r3, #0]
 8009b28:	4b08      	ldr	r3, [pc, #32]	; (8009b4c <vTaskSwitchContext+0xa4>)
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009b2e:	4b09      	ldr	r3, [pc, #36]	; (8009b54 <vTaskSwitchContext+0xac>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	334c      	adds	r3, #76	; 0x4c
 8009b34:	001a      	movs	r2, r3
 8009b36:	4b08      	ldr	r3, [pc, #32]	; (8009b58 <vTaskSwitchContext+0xb0>)
 8009b38:	601a      	str	r2, [r3, #0]
}
 8009b3a:	46c0      	nop			; (mov r8, r8)
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	b002      	add	sp, #8
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	46c0      	nop			; (mov r8, r8)
 8009b44:	20000b20 	.word	0x20000b20
 8009b48:	20000b0c 	.word	0x20000b0c
 8009b4c:	20000b00 	.word	0x20000b00
 8009b50:	200009fc 	.word	0x200009fc
 8009b54:	200009f8 	.word	0x200009f8
 8009b58:	2000005c 	.word	0x2000005c

08009b5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d101      	bne.n	8009b70 <vTaskPlaceOnEventList+0x14>
 8009b6c:	b672      	cpsid	i
 8009b6e:	e7fe      	b.n	8009b6e <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b70:	4b08      	ldr	r3, [pc, #32]	; (8009b94 <vTaskPlaceOnEventList+0x38>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	3318      	adds	r3, #24
 8009b76:	001a      	movs	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	0011      	movs	r1, r2
 8009b7c:	0018      	movs	r0, r3
 8009b7e:	f7ff f94b 	bl	8008e18 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	2101      	movs	r1, #1
 8009b86:	0018      	movs	r0, r3
 8009b88:	f000 fa1c 	bl	8009fc4 <prvAddCurrentTaskToDelayedList>
}
 8009b8c:	46c0      	nop			; (mov r8, r8)
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	b002      	add	sp, #8
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	200009f8 	.word	0x200009f8

08009b98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d101      	bne.n	8009bb2 <xTaskRemoveFromEventList+0x1a>
 8009bae:	b672      	cpsid	i
 8009bb0:	e7fe      	b.n	8009bb0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	3318      	adds	r3, #24
 8009bb6:	0018      	movs	r0, r3
 8009bb8:	f7ff f964 	bl	8008e84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bbc:	4b1e      	ldr	r3, [pc, #120]	; (8009c38 <xTaskRemoveFromEventList+0xa0>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d11d      	bne.n	8009c00 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	3304      	adds	r3, #4
 8009bc8:	0018      	movs	r0, r3
 8009bca:	f7ff f95b 	bl	8008e84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bd2:	4b1a      	ldr	r3, [pc, #104]	; (8009c3c <xTaskRemoveFromEventList+0xa4>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d903      	bls.n	8009be2 <xTaskRemoveFromEventList+0x4a>
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bde:	4b17      	ldr	r3, [pc, #92]	; (8009c3c <xTaskRemoveFromEventList+0xa4>)
 8009be0:	601a      	str	r2, [r3, #0]
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009be6:	0013      	movs	r3, r2
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	189b      	adds	r3, r3, r2
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	4a14      	ldr	r2, [pc, #80]	; (8009c40 <xTaskRemoveFromEventList+0xa8>)
 8009bf0:	189a      	adds	r2, r3, r2
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	3304      	adds	r3, #4
 8009bf6:	0019      	movs	r1, r3
 8009bf8:	0010      	movs	r0, r2
 8009bfa:	f7ff f8eb 	bl	8008dd4 <vListInsertEnd>
 8009bfe:	e007      	b.n	8009c10 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	3318      	adds	r3, #24
 8009c04:	001a      	movs	r2, r3
 8009c06:	4b0f      	ldr	r3, [pc, #60]	; (8009c44 <xTaskRemoveFromEventList+0xac>)
 8009c08:	0011      	movs	r1, r2
 8009c0a:	0018      	movs	r0, r3
 8009c0c:	f7ff f8e2 	bl	8008dd4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c14:	4b0c      	ldr	r3, [pc, #48]	; (8009c48 <xTaskRemoveFromEventList+0xb0>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d905      	bls.n	8009c2a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009c22:	4b0a      	ldr	r3, [pc, #40]	; (8009c4c <xTaskRemoveFromEventList+0xb4>)
 8009c24:	2201      	movs	r2, #1
 8009c26:	601a      	str	r2, [r3, #0]
 8009c28:	e001      	b.n	8009c2e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
}
 8009c30:	0018      	movs	r0, r3
 8009c32:	46bd      	mov	sp, r7
 8009c34:	b004      	add	sp, #16
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	20000b20 	.word	0x20000b20
 8009c3c:	20000b00 	.word	0x20000b00
 8009c40:	200009fc 	.word	0x200009fc
 8009c44:	20000ab8 	.word	0x20000ab8
 8009c48:	200009f8 	.word	0x200009f8
 8009c4c:	20000b0c 	.word	0x20000b0c

08009c50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c58:	4b05      	ldr	r3, [pc, #20]	; (8009c70 <vTaskInternalSetTimeOutState+0x20>)
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c60:	4b04      	ldr	r3, [pc, #16]	; (8009c74 <vTaskInternalSetTimeOutState+0x24>)
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	605a      	str	r2, [r3, #4]
}
 8009c68:	46c0      	nop			; (mov r8, r8)
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	b002      	add	sp, #8
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	20000b10 	.word	0x20000b10
 8009c74:	20000afc 	.word	0x20000afc

08009c78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b086      	sub	sp, #24
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d101      	bne.n	8009c8c <xTaskCheckForTimeOut+0x14>
 8009c88:	b672      	cpsid	i
 8009c8a:	e7fe      	b.n	8009c8a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d101      	bne.n	8009c96 <xTaskCheckForTimeOut+0x1e>
 8009c92:	b672      	cpsid	i
 8009c94:	e7fe      	b.n	8009c94 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8009c96:	f000 fa83 	bl	800a1a0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009c9a:	4b1d      	ldr	r3, [pc, #116]	; (8009d10 <xTaskCheckForTimeOut+0x98>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	693a      	ldr	r2, [r7, #16]
 8009ca6:	1ad3      	subs	r3, r2, r3
 8009ca8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	d102      	bne.n	8009cb8 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	617b      	str	r3, [r7, #20]
 8009cb6:	e024      	b.n	8009d02 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	4b15      	ldr	r3, [pc, #84]	; (8009d14 <xTaskCheckForTimeOut+0x9c>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d007      	beq.n	8009cd4 <xTaskCheckForTimeOut+0x5c>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	693a      	ldr	r2, [r7, #16]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d302      	bcc.n	8009cd4 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	617b      	str	r3, [r7, #20]
 8009cd2:	e016      	b.n	8009d02 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d20c      	bcs.n	8009cf8 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	1ad2      	subs	r2, r2, r3
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	0018      	movs	r0, r3
 8009cee:	f7ff ffaf 	bl	8009c50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	617b      	str	r3, [r7, #20]
 8009cf6:	e004      	b.n	8009d02 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8009d02:	f000 fa5f 	bl	800a1c4 <vPortExitCritical>

	return xReturn;
 8009d06:	697b      	ldr	r3, [r7, #20]
}
 8009d08:	0018      	movs	r0, r3
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	b006      	add	sp, #24
 8009d0e:	bd80      	pop	{r7, pc}
 8009d10:	20000afc 	.word	0x20000afc
 8009d14:	20000b10 	.word	0x20000b10

08009d18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d1c:	4b02      	ldr	r3, [pc, #8]	; (8009d28 <vTaskMissedYield+0x10>)
 8009d1e:	2201      	movs	r2, #1
 8009d20:	601a      	str	r2, [r3, #0]
}
 8009d22:	46c0      	nop			; (mov r8, r8)
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	20000b0c 	.word	0x20000b0c

08009d2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009d34:	f000 f84e 	bl	8009dd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d38:	4b03      	ldr	r3, [pc, #12]	; (8009d48 <prvIdleTask+0x1c>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d9f9      	bls.n	8009d34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009d40:	f000 fa1e 	bl	800a180 <vPortYield>
		prvCheckTasksWaitingTermination();
 8009d44:	e7f6      	b.n	8009d34 <prvIdleTask+0x8>
 8009d46:	46c0      	nop			; (mov r8, r8)
 8009d48:	200009fc 	.word	0x200009fc

08009d4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d52:	2300      	movs	r3, #0
 8009d54:	607b      	str	r3, [r7, #4]
 8009d56:	e00c      	b.n	8009d72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	0013      	movs	r3, r2
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	189b      	adds	r3, r3, r2
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	4a14      	ldr	r2, [pc, #80]	; (8009db4 <prvInitialiseTaskLists+0x68>)
 8009d64:	189b      	adds	r3, r3, r2
 8009d66:	0018      	movs	r0, r3
 8009d68:	f7ff f80b 	bl	8008d82 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	607b      	str	r3, [r7, #4]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2b06      	cmp	r3, #6
 8009d76:	d9ef      	bls.n	8009d58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009d78:	4b0f      	ldr	r3, [pc, #60]	; (8009db8 <prvInitialiseTaskLists+0x6c>)
 8009d7a:	0018      	movs	r0, r3
 8009d7c:	f7ff f801 	bl	8008d82 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009d80:	4b0e      	ldr	r3, [pc, #56]	; (8009dbc <prvInitialiseTaskLists+0x70>)
 8009d82:	0018      	movs	r0, r3
 8009d84:	f7fe fffd 	bl	8008d82 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009d88:	4b0d      	ldr	r3, [pc, #52]	; (8009dc0 <prvInitialiseTaskLists+0x74>)
 8009d8a:	0018      	movs	r0, r3
 8009d8c:	f7fe fff9 	bl	8008d82 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009d90:	4b0c      	ldr	r3, [pc, #48]	; (8009dc4 <prvInitialiseTaskLists+0x78>)
 8009d92:	0018      	movs	r0, r3
 8009d94:	f7fe fff5 	bl	8008d82 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009d98:	4b0b      	ldr	r3, [pc, #44]	; (8009dc8 <prvInitialiseTaskLists+0x7c>)
 8009d9a:	0018      	movs	r0, r3
 8009d9c:	f7fe fff1 	bl	8008d82 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009da0:	4b0a      	ldr	r3, [pc, #40]	; (8009dcc <prvInitialiseTaskLists+0x80>)
 8009da2:	4a05      	ldr	r2, [pc, #20]	; (8009db8 <prvInitialiseTaskLists+0x6c>)
 8009da4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009da6:	4b0a      	ldr	r3, [pc, #40]	; (8009dd0 <prvInitialiseTaskLists+0x84>)
 8009da8:	4a04      	ldr	r2, [pc, #16]	; (8009dbc <prvInitialiseTaskLists+0x70>)
 8009daa:	601a      	str	r2, [r3, #0]
}
 8009dac:	46c0      	nop			; (mov r8, r8)
 8009dae:	46bd      	mov	sp, r7
 8009db0:	b002      	add	sp, #8
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	200009fc 	.word	0x200009fc
 8009db8:	20000a88 	.word	0x20000a88
 8009dbc:	20000a9c 	.word	0x20000a9c
 8009dc0:	20000ab8 	.word	0x20000ab8
 8009dc4:	20000acc 	.word	0x20000acc
 8009dc8:	20000ae4 	.word	0x20000ae4
 8009dcc:	20000ab0 	.word	0x20000ab0
 8009dd0:	20000ab4 	.word	0x20000ab4

08009dd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009dda:	e01a      	b.n	8009e12 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8009ddc:	f000 f9e0 	bl	800a1a0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009de0:	4b10      	ldr	r3, [pc, #64]	; (8009e24 <prvCheckTasksWaitingTermination+0x50>)
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	3304      	adds	r3, #4
 8009dec:	0018      	movs	r0, r3
 8009dee:	f7ff f849 	bl	8008e84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009df2:	4b0d      	ldr	r3, [pc, #52]	; (8009e28 <prvCheckTasksWaitingTermination+0x54>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	1e5a      	subs	r2, r3, #1
 8009df8:	4b0b      	ldr	r3, [pc, #44]	; (8009e28 <prvCheckTasksWaitingTermination+0x54>)
 8009dfa:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009dfc:	4b0b      	ldr	r3, [pc, #44]	; (8009e2c <prvCheckTasksWaitingTermination+0x58>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	1e5a      	subs	r2, r3, #1
 8009e02:	4b0a      	ldr	r3, [pc, #40]	; (8009e2c <prvCheckTasksWaitingTermination+0x58>)
 8009e04:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8009e06:	f000 f9dd 	bl	800a1c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	0018      	movs	r0, r3
 8009e0e:	f000 f80f 	bl	8009e30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e12:	4b06      	ldr	r3, [pc, #24]	; (8009e2c <prvCheckTasksWaitingTermination+0x58>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d1e0      	bne.n	8009ddc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e1a:	46c0      	nop			; (mov r8, r8)
 8009e1c:	46c0      	nop			; (mov r8, r8)
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	b002      	add	sp, #8
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	20000acc 	.word	0x20000acc
 8009e28:	20000af8 	.word	0x20000af8
 8009e2c:	20000ae0 	.word	0x20000ae0

08009e30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b082      	sub	sp, #8
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	334c      	adds	r3, #76	; 0x4c
 8009e3c:	0018      	movs	r0, r3
 8009e3e:	f001 fa4d 	bl	800b2dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	22b1      	movs	r2, #177	; 0xb1
 8009e46:	5c9b      	ldrb	r3, [r3, r2]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d109      	bne.n	8009e60 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e50:	0018      	movs	r0, r3
 8009e52:	f000 fae3 	bl	800a41c <vPortFree>
				vPortFree( pxTCB );
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	0018      	movs	r0, r3
 8009e5a:	f000 fadf 	bl	800a41c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009e5e:	e010      	b.n	8009e82 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	22b1      	movs	r2, #177	; 0xb1
 8009e64:	5c9b      	ldrb	r3, [r3, r2]
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d104      	bne.n	8009e74 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	0018      	movs	r0, r3
 8009e6e:	f000 fad5 	bl	800a41c <vPortFree>
	}
 8009e72:	e006      	b.n	8009e82 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	22b1      	movs	r2, #177	; 0xb1
 8009e78:	5c9b      	ldrb	r3, [r3, r2]
 8009e7a:	2b02      	cmp	r3, #2
 8009e7c:	d001      	beq.n	8009e82 <prvDeleteTCB+0x52>
 8009e7e:	b672      	cpsid	i
 8009e80:	e7fe      	b.n	8009e80 <prvDeleteTCB+0x50>
	}
 8009e82:	46c0      	nop			; (mov r8, r8)
 8009e84:	46bd      	mov	sp, r7
 8009e86:	b002      	add	sp, #8
 8009e88:	bd80      	pop	{r7, pc}
	...

08009e8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e92:	4b0e      	ldr	r3, [pc, #56]	; (8009ecc <prvResetNextTaskUnblockTime+0x40>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d101      	bne.n	8009ea0 <prvResetNextTaskUnblockTime+0x14>
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e000      	b.n	8009ea2 <prvResetNextTaskUnblockTime+0x16>
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d004      	beq.n	8009eb0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ea6:	4b0a      	ldr	r3, [pc, #40]	; (8009ed0 <prvResetNextTaskUnblockTime+0x44>)
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	4252      	negs	r2, r2
 8009eac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009eae:	e008      	b.n	8009ec2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009eb0:	4b06      	ldr	r3, [pc, #24]	; (8009ecc <prvResetNextTaskUnblockTime+0x40>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	685a      	ldr	r2, [r3, #4]
 8009ebe:	4b04      	ldr	r3, [pc, #16]	; (8009ed0 <prvResetNextTaskUnblockTime+0x44>)
 8009ec0:	601a      	str	r2, [r3, #0]
}
 8009ec2:	46c0      	nop			; (mov r8, r8)
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	b002      	add	sp, #8
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	46c0      	nop			; (mov r8, r8)
 8009ecc:	20000ab0 	.word	0x20000ab0
 8009ed0:	20000b18 	.word	0x20000b18

08009ed4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009eda:	4b0a      	ldr	r3, [pc, #40]	; (8009f04 <xTaskGetSchedulerState+0x30>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d102      	bne.n	8009ee8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	607b      	str	r3, [r7, #4]
 8009ee6:	e008      	b.n	8009efa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ee8:	4b07      	ldr	r3, [pc, #28]	; (8009f08 <xTaskGetSchedulerState+0x34>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d102      	bne.n	8009ef6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009ef0:	2302      	movs	r3, #2
 8009ef2:	607b      	str	r3, [r7, #4]
 8009ef4:	e001      	b.n	8009efa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009efa:	687b      	ldr	r3, [r7, #4]
	}
 8009efc:	0018      	movs	r0, r3
 8009efe:	46bd      	mov	sp, r7
 8009f00:	b002      	add	sp, #8
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	20000b04 	.word	0x20000b04
 8009f08:	20000b20 	.word	0x20000b20

08009f0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d044      	beq.n	8009fac <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009f22:	4b25      	ldr	r3, [pc, #148]	; (8009fb8 <xTaskPriorityDisinherit+0xac>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68ba      	ldr	r2, [r7, #8]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d001      	beq.n	8009f30 <xTaskPriorityDisinherit+0x24>
 8009f2c:	b672      	cpsid	i
 8009f2e:	e7fe      	b.n	8009f2e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d101      	bne.n	8009f3c <xTaskPriorityDisinherit+0x30>
 8009f38:	b672      	cpsid	i
 8009f3a:	e7fe      	b.n	8009f3a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f40:	1e5a      	subs	r2, r3, #1
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d02c      	beq.n	8009fac <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d128      	bne.n	8009fac <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	3304      	adds	r3, #4
 8009f5e:	0018      	movs	r0, r3
 8009f60:	f7fe ff90 	bl	8008e84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f70:	2207      	movs	r2, #7
 8009f72:	1ad2      	subs	r2, r2, r3
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f7c:	4b0f      	ldr	r3, [pc, #60]	; (8009fbc <xTaskPriorityDisinherit+0xb0>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d903      	bls.n	8009f8c <xTaskPriorityDisinherit+0x80>
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f88:	4b0c      	ldr	r3, [pc, #48]	; (8009fbc <xTaskPriorityDisinherit+0xb0>)
 8009f8a:	601a      	str	r2, [r3, #0]
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f90:	0013      	movs	r3, r2
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	189b      	adds	r3, r3, r2
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	4a09      	ldr	r2, [pc, #36]	; (8009fc0 <xTaskPriorityDisinherit+0xb4>)
 8009f9a:	189a      	adds	r2, r3, r2
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	3304      	adds	r3, #4
 8009fa0:	0019      	movs	r1, r3
 8009fa2:	0010      	movs	r0, r2
 8009fa4:	f7fe ff16 	bl	8008dd4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009fac:	68fb      	ldr	r3, [r7, #12]
	}
 8009fae:	0018      	movs	r0, r3
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	b004      	add	sp, #16
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	46c0      	nop			; (mov r8, r8)
 8009fb8:	200009f8 	.word	0x200009f8
 8009fbc:	20000b00 	.word	0x20000b00
 8009fc0:	200009fc 	.word	0x200009fc

08009fc4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009fce:	4b21      	ldr	r3, [pc, #132]	; (800a054 <prvAddCurrentTaskToDelayedList+0x90>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fd4:	4b20      	ldr	r3, [pc, #128]	; (800a058 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	3304      	adds	r3, #4
 8009fda:	0018      	movs	r0, r3
 8009fdc:	f7fe ff52 	bl	8008e84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	d10b      	bne.n	8009ffe <prvAddCurrentTaskToDelayedList+0x3a>
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d008      	beq.n	8009ffe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fec:	4b1a      	ldr	r3, [pc, #104]	; (800a058 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	1d1a      	adds	r2, r3, #4
 8009ff2:	4b1a      	ldr	r3, [pc, #104]	; (800a05c <prvAddCurrentTaskToDelayedList+0x98>)
 8009ff4:	0011      	movs	r1, r2
 8009ff6:	0018      	movs	r0, r3
 8009ff8:	f7fe feec 	bl	8008dd4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ffc:	e026      	b.n	800a04c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	18d3      	adds	r3, r2, r3
 800a004:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a006:	4b14      	ldr	r3, [pc, #80]	; (800a058 <prvAddCurrentTaskToDelayedList+0x94>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	68ba      	ldr	r2, [r7, #8]
 800a00c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a00e:	68ba      	ldr	r2, [r7, #8]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	429a      	cmp	r2, r3
 800a014:	d209      	bcs.n	800a02a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a016:	4b12      	ldr	r3, [pc, #72]	; (800a060 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	4b0f      	ldr	r3, [pc, #60]	; (800a058 <prvAddCurrentTaskToDelayedList+0x94>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	3304      	adds	r3, #4
 800a020:	0019      	movs	r1, r3
 800a022:	0010      	movs	r0, r2
 800a024:	f7fe fef8 	bl	8008e18 <vListInsert>
}
 800a028:	e010      	b.n	800a04c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a02a:	4b0e      	ldr	r3, [pc, #56]	; (800a064 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	4b0a      	ldr	r3, [pc, #40]	; (800a058 <prvAddCurrentTaskToDelayedList+0x94>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	3304      	adds	r3, #4
 800a034:	0019      	movs	r1, r3
 800a036:	0010      	movs	r0, r2
 800a038:	f7fe feee 	bl	8008e18 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a03c:	4b0a      	ldr	r3, [pc, #40]	; (800a068 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	68ba      	ldr	r2, [r7, #8]
 800a042:	429a      	cmp	r2, r3
 800a044:	d202      	bcs.n	800a04c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a046:	4b08      	ldr	r3, [pc, #32]	; (800a068 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a048:	68ba      	ldr	r2, [r7, #8]
 800a04a:	601a      	str	r2, [r3, #0]
}
 800a04c:	46c0      	nop			; (mov r8, r8)
 800a04e:	46bd      	mov	sp, r7
 800a050:	b004      	add	sp, #16
 800a052:	bd80      	pop	{r7, pc}
 800a054:	20000afc 	.word	0x20000afc
 800a058:	200009f8 	.word	0x200009f8
 800a05c:	20000ae4 	.word	0x20000ae4
 800a060:	20000ab4 	.word	0x20000ab4
 800a064:	20000ab0 	.word	0x20000ab0
 800a068:	20000b18 	.word	0x20000b18

0800a06c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	60b9      	str	r1, [r7, #8]
 800a076:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	3b04      	subs	r3, #4
 800a07c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2280      	movs	r2, #128	; 0x80
 800a082:	0452      	lsls	r2, r2, #17
 800a084:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	3b04      	subs	r3, #4
 800a08a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800a08c:	68ba      	ldr	r2, [r7, #8]
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	3b04      	subs	r3, #4
 800a096:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a098:	4a08      	ldr	r2, [pc, #32]	; (800a0bc <pxPortInitialiseStack+0x50>)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	3b14      	subs	r3, #20
 800a0a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	3b20      	subs	r3, #32
 800a0ae:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
}
 800a0b2:	0018      	movs	r0, r3
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	b004      	add	sp, #16
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	46c0      	nop			; (mov r8, r8)
 800a0bc:	0800a0c1 	.word	0x0800a0c1

0800a0c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a0ca:	4b08      	ldr	r3, [pc, #32]	; (800a0ec <prvTaskExitError+0x2c>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	d001      	beq.n	800a0d6 <prvTaskExitError+0x16>
 800a0d2:	b672      	cpsid	i
 800a0d4:	e7fe      	b.n	800a0d4 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800a0d6:	b672      	cpsid	i
	while( ulDummy == 0 )
 800a0d8:	46c0      	nop			; (mov r8, r8)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d0fc      	beq.n	800a0da <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a0e0:	46c0      	nop			; (mov r8, r8)
 800a0e2:	46c0      	nop			; (mov r8, r8)
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	b002      	add	sp, #8
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	46c0      	nop			; (mov r8, r8)
 800a0ec:	20000058 	.word	0x20000058

0800a0f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800a0f4:	46c0      	nop			; (mov r8, r8)
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	0000      	movs	r0, r0
 800a0fc:	0000      	movs	r0, r0
	...

0800a100 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800a100:	4a0b      	ldr	r2, [pc, #44]	; (800a130 <pxCurrentTCBConst2>)
 800a102:	6813      	ldr	r3, [r2, #0]
 800a104:	6818      	ldr	r0, [r3, #0]
 800a106:	3020      	adds	r0, #32
 800a108:	f380 8809 	msr	PSP, r0
 800a10c:	2002      	movs	r0, #2
 800a10e:	f380 8814 	msr	CONTROL, r0
 800a112:	f3bf 8f6f 	isb	sy
 800a116:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800a118:	46ae      	mov	lr, r5
 800a11a:	bc08      	pop	{r3}
 800a11c:	bc04      	pop	{r2}
 800a11e:	b662      	cpsie	i
 800a120:	4718      	bx	r3
 800a122:	46c0      	nop			; (mov r8, r8)
 800a124:	46c0      	nop			; (mov r8, r8)
 800a126:	46c0      	nop			; (mov r8, r8)
 800a128:	46c0      	nop			; (mov r8, r8)
 800a12a:	46c0      	nop			; (mov r8, r8)
 800a12c:	46c0      	nop			; (mov r8, r8)
 800a12e:	46c0      	nop			; (mov r8, r8)

0800a130 <pxCurrentTCBConst2>:
 800a130:	200009f8 	.word	0x200009f8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800a134:	46c0      	nop			; (mov r8, r8)
 800a136:	46c0      	nop			; (mov r8, r8)

0800a138 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800a13c:	4b0e      	ldr	r3, [pc, #56]	; (800a178 <xPortStartScheduler+0x40>)
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	4b0d      	ldr	r3, [pc, #52]	; (800a178 <xPortStartScheduler+0x40>)
 800a142:	21ff      	movs	r1, #255	; 0xff
 800a144:	0409      	lsls	r1, r1, #16
 800a146:	430a      	orrs	r2, r1
 800a148:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800a14a:	4b0b      	ldr	r3, [pc, #44]	; (800a178 <xPortStartScheduler+0x40>)
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	4b0a      	ldr	r3, [pc, #40]	; (800a178 <xPortStartScheduler+0x40>)
 800a150:	21ff      	movs	r1, #255	; 0xff
 800a152:	0609      	lsls	r1, r1, #24
 800a154:	430a      	orrs	r2, r1
 800a156:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 800a158:	f000 f898 	bl	800a28c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a15c:	4b07      	ldr	r3, [pc, #28]	; (800a17c <xPortStartScheduler+0x44>)
 800a15e:	2200      	movs	r2, #0
 800a160:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800a162:	f7ff ffcd 	bl	800a100 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a166:	f7ff fc9f 	bl	8009aa8 <vTaskSwitchContext>
	prvTaskExitError();
 800a16a:	f7ff ffa9 	bl	800a0c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a16e:	2300      	movs	r3, #0
}
 800a170:	0018      	movs	r0, r3
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	46c0      	nop			; (mov r8, r8)
 800a178:	e000ed20 	.word	0xe000ed20
 800a17c:	20000058 	.word	0x20000058

0800a180 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800a180:	b580      	push	{r7, lr}
 800a182:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800a184:	4b05      	ldr	r3, [pc, #20]	; (800a19c <vPortYield+0x1c>)
 800a186:	2280      	movs	r2, #128	; 0x80
 800a188:	0552      	lsls	r2, r2, #21
 800a18a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800a18c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800a190:	f3bf 8f6f 	isb	sy
}
 800a194:	46c0      	nop			; (mov r8, r8)
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	46c0      	nop			; (mov r8, r8)
 800a19c:	e000ed04 	.word	0xe000ed04

0800a1a0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800a1a4:	b672      	cpsid	i
    uxCriticalNesting++;
 800a1a6:	4b06      	ldr	r3, [pc, #24]	; (800a1c0 <vPortEnterCritical+0x20>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	1c5a      	adds	r2, r3, #1
 800a1ac:	4b04      	ldr	r3, [pc, #16]	; (800a1c0 <vPortEnterCritical+0x20>)
 800a1ae:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800a1b0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800a1b4:	f3bf 8f6f 	isb	sy
}
 800a1b8:	46c0      	nop			; (mov r8, r8)
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	46c0      	nop			; (mov r8, r8)
 800a1c0:	20000058 	.word	0x20000058

0800a1c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a1c8:	4b09      	ldr	r3, [pc, #36]	; (800a1f0 <vPortExitCritical+0x2c>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d101      	bne.n	800a1d4 <vPortExitCritical+0x10>
 800a1d0:	b672      	cpsid	i
 800a1d2:	e7fe      	b.n	800a1d2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 800a1d4:	4b06      	ldr	r3, [pc, #24]	; (800a1f0 <vPortExitCritical+0x2c>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	1e5a      	subs	r2, r3, #1
 800a1da:	4b05      	ldr	r3, [pc, #20]	; (800a1f0 <vPortExitCritical+0x2c>)
 800a1dc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800a1de:	4b04      	ldr	r3, [pc, #16]	; (800a1f0 <vPortExitCritical+0x2c>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d100      	bne.n	800a1e8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 800a1e6:	b662      	cpsie	i
    }
}
 800a1e8:	46c0      	nop			; (mov r8, r8)
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	46c0      	nop			; (mov r8, r8)
 800a1f0:	20000058 	.word	0x20000058

0800a1f4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800a1f4:	f3ef 8010 	mrs	r0, PRIMASK
 800a1f8:	b672      	cpsid	i
 800a1fa:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800a1fc:	46c0      	nop			; (mov r8, r8)
 800a1fe:	0018      	movs	r0, r3

0800a200 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800a200:	f380 8810 	msr	PRIMASK, r0
 800a204:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 800a206:	46c0      	nop			; (mov r8, r8)
	...

0800a210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a210:	f3ef 8009 	mrs	r0, PSP
 800a214:	4b0e      	ldr	r3, [pc, #56]	; (800a250 <pxCurrentTCBConst>)
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	3820      	subs	r0, #32
 800a21a:	6010      	str	r0, [r2, #0]
 800a21c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800a21e:	4644      	mov	r4, r8
 800a220:	464d      	mov	r5, r9
 800a222:	4656      	mov	r6, sl
 800a224:	465f      	mov	r7, fp
 800a226:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800a228:	b508      	push	{r3, lr}
 800a22a:	b672      	cpsid	i
 800a22c:	f7ff fc3c 	bl	8009aa8 <vTaskSwitchContext>
 800a230:	b662      	cpsie	i
 800a232:	bc0c      	pop	{r2, r3}
 800a234:	6811      	ldr	r1, [r2, #0]
 800a236:	6808      	ldr	r0, [r1, #0]
 800a238:	3010      	adds	r0, #16
 800a23a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800a23c:	46a0      	mov	r8, r4
 800a23e:	46a9      	mov	r9, r5
 800a240:	46b2      	mov	sl, r6
 800a242:	46bb      	mov	fp, r7
 800a244:	f380 8809 	msr	PSP, r0
 800a248:	3820      	subs	r0, #32
 800a24a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800a24c:	4718      	bx	r3
 800a24e:	46c0      	nop			; (mov r8, r8)

0800a250 <pxCurrentTCBConst>:
 800a250:	200009f8 	.word	0x200009f8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800a254:	46c0      	nop			; (mov r8, r8)
 800a256:	46c0      	nop			; (mov r8, r8)

0800a258 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800a25e:	f7ff ffc9 	bl	800a1f4 <ulSetInterruptMaskFromISR>
 800a262:	0003      	movs	r3, r0
 800a264:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a266:	f7ff fb6b 	bl	8009940 <xTaskIncrementTick>
 800a26a:	1e03      	subs	r3, r0, #0
 800a26c:	d003      	beq.n	800a276 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800a26e:	4b06      	ldr	r3, [pc, #24]	; (800a288 <xPortSysTickHandler+0x30>)
 800a270:	2280      	movs	r2, #128	; 0x80
 800a272:	0552      	lsls	r2, r2, #21
 800a274:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	0018      	movs	r0, r3
 800a27a:	f7ff ffc1 	bl	800a200 <vClearInterruptMaskFromISR>
}
 800a27e:	46c0      	nop			; (mov r8, r8)
 800a280:	46bd      	mov	sp, r7
 800a282:	b002      	add	sp, #8
 800a284:	bd80      	pop	{r7, pc}
 800a286:	46c0      	nop			; (mov r8, r8)
 800a288:	e000ed04 	.word	0xe000ed04

0800a28c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 800a290:	4b0b      	ldr	r3, [pc, #44]	; (800a2c0 <prvSetupTimerInterrupt+0x34>)
 800a292:	2200      	movs	r2, #0
 800a294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 800a296:	4b0b      	ldr	r3, [pc, #44]	; (800a2c4 <prvSetupTimerInterrupt+0x38>)
 800a298:	2200      	movs	r2, #0
 800a29a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a29c:	4b0a      	ldr	r3, [pc, #40]	; (800a2c8 <prvSetupTimerInterrupt+0x3c>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	22fa      	movs	r2, #250	; 0xfa
 800a2a2:	0091      	lsls	r1, r2, #2
 800a2a4:	0018      	movs	r0, r3
 800a2a6:	f7f5 ff4b 	bl	8000140 <__udivsi3>
 800a2aa:	0003      	movs	r3, r0
 800a2ac:	001a      	movs	r2, r3
 800a2ae:	4b07      	ldr	r3, [pc, #28]	; (800a2cc <prvSetupTimerInterrupt+0x40>)
 800a2b0:	3a01      	subs	r2, #1
 800a2b2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800a2b4:	4b02      	ldr	r3, [pc, #8]	; (800a2c0 <prvSetupTimerInterrupt+0x34>)
 800a2b6:	2207      	movs	r2, #7
 800a2b8:	601a      	str	r2, [r3, #0]
}
 800a2ba:	46c0      	nop			; (mov r8, r8)
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}
 800a2c0:	e000e010 	.word	0xe000e010
 800a2c4:	e000e018 	.word	0xe000e018
 800a2c8:	2000000c 	.word	0x2000000c
 800a2cc:	e000e014 	.word	0xe000e014

0800a2d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b086      	sub	sp, #24
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800a2dc:	f7ff fa98 	bl	8009810 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a2e0:	4b49      	ldr	r3, [pc, #292]	; (800a408 <pvPortMalloc+0x138>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d101      	bne.n	800a2ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a2e8:	f000 f8e0 	bl	800a4ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a2ec:	4b47      	ldr	r3, [pc, #284]	; (800a40c <pvPortMalloc+0x13c>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	4013      	ands	r3, r2
 800a2f4:	d000      	beq.n	800a2f8 <pvPortMalloc+0x28>
 800a2f6:	e079      	b.n	800a3ec <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d012      	beq.n	800a324 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800a2fe:	2208      	movs	r2, #8
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	189b      	adds	r3, r3, r2
 800a304:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2207      	movs	r2, #7
 800a30a:	4013      	ands	r3, r2
 800a30c:	d00a      	beq.n	800a324 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2207      	movs	r2, #7
 800a312:	4393      	bics	r3, r2
 800a314:	3308      	adds	r3, #8
 800a316:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2207      	movs	r2, #7
 800a31c:	4013      	ands	r3, r2
 800a31e:	d001      	beq.n	800a324 <pvPortMalloc+0x54>
 800a320:	b672      	cpsid	i
 800a322:	e7fe      	b.n	800a322 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d060      	beq.n	800a3ec <pvPortMalloc+0x11c>
 800a32a:	4b39      	ldr	r3, [pc, #228]	; (800a410 <pvPortMalloc+0x140>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	429a      	cmp	r2, r3
 800a332:	d85b      	bhi.n	800a3ec <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a334:	4b37      	ldr	r3, [pc, #220]	; (800a414 <pvPortMalloc+0x144>)
 800a336:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800a338:	4b36      	ldr	r3, [pc, #216]	; (800a414 <pvPortMalloc+0x144>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a33e:	e004      	b.n	800a34a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	429a      	cmp	r2, r3
 800a352:	d903      	bls.n	800a35c <pvPortMalloc+0x8c>
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1f1      	bne.n	800a340 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a35c:	4b2a      	ldr	r3, [pc, #168]	; (800a408 <pvPortMalloc+0x138>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	697a      	ldr	r2, [r7, #20]
 800a362:	429a      	cmp	r2, r3
 800a364:	d042      	beq.n	800a3ec <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2208      	movs	r2, #8
 800a36c:	189b      	adds	r3, r3, r2
 800a36e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	685a      	ldr	r2, [r3, #4]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	1ad2      	subs	r2, r2, r3
 800a380:	2308      	movs	r3, #8
 800a382:	005b      	lsls	r3, r3, #1
 800a384:	429a      	cmp	r2, r3
 800a386:	d916      	bls.n	800a3b6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a388:	697a      	ldr	r2, [r7, #20]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	18d3      	adds	r3, r2, r3
 800a38e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	2207      	movs	r2, #7
 800a394:	4013      	ands	r3, r2
 800a396:	d001      	beq.n	800a39c <pvPortMalloc+0xcc>
 800a398:	b672      	cpsid	i
 800a39a:	e7fe      	b.n	800a39a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	685a      	ldr	r2, [r3, #4]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	1ad2      	subs	r2, r2, r3
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	0018      	movs	r0, r3
 800a3b2:	f000 f8db 	bl	800a56c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a3b6:	4b16      	ldr	r3, [pc, #88]	; (800a410 <pvPortMalloc+0x140>)
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	1ad2      	subs	r2, r2, r3
 800a3c0:	4b13      	ldr	r3, [pc, #76]	; (800a410 <pvPortMalloc+0x140>)
 800a3c2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a3c4:	4b12      	ldr	r3, [pc, #72]	; (800a410 <pvPortMalloc+0x140>)
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	4b13      	ldr	r3, [pc, #76]	; (800a418 <pvPortMalloc+0x148>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d203      	bcs.n	800a3d8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a3d0:	4b0f      	ldr	r3, [pc, #60]	; (800a410 <pvPortMalloc+0x140>)
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	4b10      	ldr	r3, [pc, #64]	; (800a418 <pvPortMalloc+0x148>)
 800a3d6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	685a      	ldr	r2, [r3, #4]
 800a3dc:	4b0b      	ldr	r3, [pc, #44]	; (800a40c <pvPortMalloc+0x13c>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	431a      	orrs	r2, r3
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a3ec:	f7ff fa1c 	bl	8009828 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2207      	movs	r2, #7
 800a3f4:	4013      	ands	r3, r2
 800a3f6:	d001      	beq.n	800a3fc <pvPortMalloc+0x12c>
 800a3f8:	b672      	cpsid	i
 800a3fa:	e7fe      	b.n	800a3fa <pvPortMalloc+0x12a>
	return pvReturn;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
}
 800a3fe:	0018      	movs	r0, r3
 800a400:	46bd      	mov	sp, r7
 800a402:	b006      	add	sp, #24
 800a404:	bd80      	pop	{r7, pc}
 800a406:	46c0      	nop			; (mov r8, r8)
 800a408:	2000172c 	.word	0x2000172c
 800a40c:	20001738 	.word	0x20001738
 800a410:	20001730 	.word	0x20001730
 800a414:	20001724 	.word	0x20001724
 800a418:	20001734 	.word	0x20001734

0800a41c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d035      	beq.n	800a49a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a42e:	2308      	movs	r3, #8
 800a430:	425b      	negs	r3, r3
 800a432:	68fa      	ldr	r2, [r7, #12]
 800a434:	18d3      	adds	r3, r2, r3
 800a436:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	685a      	ldr	r2, [r3, #4]
 800a440:	4b18      	ldr	r3, [pc, #96]	; (800a4a4 <vPortFree+0x88>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4013      	ands	r3, r2
 800a446:	d101      	bne.n	800a44c <vPortFree+0x30>
 800a448:	b672      	cpsid	i
 800a44a:	e7fe      	b.n	800a44a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d001      	beq.n	800a458 <vPortFree+0x3c>
 800a454:	b672      	cpsid	i
 800a456:	e7fe      	b.n	800a456 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	685a      	ldr	r2, [r3, #4]
 800a45c:	4b11      	ldr	r3, [pc, #68]	; (800a4a4 <vPortFree+0x88>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4013      	ands	r3, r2
 800a462:	d01a      	beq.n	800a49a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d116      	bne.n	800a49a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	685a      	ldr	r2, [r3, #4]
 800a470:	4b0c      	ldr	r3, [pc, #48]	; (800a4a4 <vPortFree+0x88>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	43db      	mvns	r3, r3
 800a476:	401a      	ands	r2, r3
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a47c:	f7ff f9c8 	bl	8009810 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	685a      	ldr	r2, [r3, #4]
 800a484:	4b08      	ldr	r3, [pc, #32]	; (800a4a8 <vPortFree+0x8c>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	18d2      	adds	r2, r2, r3
 800a48a:	4b07      	ldr	r3, [pc, #28]	; (800a4a8 <vPortFree+0x8c>)
 800a48c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	0018      	movs	r0, r3
 800a492:	f000 f86b 	bl	800a56c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a496:	f7ff f9c7 	bl	8009828 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a49a:	46c0      	nop			; (mov r8, r8)
 800a49c:	46bd      	mov	sp, r7
 800a49e:	b004      	add	sp, #16
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	46c0      	nop			; (mov r8, r8)
 800a4a4:	20001738 	.word	0x20001738
 800a4a8:	20001730 	.word	0x20001730

0800a4ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a4b2:	23c0      	movs	r3, #192	; 0xc0
 800a4b4:	011b      	lsls	r3, r3, #4
 800a4b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a4b8:	4b26      	ldr	r3, [pc, #152]	; (800a554 <prvHeapInit+0xa8>)
 800a4ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2207      	movs	r2, #7
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	d00c      	beq.n	800a4de <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	3307      	adds	r3, #7
 800a4c8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2207      	movs	r2, #7
 800a4ce:	4393      	bics	r3, r2
 800a4d0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a4d2:	68ba      	ldr	r2, [r7, #8]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	1ad2      	subs	r2, r2, r3
 800a4d8:	4b1e      	ldr	r3, [pc, #120]	; (800a554 <prvHeapInit+0xa8>)
 800a4da:	18d3      	adds	r3, r2, r3
 800a4dc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a4e2:	4b1d      	ldr	r3, [pc, #116]	; (800a558 <prvHeapInit+0xac>)
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a4e8:	4b1b      	ldr	r3, [pc, #108]	; (800a558 <prvHeapInit+0xac>)
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	68ba      	ldr	r2, [r7, #8]
 800a4f2:	18d3      	adds	r3, r2, r3
 800a4f4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a4f6:	2208      	movs	r2, #8
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	1a9b      	subs	r3, r3, r2
 800a4fc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2207      	movs	r2, #7
 800a502:	4393      	bics	r3, r2
 800a504:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a506:	68fa      	ldr	r2, [r7, #12]
 800a508:	4b14      	ldr	r3, [pc, #80]	; (800a55c <prvHeapInit+0xb0>)
 800a50a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800a50c:	4b13      	ldr	r3, [pc, #76]	; (800a55c <prvHeapInit+0xb0>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2200      	movs	r2, #0
 800a512:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a514:	4b11      	ldr	r3, [pc, #68]	; (800a55c <prvHeapInit+0xb0>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2200      	movs	r2, #0
 800a51a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	68fa      	ldr	r2, [r7, #12]
 800a524:	1ad2      	subs	r2, r2, r3
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a52a:	4b0c      	ldr	r3, [pc, #48]	; (800a55c <prvHeapInit+0xb0>)
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	685a      	ldr	r2, [r3, #4]
 800a536:	4b0a      	ldr	r3, [pc, #40]	; (800a560 <prvHeapInit+0xb4>)
 800a538:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	685a      	ldr	r2, [r3, #4]
 800a53e:	4b09      	ldr	r3, [pc, #36]	; (800a564 <prvHeapInit+0xb8>)
 800a540:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a542:	4b09      	ldr	r3, [pc, #36]	; (800a568 <prvHeapInit+0xbc>)
 800a544:	2280      	movs	r2, #128	; 0x80
 800a546:	0612      	lsls	r2, r2, #24
 800a548:	601a      	str	r2, [r3, #0]
}
 800a54a:	46c0      	nop			; (mov r8, r8)
 800a54c:	46bd      	mov	sp, r7
 800a54e:	b004      	add	sp, #16
 800a550:	bd80      	pop	{r7, pc}
 800a552:	46c0      	nop			; (mov r8, r8)
 800a554:	20000b24 	.word	0x20000b24
 800a558:	20001724 	.word	0x20001724
 800a55c:	2000172c 	.word	0x2000172c
 800a560:	20001734 	.word	0x20001734
 800a564:	20001730 	.word	0x20001730
 800a568:	20001738 	.word	0x20001738

0800a56c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a574:	4b27      	ldr	r3, [pc, #156]	; (800a614 <prvInsertBlockIntoFreeList+0xa8>)
 800a576:	60fb      	str	r3, [r7, #12]
 800a578:	e002      	b.n	800a580 <prvInsertBlockIntoFreeList+0x14>
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	60fb      	str	r3, [r7, #12]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	429a      	cmp	r2, r3
 800a588:	d8f7      	bhi.n	800a57a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	68ba      	ldr	r2, [r7, #8]
 800a594:	18d3      	adds	r3, r2, r3
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d108      	bne.n	800a5ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	685a      	ldr	r2, [r3, #4]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	18d2      	adds	r2, r2, r3
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	68ba      	ldr	r2, [r7, #8]
 800a5b8:	18d2      	adds	r2, r2, r3
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d118      	bne.n	800a5f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	4b14      	ldr	r3, [pc, #80]	; (800a618 <prvInsertBlockIntoFreeList+0xac>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d00d      	beq.n	800a5ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	685a      	ldr	r2, [r3, #4]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	18d2      	adds	r2, r2, r3
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	681a      	ldr	r2, [r3, #0]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	601a      	str	r2, [r3, #0]
 800a5e8:	e008      	b.n	800a5fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a5ea:	4b0b      	ldr	r3, [pc, #44]	; (800a618 <prvInsertBlockIntoFreeList+0xac>)
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	601a      	str	r2, [r3, #0]
 800a5f2:	e003      	b.n	800a5fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a5fc:	68fa      	ldr	r2, [r7, #12]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	429a      	cmp	r2, r3
 800a602:	d002      	beq.n	800a60a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a60a:	46c0      	nop			; (mov r8, r8)
 800a60c:	46bd      	mov	sp, r7
 800a60e:	b004      	add	sp, #16
 800a610:	bd80      	pop	{r7, pc}
 800a612:	46c0      	nop			; (mov r8, r8)
 800a614:	20001724 	.word	0x20001724
 800a618:	2000172c 	.word	0x2000172c

0800a61c <atof>:
 800a61c:	b510      	push	{r4, lr}
 800a61e:	2100      	movs	r1, #0
 800a620:	f001 fd74 	bl	800c10c <strtod>
 800a624:	bd10      	pop	{r4, pc}

0800a626 <atoi>:
 800a626:	b510      	push	{r4, lr}
 800a628:	220a      	movs	r2, #10
 800a62a:	2100      	movs	r1, #0
 800a62c:	f001 fe0a 	bl	800c244 <strtol>
 800a630:	bd10      	pop	{r4, pc}
	...

0800a634 <__errno>:
 800a634:	4b01      	ldr	r3, [pc, #4]	; (800a63c <__errno+0x8>)
 800a636:	6818      	ldr	r0, [r3, #0]
 800a638:	4770      	bx	lr
 800a63a:	46c0      	nop			; (mov r8, r8)
 800a63c:	2000005c 	.word	0x2000005c

0800a640 <std>:
 800a640:	2300      	movs	r3, #0
 800a642:	b510      	push	{r4, lr}
 800a644:	0004      	movs	r4, r0
 800a646:	6003      	str	r3, [r0, #0]
 800a648:	6043      	str	r3, [r0, #4]
 800a64a:	6083      	str	r3, [r0, #8]
 800a64c:	8181      	strh	r1, [r0, #12]
 800a64e:	6643      	str	r3, [r0, #100]	; 0x64
 800a650:	0019      	movs	r1, r3
 800a652:	81c2      	strh	r2, [r0, #14]
 800a654:	6103      	str	r3, [r0, #16]
 800a656:	6143      	str	r3, [r0, #20]
 800a658:	6183      	str	r3, [r0, #24]
 800a65a:	2208      	movs	r2, #8
 800a65c:	305c      	adds	r0, #92	; 0x5c
 800a65e:	f000 f921 	bl	800a8a4 <memset>
 800a662:	4b05      	ldr	r3, [pc, #20]	; (800a678 <std+0x38>)
 800a664:	6224      	str	r4, [r4, #32]
 800a666:	6263      	str	r3, [r4, #36]	; 0x24
 800a668:	4b04      	ldr	r3, [pc, #16]	; (800a67c <std+0x3c>)
 800a66a:	62a3      	str	r3, [r4, #40]	; 0x28
 800a66c:	4b04      	ldr	r3, [pc, #16]	; (800a680 <std+0x40>)
 800a66e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a670:	4b04      	ldr	r3, [pc, #16]	; (800a684 <std+0x44>)
 800a672:	6323      	str	r3, [r4, #48]	; 0x30
 800a674:	bd10      	pop	{r4, pc}
 800a676:	46c0      	nop			; (mov r8, r8)
 800a678:	0800b40d 	.word	0x0800b40d
 800a67c:	0800b435 	.word	0x0800b435
 800a680:	0800b46d 	.word	0x0800b46d
 800a684:	0800b499 	.word	0x0800b499

0800a688 <_cleanup_r>:
 800a688:	b510      	push	{r4, lr}
 800a68a:	4902      	ldr	r1, [pc, #8]	; (800a694 <_cleanup_r+0xc>)
 800a68c:	f000 f8ba 	bl	800a804 <_fwalk_reent>
 800a690:	bd10      	pop	{r4, pc}
 800a692:	46c0      	nop			; (mov r8, r8)
 800a694:	0800d1c1 	.word	0x0800d1c1

0800a698 <__sfmoreglue>:
 800a698:	b570      	push	{r4, r5, r6, lr}
 800a69a:	2568      	movs	r5, #104	; 0x68
 800a69c:	1e4a      	subs	r2, r1, #1
 800a69e:	4355      	muls	r5, r2
 800a6a0:	000e      	movs	r6, r1
 800a6a2:	0029      	movs	r1, r5
 800a6a4:	3174      	adds	r1, #116	; 0x74
 800a6a6:	f000 f927 	bl	800a8f8 <_malloc_r>
 800a6aa:	1e04      	subs	r4, r0, #0
 800a6ac:	d008      	beq.n	800a6c0 <__sfmoreglue+0x28>
 800a6ae:	2100      	movs	r1, #0
 800a6b0:	002a      	movs	r2, r5
 800a6b2:	6001      	str	r1, [r0, #0]
 800a6b4:	6046      	str	r6, [r0, #4]
 800a6b6:	300c      	adds	r0, #12
 800a6b8:	60a0      	str	r0, [r4, #8]
 800a6ba:	3268      	adds	r2, #104	; 0x68
 800a6bc:	f000 f8f2 	bl	800a8a4 <memset>
 800a6c0:	0020      	movs	r0, r4
 800a6c2:	bd70      	pop	{r4, r5, r6, pc}

0800a6c4 <__sfp_lock_acquire>:
 800a6c4:	b510      	push	{r4, lr}
 800a6c6:	4802      	ldr	r0, [pc, #8]	; (800a6d0 <__sfp_lock_acquire+0xc>)
 800a6c8:	f000 f8e1 	bl	800a88e <__retarget_lock_acquire_recursive>
 800a6cc:	bd10      	pop	{r4, pc}
 800a6ce:	46c0      	nop			; (mov r8, r8)
 800a6d0:	2000173d 	.word	0x2000173d

0800a6d4 <__sfp_lock_release>:
 800a6d4:	b510      	push	{r4, lr}
 800a6d6:	4802      	ldr	r0, [pc, #8]	; (800a6e0 <__sfp_lock_release+0xc>)
 800a6d8:	f000 f8da 	bl	800a890 <__retarget_lock_release_recursive>
 800a6dc:	bd10      	pop	{r4, pc}
 800a6de:	46c0      	nop			; (mov r8, r8)
 800a6e0:	2000173d 	.word	0x2000173d

0800a6e4 <__sinit_lock_acquire>:
 800a6e4:	b510      	push	{r4, lr}
 800a6e6:	4802      	ldr	r0, [pc, #8]	; (800a6f0 <__sinit_lock_acquire+0xc>)
 800a6e8:	f000 f8d1 	bl	800a88e <__retarget_lock_acquire_recursive>
 800a6ec:	bd10      	pop	{r4, pc}
 800a6ee:	46c0      	nop			; (mov r8, r8)
 800a6f0:	2000173e 	.word	0x2000173e

0800a6f4 <__sinit_lock_release>:
 800a6f4:	b510      	push	{r4, lr}
 800a6f6:	4802      	ldr	r0, [pc, #8]	; (800a700 <__sinit_lock_release+0xc>)
 800a6f8:	f000 f8ca 	bl	800a890 <__retarget_lock_release_recursive>
 800a6fc:	bd10      	pop	{r4, pc}
 800a6fe:	46c0      	nop			; (mov r8, r8)
 800a700:	2000173e 	.word	0x2000173e

0800a704 <__sinit>:
 800a704:	b513      	push	{r0, r1, r4, lr}
 800a706:	0004      	movs	r4, r0
 800a708:	f7ff ffec 	bl	800a6e4 <__sinit_lock_acquire>
 800a70c:	69a3      	ldr	r3, [r4, #24]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d002      	beq.n	800a718 <__sinit+0x14>
 800a712:	f7ff ffef 	bl	800a6f4 <__sinit_lock_release>
 800a716:	bd13      	pop	{r0, r1, r4, pc}
 800a718:	64a3      	str	r3, [r4, #72]	; 0x48
 800a71a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a71c:	6523      	str	r3, [r4, #80]	; 0x50
 800a71e:	4b13      	ldr	r3, [pc, #76]	; (800a76c <__sinit+0x68>)
 800a720:	4a13      	ldr	r2, [pc, #76]	; (800a770 <__sinit+0x6c>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	62a2      	str	r2, [r4, #40]	; 0x28
 800a726:	9301      	str	r3, [sp, #4]
 800a728:	42a3      	cmp	r3, r4
 800a72a:	d101      	bne.n	800a730 <__sinit+0x2c>
 800a72c:	2301      	movs	r3, #1
 800a72e:	61a3      	str	r3, [r4, #24]
 800a730:	0020      	movs	r0, r4
 800a732:	f000 f81f 	bl	800a774 <__sfp>
 800a736:	6060      	str	r0, [r4, #4]
 800a738:	0020      	movs	r0, r4
 800a73a:	f000 f81b 	bl	800a774 <__sfp>
 800a73e:	60a0      	str	r0, [r4, #8]
 800a740:	0020      	movs	r0, r4
 800a742:	f000 f817 	bl	800a774 <__sfp>
 800a746:	2200      	movs	r2, #0
 800a748:	2104      	movs	r1, #4
 800a74a:	60e0      	str	r0, [r4, #12]
 800a74c:	6860      	ldr	r0, [r4, #4]
 800a74e:	f7ff ff77 	bl	800a640 <std>
 800a752:	2201      	movs	r2, #1
 800a754:	2109      	movs	r1, #9
 800a756:	68a0      	ldr	r0, [r4, #8]
 800a758:	f7ff ff72 	bl	800a640 <std>
 800a75c:	2202      	movs	r2, #2
 800a75e:	2112      	movs	r1, #18
 800a760:	68e0      	ldr	r0, [r4, #12]
 800a762:	f7ff ff6d 	bl	800a640 <std>
 800a766:	2301      	movs	r3, #1
 800a768:	61a3      	str	r3, [r4, #24]
 800a76a:	e7d2      	b.n	800a712 <__sinit+0xe>
 800a76c:	0800f6bc 	.word	0x0800f6bc
 800a770:	0800a689 	.word	0x0800a689

0800a774 <__sfp>:
 800a774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a776:	0007      	movs	r7, r0
 800a778:	f7ff ffa4 	bl	800a6c4 <__sfp_lock_acquire>
 800a77c:	4b1f      	ldr	r3, [pc, #124]	; (800a7fc <__sfp+0x88>)
 800a77e:	681e      	ldr	r6, [r3, #0]
 800a780:	69b3      	ldr	r3, [r6, #24]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d102      	bne.n	800a78c <__sfp+0x18>
 800a786:	0030      	movs	r0, r6
 800a788:	f7ff ffbc 	bl	800a704 <__sinit>
 800a78c:	3648      	adds	r6, #72	; 0x48
 800a78e:	68b4      	ldr	r4, [r6, #8]
 800a790:	6873      	ldr	r3, [r6, #4]
 800a792:	3b01      	subs	r3, #1
 800a794:	d504      	bpl.n	800a7a0 <__sfp+0x2c>
 800a796:	6833      	ldr	r3, [r6, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d022      	beq.n	800a7e2 <__sfp+0x6e>
 800a79c:	6836      	ldr	r6, [r6, #0]
 800a79e:	e7f6      	b.n	800a78e <__sfp+0x1a>
 800a7a0:	220c      	movs	r2, #12
 800a7a2:	5ea5      	ldrsh	r5, [r4, r2]
 800a7a4:	2d00      	cmp	r5, #0
 800a7a6:	d11a      	bne.n	800a7de <__sfp+0x6a>
 800a7a8:	0020      	movs	r0, r4
 800a7aa:	4b15      	ldr	r3, [pc, #84]	; (800a800 <__sfp+0x8c>)
 800a7ac:	3058      	adds	r0, #88	; 0x58
 800a7ae:	60e3      	str	r3, [r4, #12]
 800a7b0:	6665      	str	r5, [r4, #100]	; 0x64
 800a7b2:	f000 f86b 	bl	800a88c <__retarget_lock_init_recursive>
 800a7b6:	f7ff ff8d 	bl	800a6d4 <__sfp_lock_release>
 800a7ba:	0020      	movs	r0, r4
 800a7bc:	2208      	movs	r2, #8
 800a7be:	0029      	movs	r1, r5
 800a7c0:	6025      	str	r5, [r4, #0]
 800a7c2:	60a5      	str	r5, [r4, #8]
 800a7c4:	6065      	str	r5, [r4, #4]
 800a7c6:	6125      	str	r5, [r4, #16]
 800a7c8:	6165      	str	r5, [r4, #20]
 800a7ca:	61a5      	str	r5, [r4, #24]
 800a7cc:	305c      	adds	r0, #92	; 0x5c
 800a7ce:	f000 f869 	bl	800a8a4 <memset>
 800a7d2:	6365      	str	r5, [r4, #52]	; 0x34
 800a7d4:	63a5      	str	r5, [r4, #56]	; 0x38
 800a7d6:	64a5      	str	r5, [r4, #72]	; 0x48
 800a7d8:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a7da:	0020      	movs	r0, r4
 800a7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7de:	3468      	adds	r4, #104	; 0x68
 800a7e0:	e7d7      	b.n	800a792 <__sfp+0x1e>
 800a7e2:	2104      	movs	r1, #4
 800a7e4:	0038      	movs	r0, r7
 800a7e6:	f7ff ff57 	bl	800a698 <__sfmoreglue>
 800a7ea:	1e04      	subs	r4, r0, #0
 800a7ec:	6030      	str	r0, [r6, #0]
 800a7ee:	d1d5      	bne.n	800a79c <__sfp+0x28>
 800a7f0:	f7ff ff70 	bl	800a6d4 <__sfp_lock_release>
 800a7f4:	230c      	movs	r3, #12
 800a7f6:	603b      	str	r3, [r7, #0]
 800a7f8:	e7ef      	b.n	800a7da <__sfp+0x66>
 800a7fa:	46c0      	nop			; (mov r8, r8)
 800a7fc:	0800f6bc 	.word	0x0800f6bc
 800a800:	ffff0001 	.word	0xffff0001

0800a804 <_fwalk_reent>:
 800a804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a806:	0004      	movs	r4, r0
 800a808:	0006      	movs	r6, r0
 800a80a:	2700      	movs	r7, #0
 800a80c:	9101      	str	r1, [sp, #4]
 800a80e:	3448      	adds	r4, #72	; 0x48
 800a810:	6863      	ldr	r3, [r4, #4]
 800a812:	68a5      	ldr	r5, [r4, #8]
 800a814:	9300      	str	r3, [sp, #0]
 800a816:	9b00      	ldr	r3, [sp, #0]
 800a818:	3b01      	subs	r3, #1
 800a81a:	9300      	str	r3, [sp, #0]
 800a81c:	d504      	bpl.n	800a828 <_fwalk_reent+0x24>
 800a81e:	6824      	ldr	r4, [r4, #0]
 800a820:	2c00      	cmp	r4, #0
 800a822:	d1f5      	bne.n	800a810 <_fwalk_reent+0xc>
 800a824:	0038      	movs	r0, r7
 800a826:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a828:	89ab      	ldrh	r3, [r5, #12]
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d908      	bls.n	800a840 <_fwalk_reent+0x3c>
 800a82e:	220e      	movs	r2, #14
 800a830:	5eab      	ldrsh	r3, [r5, r2]
 800a832:	3301      	adds	r3, #1
 800a834:	d004      	beq.n	800a840 <_fwalk_reent+0x3c>
 800a836:	0029      	movs	r1, r5
 800a838:	0030      	movs	r0, r6
 800a83a:	9b01      	ldr	r3, [sp, #4]
 800a83c:	4798      	blx	r3
 800a83e:	4307      	orrs	r7, r0
 800a840:	3568      	adds	r5, #104	; 0x68
 800a842:	e7e8      	b.n	800a816 <_fwalk_reent+0x12>

0800a844 <__libc_init_array>:
 800a844:	b570      	push	{r4, r5, r6, lr}
 800a846:	2600      	movs	r6, #0
 800a848:	4d0c      	ldr	r5, [pc, #48]	; (800a87c <__libc_init_array+0x38>)
 800a84a:	4c0d      	ldr	r4, [pc, #52]	; (800a880 <__libc_init_array+0x3c>)
 800a84c:	1b64      	subs	r4, r4, r5
 800a84e:	10a4      	asrs	r4, r4, #2
 800a850:	42a6      	cmp	r6, r4
 800a852:	d109      	bne.n	800a868 <__libc_init_array+0x24>
 800a854:	2600      	movs	r6, #0
 800a856:	f004 fb1d 	bl	800ee94 <_init>
 800a85a:	4d0a      	ldr	r5, [pc, #40]	; (800a884 <__libc_init_array+0x40>)
 800a85c:	4c0a      	ldr	r4, [pc, #40]	; (800a888 <__libc_init_array+0x44>)
 800a85e:	1b64      	subs	r4, r4, r5
 800a860:	10a4      	asrs	r4, r4, #2
 800a862:	42a6      	cmp	r6, r4
 800a864:	d105      	bne.n	800a872 <__libc_init_array+0x2e>
 800a866:	bd70      	pop	{r4, r5, r6, pc}
 800a868:	00b3      	lsls	r3, r6, #2
 800a86a:	58eb      	ldr	r3, [r5, r3]
 800a86c:	4798      	blx	r3
 800a86e:	3601      	adds	r6, #1
 800a870:	e7ee      	b.n	800a850 <__libc_init_array+0xc>
 800a872:	00b3      	lsls	r3, r6, #2
 800a874:	58eb      	ldr	r3, [r5, r3]
 800a876:	4798      	blx	r3
 800a878:	3601      	adds	r6, #1
 800a87a:	e7f2      	b.n	800a862 <__libc_init_array+0x1e>
 800a87c:	0800fafc 	.word	0x0800fafc
 800a880:	0800fafc 	.word	0x0800fafc
 800a884:	0800fafc 	.word	0x0800fafc
 800a888:	0800fb00 	.word	0x0800fb00

0800a88c <__retarget_lock_init_recursive>:
 800a88c:	4770      	bx	lr

0800a88e <__retarget_lock_acquire_recursive>:
 800a88e:	4770      	bx	lr

0800a890 <__retarget_lock_release_recursive>:
 800a890:	4770      	bx	lr

0800a892 <memcpy>:
 800a892:	2300      	movs	r3, #0
 800a894:	b510      	push	{r4, lr}
 800a896:	429a      	cmp	r2, r3
 800a898:	d100      	bne.n	800a89c <memcpy+0xa>
 800a89a:	bd10      	pop	{r4, pc}
 800a89c:	5ccc      	ldrb	r4, [r1, r3]
 800a89e:	54c4      	strb	r4, [r0, r3]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	e7f8      	b.n	800a896 <memcpy+0x4>

0800a8a4 <memset>:
 800a8a4:	0003      	movs	r3, r0
 800a8a6:	1882      	adds	r2, r0, r2
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d100      	bne.n	800a8ae <memset+0xa>
 800a8ac:	4770      	bx	lr
 800a8ae:	7019      	strb	r1, [r3, #0]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	e7f9      	b.n	800a8a8 <memset+0x4>

0800a8b4 <sbrk_aligned>:
 800a8b4:	b570      	push	{r4, r5, r6, lr}
 800a8b6:	4e0f      	ldr	r6, [pc, #60]	; (800a8f4 <sbrk_aligned+0x40>)
 800a8b8:	000d      	movs	r5, r1
 800a8ba:	6831      	ldr	r1, [r6, #0]
 800a8bc:	0004      	movs	r4, r0
 800a8be:	2900      	cmp	r1, #0
 800a8c0:	d102      	bne.n	800a8c8 <sbrk_aligned+0x14>
 800a8c2:	f000 fd71 	bl	800b3a8 <_sbrk_r>
 800a8c6:	6030      	str	r0, [r6, #0]
 800a8c8:	0029      	movs	r1, r5
 800a8ca:	0020      	movs	r0, r4
 800a8cc:	f000 fd6c 	bl	800b3a8 <_sbrk_r>
 800a8d0:	1c43      	adds	r3, r0, #1
 800a8d2:	d00a      	beq.n	800a8ea <sbrk_aligned+0x36>
 800a8d4:	2303      	movs	r3, #3
 800a8d6:	1cc5      	adds	r5, r0, #3
 800a8d8:	439d      	bics	r5, r3
 800a8da:	42a8      	cmp	r0, r5
 800a8dc:	d007      	beq.n	800a8ee <sbrk_aligned+0x3a>
 800a8de:	1a29      	subs	r1, r5, r0
 800a8e0:	0020      	movs	r0, r4
 800a8e2:	f000 fd61 	bl	800b3a8 <_sbrk_r>
 800a8e6:	1c43      	adds	r3, r0, #1
 800a8e8:	d101      	bne.n	800a8ee <sbrk_aligned+0x3a>
 800a8ea:	2501      	movs	r5, #1
 800a8ec:	426d      	negs	r5, r5
 800a8ee:	0028      	movs	r0, r5
 800a8f0:	bd70      	pop	{r4, r5, r6, pc}
 800a8f2:	46c0      	nop			; (mov r8, r8)
 800a8f4:	20001744 	.word	0x20001744

0800a8f8 <_malloc_r>:
 800a8f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8fa:	2203      	movs	r2, #3
 800a8fc:	1ccb      	adds	r3, r1, #3
 800a8fe:	4393      	bics	r3, r2
 800a900:	3308      	adds	r3, #8
 800a902:	0006      	movs	r6, r0
 800a904:	001f      	movs	r7, r3
 800a906:	2b0c      	cmp	r3, #12
 800a908:	d232      	bcs.n	800a970 <_malloc_r+0x78>
 800a90a:	270c      	movs	r7, #12
 800a90c:	42b9      	cmp	r1, r7
 800a90e:	d831      	bhi.n	800a974 <_malloc_r+0x7c>
 800a910:	0030      	movs	r0, r6
 800a912:	f003 f849 	bl	800d9a8 <__malloc_lock>
 800a916:	4d32      	ldr	r5, [pc, #200]	; (800a9e0 <_malloc_r+0xe8>)
 800a918:	682b      	ldr	r3, [r5, #0]
 800a91a:	001c      	movs	r4, r3
 800a91c:	2c00      	cmp	r4, #0
 800a91e:	d12e      	bne.n	800a97e <_malloc_r+0x86>
 800a920:	0039      	movs	r1, r7
 800a922:	0030      	movs	r0, r6
 800a924:	f7ff ffc6 	bl	800a8b4 <sbrk_aligned>
 800a928:	0004      	movs	r4, r0
 800a92a:	1c43      	adds	r3, r0, #1
 800a92c:	d11e      	bne.n	800a96c <_malloc_r+0x74>
 800a92e:	682c      	ldr	r4, [r5, #0]
 800a930:	0025      	movs	r5, r4
 800a932:	2d00      	cmp	r5, #0
 800a934:	d14a      	bne.n	800a9cc <_malloc_r+0xd4>
 800a936:	6823      	ldr	r3, [r4, #0]
 800a938:	0029      	movs	r1, r5
 800a93a:	18e3      	adds	r3, r4, r3
 800a93c:	0030      	movs	r0, r6
 800a93e:	9301      	str	r3, [sp, #4]
 800a940:	f000 fd32 	bl	800b3a8 <_sbrk_r>
 800a944:	9b01      	ldr	r3, [sp, #4]
 800a946:	4283      	cmp	r3, r0
 800a948:	d143      	bne.n	800a9d2 <_malloc_r+0xda>
 800a94a:	6823      	ldr	r3, [r4, #0]
 800a94c:	3703      	adds	r7, #3
 800a94e:	1aff      	subs	r7, r7, r3
 800a950:	2303      	movs	r3, #3
 800a952:	439f      	bics	r7, r3
 800a954:	3708      	adds	r7, #8
 800a956:	2f0c      	cmp	r7, #12
 800a958:	d200      	bcs.n	800a95c <_malloc_r+0x64>
 800a95a:	270c      	movs	r7, #12
 800a95c:	0039      	movs	r1, r7
 800a95e:	0030      	movs	r0, r6
 800a960:	f7ff ffa8 	bl	800a8b4 <sbrk_aligned>
 800a964:	1c43      	adds	r3, r0, #1
 800a966:	d034      	beq.n	800a9d2 <_malloc_r+0xda>
 800a968:	6823      	ldr	r3, [r4, #0]
 800a96a:	19df      	adds	r7, r3, r7
 800a96c:	6027      	str	r7, [r4, #0]
 800a96e:	e013      	b.n	800a998 <_malloc_r+0xa0>
 800a970:	2b00      	cmp	r3, #0
 800a972:	dacb      	bge.n	800a90c <_malloc_r+0x14>
 800a974:	230c      	movs	r3, #12
 800a976:	2500      	movs	r5, #0
 800a978:	6033      	str	r3, [r6, #0]
 800a97a:	0028      	movs	r0, r5
 800a97c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a97e:	6822      	ldr	r2, [r4, #0]
 800a980:	1bd1      	subs	r1, r2, r7
 800a982:	d420      	bmi.n	800a9c6 <_malloc_r+0xce>
 800a984:	290b      	cmp	r1, #11
 800a986:	d917      	bls.n	800a9b8 <_malloc_r+0xc0>
 800a988:	19e2      	adds	r2, r4, r7
 800a98a:	6027      	str	r7, [r4, #0]
 800a98c:	42a3      	cmp	r3, r4
 800a98e:	d111      	bne.n	800a9b4 <_malloc_r+0xbc>
 800a990:	602a      	str	r2, [r5, #0]
 800a992:	6863      	ldr	r3, [r4, #4]
 800a994:	6011      	str	r1, [r2, #0]
 800a996:	6053      	str	r3, [r2, #4]
 800a998:	0030      	movs	r0, r6
 800a99a:	0025      	movs	r5, r4
 800a99c:	f003 f80c 	bl	800d9b8 <__malloc_unlock>
 800a9a0:	2207      	movs	r2, #7
 800a9a2:	350b      	adds	r5, #11
 800a9a4:	1d23      	adds	r3, r4, #4
 800a9a6:	4395      	bics	r5, r2
 800a9a8:	1aea      	subs	r2, r5, r3
 800a9aa:	429d      	cmp	r5, r3
 800a9ac:	d0e5      	beq.n	800a97a <_malloc_r+0x82>
 800a9ae:	1b5b      	subs	r3, r3, r5
 800a9b0:	50a3      	str	r3, [r4, r2]
 800a9b2:	e7e2      	b.n	800a97a <_malloc_r+0x82>
 800a9b4:	605a      	str	r2, [r3, #4]
 800a9b6:	e7ec      	b.n	800a992 <_malloc_r+0x9a>
 800a9b8:	6862      	ldr	r2, [r4, #4]
 800a9ba:	42a3      	cmp	r3, r4
 800a9bc:	d101      	bne.n	800a9c2 <_malloc_r+0xca>
 800a9be:	602a      	str	r2, [r5, #0]
 800a9c0:	e7ea      	b.n	800a998 <_malloc_r+0xa0>
 800a9c2:	605a      	str	r2, [r3, #4]
 800a9c4:	e7e8      	b.n	800a998 <_malloc_r+0xa0>
 800a9c6:	0023      	movs	r3, r4
 800a9c8:	6864      	ldr	r4, [r4, #4]
 800a9ca:	e7a7      	b.n	800a91c <_malloc_r+0x24>
 800a9cc:	002c      	movs	r4, r5
 800a9ce:	686d      	ldr	r5, [r5, #4]
 800a9d0:	e7af      	b.n	800a932 <_malloc_r+0x3a>
 800a9d2:	230c      	movs	r3, #12
 800a9d4:	0030      	movs	r0, r6
 800a9d6:	6033      	str	r3, [r6, #0]
 800a9d8:	f002 ffee 	bl	800d9b8 <__malloc_unlock>
 800a9dc:	e7cd      	b.n	800a97a <_malloc_r+0x82>
 800a9de:	46c0      	nop			; (mov r8, r8)
 800a9e0:	20001740 	.word	0x20001740

0800a9e4 <__cvt>:
 800a9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9e6:	001e      	movs	r6, r3
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	0014      	movs	r4, r2
 800a9ec:	b08b      	sub	sp, #44	; 0x2c
 800a9ee:	429e      	cmp	r6, r3
 800a9f0:	da04      	bge.n	800a9fc <__cvt+0x18>
 800a9f2:	2180      	movs	r1, #128	; 0x80
 800a9f4:	0609      	lsls	r1, r1, #24
 800a9f6:	1873      	adds	r3, r6, r1
 800a9f8:	001e      	movs	r6, r3
 800a9fa:	232d      	movs	r3, #45	; 0x2d
 800a9fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a9fe:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800aa00:	7013      	strb	r3, [r2, #0]
 800aa02:	2320      	movs	r3, #32
 800aa04:	2203      	movs	r2, #3
 800aa06:	439f      	bics	r7, r3
 800aa08:	2f46      	cmp	r7, #70	; 0x46
 800aa0a:	d007      	beq.n	800aa1c <__cvt+0x38>
 800aa0c:	003b      	movs	r3, r7
 800aa0e:	3b45      	subs	r3, #69	; 0x45
 800aa10:	4259      	negs	r1, r3
 800aa12:	414b      	adcs	r3, r1
 800aa14:	9910      	ldr	r1, [sp, #64]	; 0x40
 800aa16:	3a01      	subs	r2, #1
 800aa18:	18cb      	adds	r3, r1, r3
 800aa1a:	9310      	str	r3, [sp, #64]	; 0x40
 800aa1c:	ab09      	add	r3, sp, #36	; 0x24
 800aa1e:	9304      	str	r3, [sp, #16]
 800aa20:	ab08      	add	r3, sp, #32
 800aa22:	9303      	str	r3, [sp, #12]
 800aa24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa26:	9200      	str	r2, [sp, #0]
 800aa28:	9302      	str	r3, [sp, #8]
 800aa2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa2c:	0022      	movs	r2, r4
 800aa2e:	9301      	str	r3, [sp, #4]
 800aa30:	0033      	movs	r3, r6
 800aa32:	f001 fd1f 	bl	800c474 <_dtoa_r>
 800aa36:	0005      	movs	r5, r0
 800aa38:	2f47      	cmp	r7, #71	; 0x47
 800aa3a:	d102      	bne.n	800aa42 <__cvt+0x5e>
 800aa3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa3e:	07db      	lsls	r3, r3, #31
 800aa40:	d528      	bpl.n	800aa94 <__cvt+0xb0>
 800aa42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa44:	18eb      	adds	r3, r5, r3
 800aa46:	9307      	str	r3, [sp, #28]
 800aa48:	2f46      	cmp	r7, #70	; 0x46
 800aa4a:	d114      	bne.n	800aa76 <__cvt+0x92>
 800aa4c:	782b      	ldrb	r3, [r5, #0]
 800aa4e:	2b30      	cmp	r3, #48	; 0x30
 800aa50:	d10c      	bne.n	800aa6c <__cvt+0x88>
 800aa52:	2200      	movs	r2, #0
 800aa54:	2300      	movs	r3, #0
 800aa56:	0020      	movs	r0, r4
 800aa58:	0031      	movs	r1, r6
 800aa5a:	f7f5 fcf7 	bl	800044c <__aeabi_dcmpeq>
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	d104      	bne.n	800aa6c <__cvt+0x88>
 800aa62:	2301      	movs	r3, #1
 800aa64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa66:	1a9b      	subs	r3, r3, r2
 800aa68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aa6a:	6013      	str	r3, [r2, #0]
 800aa6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa6e:	9a07      	ldr	r2, [sp, #28]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	18d3      	adds	r3, r2, r3
 800aa74:	9307      	str	r3, [sp, #28]
 800aa76:	2200      	movs	r2, #0
 800aa78:	2300      	movs	r3, #0
 800aa7a:	0020      	movs	r0, r4
 800aa7c:	0031      	movs	r1, r6
 800aa7e:	f7f5 fce5 	bl	800044c <__aeabi_dcmpeq>
 800aa82:	2800      	cmp	r0, #0
 800aa84:	d001      	beq.n	800aa8a <__cvt+0xa6>
 800aa86:	9b07      	ldr	r3, [sp, #28]
 800aa88:	9309      	str	r3, [sp, #36]	; 0x24
 800aa8a:	2230      	movs	r2, #48	; 0x30
 800aa8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa8e:	9907      	ldr	r1, [sp, #28]
 800aa90:	428b      	cmp	r3, r1
 800aa92:	d306      	bcc.n	800aaa2 <__cvt+0xbe>
 800aa94:	0028      	movs	r0, r5
 800aa96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa98:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aa9a:	1b5b      	subs	r3, r3, r5
 800aa9c:	6013      	str	r3, [r2, #0]
 800aa9e:	b00b      	add	sp, #44	; 0x2c
 800aaa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaa2:	1c59      	adds	r1, r3, #1
 800aaa4:	9109      	str	r1, [sp, #36]	; 0x24
 800aaa6:	701a      	strb	r2, [r3, #0]
 800aaa8:	e7f0      	b.n	800aa8c <__cvt+0xa8>

0800aaaa <__exponent>:
 800aaaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaac:	1c83      	adds	r3, r0, #2
 800aaae:	b087      	sub	sp, #28
 800aab0:	9303      	str	r3, [sp, #12]
 800aab2:	0005      	movs	r5, r0
 800aab4:	000c      	movs	r4, r1
 800aab6:	232b      	movs	r3, #43	; 0x2b
 800aab8:	7002      	strb	r2, [r0, #0]
 800aaba:	2900      	cmp	r1, #0
 800aabc:	da01      	bge.n	800aac2 <__exponent+0x18>
 800aabe:	424c      	negs	r4, r1
 800aac0:	3302      	adds	r3, #2
 800aac2:	706b      	strb	r3, [r5, #1]
 800aac4:	2c09      	cmp	r4, #9
 800aac6:	dd31      	ble.n	800ab2c <__exponent+0x82>
 800aac8:	270a      	movs	r7, #10
 800aaca:	ab04      	add	r3, sp, #16
 800aacc:	1dde      	adds	r6, r3, #7
 800aace:	0020      	movs	r0, r4
 800aad0:	0039      	movs	r1, r7
 800aad2:	9601      	str	r6, [sp, #4]
 800aad4:	f7f5 fca4 	bl	8000420 <__aeabi_idivmod>
 800aad8:	3e01      	subs	r6, #1
 800aada:	3130      	adds	r1, #48	; 0x30
 800aadc:	0020      	movs	r0, r4
 800aade:	7031      	strb	r1, [r6, #0]
 800aae0:	0039      	movs	r1, r7
 800aae2:	9402      	str	r4, [sp, #8]
 800aae4:	f7f5 fbb6 	bl	8000254 <__divsi3>
 800aae8:	9b02      	ldr	r3, [sp, #8]
 800aaea:	0004      	movs	r4, r0
 800aaec:	2b63      	cmp	r3, #99	; 0x63
 800aaee:	dcee      	bgt.n	800aace <__exponent+0x24>
 800aaf0:	9b01      	ldr	r3, [sp, #4]
 800aaf2:	3430      	adds	r4, #48	; 0x30
 800aaf4:	1e9a      	subs	r2, r3, #2
 800aaf6:	0013      	movs	r3, r2
 800aaf8:	9903      	ldr	r1, [sp, #12]
 800aafa:	7014      	strb	r4, [r2, #0]
 800aafc:	a804      	add	r0, sp, #16
 800aafe:	3007      	adds	r0, #7
 800ab00:	4298      	cmp	r0, r3
 800ab02:	d80e      	bhi.n	800ab22 <__exponent+0x78>
 800ab04:	ab04      	add	r3, sp, #16
 800ab06:	3307      	adds	r3, #7
 800ab08:	2000      	movs	r0, #0
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d804      	bhi.n	800ab18 <__exponent+0x6e>
 800ab0e:	ab04      	add	r3, sp, #16
 800ab10:	3009      	adds	r0, #9
 800ab12:	18c0      	adds	r0, r0, r3
 800ab14:	9b01      	ldr	r3, [sp, #4]
 800ab16:	1ac0      	subs	r0, r0, r3
 800ab18:	9b03      	ldr	r3, [sp, #12]
 800ab1a:	1818      	adds	r0, r3, r0
 800ab1c:	1b40      	subs	r0, r0, r5
 800ab1e:	b007      	add	sp, #28
 800ab20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab22:	7818      	ldrb	r0, [r3, #0]
 800ab24:	3301      	adds	r3, #1
 800ab26:	7008      	strb	r0, [r1, #0]
 800ab28:	3101      	adds	r1, #1
 800ab2a:	e7e7      	b.n	800aafc <__exponent+0x52>
 800ab2c:	2330      	movs	r3, #48	; 0x30
 800ab2e:	18e4      	adds	r4, r4, r3
 800ab30:	70ab      	strb	r3, [r5, #2]
 800ab32:	1d28      	adds	r0, r5, #4
 800ab34:	70ec      	strb	r4, [r5, #3]
 800ab36:	e7f1      	b.n	800ab1c <__exponent+0x72>

0800ab38 <_printf_float>:
 800ab38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab3a:	b095      	sub	sp, #84	; 0x54
 800ab3c:	000c      	movs	r4, r1
 800ab3e:	9209      	str	r2, [sp, #36]	; 0x24
 800ab40:	001e      	movs	r6, r3
 800ab42:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800ab44:	0007      	movs	r7, r0
 800ab46:	f002 feef 	bl	800d928 <_localeconv_r>
 800ab4a:	6803      	ldr	r3, [r0, #0]
 800ab4c:	0018      	movs	r0, r3
 800ab4e:	930c      	str	r3, [sp, #48]	; 0x30
 800ab50:	f7f5 fada 	bl	8000108 <strlen>
 800ab54:	2300      	movs	r3, #0
 800ab56:	9312      	str	r3, [sp, #72]	; 0x48
 800ab58:	7e23      	ldrb	r3, [r4, #24]
 800ab5a:	2207      	movs	r2, #7
 800ab5c:	930a      	str	r3, [sp, #40]	; 0x28
 800ab5e:	6823      	ldr	r3, [r4, #0]
 800ab60:	900e      	str	r0, [sp, #56]	; 0x38
 800ab62:	930d      	str	r3, [sp, #52]	; 0x34
 800ab64:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ab66:	682b      	ldr	r3, [r5, #0]
 800ab68:	05c9      	lsls	r1, r1, #23
 800ab6a:	d547      	bpl.n	800abfc <_printf_float+0xc4>
 800ab6c:	189b      	adds	r3, r3, r2
 800ab6e:	4393      	bics	r3, r2
 800ab70:	001a      	movs	r2, r3
 800ab72:	3208      	adds	r2, #8
 800ab74:	602a      	str	r2, [r5, #0]
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	64a2      	str	r2, [r4, #72]	; 0x48
 800ab7c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ab7e:	2201      	movs	r2, #1
 800ab80:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ab82:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800ab84:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab86:	006b      	lsls	r3, r5, #1
 800ab88:	085b      	lsrs	r3, r3, #1
 800ab8a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ab8e:	4ba7      	ldr	r3, [pc, #668]	; (800ae2c <_printf_float+0x2f4>)
 800ab90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ab92:	4252      	negs	r2, r2
 800ab94:	f7f8 f938 	bl	8002e08 <__aeabi_dcmpun>
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	d131      	bne.n	800ac00 <_printf_float+0xc8>
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	4ba3      	ldr	r3, [pc, #652]	; (800ae2c <_printf_float+0x2f4>)
 800aba0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800aba2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800aba4:	4252      	negs	r2, r2
 800aba6:	f7f5 fc61 	bl	800046c <__aeabi_dcmple>
 800abaa:	2800      	cmp	r0, #0
 800abac:	d128      	bne.n	800ac00 <_printf_float+0xc8>
 800abae:	2200      	movs	r2, #0
 800abb0:	2300      	movs	r3, #0
 800abb2:	0029      	movs	r1, r5
 800abb4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800abb6:	f7f5 fc4f 	bl	8000458 <__aeabi_dcmplt>
 800abba:	2800      	cmp	r0, #0
 800abbc:	d003      	beq.n	800abc6 <_printf_float+0x8e>
 800abbe:	0023      	movs	r3, r4
 800abc0:	222d      	movs	r2, #45	; 0x2d
 800abc2:	3343      	adds	r3, #67	; 0x43
 800abc4:	701a      	strb	r2, [r3, #0]
 800abc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abc8:	4d99      	ldr	r5, [pc, #612]	; (800ae30 <_printf_float+0x2f8>)
 800abca:	2b47      	cmp	r3, #71	; 0x47
 800abcc:	d900      	bls.n	800abd0 <_printf_float+0x98>
 800abce:	4d99      	ldr	r5, [pc, #612]	; (800ae34 <_printf_float+0x2fc>)
 800abd0:	2303      	movs	r3, #3
 800abd2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800abd4:	6123      	str	r3, [r4, #16]
 800abd6:	3301      	adds	r3, #1
 800abd8:	439a      	bics	r2, r3
 800abda:	2300      	movs	r3, #0
 800abdc:	6022      	str	r2, [r4, #0]
 800abde:	930b      	str	r3, [sp, #44]	; 0x2c
 800abe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abe2:	0021      	movs	r1, r4
 800abe4:	0038      	movs	r0, r7
 800abe6:	9600      	str	r6, [sp, #0]
 800abe8:	aa13      	add	r2, sp, #76	; 0x4c
 800abea:	f000 f9e7 	bl	800afbc <_printf_common>
 800abee:	1c43      	adds	r3, r0, #1
 800abf0:	d000      	beq.n	800abf4 <_printf_float+0xbc>
 800abf2:	e0a2      	b.n	800ad3a <_printf_float+0x202>
 800abf4:	2001      	movs	r0, #1
 800abf6:	4240      	negs	r0, r0
 800abf8:	b015      	add	sp, #84	; 0x54
 800abfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abfc:	3307      	adds	r3, #7
 800abfe:	e7b6      	b.n	800ab6e <_printf_float+0x36>
 800ac00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac02:	002b      	movs	r3, r5
 800ac04:	0010      	movs	r0, r2
 800ac06:	0029      	movs	r1, r5
 800ac08:	f7f8 f8fe 	bl	8002e08 <__aeabi_dcmpun>
 800ac0c:	2800      	cmp	r0, #0
 800ac0e:	d00b      	beq.n	800ac28 <_printf_float+0xf0>
 800ac10:	2d00      	cmp	r5, #0
 800ac12:	da03      	bge.n	800ac1c <_printf_float+0xe4>
 800ac14:	0023      	movs	r3, r4
 800ac16:	222d      	movs	r2, #45	; 0x2d
 800ac18:	3343      	adds	r3, #67	; 0x43
 800ac1a:	701a      	strb	r2, [r3, #0]
 800ac1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac1e:	4d86      	ldr	r5, [pc, #536]	; (800ae38 <_printf_float+0x300>)
 800ac20:	2b47      	cmp	r3, #71	; 0x47
 800ac22:	d9d5      	bls.n	800abd0 <_printf_float+0x98>
 800ac24:	4d85      	ldr	r5, [pc, #532]	; (800ae3c <_printf_float+0x304>)
 800ac26:	e7d3      	b.n	800abd0 <_printf_float+0x98>
 800ac28:	2220      	movs	r2, #32
 800ac2a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ac2c:	6863      	ldr	r3, [r4, #4]
 800ac2e:	4391      	bics	r1, r2
 800ac30:	910f      	str	r1, [sp, #60]	; 0x3c
 800ac32:	1c5a      	adds	r2, r3, #1
 800ac34:	d149      	bne.n	800acca <_printf_float+0x192>
 800ac36:	3307      	adds	r3, #7
 800ac38:	6063      	str	r3, [r4, #4]
 800ac3a:	2380      	movs	r3, #128	; 0x80
 800ac3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac3e:	00db      	lsls	r3, r3, #3
 800ac40:	4313      	orrs	r3, r2
 800ac42:	2200      	movs	r2, #0
 800ac44:	9206      	str	r2, [sp, #24]
 800ac46:	aa12      	add	r2, sp, #72	; 0x48
 800ac48:	9205      	str	r2, [sp, #20]
 800ac4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac4c:	a908      	add	r1, sp, #32
 800ac4e:	9204      	str	r2, [sp, #16]
 800ac50:	aa11      	add	r2, sp, #68	; 0x44
 800ac52:	9203      	str	r2, [sp, #12]
 800ac54:	2223      	movs	r2, #35	; 0x23
 800ac56:	6023      	str	r3, [r4, #0]
 800ac58:	9301      	str	r3, [sp, #4]
 800ac5a:	6863      	ldr	r3, [r4, #4]
 800ac5c:	1852      	adds	r2, r2, r1
 800ac5e:	9202      	str	r2, [sp, #8]
 800ac60:	9300      	str	r3, [sp, #0]
 800ac62:	0038      	movs	r0, r7
 800ac64:	002b      	movs	r3, r5
 800ac66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac68:	f7ff febc 	bl	800a9e4 <__cvt>
 800ac6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac6e:	0005      	movs	r5, r0
 800ac70:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ac72:	2b47      	cmp	r3, #71	; 0x47
 800ac74:	d108      	bne.n	800ac88 <_printf_float+0x150>
 800ac76:	1ccb      	adds	r3, r1, #3
 800ac78:	db02      	blt.n	800ac80 <_printf_float+0x148>
 800ac7a:	6863      	ldr	r3, [r4, #4]
 800ac7c:	4299      	cmp	r1, r3
 800ac7e:	dd48      	ble.n	800ad12 <_printf_float+0x1da>
 800ac80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac82:	3b02      	subs	r3, #2
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	930a      	str	r3, [sp, #40]	; 0x28
 800ac88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac8a:	2b65      	cmp	r3, #101	; 0x65
 800ac8c:	d824      	bhi.n	800acd8 <_printf_float+0x1a0>
 800ac8e:	0020      	movs	r0, r4
 800ac90:	001a      	movs	r2, r3
 800ac92:	3901      	subs	r1, #1
 800ac94:	3050      	adds	r0, #80	; 0x50
 800ac96:	9111      	str	r1, [sp, #68]	; 0x44
 800ac98:	f7ff ff07 	bl	800aaaa <__exponent>
 800ac9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ac9e:	900b      	str	r0, [sp, #44]	; 0x2c
 800aca0:	1813      	adds	r3, r2, r0
 800aca2:	6123      	str	r3, [r4, #16]
 800aca4:	2a01      	cmp	r2, #1
 800aca6:	dc02      	bgt.n	800acae <_printf_float+0x176>
 800aca8:	6822      	ldr	r2, [r4, #0]
 800acaa:	07d2      	lsls	r2, r2, #31
 800acac:	d501      	bpl.n	800acb2 <_printf_float+0x17a>
 800acae:	3301      	adds	r3, #1
 800acb0:	6123      	str	r3, [r4, #16]
 800acb2:	2323      	movs	r3, #35	; 0x23
 800acb4:	aa08      	add	r2, sp, #32
 800acb6:	189b      	adds	r3, r3, r2
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d100      	bne.n	800acc0 <_printf_float+0x188>
 800acbe:	e78f      	b.n	800abe0 <_printf_float+0xa8>
 800acc0:	0023      	movs	r3, r4
 800acc2:	222d      	movs	r2, #45	; 0x2d
 800acc4:	3343      	adds	r3, #67	; 0x43
 800acc6:	701a      	strb	r2, [r3, #0]
 800acc8:	e78a      	b.n	800abe0 <_printf_float+0xa8>
 800acca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800accc:	2a47      	cmp	r2, #71	; 0x47
 800acce:	d1b4      	bne.n	800ac3a <_printf_float+0x102>
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d1b2      	bne.n	800ac3a <_printf_float+0x102>
 800acd4:	3301      	adds	r3, #1
 800acd6:	e7af      	b.n	800ac38 <_printf_float+0x100>
 800acd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acda:	2b66      	cmp	r3, #102	; 0x66
 800acdc:	d11b      	bne.n	800ad16 <_printf_float+0x1de>
 800acde:	6863      	ldr	r3, [r4, #4]
 800ace0:	2900      	cmp	r1, #0
 800ace2:	dd0d      	ble.n	800ad00 <_printf_float+0x1c8>
 800ace4:	6121      	str	r1, [r4, #16]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d102      	bne.n	800acf0 <_printf_float+0x1b8>
 800acea:	6822      	ldr	r2, [r4, #0]
 800acec:	07d2      	lsls	r2, r2, #31
 800acee:	d502      	bpl.n	800acf6 <_printf_float+0x1be>
 800acf0:	3301      	adds	r3, #1
 800acf2:	1859      	adds	r1, r3, r1
 800acf4:	6121      	str	r1, [r4, #16]
 800acf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800acf8:	65a3      	str	r3, [r4, #88]	; 0x58
 800acfa:	2300      	movs	r3, #0
 800acfc:	930b      	str	r3, [sp, #44]	; 0x2c
 800acfe:	e7d8      	b.n	800acb2 <_printf_float+0x17a>
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d103      	bne.n	800ad0c <_printf_float+0x1d4>
 800ad04:	2201      	movs	r2, #1
 800ad06:	6821      	ldr	r1, [r4, #0]
 800ad08:	4211      	tst	r1, r2
 800ad0a:	d000      	beq.n	800ad0e <_printf_float+0x1d6>
 800ad0c:	1c9a      	adds	r2, r3, #2
 800ad0e:	6122      	str	r2, [r4, #16]
 800ad10:	e7f1      	b.n	800acf6 <_printf_float+0x1be>
 800ad12:	2367      	movs	r3, #103	; 0x67
 800ad14:	930a      	str	r3, [sp, #40]	; 0x28
 800ad16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	db06      	blt.n	800ad2c <_printf_float+0x1f4>
 800ad1e:	6822      	ldr	r2, [r4, #0]
 800ad20:	6123      	str	r3, [r4, #16]
 800ad22:	07d2      	lsls	r2, r2, #31
 800ad24:	d5e7      	bpl.n	800acf6 <_printf_float+0x1be>
 800ad26:	3301      	adds	r3, #1
 800ad28:	6123      	str	r3, [r4, #16]
 800ad2a:	e7e4      	b.n	800acf6 <_printf_float+0x1be>
 800ad2c:	2101      	movs	r1, #1
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	dc01      	bgt.n	800ad36 <_printf_float+0x1fe>
 800ad32:	1849      	adds	r1, r1, r1
 800ad34:	1ac9      	subs	r1, r1, r3
 800ad36:	1852      	adds	r2, r2, r1
 800ad38:	e7e9      	b.n	800ad0e <_printf_float+0x1d6>
 800ad3a:	6822      	ldr	r2, [r4, #0]
 800ad3c:	0553      	lsls	r3, r2, #21
 800ad3e:	d407      	bmi.n	800ad50 <_printf_float+0x218>
 800ad40:	6923      	ldr	r3, [r4, #16]
 800ad42:	002a      	movs	r2, r5
 800ad44:	0038      	movs	r0, r7
 800ad46:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad48:	47b0      	blx	r6
 800ad4a:	1c43      	adds	r3, r0, #1
 800ad4c:	d128      	bne.n	800ada0 <_printf_float+0x268>
 800ad4e:	e751      	b.n	800abf4 <_printf_float+0xbc>
 800ad50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad52:	2b65      	cmp	r3, #101	; 0x65
 800ad54:	d800      	bhi.n	800ad58 <_printf_float+0x220>
 800ad56:	e0e1      	b.n	800af1c <_printf_float+0x3e4>
 800ad58:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800ad5a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	2300      	movs	r3, #0
 800ad60:	f7f5 fb74 	bl	800044c <__aeabi_dcmpeq>
 800ad64:	2800      	cmp	r0, #0
 800ad66:	d031      	beq.n	800adcc <_printf_float+0x294>
 800ad68:	2301      	movs	r3, #1
 800ad6a:	0038      	movs	r0, r7
 800ad6c:	4a34      	ldr	r2, [pc, #208]	; (800ae40 <_printf_float+0x308>)
 800ad6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad70:	47b0      	blx	r6
 800ad72:	1c43      	adds	r3, r0, #1
 800ad74:	d100      	bne.n	800ad78 <_printf_float+0x240>
 800ad76:	e73d      	b.n	800abf4 <_printf_float+0xbc>
 800ad78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	db02      	blt.n	800ad86 <_printf_float+0x24e>
 800ad80:	6823      	ldr	r3, [r4, #0]
 800ad82:	07db      	lsls	r3, r3, #31
 800ad84:	d50c      	bpl.n	800ada0 <_printf_float+0x268>
 800ad86:	0038      	movs	r0, r7
 800ad88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad8e:	47b0      	blx	r6
 800ad90:	2500      	movs	r5, #0
 800ad92:	1c43      	adds	r3, r0, #1
 800ad94:	d100      	bne.n	800ad98 <_printf_float+0x260>
 800ad96:	e72d      	b.n	800abf4 <_printf_float+0xbc>
 800ad98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad9a:	3b01      	subs	r3, #1
 800ad9c:	42ab      	cmp	r3, r5
 800ad9e:	dc0a      	bgt.n	800adb6 <_printf_float+0x27e>
 800ada0:	6823      	ldr	r3, [r4, #0]
 800ada2:	079b      	lsls	r3, r3, #30
 800ada4:	d500      	bpl.n	800ada8 <_printf_float+0x270>
 800ada6:	e106      	b.n	800afb6 <_printf_float+0x47e>
 800ada8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800adaa:	68e0      	ldr	r0, [r4, #12]
 800adac:	4298      	cmp	r0, r3
 800adae:	db00      	blt.n	800adb2 <_printf_float+0x27a>
 800adb0:	e722      	b.n	800abf8 <_printf_float+0xc0>
 800adb2:	0018      	movs	r0, r3
 800adb4:	e720      	b.n	800abf8 <_printf_float+0xc0>
 800adb6:	0022      	movs	r2, r4
 800adb8:	2301      	movs	r3, #1
 800adba:	0038      	movs	r0, r7
 800adbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800adbe:	321a      	adds	r2, #26
 800adc0:	47b0      	blx	r6
 800adc2:	1c43      	adds	r3, r0, #1
 800adc4:	d100      	bne.n	800adc8 <_printf_float+0x290>
 800adc6:	e715      	b.n	800abf4 <_printf_float+0xbc>
 800adc8:	3501      	adds	r5, #1
 800adca:	e7e5      	b.n	800ad98 <_printf_float+0x260>
 800adcc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800adce:	2b00      	cmp	r3, #0
 800add0:	dc38      	bgt.n	800ae44 <_printf_float+0x30c>
 800add2:	2301      	movs	r3, #1
 800add4:	0038      	movs	r0, r7
 800add6:	4a1a      	ldr	r2, [pc, #104]	; (800ae40 <_printf_float+0x308>)
 800add8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800adda:	47b0      	blx	r6
 800addc:	1c43      	adds	r3, r0, #1
 800adde:	d100      	bne.n	800ade2 <_printf_float+0x2aa>
 800ade0:	e708      	b.n	800abf4 <_printf_float+0xbc>
 800ade2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ade4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ade6:	4313      	orrs	r3, r2
 800ade8:	d102      	bne.n	800adf0 <_printf_float+0x2b8>
 800adea:	6823      	ldr	r3, [r4, #0]
 800adec:	07db      	lsls	r3, r3, #31
 800adee:	d5d7      	bpl.n	800ada0 <_printf_float+0x268>
 800adf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adf2:	0038      	movs	r0, r7
 800adf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800adf6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800adf8:	47b0      	blx	r6
 800adfa:	1c43      	adds	r3, r0, #1
 800adfc:	d100      	bne.n	800ae00 <_printf_float+0x2c8>
 800adfe:	e6f9      	b.n	800abf4 <_printf_float+0xbc>
 800ae00:	2300      	movs	r3, #0
 800ae02:	930a      	str	r3, [sp, #40]	; 0x28
 800ae04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae08:	425b      	negs	r3, r3
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	dc01      	bgt.n	800ae12 <_printf_float+0x2da>
 800ae0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae10:	e797      	b.n	800ad42 <_printf_float+0x20a>
 800ae12:	0022      	movs	r2, r4
 800ae14:	2301      	movs	r3, #1
 800ae16:	0038      	movs	r0, r7
 800ae18:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae1a:	321a      	adds	r2, #26
 800ae1c:	47b0      	blx	r6
 800ae1e:	1c43      	adds	r3, r0, #1
 800ae20:	d100      	bne.n	800ae24 <_printf_float+0x2ec>
 800ae22:	e6e7      	b.n	800abf4 <_printf_float+0xbc>
 800ae24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae26:	3301      	adds	r3, #1
 800ae28:	e7eb      	b.n	800ae02 <_printf_float+0x2ca>
 800ae2a:	46c0      	nop			; (mov r8, r8)
 800ae2c:	7fefffff 	.word	0x7fefffff
 800ae30:	0800f6c0 	.word	0x0800f6c0
 800ae34:	0800f6c4 	.word	0x0800f6c4
 800ae38:	0800f6c8 	.word	0x0800f6c8
 800ae3c:	0800f6cc 	.word	0x0800f6cc
 800ae40:	0800f6d0 	.word	0x0800f6d0
 800ae44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ae46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae48:	920a      	str	r2, [sp, #40]	; 0x28
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	dd00      	ble.n	800ae50 <_printf_float+0x318>
 800ae4e:	930a      	str	r3, [sp, #40]	; 0x28
 800ae50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	dc3c      	bgt.n	800aed0 <_printf_float+0x398>
 800ae56:	2300      	movs	r3, #0
 800ae58:	930d      	str	r3, [sp, #52]	; 0x34
 800ae5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae5c:	43db      	mvns	r3, r3
 800ae5e:	17db      	asrs	r3, r3, #31
 800ae60:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ae66:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae6a:	4013      	ands	r3, r2
 800ae6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ae6e:	1ad3      	subs	r3, r2, r3
 800ae70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae72:	4293      	cmp	r3, r2
 800ae74:	dc34      	bgt.n	800aee0 <_printf_float+0x3a8>
 800ae76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	db3d      	blt.n	800aefa <_printf_float+0x3c2>
 800ae7e:	6823      	ldr	r3, [r4, #0]
 800ae80:	07db      	lsls	r3, r3, #31
 800ae82:	d43a      	bmi.n	800aefa <_printf_float+0x3c2>
 800ae84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ae86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae88:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ae8a:	1ad3      	subs	r3, r2, r3
 800ae8c:	1a52      	subs	r2, r2, r1
 800ae8e:	920a      	str	r2, [sp, #40]	; 0x28
 800ae90:	429a      	cmp	r2, r3
 800ae92:	dd00      	ble.n	800ae96 <_printf_float+0x35e>
 800ae94:	930a      	str	r3, [sp, #40]	; 0x28
 800ae96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	dc36      	bgt.n	800af0a <_printf_float+0x3d2>
 800ae9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae9e:	2500      	movs	r5, #0
 800aea0:	43db      	mvns	r3, r3
 800aea2:	17db      	asrs	r3, r3, #31
 800aea4:	930b      	str	r3, [sp, #44]	; 0x2c
 800aea6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aea8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aeaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aeac:	1a9b      	subs	r3, r3, r2
 800aeae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aeb0:	400a      	ands	r2, r1
 800aeb2:	1a9b      	subs	r3, r3, r2
 800aeb4:	42ab      	cmp	r3, r5
 800aeb6:	dc00      	bgt.n	800aeba <_printf_float+0x382>
 800aeb8:	e772      	b.n	800ada0 <_printf_float+0x268>
 800aeba:	0022      	movs	r2, r4
 800aebc:	2301      	movs	r3, #1
 800aebe:	0038      	movs	r0, r7
 800aec0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aec2:	321a      	adds	r2, #26
 800aec4:	47b0      	blx	r6
 800aec6:	1c43      	adds	r3, r0, #1
 800aec8:	d100      	bne.n	800aecc <_printf_float+0x394>
 800aeca:	e693      	b.n	800abf4 <_printf_float+0xbc>
 800aecc:	3501      	adds	r5, #1
 800aece:	e7ea      	b.n	800aea6 <_printf_float+0x36e>
 800aed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aed2:	002a      	movs	r2, r5
 800aed4:	0038      	movs	r0, r7
 800aed6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aed8:	47b0      	blx	r6
 800aeda:	1c43      	adds	r3, r0, #1
 800aedc:	d1bb      	bne.n	800ae56 <_printf_float+0x31e>
 800aede:	e689      	b.n	800abf4 <_printf_float+0xbc>
 800aee0:	0022      	movs	r2, r4
 800aee2:	2301      	movs	r3, #1
 800aee4:	0038      	movs	r0, r7
 800aee6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aee8:	321a      	adds	r2, #26
 800aeea:	47b0      	blx	r6
 800aeec:	1c43      	adds	r3, r0, #1
 800aeee:	d100      	bne.n	800aef2 <_printf_float+0x3ba>
 800aef0:	e680      	b.n	800abf4 <_printf_float+0xbc>
 800aef2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aef4:	3301      	adds	r3, #1
 800aef6:	930d      	str	r3, [sp, #52]	; 0x34
 800aef8:	e7b3      	b.n	800ae62 <_printf_float+0x32a>
 800aefa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aefc:	0038      	movs	r0, r7
 800aefe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af00:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af02:	47b0      	blx	r6
 800af04:	1c43      	adds	r3, r0, #1
 800af06:	d1bd      	bne.n	800ae84 <_printf_float+0x34c>
 800af08:	e674      	b.n	800abf4 <_printf_float+0xbc>
 800af0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af0c:	0038      	movs	r0, r7
 800af0e:	18ea      	adds	r2, r5, r3
 800af10:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af14:	47b0      	blx	r6
 800af16:	1c43      	adds	r3, r0, #1
 800af18:	d1c0      	bne.n	800ae9c <_printf_float+0x364>
 800af1a:	e66b      	b.n	800abf4 <_printf_float+0xbc>
 800af1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af1e:	2b01      	cmp	r3, #1
 800af20:	dc02      	bgt.n	800af28 <_printf_float+0x3f0>
 800af22:	2301      	movs	r3, #1
 800af24:	421a      	tst	r2, r3
 800af26:	d034      	beq.n	800af92 <_printf_float+0x45a>
 800af28:	2301      	movs	r3, #1
 800af2a:	002a      	movs	r2, r5
 800af2c:	0038      	movs	r0, r7
 800af2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af30:	47b0      	blx	r6
 800af32:	1c43      	adds	r3, r0, #1
 800af34:	d100      	bne.n	800af38 <_printf_float+0x400>
 800af36:	e65d      	b.n	800abf4 <_printf_float+0xbc>
 800af38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af3a:	0038      	movs	r0, r7
 800af3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af40:	47b0      	blx	r6
 800af42:	1c43      	adds	r3, r0, #1
 800af44:	d100      	bne.n	800af48 <_printf_float+0x410>
 800af46:	e655      	b.n	800abf4 <_printf_float+0xbc>
 800af48:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800af4a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800af4c:	2200      	movs	r2, #0
 800af4e:	2300      	movs	r3, #0
 800af50:	f7f5 fa7c 	bl	800044c <__aeabi_dcmpeq>
 800af54:	2800      	cmp	r0, #0
 800af56:	d11a      	bne.n	800af8e <_printf_float+0x456>
 800af58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af5a:	1c6a      	adds	r2, r5, #1
 800af5c:	3b01      	subs	r3, #1
 800af5e:	0038      	movs	r0, r7
 800af60:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af62:	47b0      	blx	r6
 800af64:	1c43      	adds	r3, r0, #1
 800af66:	d10e      	bne.n	800af86 <_printf_float+0x44e>
 800af68:	e644      	b.n	800abf4 <_printf_float+0xbc>
 800af6a:	0022      	movs	r2, r4
 800af6c:	2301      	movs	r3, #1
 800af6e:	0038      	movs	r0, r7
 800af70:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af72:	321a      	adds	r2, #26
 800af74:	47b0      	blx	r6
 800af76:	1c43      	adds	r3, r0, #1
 800af78:	d100      	bne.n	800af7c <_printf_float+0x444>
 800af7a:	e63b      	b.n	800abf4 <_printf_float+0xbc>
 800af7c:	3501      	adds	r5, #1
 800af7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af80:	3b01      	subs	r3, #1
 800af82:	42ab      	cmp	r3, r5
 800af84:	dcf1      	bgt.n	800af6a <_printf_float+0x432>
 800af86:	0022      	movs	r2, r4
 800af88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af8a:	3250      	adds	r2, #80	; 0x50
 800af8c:	e6da      	b.n	800ad44 <_printf_float+0x20c>
 800af8e:	2500      	movs	r5, #0
 800af90:	e7f5      	b.n	800af7e <_printf_float+0x446>
 800af92:	002a      	movs	r2, r5
 800af94:	e7e3      	b.n	800af5e <_printf_float+0x426>
 800af96:	0022      	movs	r2, r4
 800af98:	2301      	movs	r3, #1
 800af9a:	0038      	movs	r0, r7
 800af9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af9e:	3219      	adds	r2, #25
 800afa0:	47b0      	blx	r6
 800afa2:	1c43      	adds	r3, r0, #1
 800afa4:	d100      	bne.n	800afa8 <_printf_float+0x470>
 800afa6:	e625      	b.n	800abf4 <_printf_float+0xbc>
 800afa8:	3501      	adds	r5, #1
 800afaa:	68e3      	ldr	r3, [r4, #12]
 800afac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800afae:	1a9b      	subs	r3, r3, r2
 800afb0:	42ab      	cmp	r3, r5
 800afb2:	dcf0      	bgt.n	800af96 <_printf_float+0x45e>
 800afb4:	e6f8      	b.n	800ada8 <_printf_float+0x270>
 800afb6:	2500      	movs	r5, #0
 800afb8:	e7f7      	b.n	800afaa <_printf_float+0x472>
 800afba:	46c0      	nop			; (mov r8, r8)

0800afbc <_printf_common>:
 800afbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afbe:	0015      	movs	r5, r2
 800afc0:	9301      	str	r3, [sp, #4]
 800afc2:	688a      	ldr	r2, [r1, #8]
 800afc4:	690b      	ldr	r3, [r1, #16]
 800afc6:	000c      	movs	r4, r1
 800afc8:	9000      	str	r0, [sp, #0]
 800afca:	4293      	cmp	r3, r2
 800afcc:	da00      	bge.n	800afd0 <_printf_common+0x14>
 800afce:	0013      	movs	r3, r2
 800afd0:	0022      	movs	r2, r4
 800afd2:	602b      	str	r3, [r5, #0]
 800afd4:	3243      	adds	r2, #67	; 0x43
 800afd6:	7812      	ldrb	r2, [r2, #0]
 800afd8:	2a00      	cmp	r2, #0
 800afda:	d001      	beq.n	800afe0 <_printf_common+0x24>
 800afdc:	3301      	adds	r3, #1
 800afde:	602b      	str	r3, [r5, #0]
 800afe0:	6823      	ldr	r3, [r4, #0]
 800afe2:	069b      	lsls	r3, r3, #26
 800afe4:	d502      	bpl.n	800afec <_printf_common+0x30>
 800afe6:	682b      	ldr	r3, [r5, #0]
 800afe8:	3302      	adds	r3, #2
 800afea:	602b      	str	r3, [r5, #0]
 800afec:	6822      	ldr	r2, [r4, #0]
 800afee:	2306      	movs	r3, #6
 800aff0:	0017      	movs	r7, r2
 800aff2:	401f      	ands	r7, r3
 800aff4:	421a      	tst	r2, r3
 800aff6:	d027      	beq.n	800b048 <_printf_common+0x8c>
 800aff8:	0023      	movs	r3, r4
 800affa:	3343      	adds	r3, #67	; 0x43
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	1e5a      	subs	r2, r3, #1
 800b000:	4193      	sbcs	r3, r2
 800b002:	6822      	ldr	r2, [r4, #0]
 800b004:	0692      	lsls	r2, r2, #26
 800b006:	d430      	bmi.n	800b06a <_printf_common+0xae>
 800b008:	0022      	movs	r2, r4
 800b00a:	9901      	ldr	r1, [sp, #4]
 800b00c:	9800      	ldr	r0, [sp, #0]
 800b00e:	9e08      	ldr	r6, [sp, #32]
 800b010:	3243      	adds	r2, #67	; 0x43
 800b012:	47b0      	blx	r6
 800b014:	1c43      	adds	r3, r0, #1
 800b016:	d025      	beq.n	800b064 <_printf_common+0xa8>
 800b018:	2306      	movs	r3, #6
 800b01a:	6820      	ldr	r0, [r4, #0]
 800b01c:	682a      	ldr	r2, [r5, #0]
 800b01e:	68e1      	ldr	r1, [r4, #12]
 800b020:	2500      	movs	r5, #0
 800b022:	4003      	ands	r3, r0
 800b024:	2b04      	cmp	r3, #4
 800b026:	d103      	bne.n	800b030 <_printf_common+0x74>
 800b028:	1a8d      	subs	r5, r1, r2
 800b02a:	43eb      	mvns	r3, r5
 800b02c:	17db      	asrs	r3, r3, #31
 800b02e:	401d      	ands	r5, r3
 800b030:	68a3      	ldr	r3, [r4, #8]
 800b032:	6922      	ldr	r2, [r4, #16]
 800b034:	4293      	cmp	r3, r2
 800b036:	dd01      	ble.n	800b03c <_printf_common+0x80>
 800b038:	1a9b      	subs	r3, r3, r2
 800b03a:	18ed      	adds	r5, r5, r3
 800b03c:	2700      	movs	r7, #0
 800b03e:	42bd      	cmp	r5, r7
 800b040:	d120      	bne.n	800b084 <_printf_common+0xc8>
 800b042:	2000      	movs	r0, #0
 800b044:	e010      	b.n	800b068 <_printf_common+0xac>
 800b046:	3701      	adds	r7, #1
 800b048:	68e3      	ldr	r3, [r4, #12]
 800b04a:	682a      	ldr	r2, [r5, #0]
 800b04c:	1a9b      	subs	r3, r3, r2
 800b04e:	42bb      	cmp	r3, r7
 800b050:	ddd2      	ble.n	800aff8 <_printf_common+0x3c>
 800b052:	0022      	movs	r2, r4
 800b054:	2301      	movs	r3, #1
 800b056:	9901      	ldr	r1, [sp, #4]
 800b058:	9800      	ldr	r0, [sp, #0]
 800b05a:	9e08      	ldr	r6, [sp, #32]
 800b05c:	3219      	adds	r2, #25
 800b05e:	47b0      	blx	r6
 800b060:	1c43      	adds	r3, r0, #1
 800b062:	d1f0      	bne.n	800b046 <_printf_common+0x8a>
 800b064:	2001      	movs	r0, #1
 800b066:	4240      	negs	r0, r0
 800b068:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b06a:	2030      	movs	r0, #48	; 0x30
 800b06c:	18e1      	adds	r1, r4, r3
 800b06e:	3143      	adds	r1, #67	; 0x43
 800b070:	7008      	strb	r0, [r1, #0]
 800b072:	0021      	movs	r1, r4
 800b074:	1c5a      	adds	r2, r3, #1
 800b076:	3145      	adds	r1, #69	; 0x45
 800b078:	7809      	ldrb	r1, [r1, #0]
 800b07a:	18a2      	adds	r2, r4, r2
 800b07c:	3243      	adds	r2, #67	; 0x43
 800b07e:	3302      	adds	r3, #2
 800b080:	7011      	strb	r1, [r2, #0]
 800b082:	e7c1      	b.n	800b008 <_printf_common+0x4c>
 800b084:	0022      	movs	r2, r4
 800b086:	2301      	movs	r3, #1
 800b088:	9901      	ldr	r1, [sp, #4]
 800b08a:	9800      	ldr	r0, [sp, #0]
 800b08c:	9e08      	ldr	r6, [sp, #32]
 800b08e:	321a      	adds	r2, #26
 800b090:	47b0      	blx	r6
 800b092:	1c43      	adds	r3, r0, #1
 800b094:	d0e6      	beq.n	800b064 <_printf_common+0xa8>
 800b096:	3701      	adds	r7, #1
 800b098:	e7d1      	b.n	800b03e <_printf_common+0x82>
	...

0800b09c <_printf_i>:
 800b09c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b09e:	b08b      	sub	sp, #44	; 0x2c
 800b0a0:	9206      	str	r2, [sp, #24]
 800b0a2:	000a      	movs	r2, r1
 800b0a4:	3243      	adds	r2, #67	; 0x43
 800b0a6:	9307      	str	r3, [sp, #28]
 800b0a8:	9005      	str	r0, [sp, #20]
 800b0aa:	9204      	str	r2, [sp, #16]
 800b0ac:	7e0a      	ldrb	r2, [r1, #24]
 800b0ae:	000c      	movs	r4, r1
 800b0b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b0b2:	2a78      	cmp	r2, #120	; 0x78
 800b0b4:	d807      	bhi.n	800b0c6 <_printf_i+0x2a>
 800b0b6:	2a62      	cmp	r2, #98	; 0x62
 800b0b8:	d809      	bhi.n	800b0ce <_printf_i+0x32>
 800b0ba:	2a00      	cmp	r2, #0
 800b0bc:	d100      	bne.n	800b0c0 <_printf_i+0x24>
 800b0be:	e0c1      	b.n	800b244 <_printf_i+0x1a8>
 800b0c0:	2a58      	cmp	r2, #88	; 0x58
 800b0c2:	d100      	bne.n	800b0c6 <_printf_i+0x2a>
 800b0c4:	e08c      	b.n	800b1e0 <_printf_i+0x144>
 800b0c6:	0026      	movs	r6, r4
 800b0c8:	3642      	adds	r6, #66	; 0x42
 800b0ca:	7032      	strb	r2, [r6, #0]
 800b0cc:	e022      	b.n	800b114 <_printf_i+0x78>
 800b0ce:	0010      	movs	r0, r2
 800b0d0:	3863      	subs	r0, #99	; 0x63
 800b0d2:	2815      	cmp	r0, #21
 800b0d4:	d8f7      	bhi.n	800b0c6 <_printf_i+0x2a>
 800b0d6:	f7f5 f829 	bl	800012c <__gnu_thumb1_case_shi>
 800b0da:	0016      	.short	0x0016
 800b0dc:	fff6001f 	.word	0xfff6001f
 800b0e0:	fff6fff6 	.word	0xfff6fff6
 800b0e4:	001ffff6 	.word	0x001ffff6
 800b0e8:	fff6fff6 	.word	0xfff6fff6
 800b0ec:	fff6fff6 	.word	0xfff6fff6
 800b0f0:	003600a8 	.word	0x003600a8
 800b0f4:	fff6009a 	.word	0xfff6009a
 800b0f8:	00b9fff6 	.word	0x00b9fff6
 800b0fc:	0036fff6 	.word	0x0036fff6
 800b100:	fff6fff6 	.word	0xfff6fff6
 800b104:	009e      	.short	0x009e
 800b106:	0026      	movs	r6, r4
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	3642      	adds	r6, #66	; 0x42
 800b10c:	1d11      	adds	r1, r2, #4
 800b10e:	6019      	str	r1, [r3, #0]
 800b110:	6813      	ldr	r3, [r2, #0]
 800b112:	7033      	strb	r3, [r6, #0]
 800b114:	2301      	movs	r3, #1
 800b116:	e0a7      	b.n	800b268 <_printf_i+0x1cc>
 800b118:	6808      	ldr	r0, [r1, #0]
 800b11a:	6819      	ldr	r1, [r3, #0]
 800b11c:	1d0a      	adds	r2, r1, #4
 800b11e:	0605      	lsls	r5, r0, #24
 800b120:	d50b      	bpl.n	800b13a <_printf_i+0x9e>
 800b122:	680d      	ldr	r5, [r1, #0]
 800b124:	601a      	str	r2, [r3, #0]
 800b126:	2d00      	cmp	r5, #0
 800b128:	da03      	bge.n	800b132 <_printf_i+0x96>
 800b12a:	232d      	movs	r3, #45	; 0x2d
 800b12c:	9a04      	ldr	r2, [sp, #16]
 800b12e:	426d      	negs	r5, r5
 800b130:	7013      	strb	r3, [r2, #0]
 800b132:	4b61      	ldr	r3, [pc, #388]	; (800b2b8 <_printf_i+0x21c>)
 800b134:	270a      	movs	r7, #10
 800b136:	9303      	str	r3, [sp, #12]
 800b138:	e01b      	b.n	800b172 <_printf_i+0xd6>
 800b13a:	680d      	ldr	r5, [r1, #0]
 800b13c:	601a      	str	r2, [r3, #0]
 800b13e:	0641      	lsls	r1, r0, #25
 800b140:	d5f1      	bpl.n	800b126 <_printf_i+0x8a>
 800b142:	b22d      	sxth	r5, r5
 800b144:	e7ef      	b.n	800b126 <_printf_i+0x8a>
 800b146:	680d      	ldr	r5, [r1, #0]
 800b148:	6819      	ldr	r1, [r3, #0]
 800b14a:	1d08      	adds	r0, r1, #4
 800b14c:	6018      	str	r0, [r3, #0]
 800b14e:	062e      	lsls	r6, r5, #24
 800b150:	d501      	bpl.n	800b156 <_printf_i+0xba>
 800b152:	680d      	ldr	r5, [r1, #0]
 800b154:	e003      	b.n	800b15e <_printf_i+0xc2>
 800b156:	066d      	lsls	r5, r5, #25
 800b158:	d5fb      	bpl.n	800b152 <_printf_i+0xb6>
 800b15a:	680d      	ldr	r5, [r1, #0]
 800b15c:	b2ad      	uxth	r5, r5
 800b15e:	4b56      	ldr	r3, [pc, #344]	; (800b2b8 <_printf_i+0x21c>)
 800b160:	2708      	movs	r7, #8
 800b162:	9303      	str	r3, [sp, #12]
 800b164:	2a6f      	cmp	r2, #111	; 0x6f
 800b166:	d000      	beq.n	800b16a <_printf_i+0xce>
 800b168:	3702      	adds	r7, #2
 800b16a:	0023      	movs	r3, r4
 800b16c:	2200      	movs	r2, #0
 800b16e:	3343      	adds	r3, #67	; 0x43
 800b170:	701a      	strb	r2, [r3, #0]
 800b172:	6863      	ldr	r3, [r4, #4]
 800b174:	60a3      	str	r3, [r4, #8]
 800b176:	2b00      	cmp	r3, #0
 800b178:	db03      	blt.n	800b182 <_printf_i+0xe6>
 800b17a:	2204      	movs	r2, #4
 800b17c:	6821      	ldr	r1, [r4, #0]
 800b17e:	4391      	bics	r1, r2
 800b180:	6021      	str	r1, [r4, #0]
 800b182:	2d00      	cmp	r5, #0
 800b184:	d102      	bne.n	800b18c <_printf_i+0xf0>
 800b186:	9e04      	ldr	r6, [sp, #16]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d00c      	beq.n	800b1a6 <_printf_i+0x10a>
 800b18c:	9e04      	ldr	r6, [sp, #16]
 800b18e:	0028      	movs	r0, r5
 800b190:	0039      	movs	r1, r7
 800b192:	f7f5 f85b 	bl	800024c <__aeabi_uidivmod>
 800b196:	9b03      	ldr	r3, [sp, #12]
 800b198:	3e01      	subs	r6, #1
 800b19a:	5c5b      	ldrb	r3, [r3, r1]
 800b19c:	7033      	strb	r3, [r6, #0]
 800b19e:	002b      	movs	r3, r5
 800b1a0:	0005      	movs	r5, r0
 800b1a2:	429f      	cmp	r7, r3
 800b1a4:	d9f3      	bls.n	800b18e <_printf_i+0xf2>
 800b1a6:	2f08      	cmp	r7, #8
 800b1a8:	d109      	bne.n	800b1be <_printf_i+0x122>
 800b1aa:	6823      	ldr	r3, [r4, #0]
 800b1ac:	07db      	lsls	r3, r3, #31
 800b1ae:	d506      	bpl.n	800b1be <_printf_i+0x122>
 800b1b0:	6863      	ldr	r3, [r4, #4]
 800b1b2:	6922      	ldr	r2, [r4, #16]
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	dc02      	bgt.n	800b1be <_printf_i+0x122>
 800b1b8:	2330      	movs	r3, #48	; 0x30
 800b1ba:	3e01      	subs	r6, #1
 800b1bc:	7033      	strb	r3, [r6, #0]
 800b1be:	9b04      	ldr	r3, [sp, #16]
 800b1c0:	1b9b      	subs	r3, r3, r6
 800b1c2:	6123      	str	r3, [r4, #16]
 800b1c4:	9b07      	ldr	r3, [sp, #28]
 800b1c6:	0021      	movs	r1, r4
 800b1c8:	9300      	str	r3, [sp, #0]
 800b1ca:	9805      	ldr	r0, [sp, #20]
 800b1cc:	9b06      	ldr	r3, [sp, #24]
 800b1ce:	aa09      	add	r2, sp, #36	; 0x24
 800b1d0:	f7ff fef4 	bl	800afbc <_printf_common>
 800b1d4:	1c43      	adds	r3, r0, #1
 800b1d6:	d14c      	bne.n	800b272 <_printf_i+0x1d6>
 800b1d8:	2001      	movs	r0, #1
 800b1da:	4240      	negs	r0, r0
 800b1dc:	b00b      	add	sp, #44	; 0x2c
 800b1de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1e0:	3145      	adds	r1, #69	; 0x45
 800b1e2:	700a      	strb	r2, [r1, #0]
 800b1e4:	4a34      	ldr	r2, [pc, #208]	; (800b2b8 <_printf_i+0x21c>)
 800b1e6:	9203      	str	r2, [sp, #12]
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	6821      	ldr	r1, [r4, #0]
 800b1ec:	ca20      	ldmia	r2!, {r5}
 800b1ee:	601a      	str	r2, [r3, #0]
 800b1f0:	0608      	lsls	r0, r1, #24
 800b1f2:	d516      	bpl.n	800b222 <_printf_i+0x186>
 800b1f4:	07cb      	lsls	r3, r1, #31
 800b1f6:	d502      	bpl.n	800b1fe <_printf_i+0x162>
 800b1f8:	2320      	movs	r3, #32
 800b1fa:	4319      	orrs	r1, r3
 800b1fc:	6021      	str	r1, [r4, #0]
 800b1fe:	2710      	movs	r7, #16
 800b200:	2d00      	cmp	r5, #0
 800b202:	d1b2      	bne.n	800b16a <_printf_i+0xce>
 800b204:	2320      	movs	r3, #32
 800b206:	6822      	ldr	r2, [r4, #0]
 800b208:	439a      	bics	r2, r3
 800b20a:	6022      	str	r2, [r4, #0]
 800b20c:	e7ad      	b.n	800b16a <_printf_i+0xce>
 800b20e:	2220      	movs	r2, #32
 800b210:	6809      	ldr	r1, [r1, #0]
 800b212:	430a      	orrs	r2, r1
 800b214:	6022      	str	r2, [r4, #0]
 800b216:	0022      	movs	r2, r4
 800b218:	2178      	movs	r1, #120	; 0x78
 800b21a:	3245      	adds	r2, #69	; 0x45
 800b21c:	7011      	strb	r1, [r2, #0]
 800b21e:	4a27      	ldr	r2, [pc, #156]	; (800b2bc <_printf_i+0x220>)
 800b220:	e7e1      	b.n	800b1e6 <_printf_i+0x14a>
 800b222:	0648      	lsls	r0, r1, #25
 800b224:	d5e6      	bpl.n	800b1f4 <_printf_i+0x158>
 800b226:	b2ad      	uxth	r5, r5
 800b228:	e7e4      	b.n	800b1f4 <_printf_i+0x158>
 800b22a:	681a      	ldr	r2, [r3, #0]
 800b22c:	680d      	ldr	r5, [r1, #0]
 800b22e:	1d10      	adds	r0, r2, #4
 800b230:	6949      	ldr	r1, [r1, #20]
 800b232:	6018      	str	r0, [r3, #0]
 800b234:	6813      	ldr	r3, [r2, #0]
 800b236:	062e      	lsls	r6, r5, #24
 800b238:	d501      	bpl.n	800b23e <_printf_i+0x1a2>
 800b23a:	6019      	str	r1, [r3, #0]
 800b23c:	e002      	b.n	800b244 <_printf_i+0x1a8>
 800b23e:	066d      	lsls	r5, r5, #25
 800b240:	d5fb      	bpl.n	800b23a <_printf_i+0x19e>
 800b242:	8019      	strh	r1, [r3, #0]
 800b244:	2300      	movs	r3, #0
 800b246:	9e04      	ldr	r6, [sp, #16]
 800b248:	6123      	str	r3, [r4, #16]
 800b24a:	e7bb      	b.n	800b1c4 <_printf_i+0x128>
 800b24c:	681a      	ldr	r2, [r3, #0]
 800b24e:	1d11      	adds	r1, r2, #4
 800b250:	6019      	str	r1, [r3, #0]
 800b252:	6816      	ldr	r6, [r2, #0]
 800b254:	2100      	movs	r1, #0
 800b256:	0030      	movs	r0, r6
 800b258:	6862      	ldr	r2, [r4, #4]
 800b25a:	f002 fb99 	bl	800d990 <memchr>
 800b25e:	2800      	cmp	r0, #0
 800b260:	d001      	beq.n	800b266 <_printf_i+0x1ca>
 800b262:	1b80      	subs	r0, r0, r6
 800b264:	6060      	str	r0, [r4, #4]
 800b266:	6863      	ldr	r3, [r4, #4]
 800b268:	6123      	str	r3, [r4, #16]
 800b26a:	2300      	movs	r3, #0
 800b26c:	9a04      	ldr	r2, [sp, #16]
 800b26e:	7013      	strb	r3, [r2, #0]
 800b270:	e7a8      	b.n	800b1c4 <_printf_i+0x128>
 800b272:	6923      	ldr	r3, [r4, #16]
 800b274:	0032      	movs	r2, r6
 800b276:	9906      	ldr	r1, [sp, #24]
 800b278:	9805      	ldr	r0, [sp, #20]
 800b27a:	9d07      	ldr	r5, [sp, #28]
 800b27c:	47a8      	blx	r5
 800b27e:	1c43      	adds	r3, r0, #1
 800b280:	d0aa      	beq.n	800b1d8 <_printf_i+0x13c>
 800b282:	6823      	ldr	r3, [r4, #0]
 800b284:	079b      	lsls	r3, r3, #30
 800b286:	d415      	bmi.n	800b2b4 <_printf_i+0x218>
 800b288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b28a:	68e0      	ldr	r0, [r4, #12]
 800b28c:	4298      	cmp	r0, r3
 800b28e:	daa5      	bge.n	800b1dc <_printf_i+0x140>
 800b290:	0018      	movs	r0, r3
 800b292:	e7a3      	b.n	800b1dc <_printf_i+0x140>
 800b294:	0022      	movs	r2, r4
 800b296:	2301      	movs	r3, #1
 800b298:	9906      	ldr	r1, [sp, #24]
 800b29a:	9805      	ldr	r0, [sp, #20]
 800b29c:	9e07      	ldr	r6, [sp, #28]
 800b29e:	3219      	adds	r2, #25
 800b2a0:	47b0      	blx	r6
 800b2a2:	1c43      	adds	r3, r0, #1
 800b2a4:	d098      	beq.n	800b1d8 <_printf_i+0x13c>
 800b2a6:	3501      	adds	r5, #1
 800b2a8:	68e3      	ldr	r3, [r4, #12]
 800b2aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2ac:	1a9b      	subs	r3, r3, r2
 800b2ae:	42ab      	cmp	r3, r5
 800b2b0:	dcf0      	bgt.n	800b294 <_printf_i+0x1f8>
 800b2b2:	e7e9      	b.n	800b288 <_printf_i+0x1ec>
 800b2b4:	2500      	movs	r5, #0
 800b2b6:	e7f7      	b.n	800b2a8 <_printf_i+0x20c>
 800b2b8:	0800f6d2 	.word	0x0800f6d2
 800b2bc:	0800f6e3 	.word	0x0800f6e3

0800b2c0 <cleanup_glue>:
 800b2c0:	b570      	push	{r4, r5, r6, lr}
 800b2c2:	000d      	movs	r5, r1
 800b2c4:	6809      	ldr	r1, [r1, #0]
 800b2c6:	0004      	movs	r4, r0
 800b2c8:	2900      	cmp	r1, #0
 800b2ca:	d001      	beq.n	800b2d0 <cleanup_glue+0x10>
 800b2cc:	f7ff fff8 	bl	800b2c0 <cleanup_glue>
 800b2d0:	0029      	movs	r1, r5
 800b2d2:	0020      	movs	r0, r4
 800b2d4:	f003 f86e 	bl	800e3b4 <_free_r>
 800b2d8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b2dc <_reclaim_reent>:
 800b2dc:	4b31      	ldr	r3, [pc, #196]	; (800b3a4 <_reclaim_reent+0xc8>)
 800b2de:	b570      	push	{r4, r5, r6, lr}
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	0004      	movs	r4, r0
 800b2e4:	4283      	cmp	r3, r0
 800b2e6:	d049      	beq.n	800b37c <_reclaim_reent+0xa0>
 800b2e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d00a      	beq.n	800b304 <_reclaim_reent+0x28>
 800b2ee:	2500      	movs	r5, #0
 800b2f0:	68db      	ldr	r3, [r3, #12]
 800b2f2:	42ab      	cmp	r3, r5
 800b2f4:	d147      	bne.n	800b386 <_reclaim_reent+0xaa>
 800b2f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2f8:	6819      	ldr	r1, [r3, #0]
 800b2fa:	2900      	cmp	r1, #0
 800b2fc:	d002      	beq.n	800b304 <_reclaim_reent+0x28>
 800b2fe:	0020      	movs	r0, r4
 800b300:	f003 f858 	bl	800e3b4 <_free_r>
 800b304:	6961      	ldr	r1, [r4, #20]
 800b306:	2900      	cmp	r1, #0
 800b308:	d002      	beq.n	800b310 <_reclaim_reent+0x34>
 800b30a:	0020      	movs	r0, r4
 800b30c:	f003 f852 	bl	800e3b4 <_free_r>
 800b310:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b312:	2900      	cmp	r1, #0
 800b314:	d002      	beq.n	800b31c <_reclaim_reent+0x40>
 800b316:	0020      	movs	r0, r4
 800b318:	f003 f84c 	bl	800e3b4 <_free_r>
 800b31c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b31e:	2900      	cmp	r1, #0
 800b320:	d002      	beq.n	800b328 <_reclaim_reent+0x4c>
 800b322:	0020      	movs	r0, r4
 800b324:	f003 f846 	bl	800e3b4 <_free_r>
 800b328:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b32a:	2900      	cmp	r1, #0
 800b32c:	d002      	beq.n	800b334 <_reclaim_reent+0x58>
 800b32e:	0020      	movs	r0, r4
 800b330:	f003 f840 	bl	800e3b4 <_free_r>
 800b334:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b336:	2900      	cmp	r1, #0
 800b338:	d002      	beq.n	800b340 <_reclaim_reent+0x64>
 800b33a:	0020      	movs	r0, r4
 800b33c:	f003 f83a 	bl	800e3b4 <_free_r>
 800b340:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b342:	2900      	cmp	r1, #0
 800b344:	d002      	beq.n	800b34c <_reclaim_reent+0x70>
 800b346:	0020      	movs	r0, r4
 800b348:	f003 f834 	bl	800e3b4 <_free_r>
 800b34c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b34e:	2900      	cmp	r1, #0
 800b350:	d002      	beq.n	800b358 <_reclaim_reent+0x7c>
 800b352:	0020      	movs	r0, r4
 800b354:	f003 f82e 	bl	800e3b4 <_free_r>
 800b358:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b35a:	2900      	cmp	r1, #0
 800b35c:	d002      	beq.n	800b364 <_reclaim_reent+0x88>
 800b35e:	0020      	movs	r0, r4
 800b360:	f003 f828 	bl	800e3b4 <_free_r>
 800b364:	69a3      	ldr	r3, [r4, #24]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d008      	beq.n	800b37c <_reclaim_reent+0xa0>
 800b36a:	0020      	movs	r0, r4
 800b36c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b36e:	4798      	blx	r3
 800b370:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b372:	2900      	cmp	r1, #0
 800b374:	d002      	beq.n	800b37c <_reclaim_reent+0xa0>
 800b376:	0020      	movs	r0, r4
 800b378:	f7ff ffa2 	bl	800b2c0 <cleanup_glue>
 800b37c:	bd70      	pop	{r4, r5, r6, pc}
 800b37e:	5949      	ldr	r1, [r1, r5]
 800b380:	2900      	cmp	r1, #0
 800b382:	d108      	bne.n	800b396 <_reclaim_reent+0xba>
 800b384:	3504      	adds	r5, #4
 800b386:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b388:	68d9      	ldr	r1, [r3, #12]
 800b38a:	2d80      	cmp	r5, #128	; 0x80
 800b38c:	d1f7      	bne.n	800b37e <_reclaim_reent+0xa2>
 800b38e:	0020      	movs	r0, r4
 800b390:	f003 f810 	bl	800e3b4 <_free_r>
 800b394:	e7af      	b.n	800b2f6 <_reclaim_reent+0x1a>
 800b396:	680e      	ldr	r6, [r1, #0]
 800b398:	0020      	movs	r0, r4
 800b39a:	f003 f80b 	bl	800e3b4 <_free_r>
 800b39e:	0031      	movs	r1, r6
 800b3a0:	e7ee      	b.n	800b380 <_reclaim_reent+0xa4>
 800b3a2:	46c0      	nop			; (mov r8, r8)
 800b3a4:	2000005c 	.word	0x2000005c

0800b3a8 <_sbrk_r>:
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	b570      	push	{r4, r5, r6, lr}
 800b3ac:	4d06      	ldr	r5, [pc, #24]	; (800b3c8 <_sbrk_r+0x20>)
 800b3ae:	0004      	movs	r4, r0
 800b3b0:	0008      	movs	r0, r1
 800b3b2:	602b      	str	r3, [r5, #0]
 800b3b4:	f7f9 f910 	bl	80045d8 <_sbrk>
 800b3b8:	1c43      	adds	r3, r0, #1
 800b3ba:	d103      	bne.n	800b3c4 <_sbrk_r+0x1c>
 800b3bc:	682b      	ldr	r3, [r5, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d000      	beq.n	800b3c4 <_sbrk_r+0x1c>
 800b3c2:	6023      	str	r3, [r4, #0]
 800b3c4:	bd70      	pop	{r4, r5, r6, pc}
 800b3c6:	46c0      	nop			; (mov r8, r8)
 800b3c8:	20001748 	.word	0x20001748

0800b3cc <siprintf>:
 800b3cc:	b40e      	push	{r1, r2, r3}
 800b3ce:	b500      	push	{lr}
 800b3d0:	490b      	ldr	r1, [pc, #44]	; (800b400 <siprintf+0x34>)
 800b3d2:	b09c      	sub	sp, #112	; 0x70
 800b3d4:	ab1d      	add	r3, sp, #116	; 0x74
 800b3d6:	9002      	str	r0, [sp, #8]
 800b3d8:	9006      	str	r0, [sp, #24]
 800b3da:	9107      	str	r1, [sp, #28]
 800b3dc:	9104      	str	r1, [sp, #16]
 800b3de:	4809      	ldr	r0, [pc, #36]	; (800b404 <siprintf+0x38>)
 800b3e0:	4909      	ldr	r1, [pc, #36]	; (800b408 <siprintf+0x3c>)
 800b3e2:	cb04      	ldmia	r3!, {r2}
 800b3e4:	9105      	str	r1, [sp, #20]
 800b3e6:	6800      	ldr	r0, [r0, #0]
 800b3e8:	a902      	add	r1, sp, #8
 800b3ea:	9301      	str	r3, [sp, #4]
 800b3ec:	f003 f88e 	bl	800e50c <_svfiprintf_r>
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	9a02      	ldr	r2, [sp, #8]
 800b3f4:	7013      	strb	r3, [r2, #0]
 800b3f6:	b01c      	add	sp, #112	; 0x70
 800b3f8:	bc08      	pop	{r3}
 800b3fa:	b003      	add	sp, #12
 800b3fc:	4718      	bx	r3
 800b3fe:	46c0      	nop			; (mov r8, r8)
 800b400:	7fffffff 	.word	0x7fffffff
 800b404:	2000005c 	.word	0x2000005c
 800b408:	ffff0208 	.word	0xffff0208

0800b40c <__sread>:
 800b40c:	b570      	push	{r4, r5, r6, lr}
 800b40e:	000c      	movs	r4, r1
 800b410:	250e      	movs	r5, #14
 800b412:	5f49      	ldrsh	r1, [r1, r5]
 800b414:	f003 f97a 	bl	800e70c <_read_r>
 800b418:	2800      	cmp	r0, #0
 800b41a:	db03      	blt.n	800b424 <__sread+0x18>
 800b41c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b41e:	181b      	adds	r3, r3, r0
 800b420:	6563      	str	r3, [r4, #84]	; 0x54
 800b422:	bd70      	pop	{r4, r5, r6, pc}
 800b424:	89a3      	ldrh	r3, [r4, #12]
 800b426:	4a02      	ldr	r2, [pc, #8]	; (800b430 <__sread+0x24>)
 800b428:	4013      	ands	r3, r2
 800b42a:	81a3      	strh	r3, [r4, #12]
 800b42c:	e7f9      	b.n	800b422 <__sread+0x16>
 800b42e:	46c0      	nop			; (mov r8, r8)
 800b430:	ffffefff 	.word	0xffffefff

0800b434 <__swrite>:
 800b434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b436:	001f      	movs	r7, r3
 800b438:	898b      	ldrh	r3, [r1, #12]
 800b43a:	0005      	movs	r5, r0
 800b43c:	000c      	movs	r4, r1
 800b43e:	0016      	movs	r6, r2
 800b440:	05db      	lsls	r3, r3, #23
 800b442:	d505      	bpl.n	800b450 <__swrite+0x1c>
 800b444:	230e      	movs	r3, #14
 800b446:	5ec9      	ldrsh	r1, [r1, r3]
 800b448:	2200      	movs	r2, #0
 800b44a:	2302      	movs	r3, #2
 800b44c:	f002 fa70 	bl	800d930 <_lseek_r>
 800b450:	89a3      	ldrh	r3, [r4, #12]
 800b452:	4a05      	ldr	r2, [pc, #20]	; (800b468 <__swrite+0x34>)
 800b454:	0028      	movs	r0, r5
 800b456:	4013      	ands	r3, r2
 800b458:	81a3      	strh	r3, [r4, #12]
 800b45a:	0032      	movs	r2, r6
 800b45c:	230e      	movs	r3, #14
 800b45e:	5ee1      	ldrsh	r1, [r4, r3]
 800b460:	003b      	movs	r3, r7
 800b462:	f000 ff55 	bl	800c310 <_write_r>
 800b466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b468:	ffffefff 	.word	0xffffefff

0800b46c <__sseek>:
 800b46c:	b570      	push	{r4, r5, r6, lr}
 800b46e:	000c      	movs	r4, r1
 800b470:	250e      	movs	r5, #14
 800b472:	5f49      	ldrsh	r1, [r1, r5]
 800b474:	f002 fa5c 	bl	800d930 <_lseek_r>
 800b478:	89a3      	ldrh	r3, [r4, #12]
 800b47a:	1c42      	adds	r2, r0, #1
 800b47c:	d103      	bne.n	800b486 <__sseek+0x1a>
 800b47e:	4a05      	ldr	r2, [pc, #20]	; (800b494 <__sseek+0x28>)
 800b480:	4013      	ands	r3, r2
 800b482:	81a3      	strh	r3, [r4, #12]
 800b484:	bd70      	pop	{r4, r5, r6, pc}
 800b486:	2280      	movs	r2, #128	; 0x80
 800b488:	0152      	lsls	r2, r2, #5
 800b48a:	4313      	orrs	r3, r2
 800b48c:	81a3      	strh	r3, [r4, #12]
 800b48e:	6560      	str	r0, [r4, #84]	; 0x54
 800b490:	e7f8      	b.n	800b484 <__sseek+0x18>
 800b492:	46c0      	nop			; (mov r8, r8)
 800b494:	ffffefff 	.word	0xffffefff

0800b498 <__sclose>:
 800b498:	b510      	push	{r4, lr}
 800b49a:	230e      	movs	r3, #14
 800b49c:	5ec9      	ldrsh	r1, [r1, r3]
 800b49e:	f000 ff4b 	bl	800c338 <_close_r>
 800b4a2:	bd10      	pop	{r4, pc}

0800b4a4 <strcpy>:
 800b4a4:	0003      	movs	r3, r0
 800b4a6:	780a      	ldrb	r2, [r1, #0]
 800b4a8:	3101      	adds	r1, #1
 800b4aa:	701a      	strb	r2, [r3, #0]
 800b4ac:	3301      	adds	r3, #1
 800b4ae:	2a00      	cmp	r2, #0
 800b4b0:	d1f9      	bne.n	800b4a6 <strcpy+0x2>
 800b4b2:	4770      	bx	lr

0800b4b4 <sulp>:
 800b4b4:	b570      	push	{r4, r5, r6, lr}
 800b4b6:	0016      	movs	r6, r2
 800b4b8:	000d      	movs	r5, r1
 800b4ba:	f002 fe09 	bl	800e0d0 <__ulp>
 800b4be:	2e00      	cmp	r6, #0
 800b4c0:	d00d      	beq.n	800b4de <sulp+0x2a>
 800b4c2:	236b      	movs	r3, #107	; 0x6b
 800b4c4:	006a      	lsls	r2, r5, #1
 800b4c6:	0d52      	lsrs	r2, r2, #21
 800b4c8:	1a9b      	subs	r3, r3, r2
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	dd07      	ble.n	800b4de <sulp+0x2a>
 800b4ce:	2400      	movs	r4, #0
 800b4d0:	4a03      	ldr	r2, [pc, #12]	; (800b4e0 <sulp+0x2c>)
 800b4d2:	051b      	lsls	r3, r3, #20
 800b4d4:	189d      	adds	r5, r3, r2
 800b4d6:	002b      	movs	r3, r5
 800b4d8:	0022      	movs	r2, r4
 800b4da:	f7f6 fe97 	bl	800220c <__aeabi_dmul>
 800b4de:	bd70      	pop	{r4, r5, r6, pc}
 800b4e0:	3ff00000 	.word	0x3ff00000

0800b4e4 <_strtod_l>:
 800b4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4e6:	001d      	movs	r5, r3
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	b0a5      	sub	sp, #148	; 0x94
 800b4ec:	9320      	str	r3, [sp, #128]	; 0x80
 800b4ee:	4bac      	ldr	r3, [pc, #688]	; (800b7a0 <_strtod_l+0x2bc>)
 800b4f0:	9005      	str	r0, [sp, #20]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	9108      	str	r1, [sp, #32]
 800b4f6:	0018      	movs	r0, r3
 800b4f8:	9307      	str	r3, [sp, #28]
 800b4fa:	921b      	str	r2, [sp, #108]	; 0x6c
 800b4fc:	f7f4 fe04 	bl	8000108 <strlen>
 800b500:	2600      	movs	r6, #0
 800b502:	0004      	movs	r4, r0
 800b504:	2700      	movs	r7, #0
 800b506:	9b08      	ldr	r3, [sp, #32]
 800b508:	931f      	str	r3, [sp, #124]	; 0x7c
 800b50a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b50c:	7813      	ldrb	r3, [r2, #0]
 800b50e:	2b2b      	cmp	r3, #43	; 0x2b
 800b510:	d058      	beq.n	800b5c4 <_strtod_l+0xe0>
 800b512:	d844      	bhi.n	800b59e <_strtod_l+0xba>
 800b514:	2b0d      	cmp	r3, #13
 800b516:	d83d      	bhi.n	800b594 <_strtod_l+0xb0>
 800b518:	2b08      	cmp	r3, #8
 800b51a:	d83d      	bhi.n	800b598 <_strtod_l+0xb4>
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d047      	beq.n	800b5b0 <_strtod_l+0xcc>
 800b520:	2300      	movs	r3, #0
 800b522:	930e      	str	r3, [sp, #56]	; 0x38
 800b524:	2200      	movs	r2, #0
 800b526:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b528:	920a      	str	r2, [sp, #40]	; 0x28
 800b52a:	9306      	str	r3, [sp, #24]
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	2b30      	cmp	r3, #48	; 0x30
 800b530:	d000      	beq.n	800b534 <_strtod_l+0x50>
 800b532:	e07f      	b.n	800b634 <_strtod_l+0x150>
 800b534:	9b06      	ldr	r3, [sp, #24]
 800b536:	3220      	adds	r2, #32
 800b538:	785b      	ldrb	r3, [r3, #1]
 800b53a:	4393      	bics	r3, r2
 800b53c:	2b58      	cmp	r3, #88	; 0x58
 800b53e:	d000      	beq.n	800b542 <_strtod_l+0x5e>
 800b540:	e06e      	b.n	800b620 <_strtod_l+0x13c>
 800b542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b544:	9502      	str	r5, [sp, #8]
 800b546:	9301      	str	r3, [sp, #4]
 800b548:	ab20      	add	r3, sp, #128	; 0x80
 800b54a:	9300      	str	r3, [sp, #0]
 800b54c:	4a95      	ldr	r2, [pc, #596]	; (800b7a4 <_strtod_l+0x2c0>)
 800b54e:	ab21      	add	r3, sp, #132	; 0x84
 800b550:	9805      	ldr	r0, [sp, #20]
 800b552:	a91f      	add	r1, sp, #124	; 0x7c
 800b554:	f001 fede 	bl	800d314 <__gethex>
 800b558:	2307      	movs	r3, #7
 800b55a:	0005      	movs	r5, r0
 800b55c:	0004      	movs	r4, r0
 800b55e:	401d      	ands	r5, r3
 800b560:	4218      	tst	r0, r3
 800b562:	d006      	beq.n	800b572 <_strtod_l+0x8e>
 800b564:	2d06      	cmp	r5, #6
 800b566:	d12f      	bne.n	800b5c8 <_strtod_l+0xe4>
 800b568:	9b06      	ldr	r3, [sp, #24]
 800b56a:	3301      	adds	r3, #1
 800b56c:	931f      	str	r3, [sp, #124]	; 0x7c
 800b56e:	2300      	movs	r3, #0
 800b570:	930e      	str	r3, [sp, #56]	; 0x38
 800b572:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b574:	2b00      	cmp	r3, #0
 800b576:	d002      	beq.n	800b57e <_strtod_l+0x9a>
 800b578:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b57a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b57c:	601a      	str	r2, [r3, #0]
 800b57e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b580:	2b00      	cmp	r3, #0
 800b582:	d01c      	beq.n	800b5be <_strtod_l+0xda>
 800b584:	2380      	movs	r3, #128	; 0x80
 800b586:	0032      	movs	r2, r6
 800b588:	061b      	lsls	r3, r3, #24
 800b58a:	18fb      	adds	r3, r7, r3
 800b58c:	0010      	movs	r0, r2
 800b58e:	0019      	movs	r1, r3
 800b590:	b025      	add	sp, #148	; 0x94
 800b592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b594:	2b20      	cmp	r3, #32
 800b596:	d1c3      	bne.n	800b520 <_strtod_l+0x3c>
 800b598:	3201      	adds	r2, #1
 800b59a:	921f      	str	r2, [sp, #124]	; 0x7c
 800b59c:	e7b5      	b.n	800b50a <_strtod_l+0x26>
 800b59e:	2b2d      	cmp	r3, #45	; 0x2d
 800b5a0:	d1be      	bne.n	800b520 <_strtod_l+0x3c>
 800b5a2:	3b2c      	subs	r3, #44	; 0x2c
 800b5a4:	930e      	str	r3, [sp, #56]	; 0x38
 800b5a6:	1c53      	adds	r3, r2, #1
 800b5a8:	931f      	str	r3, [sp, #124]	; 0x7c
 800b5aa:	7853      	ldrb	r3, [r2, #1]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d1b9      	bne.n	800b524 <_strtod_l+0x40>
 800b5b0:	9b08      	ldr	r3, [sp, #32]
 800b5b2:	931f      	str	r3, [sp, #124]	; 0x7c
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	930e      	str	r3, [sp, #56]	; 0x38
 800b5b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d1dc      	bne.n	800b578 <_strtod_l+0x94>
 800b5be:	0032      	movs	r2, r6
 800b5c0:	003b      	movs	r3, r7
 800b5c2:	e7e3      	b.n	800b58c <_strtod_l+0xa8>
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	e7ed      	b.n	800b5a4 <_strtod_l+0xc0>
 800b5c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b5ca:	2a00      	cmp	r2, #0
 800b5cc:	d007      	beq.n	800b5de <_strtod_l+0xfa>
 800b5ce:	2135      	movs	r1, #53	; 0x35
 800b5d0:	a822      	add	r0, sp, #136	; 0x88
 800b5d2:	f002 fe7e 	bl	800e2d2 <__copybits>
 800b5d6:	9920      	ldr	r1, [sp, #128]	; 0x80
 800b5d8:	9805      	ldr	r0, [sp, #20]
 800b5da:	f002 fa39 	bl	800da50 <_Bfree>
 800b5de:	1e68      	subs	r0, r5, #1
 800b5e0:	2804      	cmp	r0, #4
 800b5e2:	d806      	bhi.n	800b5f2 <_strtod_l+0x10e>
 800b5e4:	f7f4 fd98 	bl	8000118 <__gnu_thumb1_case_uqi>
 800b5e8:	1816030b 	.word	0x1816030b
 800b5ec:	0b          	.byte	0x0b
 800b5ed:	00          	.byte	0x00
 800b5ee:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800b5f0:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800b5f2:	0723      	lsls	r3, r4, #28
 800b5f4:	d5bd      	bpl.n	800b572 <_strtod_l+0x8e>
 800b5f6:	2380      	movs	r3, #128	; 0x80
 800b5f8:	061b      	lsls	r3, r3, #24
 800b5fa:	431f      	orrs	r7, r3
 800b5fc:	e7b9      	b.n	800b572 <_strtod_l+0x8e>
 800b5fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b600:	4a69      	ldr	r2, [pc, #420]	; (800b7a8 <_strtod_l+0x2c4>)
 800b602:	496a      	ldr	r1, [pc, #424]	; (800b7ac <_strtod_l+0x2c8>)
 800b604:	401a      	ands	r2, r3
 800b606:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b608:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800b60a:	185b      	adds	r3, r3, r1
 800b60c:	051b      	lsls	r3, r3, #20
 800b60e:	431a      	orrs	r2, r3
 800b610:	0017      	movs	r7, r2
 800b612:	e7ee      	b.n	800b5f2 <_strtod_l+0x10e>
 800b614:	4f66      	ldr	r7, [pc, #408]	; (800b7b0 <_strtod_l+0x2cc>)
 800b616:	e7ec      	b.n	800b5f2 <_strtod_l+0x10e>
 800b618:	2601      	movs	r6, #1
 800b61a:	4f66      	ldr	r7, [pc, #408]	; (800b7b4 <_strtod_l+0x2d0>)
 800b61c:	4276      	negs	r6, r6
 800b61e:	e7e8      	b.n	800b5f2 <_strtod_l+0x10e>
 800b620:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b622:	1c5a      	adds	r2, r3, #1
 800b624:	921f      	str	r2, [sp, #124]	; 0x7c
 800b626:	785b      	ldrb	r3, [r3, #1]
 800b628:	2b30      	cmp	r3, #48	; 0x30
 800b62a:	d0f9      	beq.n	800b620 <_strtod_l+0x13c>
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d0a0      	beq.n	800b572 <_strtod_l+0x8e>
 800b630:	2301      	movs	r3, #1
 800b632:	930a      	str	r3, [sp, #40]	; 0x28
 800b634:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b636:	220a      	movs	r2, #10
 800b638:	9310      	str	r3, [sp, #64]	; 0x40
 800b63a:	2300      	movs	r3, #0
 800b63c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b63e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b640:	9309      	str	r3, [sp, #36]	; 0x24
 800b642:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800b644:	7805      	ldrb	r5, [r0, #0]
 800b646:	002b      	movs	r3, r5
 800b648:	3b30      	subs	r3, #48	; 0x30
 800b64a:	b2d9      	uxtb	r1, r3
 800b64c:	2909      	cmp	r1, #9
 800b64e:	d927      	bls.n	800b6a0 <_strtod_l+0x1bc>
 800b650:	0022      	movs	r2, r4
 800b652:	9907      	ldr	r1, [sp, #28]
 800b654:	f003 f874 	bl	800e740 <strncmp>
 800b658:	2800      	cmp	r0, #0
 800b65a:	d033      	beq.n	800b6c4 <_strtod_l+0x1e0>
 800b65c:	2000      	movs	r0, #0
 800b65e:	002b      	movs	r3, r5
 800b660:	4684      	mov	ip, r0
 800b662:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b664:	900c      	str	r0, [sp, #48]	; 0x30
 800b666:	9206      	str	r2, [sp, #24]
 800b668:	2220      	movs	r2, #32
 800b66a:	0019      	movs	r1, r3
 800b66c:	4391      	bics	r1, r2
 800b66e:	000a      	movs	r2, r1
 800b670:	2100      	movs	r1, #0
 800b672:	9107      	str	r1, [sp, #28]
 800b674:	2a45      	cmp	r2, #69	; 0x45
 800b676:	d000      	beq.n	800b67a <_strtod_l+0x196>
 800b678:	e0c5      	b.n	800b806 <_strtod_l+0x322>
 800b67a:	9b06      	ldr	r3, [sp, #24]
 800b67c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b67e:	4303      	orrs	r3, r0
 800b680:	4313      	orrs	r3, r2
 800b682:	428b      	cmp	r3, r1
 800b684:	d094      	beq.n	800b5b0 <_strtod_l+0xcc>
 800b686:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b688:	9308      	str	r3, [sp, #32]
 800b68a:	3301      	adds	r3, #1
 800b68c:	931f      	str	r3, [sp, #124]	; 0x7c
 800b68e:	9b08      	ldr	r3, [sp, #32]
 800b690:	785b      	ldrb	r3, [r3, #1]
 800b692:	2b2b      	cmp	r3, #43	; 0x2b
 800b694:	d076      	beq.n	800b784 <_strtod_l+0x2a0>
 800b696:	000c      	movs	r4, r1
 800b698:	2b2d      	cmp	r3, #45	; 0x2d
 800b69a:	d179      	bne.n	800b790 <_strtod_l+0x2ac>
 800b69c:	2401      	movs	r4, #1
 800b69e:	e072      	b.n	800b786 <_strtod_l+0x2a2>
 800b6a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6a2:	2908      	cmp	r1, #8
 800b6a4:	dc09      	bgt.n	800b6ba <_strtod_l+0x1d6>
 800b6a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b6a8:	4351      	muls	r1, r2
 800b6aa:	185b      	adds	r3, r3, r1
 800b6ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6b0:	3001      	adds	r0, #1
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b6b6:	901f      	str	r0, [sp, #124]	; 0x7c
 800b6b8:	e7c3      	b.n	800b642 <_strtod_l+0x15e>
 800b6ba:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b6bc:	4351      	muls	r1, r2
 800b6be:	185b      	adds	r3, r3, r1
 800b6c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6c2:	e7f4      	b.n	800b6ae <_strtod_l+0x1ca>
 800b6c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b6c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6c8:	191c      	adds	r4, r3, r4
 800b6ca:	941f      	str	r4, [sp, #124]	; 0x7c
 800b6cc:	7823      	ldrb	r3, [r4, #0]
 800b6ce:	2a00      	cmp	r2, #0
 800b6d0:	d039      	beq.n	800b746 <_strtod_l+0x262>
 800b6d2:	900c      	str	r0, [sp, #48]	; 0x30
 800b6d4:	9206      	str	r2, [sp, #24]
 800b6d6:	001a      	movs	r2, r3
 800b6d8:	3a30      	subs	r2, #48	; 0x30
 800b6da:	2a09      	cmp	r2, #9
 800b6dc:	d912      	bls.n	800b704 <_strtod_l+0x220>
 800b6de:	2201      	movs	r2, #1
 800b6e0:	4694      	mov	ip, r2
 800b6e2:	e7c1      	b.n	800b668 <_strtod_l+0x184>
 800b6e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b6e6:	3001      	adds	r0, #1
 800b6e8:	1c5a      	adds	r2, r3, #1
 800b6ea:	921f      	str	r2, [sp, #124]	; 0x7c
 800b6ec:	785b      	ldrb	r3, [r3, #1]
 800b6ee:	2b30      	cmp	r3, #48	; 0x30
 800b6f0:	d0f8      	beq.n	800b6e4 <_strtod_l+0x200>
 800b6f2:	001a      	movs	r2, r3
 800b6f4:	3a31      	subs	r2, #49	; 0x31
 800b6f6:	2a08      	cmp	r2, #8
 800b6f8:	d83f      	bhi.n	800b77a <_strtod_l+0x296>
 800b6fa:	900c      	str	r0, [sp, #48]	; 0x30
 800b6fc:	2000      	movs	r0, #0
 800b6fe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b700:	9006      	str	r0, [sp, #24]
 800b702:	9210      	str	r2, [sp, #64]	; 0x40
 800b704:	001a      	movs	r2, r3
 800b706:	1c41      	adds	r1, r0, #1
 800b708:	3a30      	subs	r2, #48	; 0x30
 800b70a:	2b30      	cmp	r3, #48	; 0x30
 800b70c:	d015      	beq.n	800b73a <_strtod_l+0x256>
 800b70e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b710:	185b      	adds	r3, r3, r1
 800b712:	210a      	movs	r1, #10
 800b714:	930c      	str	r3, [sp, #48]	; 0x30
 800b716:	9b06      	ldr	r3, [sp, #24]
 800b718:	18c4      	adds	r4, r0, r3
 800b71a:	42a3      	cmp	r3, r4
 800b71c:	d115      	bne.n	800b74a <_strtod_l+0x266>
 800b71e:	9906      	ldr	r1, [sp, #24]
 800b720:	9b06      	ldr	r3, [sp, #24]
 800b722:	3101      	adds	r1, #1
 800b724:	1809      	adds	r1, r1, r0
 800b726:	181b      	adds	r3, r3, r0
 800b728:	9106      	str	r1, [sp, #24]
 800b72a:	2b08      	cmp	r3, #8
 800b72c:	dc1b      	bgt.n	800b766 <_strtod_l+0x282>
 800b72e:	230a      	movs	r3, #10
 800b730:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b732:	434b      	muls	r3, r1
 800b734:	2100      	movs	r1, #0
 800b736:	18d3      	adds	r3, r2, r3
 800b738:	930b      	str	r3, [sp, #44]	; 0x2c
 800b73a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b73c:	0008      	movs	r0, r1
 800b73e:	1c5a      	adds	r2, r3, #1
 800b740:	921f      	str	r2, [sp, #124]	; 0x7c
 800b742:	785b      	ldrb	r3, [r3, #1]
 800b744:	e7c7      	b.n	800b6d6 <_strtod_l+0x1f2>
 800b746:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b748:	e7d1      	b.n	800b6ee <_strtod_l+0x20a>
 800b74a:	2b08      	cmp	r3, #8
 800b74c:	dc04      	bgt.n	800b758 <_strtod_l+0x274>
 800b74e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b750:	434d      	muls	r5, r1
 800b752:	950b      	str	r5, [sp, #44]	; 0x2c
 800b754:	3301      	adds	r3, #1
 800b756:	e7e0      	b.n	800b71a <_strtod_l+0x236>
 800b758:	1c5d      	adds	r5, r3, #1
 800b75a:	2d10      	cmp	r5, #16
 800b75c:	dcfa      	bgt.n	800b754 <_strtod_l+0x270>
 800b75e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b760:	434d      	muls	r5, r1
 800b762:	950f      	str	r5, [sp, #60]	; 0x3c
 800b764:	e7f6      	b.n	800b754 <_strtod_l+0x270>
 800b766:	9b06      	ldr	r3, [sp, #24]
 800b768:	2100      	movs	r1, #0
 800b76a:	2b10      	cmp	r3, #16
 800b76c:	dce5      	bgt.n	800b73a <_strtod_l+0x256>
 800b76e:	230a      	movs	r3, #10
 800b770:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b772:	4343      	muls	r3, r0
 800b774:	18d3      	adds	r3, r2, r3
 800b776:	930f      	str	r3, [sp, #60]	; 0x3c
 800b778:	e7df      	b.n	800b73a <_strtod_l+0x256>
 800b77a:	2200      	movs	r2, #0
 800b77c:	920c      	str	r2, [sp, #48]	; 0x30
 800b77e:	9206      	str	r2, [sp, #24]
 800b780:	3201      	adds	r2, #1
 800b782:	e7ad      	b.n	800b6e0 <_strtod_l+0x1fc>
 800b784:	2400      	movs	r4, #0
 800b786:	9b08      	ldr	r3, [sp, #32]
 800b788:	3302      	adds	r3, #2
 800b78a:	931f      	str	r3, [sp, #124]	; 0x7c
 800b78c:	9b08      	ldr	r3, [sp, #32]
 800b78e:	789b      	ldrb	r3, [r3, #2]
 800b790:	001a      	movs	r2, r3
 800b792:	3a30      	subs	r2, #48	; 0x30
 800b794:	2a09      	cmp	r2, #9
 800b796:	d913      	bls.n	800b7c0 <_strtod_l+0x2dc>
 800b798:	9a08      	ldr	r2, [sp, #32]
 800b79a:	921f      	str	r2, [sp, #124]	; 0x7c
 800b79c:	2200      	movs	r2, #0
 800b79e:	e031      	b.n	800b804 <_strtod_l+0x320>
 800b7a0:	0800f940 	.word	0x0800f940
 800b7a4:	0800f6f4 	.word	0x0800f6f4
 800b7a8:	ffefffff 	.word	0xffefffff
 800b7ac:	00000433 	.word	0x00000433
 800b7b0:	7ff00000 	.word	0x7ff00000
 800b7b4:	7fffffff 	.word	0x7fffffff
 800b7b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b7ba:	1c5a      	adds	r2, r3, #1
 800b7bc:	921f      	str	r2, [sp, #124]	; 0x7c
 800b7be:	785b      	ldrb	r3, [r3, #1]
 800b7c0:	2b30      	cmp	r3, #48	; 0x30
 800b7c2:	d0f9      	beq.n	800b7b8 <_strtod_l+0x2d4>
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	9207      	str	r2, [sp, #28]
 800b7c8:	001a      	movs	r2, r3
 800b7ca:	3a31      	subs	r2, #49	; 0x31
 800b7cc:	2a08      	cmp	r2, #8
 800b7ce:	d81a      	bhi.n	800b806 <_strtod_l+0x322>
 800b7d0:	3b30      	subs	r3, #48	; 0x30
 800b7d2:	001a      	movs	r2, r3
 800b7d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b7d6:	9307      	str	r3, [sp, #28]
 800b7d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b7da:	1c59      	adds	r1, r3, #1
 800b7dc:	911f      	str	r1, [sp, #124]	; 0x7c
 800b7de:	785b      	ldrb	r3, [r3, #1]
 800b7e0:	001d      	movs	r5, r3
 800b7e2:	3d30      	subs	r5, #48	; 0x30
 800b7e4:	2d09      	cmp	r5, #9
 800b7e6:	d939      	bls.n	800b85c <_strtod_l+0x378>
 800b7e8:	9d07      	ldr	r5, [sp, #28]
 800b7ea:	1b49      	subs	r1, r1, r5
 800b7ec:	4db0      	ldr	r5, [pc, #704]	; (800bab0 <_strtod_l+0x5cc>)
 800b7ee:	9507      	str	r5, [sp, #28]
 800b7f0:	2908      	cmp	r1, #8
 800b7f2:	dc03      	bgt.n	800b7fc <_strtod_l+0x318>
 800b7f4:	9207      	str	r2, [sp, #28]
 800b7f6:	42aa      	cmp	r2, r5
 800b7f8:	dd00      	ble.n	800b7fc <_strtod_l+0x318>
 800b7fa:	9507      	str	r5, [sp, #28]
 800b7fc:	2c00      	cmp	r4, #0
 800b7fe:	d002      	beq.n	800b806 <_strtod_l+0x322>
 800b800:	9a07      	ldr	r2, [sp, #28]
 800b802:	4252      	negs	r2, r2
 800b804:	9207      	str	r2, [sp, #28]
 800b806:	9a06      	ldr	r2, [sp, #24]
 800b808:	2a00      	cmp	r2, #0
 800b80a:	d14b      	bne.n	800b8a4 <_strtod_l+0x3c0>
 800b80c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b80e:	4310      	orrs	r0, r2
 800b810:	d000      	beq.n	800b814 <_strtod_l+0x330>
 800b812:	e6ae      	b.n	800b572 <_strtod_l+0x8e>
 800b814:	4662      	mov	r2, ip
 800b816:	2a00      	cmp	r2, #0
 800b818:	d000      	beq.n	800b81c <_strtod_l+0x338>
 800b81a:	e6c9      	b.n	800b5b0 <_strtod_l+0xcc>
 800b81c:	2b69      	cmp	r3, #105	; 0x69
 800b81e:	d025      	beq.n	800b86c <_strtod_l+0x388>
 800b820:	dc21      	bgt.n	800b866 <_strtod_l+0x382>
 800b822:	2b49      	cmp	r3, #73	; 0x49
 800b824:	d022      	beq.n	800b86c <_strtod_l+0x388>
 800b826:	2b4e      	cmp	r3, #78	; 0x4e
 800b828:	d000      	beq.n	800b82c <_strtod_l+0x348>
 800b82a:	e6c1      	b.n	800b5b0 <_strtod_l+0xcc>
 800b82c:	49a1      	ldr	r1, [pc, #644]	; (800bab4 <_strtod_l+0x5d0>)
 800b82e:	a81f      	add	r0, sp, #124	; 0x7c
 800b830:	f001 ffbe 	bl	800d7b0 <__match>
 800b834:	2800      	cmp	r0, #0
 800b836:	d100      	bne.n	800b83a <_strtod_l+0x356>
 800b838:	e6ba      	b.n	800b5b0 <_strtod_l+0xcc>
 800b83a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	2b28      	cmp	r3, #40	; 0x28
 800b840:	d12a      	bne.n	800b898 <_strtod_l+0x3b4>
 800b842:	499d      	ldr	r1, [pc, #628]	; (800bab8 <_strtod_l+0x5d4>)
 800b844:	aa22      	add	r2, sp, #136	; 0x88
 800b846:	a81f      	add	r0, sp, #124	; 0x7c
 800b848:	f001 ffc6 	bl	800d7d8 <__hexnan>
 800b84c:	2805      	cmp	r0, #5
 800b84e:	d123      	bne.n	800b898 <_strtod_l+0x3b4>
 800b850:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b852:	4a9a      	ldr	r2, [pc, #616]	; (800babc <_strtod_l+0x5d8>)
 800b854:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800b856:	431a      	orrs	r2, r3
 800b858:	0017      	movs	r7, r2
 800b85a:	e68a      	b.n	800b572 <_strtod_l+0x8e>
 800b85c:	210a      	movs	r1, #10
 800b85e:	434a      	muls	r2, r1
 800b860:	18d2      	adds	r2, r2, r3
 800b862:	3a30      	subs	r2, #48	; 0x30
 800b864:	e7b8      	b.n	800b7d8 <_strtod_l+0x2f4>
 800b866:	2b6e      	cmp	r3, #110	; 0x6e
 800b868:	d0e0      	beq.n	800b82c <_strtod_l+0x348>
 800b86a:	e6a1      	b.n	800b5b0 <_strtod_l+0xcc>
 800b86c:	4994      	ldr	r1, [pc, #592]	; (800bac0 <_strtod_l+0x5dc>)
 800b86e:	a81f      	add	r0, sp, #124	; 0x7c
 800b870:	f001 ff9e 	bl	800d7b0 <__match>
 800b874:	2800      	cmp	r0, #0
 800b876:	d100      	bne.n	800b87a <_strtod_l+0x396>
 800b878:	e69a      	b.n	800b5b0 <_strtod_l+0xcc>
 800b87a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b87c:	4991      	ldr	r1, [pc, #580]	; (800bac4 <_strtod_l+0x5e0>)
 800b87e:	3b01      	subs	r3, #1
 800b880:	a81f      	add	r0, sp, #124	; 0x7c
 800b882:	931f      	str	r3, [sp, #124]	; 0x7c
 800b884:	f001 ff94 	bl	800d7b0 <__match>
 800b888:	2800      	cmp	r0, #0
 800b88a:	d102      	bne.n	800b892 <_strtod_l+0x3ae>
 800b88c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b88e:	3301      	adds	r3, #1
 800b890:	931f      	str	r3, [sp, #124]	; 0x7c
 800b892:	2600      	movs	r6, #0
 800b894:	4f89      	ldr	r7, [pc, #548]	; (800babc <_strtod_l+0x5d8>)
 800b896:	e66c      	b.n	800b572 <_strtod_l+0x8e>
 800b898:	488b      	ldr	r0, [pc, #556]	; (800bac8 <_strtod_l+0x5e4>)
 800b89a:	f002 ff4b 	bl	800e734 <nan>
 800b89e:	0006      	movs	r6, r0
 800b8a0:	000f      	movs	r7, r1
 800b8a2:	e666      	b.n	800b572 <_strtod_l+0x8e>
 800b8a4:	9b07      	ldr	r3, [sp, #28]
 800b8a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8a8:	1a9b      	subs	r3, r3, r2
 800b8aa:	930a      	str	r3, [sp, #40]	; 0x28
 800b8ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d101      	bne.n	800b8b6 <_strtod_l+0x3d2>
 800b8b2:	9b06      	ldr	r3, [sp, #24]
 800b8b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b8b6:	9c06      	ldr	r4, [sp, #24]
 800b8b8:	2c10      	cmp	r4, #16
 800b8ba:	dd00      	ble.n	800b8be <_strtod_l+0x3da>
 800b8bc:	2410      	movs	r4, #16
 800b8be:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b8c0:	f7f7 fb26 	bl	8002f10 <__aeabi_ui2d>
 800b8c4:	9b06      	ldr	r3, [sp, #24]
 800b8c6:	0006      	movs	r6, r0
 800b8c8:	000f      	movs	r7, r1
 800b8ca:	2b09      	cmp	r3, #9
 800b8cc:	dd15      	ble.n	800b8fa <_strtod_l+0x416>
 800b8ce:	0022      	movs	r2, r4
 800b8d0:	4b7e      	ldr	r3, [pc, #504]	; (800bacc <_strtod_l+0x5e8>)
 800b8d2:	3a09      	subs	r2, #9
 800b8d4:	00d2      	lsls	r2, r2, #3
 800b8d6:	189b      	adds	r3, r3, r2
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	f7f6 fc96 	bl	800220c <__aeabi_dmul>
 800b8e0:	0006      	movs	r6, r0
 800b8e2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b8e4:	000f      	movs	r7, r1
 800b8e6:	f7f7 fb13 	bl	8002f10 <__aeabi_ui2d>
 800b8ea:	0002      	movs	r2, r0
 800b8ec:	000b      	movs	r3, r1
 800b8ee:	0030      	movs	r0, r6
 800b8f0:	0039      	movs	r1, r7
 800b8f2:	f7f5 fd4d 	bl	8001390 <__aeabi_dadd>
 800b8f6:	0006      	movs	r6, r0
 800b8f8:	000f      	movs	r7, r1
 800b8fa:	9b06      	ldr	r3, [sp, #24]
 800b8fc:	2b0f      	cmp	r3, #15
 800b8fe:	dc39      	bgt.n	800b974 <_strtod_l+0x490>
 800b900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b902:	2b00      	cmp	r3, #0
 800b904:	d100      	bne.n	800b908 <_strtod_l+0x424>
 800b906:	e634      	b.n	800b572 <_strtod_l+0x8e>
 800b908:	dd24      	ble.n	800b954 <_strtod_l+0x470>
 800b90a:	2b16      	cmp	r3, #22
 800b90c:	dc09      	bgt.n	800b922 <_strtod_l+0x43e>
 800b90e:	496f      	ldr	r1, [pc, #444]	; (800bacc <_strtod_l+0x5e8>)
 800b910:	00db      	lsls	r3, r3, #3
 800b912:	18c9      	adds	r1, r1, r3
 800b914:	0032      	movs	r2, r6
 800b916:	6808      	ldr	r0, [r1, #0]
 800b918:	6849      	ldr	r1, [r1, #4]
 800b91a:	003b      	movs	r3, r7
 800b91c:	f7f6 fc76 	bl	800220c <__aeabi_dmul>
 800b920:	e7bd      	b.n	800b89e <_strtod_l+0x3ba>
 800b922:	2325      	movs	r3, #37	; 0x25
 800b924:	9a06      	ldr	r2, [sp, #24]
 800b926:	1a9b      	subs	r3, r3, r2
 800b928:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b92a:	4293      	cmp	r3, r2
 800b92c:	db22      	blt.n	800b974 <_strtod_l+0x490>
 800b92e:	240f      	movs	r4, #15
 800b930:	9b06      	ldr	r3, [sp, #24]
 800b932:	4d66      	ldr	r5, [pc, #408]	; (800bacc <_strtod_l+0x5e8>)
 800b934:	1ae4      	subs	r4, r4, r3
 800b936:	00e1      	lsls	r1, r4, #3
 800b938:	1869      	adds	r1, r5, r1
 800b93a:	0032      	movs	r2, r6
 800b93c:	6808      	ldr	r0, [r1, #0]
 800b93e:	6849      	ldr	r1, [r1, #4]
 800b940:	003b      	movs	r3, r7
 800b942:	f7f6 fc63 	bl	800220c <__aeabi_dmul>
 800b946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b948:	1b1c      	subs	r4, r3, r4
 800b94a:	00e4      	lsls	r4, r4, #3
 800b94c:	192c      	adds	r4, r5, r4
 800b94e:	6822      	ldr	r2, [r4, #0]
 800b950:	6863      	ldr	r3, [r4, #4]
 800b952:	e7e3      	b.n	800b91c <_strtod_l+0x438>
 800b954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b956:	3316      	adds	r3, #22
 800b958:	db0c      	blt.n	800b974 <_strtod_l+0x490>
 800b95a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b95c:	9a07      	ldr	r2, [sp, #28]
 800b95e:	0030      	movs	r0, r6
 800b960:	1a9a      	subs	r2, r3, r2
 800b962:	4b5a      	ldr	r3, [pc, #360]	; (800bacc <_strtod_l+0x5e8>)
 800b964:	00d2      	lsls	r2, r2, #3
 800b966:	189b      	adds	r3, r3, r2
 800b968:	0039      	movs	r1, r7
 800b96a:	681a      	ldr	r2, [r3, #0]
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	f7f6 f84b 	bl	8001a08 <__aeabi_ddiv>
 800b972:	e794      	b.n	800b89e <_strtod_l+0x3ba>
 800b974:	9b06      	ldr	r3, [sp, #24]
 800b976:	1b1c      	subs	r4, r3, r4
 800b978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b97a:	18e4      	adds	r4, r4, r3
 800b97c:	2c00      	cmp	r4, #0
 800b97e:	dd72      	ble.n	800ba66 <_strtod_l+0x582>
 800b980:	230f      	movs	r3, #15
 800b982:	0021      	movs	r1, r4
 800b984:	4019      	ands	r1, r3
 800b986:	421c      	tst	r4, r3
 800b988:	d00a      	beq.n	800b9a0 <_strtod_l+0x4bc>
 800b98a:	00cb      	lsls	r3, r1, #3
 800b98c:	494f      	ldr	r1, [pc, #316]	; (800bacc <_strtod_l+0x5e8>)
 800b98e:	0032      	movs	r2, r6
 800b990:	18c9      	adds	r1, r1, r3
 800b992:	6808      	ldr	r0, [r1, #0]
 800b994:	6849      	ldr	r1, [r1, #4]
 800b996:	003b      	movs	r3, r7
 800b998:	f7f6 fc38 	bl	800220c <__aeabi_dmul>
 800b99c:	0006      	movs	r6, r0
 800b99e:	000f      	movs	r7, r1
 800b9a0:	230f      	movs	r3, #15
 800b9a2:	439c      	bics	r4, r3
 800b9a4:	d04a      	beq.n	800ba3c <_strtod_l+0x558>
 800b9a6:	3326      	adds	r3, #38	; 0x26
 800b9a8:	33ff      	adds	r3, #255	; 0xff
 800b9aa:	429c      	cmp	r4, r3
 800b9ac:	dd22      	ble.n	800b9f4 <_strtod_l+0x510>
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	9306      	str	r3, [sp, #24]
 800b9b2:	9307      	str	r3, [sp, #28]
 800b9b4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b9b8:	2322      	movs	r3, #34	; 0x22
 800b9ba:	2600      	movs	r6, #0
 800b9bc:	9a05      	ldr	r2, [sp, #20]
 800b9be:	4f3f      	ldr	r7, [pc, #252]	; (800babc <_strtod_l+0x5d8>)
 800b9c0:	6013      	str	r3, [r2, #0]
 800b9c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9c4:	42b3      	cmp	r3, r6
 800b9c6:	d100      	bne.n	800b9ca <_strtod_l+0x4e6>
 800b9c8:	e5d3      	b.n	800b572 <_strtod_l+0x8e>
 800b9ca:	9920      	ldr	r1, [sp, #128]	; 0x80
 800b9cc:	9805      	ldr	r0, [sp, #20]
 800b9ce:	f002 f83f 	bl	800da50 <_Bfree>
 800b9d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9d4:	9805      	ldr	r0, [sp, #20]
 800b9d6:	f002 f83b 	bl	800da50 <_Bfree>
 800b9da:	9907      	ldr	r1, [sp, #28]
 800b9dc:	9805      	ldr	r0, [sp, #20]
 800b9de:	f002 f837 	bl	800da50 <_Bfree>
 800b9e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b9e4:	9805      	ldr	r0, [sp, #20]
 800b9e6:	f002 f833 	bl	800da50 <_Bfree>
 800b9ea:	9906      	ldr	r1, [sp, #24]
 800b9ec:	9805      	ldr	r0, [sp, #20]
 800b9ee:	f002 f82f 	bl	800da50 <_Bfree>
 800b9f2:	e5be      	b.n	800b572 <_strtod_l+0x8e>
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	0030      	movs	r0, r6
 800b9f8:	0039      	movs	r1, r7
 800b9fa:	4d35      	ldr	r5, [pc, #212]	; (800bad0 <_strtod_l+0x5ec>)
 800b9fc:	1124      	asrs	r4, r4, #4
 800b9fe:	9308      	str	r3, [sp, #32]
 800ba00:	2c01      	cmp	r4, #1
 800ba02:	dc1e      	bgt.n	800ba42 <_strtod_l+0x55e>
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d001      	beq.n	800ba0c <_strtod_l+0x528>
 800ba08:	0006      	movs	r6, r0
 800ba0a:	000f      	movs	r7, r1
 800ba0c:	4b31      	ldr	r3, [pc, #196]	; (800bad4 <_strtod_l+0x5f0>)
 800ba0e:	0032      	movs	r2, r6
 800ba10:	18ff      	adds	r7, r7, r3
 800ba12:	9b08      	ldr	r3, [sp, #32]
 800ba14:	00dd      	lsls	r5, r3, #3
 800ba16:	4b2e      	ldr	r3, [pc, #184]	; (800bad0 <_strtod_l+0x5ec>)
 800ba18:	195d      	adds	r5, r3, r5
 800ba1a:	6828      	ldr	r0, [r5, #0]
 800ba1c:	6869      	ldr	r1, [r5, #4]
 800ba1e:	003b      	movs	r3, r7
 800ba20:	f7f6 fbf4 	bl	800220c <__aeabi_dmul>
 800ba24:	4b25      	ldr	r3, [pc, #148]	; (800babc <_strtod_l+0x5d8>)
 800ba26:	4a2c      	ldr	r2, [pc, #176]	; (800bad8 <_strtod_l+0x5f4>)
 800ba28:	0006      	movs	r6, r0
 800ba2a:	400b      	ands	r3, r1
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d8be      	bhi.n	800b9ae <_strtod_l+0x4ca>
 800ba30:	4a2a      	ldr	r2, [pc, #168]	; (800badc <_strtod_l+0x5f8>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d913      	bls.n	800ba5e <_strtod_l+0x57a>
 800ba36:	2601      	movs	r6, #1
 800ba38:	4f29      	ldr	r7, [pc, #164]	; (800bae0 <_strtod_l+0x5fc>)
 800ba3a:	4276      	negs	r6, r6
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	9308      	str	r3, [sp, #32]
 800ba40:	e087      	b.n	800bb52 <_strtod_l+0x66e>
 800ba42:	2201      	movs	r2, #1
 800ba44:	4214      	tst	r4, r2
 800ba46:	d004      	beq.n	800ba52 <_strtod_l+0x56e>
 800ba48:	682a      	ldr	r2, [r5, #0]
 800ba4a:	686b      	ldr	r3, [r5, #4]
 800ba4c:	f7f6 fbde 	bl	800220c <__aeabi_dmul>
 800ba50:	2301      	movs	r3, #1
 800ba52:	9a08      	ldr	r2, [sp, #32]
 800ba54:	1064      	asrs	r4, r4, #1
 800ba56:	3201      	adds	r2, #1
 800ba58:	9208      	str	r2, [sp, #32]
 800ba5a:	3508      	adds	r5, #8
 800ba5c:	e7d0      	b.n	800ba00 <_strtod_l+0x51c>
 800ba5e:	23d4      	movs	r3, #212	; 0xd4
 800ba60:	049b      	lsls	r3, r3, #18
 800ba62:	18cf      	adds	r7, r1, r3
 800ba64:	e7ea      	b.n	800ba3c <_strtod_l+0x558>
 800ba66:	2c00      	cmp	r4, #0
 800ba68:	d0e8      	beq.n	800ba3c <_strtod_l+0x558>
 800ba6a:	4264      	negs	r4, r4
 800ba6c:	220f      	movs	r2, #15
 800ba6e:	0023      	movs	r3, r4
 800ba70:	4013      	ands	r3, r2
 800ba72:	4214      	tst	r4, r2
 800ba74:	d00a      	beq.n	800ba8c <_strtod_l+0x5a8>
 800ba76:	00da      	lsls	r2, r3, #3
 800ba78:	4b14      	ldr	r3, [pc, #80]	; (800bacc <_strtod_l+0x5e8>)
 800ba7a:	0030      	movs	r0, r6
 800ba7c:	189b      	adds	r3, r3, r2
 800ba7e:	0039      	movs	r1, r7
 800ba80:	681a      	ldr	r2, [r3, #0]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	f7f5 ffc0 	bl	8001a08 <__aeabi_ddiv>
 800ba88:	0006      	movs	r6, r0
 800ba8a:	000f      	movs	r7, r1
 800ba8c:	1124      	asrs	r4, r4, #4
 800ba8e:	d0d5      	beq.n	800ba3c <_strtod_l+0x558>
 800ba90:	2c1f      	cmp	r4, #31
 800ba92:	dd27      	ble.n	800bae4 <_strtod_l+0x600>
 800ba94:	2300      	movs	r3, #0
 800ba96:	9306      	str	r3, [sp, #24]
 800ba98:	9307      	str	r3, [sp, #28]
 800ba9a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba9c:	9309      	str	r3, [sp, #36]	; 0x24
 800ba9e:	2322      	movs	r3, #34	; 0x22
 800baa0:	9a05      	ldr	r2, [sp, #20]
 800baa2:	2600      	movs	r6, #0
 800baa4:	6013      	str	r3, [r2, #0]
 800baa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800baa8:	2700      	movs	r7, #0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d18d      	bne.n	800b9ca <_strtod_l+0x4e6>
 800baae:	e560      	b.n	800b572 <_strtod_l+0x8e>
 800bab0:	00004e1f 	.word	0x00004e1f
 800bab4:	0800f6cd 	.word	0x0800f6cd
 800bab8:	0800f708 	.word	0x0800f708
 800babc:	7ff00000 	.word	0x7ff00000
 800bac0:	0800f6c5 	.word	0x0800f6c5
 800bac4:	0800f84c 	.word	0x0800f84c
 800bac8:	0800faf8 	.word	0x0800faf8
 800bacc:	0800f9d8 	.word	0x0800f9d8
 800bad0:	0800f9b0 	.word	0x0800f9b0
 800bad4:	fcb00000 	.word	0xfcb00000
 800bad8:	7ca00000 	.word	0x7ca00000
 800badc:	7c900000 	.word	0x7c900000
 800bae0:	7fefffff 	.word	0x7fefffff
 800bae4:	2310      	movs	r3, #16
 800bae6:	0022      	movs	r2, r4
 800bae8:	401a      	ands	r2, r3
 800baea:	9208      	str	r2, [sp, #32]
 800baec:	421c      	tst	r4, r3
 800baee:	d001      	beq.n	800baf4 <_strtod_l+0x610>
 800baf0:	335a      	adds	r3, #90	; 0x5a
 800baf2:	9308      	str	r3, [sp, #32]
 800baf4:	0030      	movs	r0, r6
 800baf6:	0039      	movs	r1, r7
 800baf8:	2300      	movs	r3, #0
 800bafa:	4dc5      	ldr	r5, [pc, #788]	; (800be10 <_strtod_l+0x92c>)
 800bafc:	2201      	movs	r2, #1
 800bafe:	4214      	tst	r4, r2
 800bb00:	d004      	beq.n	800bb0c <_strtod_l+0x628>
 800bb02:	682a      	ldr	r2, [r5, #0]
 800bb04:	686b      	ldr	r3, [r5, #4]
 800bb06:	f7f6 fb81 	bl	800220c <__aeabi_dmul>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	1064      	asrs	r4, r4, #1
 800bb0e:	3508      	adds	r5, #8
 800bb10:	2c00      	cmp	r4, #0
 800bb12:	d1f3      	bne.n	800bafc <_strtod_l+0x618>
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d001      	beq.n	800bb1c <_strtod_l+0x638>
 800bb18:	0006      	movs	r6, r0
 800bb1a:	000f      	movs	r7, r1
 800bb1c:	9b08      	ldr	r3, [sp, #32]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d00f      	beq.n	800bb42 <_strtod_l+0x65e>
 800bb22:	236b      	movs	r3, #107	; 0x6b
 800bb24:	007a      	lsls	r2, r7, #1
 800bb26:	0d52      	lsrs	r2, r2, #21
 800bb28:	0039      	movs	r1, r7
 800bb2a:	1a9b      	subs	r3, r3, r2
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	dd08      	ble.n	800bb42 <_strtod_l+0x65e>
 800bb30:	2b1f      	cmp	r3, #31
 800bb32:	dc00      	bgt.n	800bb36 <_strtod_l+0x652>
 800bb34:	e124      	b.n	800bd80 <_strtod_l+0x89c>
 800bb36:	2600      	movs	r6, #0
 800bb38:	2b34      	cmp	r3, #52	; 0x34
 800bb3a:	dc00      	bgt.n	800bb3e <_strtod_l+0x65a>
 800bb3c:	e119      	b.n	800bd72 <_strtod_l+0x88e>
 800bb3e:	27dc      	movs	r7, #220	; 0xdc
 800bb40:	04bf      	lsls	r7, r7, #18
 800bb42:	2200      	movs	r2, #0
 800bb44:	2300      	movs	r3, #0
 800bb46:	0030      	movs	r0, r6
 800bb48:	0039      	movs	r1, r7
 800bb4a:	f7f4 fc7f 	bl	800044c <__aeabi_dcmpeq>
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	d1a0      	bne.n	800ba94 <_strtod_l+0x5b0>
 800bb52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb56:	9300      	str	r3, [sp, #0]
 800bb58:	9910      	ldr	r1, [sp, #64]	; 0x40
 800bb5a:	9b06      	ldr	r3, [sp, #24]
 800bb5c:	9805      	ldr	r0, [sp, #20]
 800bb5e:	f001 ffdf 	bl	800db20 <__s2b>
 800bb62:	900b      	str	r0, [sp, #44]	; 0x2c
 800bb64:	2800      	cmp	r0, #0
 800bb66:	d100      	bne.n	800bb6a <_strtod_l+0x686>
 800bb68:	e721      	b.n	800b9ae <_strtod_l+0x4ca>
 800bb6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb6c:	9907      	ldr	r1, [sp, #28]
 800bb6e:	17da      	asrs	r2, r3, #31
 800bb70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb72:	1a5b      	subs	r3, r3, r1
 800bb74:	401a      	ands	r2, r3
 800bb76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb78:	9215      	str	r2, [sp, #84]	; 0x54
 800bb7a:	43db      	mvns	r3, r3
 800bb7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb7e:	17db      	asrs	r3, r3, #31
 800bb80:	401a      	ands	r2, r3
 800bb82:	2300      	movs	r3, #0
 800bb84:	921a      	str	r2, [sp, #104]	; 0x68
 800bb86:	9306      	str	r3, [sp, #24]
 800bb88:	9307      	str	r3, [sp, #28]
 800bb8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb8c:	9805      	ldr	r0, [sp, #20]
 800bb8e:	6859      	ldr	r1, [r3, #4]
 800bb90:	f001 ff1a 	bl	800d9c8 <_Balloc>
 800bb94:	9009      	str	r0, [sp, #36]	; 0x24
 800bb96:	2800      	cmp	r0, #0
 800bb98:	d100      	bne.n	800bb9c <_strtod_l+0x6b8>
 800bb9a:	e70d      	b.n	800b9b8 <_strtod_l+0x4d4>
 800bb9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bba0:	691b      	ldr	r3, [r3, #16]
 800bba2:	310c      	adds	r1, #12
 800bba4:	1c9a      	adds	r2, r3, #2
 800bba6:	0092      	lsls	r2, r2, #2
 800bba8:	300c      	adds	r0, #12
 800bbaa:	930c      	str	r3, [sp, #48]	; 0x30
 800bbac:	f7fe fe71 	bl	800a892 <memcpy>
 800bbb0:	ab22      	add	r3, sp, #136	; 0x88
 800bbb2:	9301      	str	r3, [sp, #4]
 800bbb4:	ab21      	add	r3, sp, #132	; 0x84
 800bbb6:	9300      	str	r3, [sp, #0]
 800bbb8:	0032      	movs	r2, r6
 800bbba:	003b      	movs	r3, r7
 800bbbc:	9805      	ldr	r0, [sp, #20]
 800bbbe:	9612      	str	r6, [sp, #72]	; 0x48
 800bbc0:	9713      	str	r7, [sp, #76]	; 0x4c
 800bbc2:	f002 faf9 	bl	800e1b8 <__d2b>
 800bbc6:	9020      	str	r0, [sp, #128]	; 0x80
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	d100      	bne.n	800bbce <_strtod_l+0x6ea>
 800bbcc:	e6f4      	b.n	800b9b8 <_strtod_l+0x4d4>
 800bbce:	2101      	movs	r1, #1
 800bbd0:	9805      	ldr	r0, [sp, #20]
 800bbd2:	f002 f839 	bl	800dc48 <__i2b>
 800bbd6:	9007      	str	r0, [sp, #28]
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	d100      	bne.n	800bbde <_strtod_l+0x6fa>
 800bbdc:	e6ec      	b.n	800b9b8 <_strtod_l+0x4d4>
 800bbde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bbe0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bbe2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800bbe4:	1ad4      	subs	r4, r2, r3
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	db01      	blt.n	800bbee <_strtod_l+0x70a>
 800bbea:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800bbec:	195d      	adds	r5, r3, r5
 800bbee:	9908      	ldr	r1, [sp, #32]
 800bbf0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bbf2:	1a5b      	subs	r3, r3, r1
 800bbf4:	2136      	movs	r1, #54	; 0x36
 800bbf6:	189b      	adds	r3, r3, r2
 800bbf8:	1a8a      	subs	r2, r1, r2
 800bbfa:	4986      	ldr	r1, [pc, #536]	; (800be14 <_strtod_l+0x930>)
 800bbfc:	2001      	movs	r0, #1
 800bbfe:	468c      	mov	ip, r1
 800bc00:	2100      	movs	r1, #0
 800bc02:	3b01      	subs	r3, #1
 800bc04:	9110      	str	r1, [sp, #64]	; 0x40
 800bc06:	9014      	str	r0, [sp, #80]	; 0x50
 800bc08:	4563      	cmp	r3, ip
 800bc0a:	da07      	bge.n	800bc1c <_strtod_l+0x738>
 800bc0c:	4661      	mov	r1, ip
 800bc0e:	1ac9      	subs	r1, r1, r3
 800bc10:	1a52      	subs	r2, r2, r1
 800bc12:	291f      	cmp	r1, #31
 800bc14:	dd00      	ble.n	800bc18 <_strtod_l+0x734>
 800bc16:	e0b8      	b.n	800bd8a <_strtod_l+0x8a6>
 800bc18:	4088      	lsls	r0, r1
 800bc1a:	9014      	str	r0, [sp, #80]	; 0x50
 800bc1c:	18ab      	adds	r3, r5, r2
 800bc1e:	930c      	str	r3, [sp, #48]	; 0x30
 800bc20:	18a4      	adds	r4, r4, r2
 800bc22:	9b08      	ldr	r3, [sp, #32]
 800bc24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc26:	191c      	adds	r4, r3, r4
 800bc28:	002b      	movs	r3, r5
 800bc2a:	4295      	cmp	r5, r2
 800bc2c:	dd00      	ble.n	800bc30 <_strtod_l+0x74c>
 800bc2e:	0013      	movs	r3, r2
 800bc30:	42a3      	cmp	r3, r4
 800bc32:	dd00      	ble.n	800bc36 <_strtod_l+0x752>
 800bc34:	0023      	movs	r3, r4
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	dd04      	ble.n	800bc44 <_strtod_l+0x760>
 800bc3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc3c:	1ae4      	subs	r4, r4, r3
 800bc3e:	1ad2      	subs	r2, r2, r3
 800bc40:	920c      	str	r2, [sp, #48]	; 0x30
 800bc42:	1aed      	subs	r5, r5, r3
 800bc44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	dd17      	ble.n	800bc7a <_strtod_l+0x796>
 800bc4a:	001a      	movs	r2, r3
 800bc4c:	9907      	ldr	r1, [sp, #28]
 800bc4e:	9805      	ldr	r0, [sp, #20]
 800bc50:	f002 f8c0 	bl	800ddd4 <__pow5mult>
 800bc54:	9007      	str	r0, [sp, #28]
 800bc56:	2800      	cmp	r0, #0
 800bc58:	d100      	bne.n	800bc5c <_strtod_l+0x778>
 800bc5a:	e6ad      	b.n	800b9b8 <_strtod_l+0x4d4>
 800bc5c:	0001      	movs	r1, r0
 800bc5e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bc60:	9805      	ldr	r0, [sp, #20]
 800bc62:	f002 f807 	bl	800dc74 <__multiply>
 800bc66:	900f      	str	r0, [sp, #60]	; 0x3c
 800bc68:	2800      	cmp	r0, #0
 800bc6a:	d100      	bne.n	800bc6e <_strtod_l+0x78a>
 800bc6c:	e6a4      	b.n	800b9b8 <_strtod_l+0x4d4>
 800bc6e:	9920      	ldr	r1, [sp, #128]	; 0x80
 800bc70:	9805      	ldr	r0, [sp, #20]
 800bc72:	f001 feed 	bl	800da50 <_Bfree>
 800bc76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc78:	9320      	str	r3, [sp, #128]	; 0x80
 800bc7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	dd00      	ble.n	800bc82 <_strtod_l+0x79e>
 800bc80:	e089      	b.n	800bd96 <_strtod_l+0x8b2>
 800bc82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	dd08      	ble.n	800bc9a <_strtod_l+0x7b6>
 800bc88:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bc8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc8c:	9805      	ldr	r0, [sp, #20]
 800bc8e:	f002 f8a1 	bl	800ddd4 <__pow5mult>
 800bc92:	9009      	str	r0, [sp, #36]	; 0x24
 800bc94:	2800      	cmp	r0, #0
 800bc96:	d100      	bne.n	800bc9a <_strtod_l+0x7b6>
 800bc98:	e68e      	b.n	800b9b8 <_strtod_l+0x4d4>
 800bc9a:	2c00      	cmp	r4, #0
 800bc9c:	dd08      	ble.n	800bcb0 <_strtod_l+0x7cc>
 800bc9e:	0022      	movs	r2, r4
 800bca0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bca2:	9805      	ldr	r0, [sp, #20]
 800bca4:	f002 f8f2 	bl	800de8c <__lshift>
 800bca8:	9009      	str	r0, [sp, #36]	; 0x24
 800bcaa:	2800      	cmp	r0, #0
 800bcac:	d100      	bne.n	800bcb0 <_strtod_l+0x7cc>
 800bcae:	e683      	b.n	800b9b8 <_strtod_l+0x4d4>
 800bcb0:	2d00      	cmp	r5, #0
 800bcb2:	dd08      	ble.n	800bcc6 <_strtod_l+0x7e2>
 800bcb4:	002a      	movs	r2, r5
 800bcb6:	9907      	ldr	r1, [sp, #28]
 800bcb8:	9805      	ldr	r0, [sp, #20]
 800bcba:	f002 f8e7 	bl	800de8c <__lshift>
 800bcbe:	9007      	str	r0, [sp, #28]
 800bcc0:	2800      	cmp	r0, #0
 800bcc2:	d100      	bne.n	800bcc6 <_strtod_l+0x7e2>
 800bcc4:	e678      	b.n	800b9b8 <_strtod_l+0x4d4>
 800bcc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcc8:	9920      	ldr	r1, [sp, #128]	; 0x80
 800bcca:	9805      	ldr	r0, [sp, #20]
 800bccc:	f002 f968 	bl	800dfa0 <__mdiff>
 800bcd0:	9006      	str	r0, [sp, #24]
 800bcd2:	2800      	cmp	r0, #0
 800bcd4:	d100      	bne.n	800bcd8 <_strtod_l+0x7f4>
 800bcd6:	e66f      	b.n	800b9b8 <_strtod_l+0x4d4>
 800bcd8:	2200      	movs	r2, #0
 800bcda:	68c3      	ldr	r3, [r0, #12]
 800bcdc:	9907      	ldr	r1, [sp, #28]
 800bcde:	60c2      	str	r2, [r0, #12]
 800bce0:	930f      	str	r3, [sp, #60]	; 0x3c
 800bce2:	f002 f941 	bl	800df68 <__mcmp>
 800bce6:	2800      	cmp	r0, #0
 800bce8:	da5f      	bge.n	800bdaa <_strtod_l+0x8c6>
 800bcea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bcec:	4333      	orrs	r3, r6
 800bcee:	d000      	beq.n	800bcf2 <_strtod_l+0x80e>
 800bcf0:	e08a      	b.n	800be08 <_strtod_l+0x924>
 800bcf2:	033b      	lsls	r3, r7, #12
 800bcf4:	d000      	beq.n	800bcf8 <_strtod_l+0x814>
 800bcf6:	e087      	b.n	800be08 <_strtod_l+0x924>
 800bcf8:	22d6      	movs	r2, #214	; 0xd6
 800bcfa:	4b47      	ldr	r3, [pc, #284]	; (800be18 <_strtod_l+0x934>)
 800bcfc:	04d2      	lsls	r2, r2, #19
 800bcfe:	403b      	ands	r3, r7
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d800      	bhi.n	800bd06 <_strtod_l+0x822>
 800bd04:	e080      	b.n	800be08 <_strtod_l+0x924>
 800bd06:	9b06      	ldr	r3, [sp, #24]
 800bd08:	695b      	ldr	r3, [r3, #20]
 800bd0a:	930a      	str	r3, [sp, #40]	; 0x28
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d104      	bne.n	800bd1a <_strtod_l+0x836>
 800bd10:	9b06      	ldr	r3, [sp, #24]
 800bd12:	691b      	ldr	r3, [r3, #16]
 800bd14:	930a      	str	r3, [sp, #40]	; 0x28
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	dd76      	ble.n	800be08 <_strtod_l+0x924>
 800bd1a:	9906      	ldr	r1, [sp, #24]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	9805      	ldr	r0, [sp, #20]
 800bd20:	f002 f8b4 	bl	800de8c <__lshift>
 800bd24:	9907      	ldr	r1, [sp, #28]
 800bd26:	9006      	str	r0, [sp, #24]
 800bd28:	f002 f91e 	bl	800df68 <__mcmp>
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	dd6b      	ble.n	800be08 <_strtod_l+0x924>
 800bd30:	9908      	ldr	r1, [sp, #32]
 800bd32:	003b      	movs	r3, r7
 800bd34:	4a38      	ldr	r2, [pc, #224]	; (800be18 <_strtod_l+0x934>)
 800bd36:	2900      	cmp	r1, #0
 800bd38:	d100      	bne.n	800bd3c <_strtod_l+0x858>
 800bd3a:	e092      	b.n	800be62 <_strtod_l+0x97e>
 800bd3c:	0011      	movs	r1, r2
 800bd3e:	20d6      	movs	r0, #214	; 0xd6
 800bd40:	4039      	ands	r1, r7
 800bd42:	04c0      	lsls	r0, r0, #19
 800bd44:	4281      	cmp	r1, r0
 800bd46:	dd00      	ble.n	800bd4a <_strtod_l+0x866>
 800bd48:	e08b      	b.n	800be62 <_strtod_l+0x97e>
 800bd4a:	23dc      	movs	r3, #220	; 0xdc
 800bd4c:	049b      	lsls	r3, r3, #18
 800bd4e:	4299      	cmp	r1, r3
 800bd50:	dc00      	bgt.n	800bd54 <_strtod_l+0x870>
 800bd52:	e6a4      	b.n	800ba9e <_strtod_l+0x5ba>
 800bd54:	0030      	movs	r0, r6
 800bd56:	0039      	movs	r1, r7
 800bd58:	2200      	movs	r2, #0
 800bd5a:	4b30      	ldr	r3, [pc, #192]	; (800be1c <_strtod_l+0x938>)
 800bd5c:	f7f6 fa56 	bl	800220c <__aeabi_dmul>
 800bd60:	0006      	movs	r6, r0
 800bd62:	000f      	movs	r7, r1
 800bd64:	4308      	orrs	r0, r1
 800bd66:	d000      	beq.n	800bd6a <_strtod_l+0x886>
 800bd68:	e62f      	b.n	800b9ca <_strtod_l+0x4e6>
 800bd6a:	2322      	movs	r3, #34	; 0x22
 800bd6c:	9a05      	ldr	r2, [sp, #20]
 800bd6e:	6013      	str	r3, [r2, #0]
 800bd70:	e62b      	b.n	800b9ca <_strtod_l+0x4e6>
 800bd72:	234b      	movs	r3, #75	; 0x4b
 800bd74:	1a9a      	subs	r2, r3, r2
 800bd76:	3b4c      	subs	r3, #76	; 0x4c
 800bd78:	4093      	lsls	r3, r2
 800bd7a:	4019      	ands	r1, r3
 800bd7c:	000f      	movs	r7, r1
 800bd7e:	e6e0      	b.n	800bb42 <_strtod_l+0x65e>
 800bd80:	2201      	movs	r2, #1
 800bd82:	4252      	negs	r2, r2
 800bd84:	409a      	lsls	r2, r3
 800bd86:	4016      	ands	r6, r2
 800bd88:	e6db      	b.n	800bb42 <_strtod_l+0x65e>
 800bd8a:	4925      	ldr	r1, [pc, #148]	; (800be20 <_strtod_l+0x93c>)
 800bd8c:	1acb      	subs	r3, r1, r3
 800bd8e:	0001      	movs	r1, r0
 800bd90:	4099      	lsls	r1, r3
 800bd92:	9110      	str	r1, [sp, #64]	; 0x40
 800bd94:	e741      	b.n	800bc1a <_strtod_l+0x736>
 800bd96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd98:	9920      	ldr	r1, [sp, #128]	; 0x80
 800bd9a:	9805      	ldr	r0, [sp, #20]
 800bd9c:	f002 f876 	bl	800de8c <__lshift>
 800bda0:	9020      	str	r0, [sp, #128]	; 0x80
 800bda2:	2800      	cmp	r0, #0
 800bda4:	d000      	beq.n	800bda8 <_strtod_l+0x8c4>
 800bda6:	e76c      	b.n	800bc82 <_strtod_l+0x79e>
 800bda8:	e606      	b.n	800b9b8 <_strtod_l+0x4d4>
 800bdaa:	970c      	str	r7, [sp, #48]	; 0x30
 800bdac:	2800      	cmp	r0, #0
 800bdae:	d176      	bne.n	800be9e <_strtod_l+0x9ba>
 800bdb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bdb2:	033b      	lsls	r3, r7, #12
 800bdb4:	0b1b      	lsrs	r3, r3, #12
 800bdb6:	2a00      	cmp	r2, #0
 800bdb8:	d038      	beq.n	800be2c <_strtod_l+0x948>
 800bdba:	4a1a      	ldr	r2, [pc, #104]	; (800be24 <_strtod_l+0x940>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d138      	bne.n	800be32 <_strtod_l+0x94e>
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	9b08      	ldr	r3, [sp, #32]
 800bdc4:	4252      	negs	r2, r2
 800bdc6:	0031      	movs	r1, r6
 800bdc8:	0010      	movs	r0, r2
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d00b      	beq.n	800bde6 <_strtod_l+0x902>
 800bdce:	24d4      	movs	r4, #212	; 0xd4
 800bdd0:	4b11      	ldr	r3, [pc, #68]	; (800be18 <_strtod_l+0x934>)
 800bdd2:	0010      	movs	r0, r2
 800bdd4:	403b      	ands	r3, r7
 800bdd6:	04e4      	lsls	r4, r4, #19
 800bdd8:	42a3      	cmp	r3, r4
 800bdda:	d804      	bhi.n	800bde6 <_strtod_l+0x902>
 800bddc:	306c      	adds	r0, #108	; 0x6c
 800bdde:	0d1b      	lsrs	r3, r3, #20
 800bde0:	1ac3      	subs	r3, r0, r3
 800bde2:	409a      	lsls	r2, r3
 800bde4:	0010      	movs	r0, r2
 800bde6:	4281      	cmp	r1, r0
 800bde8:	d123      	bne.n	800be32 <_strtod_l+0x94e>
 800bdea:	4b0f      	ldr	r3, [pc, #60]	; (800be28 <_strtod_l+0x944>)
 800bdec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d102      	bne.n	800bdf8 <_strtod_l+0x914>
 800bdf2:	1c4b      	adds	r3, r1, #1
 800bdf4:	d100      	bne.n	800bdf8 <_strtod_l+0x914>
 800bdf6:	e5df      	b.n	800b9b8 <_strtod_l+0x4d4>
 800bdf8:	4b07      	ldr	r3, [pc, #28]	; (800be18 <_strtod_l+0x934>)
 800bdfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bdfc:	2600      	movs	r6, #0
 800bdfe:	401a      	ands	r2, r3
 800be00:	0013      	movs	r3, r2
 800be02:	2280      	movs	r2, #128	; 0x80
 800be04:	0352      	lsls	r2, r2, #13
 800be06:	189f      	adds	r7, r3, r2
 800be08:	9b08      	ldr	r3, [sp, #32]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d1a2      	bne.n	800bd54 <_strtod_l+0x870>
 800be0e:	e5dc      	b.n	800b9ca <_strtod_l+0x4e6>
 800be10:	0800f720 	.word	0x0800f720
 800be14:	fffffc02 	.word	0xfffffc02
 800be18:	7ff00000 	.word	0x7ff00000
 800be1c:	39500000 	.word	0x39500000
 800be20:	fffffbe2 	.word	0xfffffbe2
 800be24:	000fffff 	.word	0x000fffff
 800be28:	7fefffff 	.word	0x7fefffff
 800be2c:	4333      	orrs	r3, r6
 800be2e:	d100      	bne.n	800be32 <_strtod_l+0x94e>
 800be30:	e77e      	b.n	800bd30 <_strtod_l+0x84c>
 800be32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be34:	2b00      	cmp	r3, #0
 800be36:	d01d      	beq.n	800be74 <_strtod_l+0x990>
 800be38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800be3c:	4213      	tst	r3, r2
 800be3e:	d0e3      	beq.n	800be08 <_strtod_l+0x924>
 800be40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be42:	0030      	movs	r0, r6
 800be44:	0039      	movs	r1, r7
 800be46:	9a08      	ldr	r2, [sp, #32]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d017      	beq.n	800be7c <_strtod_l+0x998>
 800be4c:	f7ff fb32 	bl	800b4b4 <sulp>
 800be50:	0002      	movs	r2, r0
 800be52:	000b      	movs	r3, r1
 800be54:	9812      	ldr	r0, [sp, #72]	; 0x48
 800be56:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800be58:	f7f5 fa9a 	bl	8001390 <__aeabi_dadd>
 800be5c:	0006      	movs	r6, r0
 800be5e:	000f      	movs	r7, r1
 800be60:	e7d2      	b.n	800be08 <_strtod_l+0x924>
 800be62:	2601      	movs	r6, #1
 800be64:	4013      	ands	r3, r2
 800be66:	4a99      	ldr	r2, [pc, #612]	; (800c0cc <_strtod_l+0xbe8>)
 800be68:	4276      	negs	r6, r6
 800be6a:	189b      	adds	r3, r3, r2
 800be6c:	4a98      	ldr	r2, [pc, #608]	; (800c0d0 <_strtod_l+0xbec>)
 800be6e:	431a      	orrs	r2, r3
 800be70:	0017      	movs	r7, r2
 800be72:	e7c9      	b.n	800be08 <_strtod_l+0x924>
 800be74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800be76:	4233      	tst	r3, r6
 800be78:	d0c6      	beq.n	800be08 <_strtod_l+0x924>
 800be7a:	e7e1      	b.n	800be40 <_strtod_l+0x95c>
 800be7c:	f7ff fb1a 	bl	800b4b4 <sulp>
 800be80:	0002      	movs	r2, r0
 800be82:	000b      	movs	r3, r1
 800be84:	9812      	ldr	r0, [sp, #72]	; 0x48
 800be86:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800be88:	f7f6 fc2c 	bl	80026e4 <__aeabi_dsub>
 800be8c:	2200      	movs	r2, #0
 800be8e:	2300      	movs	r3, #0
 800be90:	0006      	movs	r6, r0
 800be92:	000f      	movs	r7, r1
 800be94:	f7f4 fada 	bl	800044c <__aeabi_dcmpeq>
 800be98:	2800      	cmp	r0, #0
 800be9a:	d0b5      	beq.n	800be08 <_strtod_l+0x924>
 800be9c:	e5ff      	b.n	800ba9e <_strtod_l+0x5ba>
 800be9e:	9907      	ldr	r1, [sp, #28]
 800bea0:	9806      	ldr	r0, [sp, #24]
 800bea2:	f002 f9ed 	bl	800e280 <__ratio>
 800bea6:	2380      	movs	r3, #128	; 0x80
 800bea8:	2200      	movs	r2, #0
 800beaa:	05db      	lsls	r3, r3, #23
 800beac:	0004      	movs	r4, r0
 800beae:	000d      	movs	r5, r1
 800beb0:	f7f4 fadc 	bl	800046c <__aeabi_dcmple>
 800beb4:	2800      	cmp	r0, #0
 800beb6:	d075      	beq.n	800bfa4 <_strtod_l+0xac0>
 800beb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d047      	beq.n	800bf4e <_strtod_l+0xa6a>
 800bebe:	2300      	movs	r3, #0
 800bec0:	4c84      	ldr	r4, [pc, #528]	; (800c0d4 <_strtod_l+0xbf0>)
 800bec2:	2500      	movs	r5, #0
 800bec4:	9310      	str	r3, [sp, #64]	; 0x40
 800bec6:	9411      	str	r4, [sp, #68]	; 0x44
 800bec8:	4c82      	ldr	r4, [pc, #520]	; (800c0d4 <_strtod_l+0xbf0>)
 800beca:	4a83      	ldr	r2, [pc, #524]	; (800c0d8 <_strtod_l+0xbf4>)
 800becc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bece:	4013      	ands	r3, r2
 800bed0:	9314      	str	r3, [sp, #80]	; 0x50
 800bed2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bed4:	4b81      	ldr	r3, [pc, #516]	; (800c0dc <_strtod_l+0xbf8>)
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d000      	beq.n	800bedc <_strtod_l+0x9f8>
 800beda:	e0ac      	b.n	800c036 <_strtod_l+0xb52>
 800bedc:	4a80      	ldr	r2, [pc, #512]	; (800c0e0 <_strtod_l+0xbfc>)
 800bede:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bee0:	4694      	mov	ip, r2
 800bee2:	4463      	add	r3, ip
 800bee4:	001f      	movs	r7, r3
 800bee6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bee8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800beea:	0030      	movs	r0, r6
 800beec:	0039      	movs	r1, r7
 800beee:	920c      	str	r2, [sp, #48]	; 0x30
 800bef0:	930d      	str	r3, [sp, #52]	; 0x34
 800bef2:	f002 f8ed 	bl	800e0d0 <__ulp>
 800bef6:	0002      	movs	r2, r0
 800bef8:	000b      	movs	r3, r1
 800befa:	980c      	ldr	r0, [sp, #48]	; 0x30
 800befc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800befe:	f7f6 f985 	bl	800220c <__aeabi_dmul>
 800bf02:	0032      	movs	r2, r6
 800bf04:	003b      	movs	r3, r7
 800bf06:	f7f5 fa43 	bl	8001390 <__aeabi_dadd>
 800bf0a:	4a73      	ldr	r2, [pc, #460]	; (800c0d8 <_strtod_l+0xbf4>)
 800bf0c:	4b75      	ldr	r3, [pc, #468]	; (800c0e4 <_strtod_l+0xc00>)
 800bf0e:	0006      	movs	r6, r0
 800bf10:	400a      	ands	r2, r1
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d95e      	bls.n	800bfd4 <_strtod_l+0xaf0>
 800bf16:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bf18:	4b73      	ldr	r3, [pc, #460]	; (800c0e8 <_strtod_l+0xc04>)
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d103      	bne.n	800bf26 <_strtod_l+0xa42>
 800bf1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bf20:	3301      	adds	r3, #1
 800bf22:	d100      	bne.n	800bf26 <_strtod_l+0xa42>
 800bf24:	e548      	b.n	800b9b8 <_strtod_l+0x4d4>
 800bf26:	2601      	movs	r6, #1
 800bf28:	4f6f      	ldr	r7, [pc, #444]	; (800c0e8 <_strtod_l+0xc04>)
 800bf2a:	4276      	negs	r6, r6
 800bf2c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800bf2e:	9805      	ldr	r0, [sp, #20]
 800bf30:	f001 fd8e 	bl	800da50 <_Bfree>
 800bf34:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf36:	9805      	ldr	r0, [sp, #20]
 800bf38:	f001 fd8a 	bl	800da50 <_Bfree>
 800bf3c:	9907      	ldr	r1, [sp, #28]
 800bf3e:	9805      	ldr	r0, [sp, #20]
 800bf40:	f001 fd86 	bl	800da50 <_Bfree>
 800bf44:	9906      	ldr	r1, [sp, #24]
 800bf46:	9805      	ldr	r0, [sp, #20]
 800bf48:	f001 fd82 	bl	800da50 <_Bfree>
 800bf4c:	e61d      	b.n	800bb8a <_strtod_l+0x6a6>
 800bf4e:	2e00      	cmp	r6, #0
 800bf50:	d11c      	bne.n	800bf8c <_strtod_l+0xaa8>
 800bf52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf54:	031b      	lsls	r3, r3, #12
 800bf56:	d11f      	bne.n	800bf98 <_strtod_l+0xab4>
 800bf58:	2200      	movs	r2, #0
 800bf5a:	0020      	movs	r0, r4
 800bf5c:	0029      	movs	r1, r5
 800bf5e:	4b5d      	ldr	r3, [pc, #372]	; (800c0d4 <_strtod_l+0xbf0>)
 800bf60:	f7f4 fa7a 	bl	8000458 <__aeabi_dcmplt>
 800bf64:	2800      	cmp	r0, #0
 800bf66:	d11a      	bne.n	800bf9e <_strtod_l+0xaba>
 800bf68:	0020      	movs	r0, r4
 800bf6a:	0029      	movs	r1, r5
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	4b5f      	ldr	r3, [pc, #380]	; (800c0ec <_strtod_l+0xc08>)
 800bf70:	f7f6 f94c 	bl	800220c <__aeabi_dmul>
 800bf74:	0005      	movs	r5, r0
 800bf76:	000c      	movs	r4, r1
 800bf78:	2380      	movs	r3, #128	; 0x80
 800bf7a:	061b      	lsls	r3, r3, #24
 800bf7c:	18e3      	adds	r3, r4, r3
 800bf7e:	951c      	str	r5, [sp, #112]	; 0x70
 800bf80:	931d      	str	r3, [sp, #116]	; 0x74
 800bf82:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bf84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bf86:	9210      	str	r2, [sp, #64]	; 0x40
 800bf88:	9311      	str	r3, [sp, #68]	; 0x44
 800bf8a:	e79e      	b.n	800beca <_strtod_l+0x9e6>
 800bf8c:	2e01      	cmp	r6, #1
 800bf8e:	d103      	bne.n	800bf98 <_strtod_l+0xab4>
 800bf90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d100      	bne.n	800bf98 <_strtod_l+0xab4>
 800bf96:	e582      	b.n	800ba9e <_strtod_l+0x5ba>
 800bf98:	2300      	movs	r3, #0
 800bf9a:	4c55      	ldr	r4, [pc, #340]	; (800c0f0 <_strtod_l+0xc0c>)
 800bf9c:	e791      	b.n	800bec2 <_strtod_l+0x9de>
 800bf9e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bfa0:	4c52      	ldr	r4, [pc, #328]	; (800c0ec <_strtod_l+0xc08>)
 800bfa2:	e7e9      	b.n	800bf78 <_strtod_l+0xa94>
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	0020      	movs	r0, r4
 800bfa8:	0029      	movs	r1, r5
 800bfaa:	4b50      	ldr	r3, [pc, #320]	; (800c0ec <_strtod_l+0xc08>)
 800bfac:	f7f6 f92e 	bl	800220c <__aeabi_dmul>
 800bfb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bfb2:	0005      	movs	r5, r0
 800bfb4:	000b      	movs	r3, r1
 800bfb6:	000c      	movs	r4, r1
 800bfb8:	2a00      	cmp	r2, #0
 800bfba:	d107      	bne.n	800bfcc <_strtod_l+0xae8>
 800bfbc:	2280      	movs	r2, #128	; 0x80
 800bfbe:	0612      	lsls	r2, r2, #24
 800bfc0:	188b      	adds	r3, r1, r2
 800bfc2:	9016      	str	r0, [sp, #88]	; 0x58
 800bfc4:	9317      	str	r3, [sp, #92]	; 0x5c
 800bfc6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bfc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bfca:	e7dc      	b.n	800bf86 <_strtod_l+0xaa2>
 800bfcc:	0002      	movs	r2, r0
 800bfce:	9216      	str	r2, [sp, #88]	; 0x58
 800bfd0:	9317      	str	r3, [sp, #92]	; 0x5c
 800bfd2:	e7f8      	b.n	800bfc6 <_strtod_l+0xae2>
 800bfd4:	23d4      	movs	r3, #212	; 0xd4
 800bfd6:	049b      	lsls	r3, r3, #18
 800bfd8:	18cf      	adds	r7, r1, r3
 800bfda:	9b08      	ldr	r3, [sp, #32]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d1a5      	bne.n	800bf2c <_strtod_l+0xa48>
 800bfe0:	4b3d      	ldr	r3, [pc, #244]	; (800c0d8 <_strtod_l+0xbf4>)
 800bfe2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bfe4:	403b      	ands	r3, r7
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d1a0      	bne.n	800bf2c <_strtod_l+0xa48>
 800bfea:	0028      	movs	r0, r5
 800bfec:	0021      	movs	r1, r4
 800bfee:	f7f4 fab3 	bl	8000558 <__aeabi_d2lz>
 800bff2:	f7f4 faed 	bl	80005d0 <__aeabi_l2d>
 800bff6:	0002      	movs	r2, r0
 800bff8:	000b      	movs	r3, r1
 800bffa:	0028      	movs	r0, r5
 800bffc:	0021      	movs	r1, r4
 800bffe:	f7f6 fb71 	bl	80026e4 <__aeabi_dsub>
 800c002:	033b      	lsls	r3, r7, #12
 800c004:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c006:	0b1b      	lsrs	r3, r3, #12
 800c008:	4333      	orrs	r3, r6
 800c00a:	4313      	orrs	r3, r2
 800c00c:	0004      	movs	r4, r0
 800c00e:	000d      	movs	r5, r1
 800c010:	4a38      	ldr	r2, [pc, #224]	; (800c0f4 <_strtod_l+0xc10>)
 800c012:	2b00      	cmp	r3, #0
 800c014:	d055      	beq.n	800c0c2 <_strtod_l+0xbde>
 800c016:	4b38      	ldr	r3, [pc, #224]	; (800c0f8 <_strtod_l+0xc14>)
 800c018:	f7f4 fa1e 	bl	8000458 <__aeabi_dcmplt>
 800c01c:	2800      	cmp	r0, #0
 800c01e:	d000      	beq.n	800c022 <_strtod_l+0xb3e>
 800c020:	e4d3      	b.n	800b9ca <_strtod_l+0x4e6>
 800c022:	0020      	movs	r0, r4
 800c024:	0029      	movs	r1, r5
 800c026:	4a35      	ldr	r2, [pc, #212]	; (800c0fc <_strtod_l+0xc18>)
 800c028:	4b30      	ldr	r3, [pc, #192]	; (800c0ec <_strtod_l+0xc08>)
 800c02a:	f7f4 fa29 	bl	8000480 <__aeabi_dcmpgt>
 800c02e:	2800      	cmp	r0, #0
 800c030:	d100      	bne.n	800c034 <_strtod_l+0xb50>
 800c032:	e77b      	b.n	800bf2c <_strtod_l+0xa48>
 800c034:	e4c9      	b.n	800b9ca <_strtod_l+0x4e6>
 800c036:	9b08      	ldr	r3, [sp, #32]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d02b      	beq.n	800c094 <_strtod_l+0xbb0>
 800c03c:	23d4      	movs	r3, #212	; 0xd4
 800c03e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c040:	04db      	lsls	r3, r3, #19
 800c042:	429a      	cmp	r2, r3
 800c044:	d826      	bhi.n	800c094 <_strtod_l+0xbb0>
 800c046:	0028      	movs	r0, r5
 800c048:	0021      	movs	r1, r4
 800c04a:	4a2d      	ldr	r2, [pc, #180]	; (800c100 <_strtod_l+0xc1c>)
 800c04c:	4b2d      	ldr	r3, [pc, #180]	; (800c104 <_strtod_l+0xc20>)
 800c04e:	f7f4 fa0d 	bl	800046c <__aeabi_dcmple>
 800c052:	2800      	cmp	r0, #0
 800c054:	d017      	beq.n	800c086 <_strtod_l+0xba2>
 800c056:	0028      	movs	r0, r5
 800c058:	0021      	movs	r1, r4
 800c05a:	f7f4 fa5f 	bl	800051c <__aeabi_d2uiz>
 800c05e:	2800      	cmp	r0, #0
 800c060:	d100      	bne.n	800c064 <_strtod_l+0xb80>
 800c062:	3001      	adds	r0, #1
 800c064:	f7f6 ff54 	bl	8002f10 <__aeabi_ui2d>
 800c068:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c06a:	0005      	movs	r5, r0
 800c06c:	000b      	movs	r3, r1
 800c06e:	000c      	movs	r4, r1
 800c070:	2a00      	cmp	r2, #0
 800c072:	d122      	bne.n	800c0ba <_strtod_l+0xbd6>
 800c074:	2280      	movs	r2, #128	; 0x80
 800c076:	0612      	lsls	r2, r2, #24
 800c078:	188b      	adds	r3, r1, r2
 800c07a:	9018      	str	r0, [sp, #96]	; 0x60
 800c07c:	9319      	str	r3, [sp, #100]	; 0x64
 800c07e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c080:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c082:	9210      	str	r2, [sp, #64]	; 0x40
 800c084:	9311      	str	r3, [sp, #68]	; 0x44
 800c086:	22d6      	movs	r2, #214	; 0xd6
 800c088:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c08a:	04d2      	lsls	r2, r2, #19
 800c08c:	189b      	adds	r3, r3, r2
 800c08e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c090:	1a9b      	subs	r3, r3, r2
 800c092:	9311      	str	r3, [sp, #68]	; 0x44
 800c094:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c096:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c098:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800c09a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800c09c:	f002 f818 	bl	800e0d0 <__ulp>
 800c0a0:	0002      	movs	r2, r0
 800c0a2:	000b      	movs	r3, r1
 800c0a4:	0030      	movs	r0, r6
 800c0a6:	0039      	movs	r1, r7
 800c0a8:	f7f6 f8b0 	bl	800220c <__aeabi_dmul>
 800c0ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c0ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c0b0:	f7f5 f96e 	bl	8001390 <__aeabi_dadd>
 800c0b4:	0006      	movs	r6, r0
 800c0b6:	000f      	movs	r7, r1
 800c0b8:	e78f      	b.n	800bfda <_strtod_l+0xaf6>
 800c0ba:	0002      	movs	r2, r0
 800c0bc:	9218      	str	r2, [sp, #96]	; 0x60
 800c0be:	9319      	str	r3, [sp, #100]	; 0x64
 800c0c0:	e7dd      	b.n	800c07e <_strtod_l+0xb9a>
 800c0c2:	4b11      	ldr	r3, [pc, #68]	; (800c108 <_strtod_l+0xc24>)
 800c0c4:	f7f4 f9c8 	bl	8000458 <__aeabi_dcmplt>
 800c0c8:	e7b1      	b.n	800c02e <_strtod_l+0xb4a>
 800c0ca:	46c0      	nop			; (mov r8, r8)
 800c0cc:	fff00000 	.word	0xfff00000
 800c0d0:	000fffff 	.word	0x000fffff
 800c0d4:	3ff00000 	.word	0x3ff00000
 800c0d8:	7ff00000 	.word	0x7ff00000
 800c0dc:	7fe00000 	.word	0x7fe00000
 800c0e0:	fcb00000 	.word	0xfcb00000
 800c0e4:	7c9fffff 	.word	0x7c9fffff
 800c0e8:	7fefffff 	.word	0x7fefffff
 800c0ec:	3fe00000 	.word	0x3fe00000
 800c0f0:	bff00000 	.word	0xbff00000
 800c0f4:	94a03595 	.word	0x94a03595
 800c0f8:	3fdfffff 	.word	0x3fdfffff
 800c0fc:	35afe535 	.word	0x35afe535
 800c100:	ffc00000 	.word	0xffc00000
 800c104:	41dfffff 	.word	0x41dfffff
 800c108:	3fcfffff 	.word	0x3fcfffff

0800c10c <strtod>:
 800c10c:	b510      	push	{r4, lr}
 800c10e:	000a      	movs	r2, r1
 800c110:	0001      	movs	r1, r0
 800c112:	4803      	ldr	r0, [pc, #12]	; (800c120 <strtod+0x14>)
 800c114:	4b03      	ldr	r3, [pc, #12]	; (800c124 <strtod+0x18>)
 800c116:	6800      	ldr	r0, [r0, #0]
 800c118:	f7ff f9e4 	bl	800b4e4 <_strtod_l>
 800c11c:	bd10      	pop	{r4, pc}
 800c11e:	46c0      	nop			; (mov r8, r8)
 800c120:	2000005c 	.word	0x2000005c
 800c124:	200000c4 	.word	0x200000c4

0800c128 <_strtol_l.constprop.0>:
 800c128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c12a:	b087      	sub	sp, #28
 800c12c:	001e      	movs	r6, r3
 800c12e:	9005      	str	r0, [sp, #20]
 800c130:	9101      	str	r1, [sp, #4]
 800c132:	9202      	str	r2, [sp, #8]
 800c134:	2b01      	cmp	r3, #1
 800c136:	d045      	beq.n	800c1c4 <_strtol_l.constprop.0+0x9c>
 800c138:	000b      	movs	r3, r1
 800c13a:	2e24      	cmp	r6, #36	; 0x24
 800c13c:	d842      	bhi.n	800c1c4 <_strtol_l.constprop.0+0x9c>
 800c13e:	4a3f      	ldr	r2, [pc, #252]	; (800c23c <_strtol_l.constprop.0+0x114>)
 800c140:	2108      	movs	r1, #8
 800c142:	4694      	mov	ip, r2
 800c144:	001a      	movs	r2, r3
 800c146:	4660      	mov	r0, ip
 800c148:	7814      	ldrb	r4, [r2, #0]
 800c14a:	3301      	adds	r3, #1
 800c14c:	5d00      	ldrb	r0, [r0, r4]
 800c14e:	001d      	movs	r5, r3
 800c150:	0007      	movs	r7, r0
 800c152:	400f      	ands	r7, r1
 800c154:	4208      	tst	r0, r1
 800c156:	d1f5      	bne.n	800c144 <_strtol_l.constprop.0+0x1c>
 800c158:	2c2d      	cmp	r4, #45	; 0x2d
 800c15a:	d13a      	bne.n	800c1d2 <_strtol_l.constprop.0+0xaa>
 800c15c:	2701      	movs	r7, #1
 800c15e:	781c      	ldrb	r4, [r3, #0]
 800c160:	1c95      	adds	r5, r2, #2
 800c162:	2e00      	cmp	r6, #0
 800c164:	d065      	beq.n	800c232 <_strtol_l.constprop.0+0x10a>
 800c166:	2e10      	cmp	r6, #16
 800c168:	d109      	bne.n	800c17e <_strtol_l.constprop.0+0x56>
 800c16a:	2c30      	cmp	r4, #48	; 0x30
 800c16c:	d107      	bne.n	800c17e <_strtol_l.constprop.0+0x56>
 800c16e:	2220      	movs	r2, #32
 800c170:	782b      	ldrb	r3, [r5, #0]
 800c172:	4393      	bics	r3, r2
 800c174:	2b58      	cmp	r3, #88	; 0x58
 800c176:	d157      	bne.n	800c228 <_strtol_l.constprop.0+0x100>
 800c178:	2610      	movs	r6, #16
 800c17a:	786c      	ldrb	r4, [r5, #1]
 800c17c:	3502      	adds	r5, #2
 800c17e:	4b30      	ldr	r3, [pc, #192]	; (800c240 <_strtol_l.constprop.0+0x118>)
 800c180:	0031      	movs	r1, r6
 800c182:	18fb      	adds	r3, r7, r3
 800c184:	0018      	movs	r0, r3
 800c186:	9303      	str	r3, [sp, #12]
 800c188:	f7f4 f860 	bl	800024c <__aeabi_uidivmod>
 800c18c:	2300      	movs	r3, #0
 800c18e:	2201      	movs	r2, #1
 800c190:	4684      	mov	ip, r0
 800c192:	0018      	movs	r0, r3
 800c194:	9104      	str	r1, [sp, #16]
 800c196:	4252      	negs	r2, r2
 800c198:	0021      	movs	r1, r4
 800c19a:	3930      	subs	r1, #48	; 0x30
 800c19c:	2909      	cmp	r1, #9
 800c19e:	d81d      	bhi.n	800c1dc <_strtol_l.constprop.0+0xb4>
 800c1a0:	000c      	movs	r4, r1
 800c1a2:	42a6      	cmp	r6, r4
 800c1a4:	dd28      	ble.n	800c1f8 <_strtol_l.constprop.0+0xd0>
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	db24      	blt.n	800c1f4 <_strtol_l.constprop.0+0xcc>
 800c1aa:	0013      	movs	r3, r2
 800c1ac:	4584      	cmp	ip, r0
 800c1ae:	d306      	bcc.n	800c1be <_strtol_l.constprop.0+0x96>
 800c1b0:	d102      	bne.n	800c1b8 <_strtol_l.constprop.0+0x90>
 800c1b2:	9904      	ldr	r1, [sp, #16]
 800c1b4:	42a1      	cmp	r1, r4
 800c1b6:	db02      	blt.n	800c1be <_strtol_l.constprop.0+0x96>
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	4370      	muls	r0, r6
 800c1bc:	1820      	adds	r0, r4, r0
 800c1be:	782c      	ldrb	r4, [r5, #0]
 800c1c0:	3501      	adds	r5, #1
 800c1c2:	e7e9      	b.n	800c198 <_strtol_l.constprop.0+0x70>
 800c1c4:	f7fe fa36 	bl	800a634 <__errno>
 800c1c8:	2316      	movs	r3, #22
 800c1ca:	6003      	str	r3, [r0, #0]
 800c1cc:	2000      	movs	r0, #0
 800c1ce:	b007      	add	sp, #28
 800c1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1d2:	2c2b      	cmp	r4, #43	; 0x2b
 800c1d4:	d1c5      	bne.n	800c162 <_strtol_l.constprop.0+0x3a>
 800c1d6:	781c      	ldrb	r4, [r3, #0]
 800c1d8:	1c95      	adds	r5, r2, #2
 800c1da:	e7c2      	b.n	800c162 <_strtol_l.constprop.0+0x3a>
 800c1dc:	0021      	movs	r1, r4
 800c1de:	3941      	subs	r1, #65	; 0x41
 800c1e0:	2919      	cmp	r1, #25
 800c1e2:	d801      	bhi.n	800c1e8 <_strtol_l.constprop.0+0xc0>
 800c1e4:	3c37      	subs	r4, #55	; 0x37
 800c1e6:	e7dc      	b.n	800c1a2 <_strtol_l.constprop.0+0x7a>
 800c1e8:	0021      	movs	r1, r4
 800c1ea:	3961      	subs	r1, #97	; 0x61
 800c1ec:	2919      	cmp	r1, #25
 800c1ee:	d803      	bhi.n	800c1f8 <_strtol_l.constprop.0+0xd0>
 800c1f0:	3c57      	subs	r4, #87	; 0x57
 800c1f2:	e7d6      	b.n	800c1a2 <_strtol_l.constprop.0+0x7a>
 800c1f4:	0013      	movs	r3, r2
 800c1f6:	e7e2      	b.n	800c1be <_strtol_l.constprop.0+0x96>
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	da09      	bge.n	800c210 <_strtol_l.constprop.0+0xe8>
 800c1fc:	2322      	movs	r3, #34	; 0x22
 800c1fe:	9a05      	ldr	r2, [sp, #20]
 800c200:	9803      	ldr	r0, [sp, #12]
 800c202:	6013      	str	r3, [r2, #0]
 800c204:	9b02      	ldr	r3, [sp, #8]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d0e1      	beq.n	800c1ce <_strtol_l.constprop.0+0xa6>
 800c20a:	1e6b      	subs	r3, r5, #1
 800c20c:	9301      	str	r3, [sp, #4]
 800c20e:	e007      	b.n	800c220 <_strtol_l.constprop.0+0xf8>
 800c210:	2f00      	cmp	r7, #0
 800c212:	d000      	beq.n	800c216 <_strtol_l.constprop.0+0xee>
 800c214:	4240      	negs	r0, r0
 800c216:	9a02      	ldr	r2, [sp, #8]
 800c218:	2a00      	cmp	r2, #0
 800c21a:	d0d8      	beq.n	800c1ce <_strtol_l.constprop.0+0xa6>
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d1f4      	bne.n	800c20a <_strtol_l.constprop.0+0xe2>
 800c220:	9b02      	ldr	r3, [sp, #8]
 800c222:	9a01      	ldr	r2, [sp, #4]
 800c224:	601a      	str	r2, [r3, #0]
 800c226:	e7d2      	b.n	800c1ce <_strtol_l.constprop.0+0xa6>
 800c228:	2430      	movs	r4, #48	; 0x30
 800c22a:	2e00      	cmp	r6, #0
 800c22c:	d1a7      	bne.n	800c17e <_strtol_l.constprop.0+0x56>
 800c22e:	3608      	adds	r6, #8
 800c230:	e7a5      	b.n	800c17e <_strtol_l.constprop.0+0x56>
 800c232:	2c30      	cmp	r4, #48	; 0x30
 800c234:	d09b      	beq.n	800c16e <_strtol_l.constprop.0+0x46>
 800c236:	260a      	movs	r6, #10
 800c238:	e7a1      	b.n	800c17e <_strtol_l.constprop.0+0x56>
 800c23a:	46c0      	nop			; (mov r8, r8)
 800c23c:	0800f749 	.word	0x0800f749
 800c240:	7fffffff 	.word	0x7fffffff

0800c244 <strtol>:
 800c244:	b510      	push	{r4, lr}
 800c246:	0013      	movs	r3, r2
 800c248:	000a      	movs	r2, r1
 800c24a:	0001      	movs	r1, r0
 800c24c:	4802      	ldr	r0, [pc, #8]	; (800c258 <strtol+0x14>)
 800c24e:	6800      	ldr	r0, [r0, #0]
 800c250:	f7ff ff6a 	bl	800c128 <_strtol_l.constprop.0>
 800c254:	bd10      	pop	{r4, pc}
 800c256:	46c0      	nop			; (mov r8, r8)
 800c258:	2000005c 	.word	0x2000005c

0800c25c <_vsniprintf_r>:
 800c25c:	b530      	push	{r4, r5, lr}
 800c25e:	0014      	movs	r4, r2
 800c260:	0005      	movs	r5, r0
 800c262:	001a      	movs	r2, r3
 800c264:	b09b      	sub	sp, #108	; 0x6c
 800c266:	2c00      	cmp	r4, #0
 800c268:	da05      	bge.n	800c276 <_vsniprintf_r+0x1a>
 800c26a:	238b      	movs	r3, #139	; 0x8b
 800c26c:	6003      	str	r3, [r0, #0]
 800c26e:	2001      	movs	r0, #1
 800c270:	4240      	negs	r0, r0
 800c272:	b01b      	add	sp, #108	; 0x6c
 800c274:	bd30      	pop	{r4, r5, pc}
 800c276:	2382      	movs	r3, #130	; 0x82
 800c278:	4668      	mov	r0, sp
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	8183      	strh	r3, [r0, #12]
 800c27e:	2300      	movs	r3, #0
 800c280:	9100      	str	r1, [sp, #0]
 800c282:	9104      	str	r1, [sp, #16]
 800c284:	429c      	cmp	r4, r3
 800c286:	d000      	beq.n	800c28a <_vsniprintf_r+0x2e>
 800c288:	1e63      	subs	r3, r4, #1
 800c28a:	9302      	str	r3, [sp, #8]
 800c28c:	9305      	str	r3, [sp, #20]
 800c28e:	2301      	movs	r3, #1
 800c290:	4669      	mov	r1, sp
 800c292:	425b      	negs	r3, r3
 800c294:	81cb      	strh	r3, [r1, #14]
 800c296:	0028      	movs	r0, r5
 800c298:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c29a:	f002 f937 	bl	800e50c <_svfiprintf_r>
 800c29e:	1c43      	adds	r3, r0, #1
 800c2a0:	da01      	bge.n	800c2a6 <_vsniprintf_r+0x4a>
 800c2a2:	238b      	movs	r3, #139	; 0x8b
 800c2a4:	602b      	str	r3, [r5, #0]
 800c2a6:	2c00      	cmp	r4, #0
 800c2a8:	d0e3      	beq.n	800c272 <_vsniprintf_r+0x16>
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	9a00      	ldr	r2, [sp, #0]
 800c2ae:	7013      	strb	r3, [r2, #0]
 800c2b0:	e7df      	b.n	800c272 <_vsniprintf_r+0x16>
	...

0800c2b4 <vsniprintf>:
 800c2b4:	b507      	push	{r0, r1, r2, lr}
 800c2b6:	9300      	str	r3, [sp, #0]
 800c2b8:	0013      	movs	r3, r2
 800c2ba:	000a      	movs	r2, r1
 800c2bc:	0001      	movs	r1, r0
 800c2be:	4802      	ldr	r0, [pc, #8]	; (800c2c8 <vsniprintf+0x14>)
 800c2c0:	6800      	ldr	r0, [r0, #0]
 800c2c2:	f7ff ffcb 	bl	800c25c <_vsniprintf_r>
 800c2c6:	bd0e      	pop	{r1, r2, r3, pc}
 800c2c8:	2000005c 	.word	0x2000005c

0800c2cc <_vsiprintf_r>:
 800c2cc:	b500      	push	{lr}
 800c2ce:	b09b      	sub	sp, #108	; 0x6c
 800c2d0:	9100      	str	r1, [sp, #0]
 800c2d2:	9104      	str	r1, [sp, #16]
 800c2d4:	4906      	ldr	r1, [pc, #24]	; (800c2f0 <_vsiprintf_r+0x24>)
 800c2d6:	9105      	str	r1, [sp, #20]
 800c2d8:	9102      	str	r1, [sp, #8]
 800c2da:	4906      	ldr	r1, [pc, #24]	; (800c2f4 <_vsiprintf_r+0x28>)
 800c2dc:	9103      	str	r1, [sp, #12]
 800c2de:	4669      	mov	r1, sp
 800c2e0:	f002 f914 	bl	800e50c <_svfiprintf_r>
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	9a00      	ldr	r2, [sp, #0]
 800c2e8:	7013      	strb	r3, [r2, #0]
 800c2ea:	b01b      	add	sp, #108	; 0x6c
 800c2ec:	bd00      	pop	{pc}
 800c2ee:	46c0      	nop			; (mov r8, r8)
 800c2f0:	7fffffff 	.word	0x7fffffff
 800c2f4:	ffff0208 	.word	0xffff0208

0800c2f8 <vsiprintf>:
 800c2f8:	b510      	push	{r4, lr}
 800c2fa:	0013      	movs	r3, r2
 800c2fc:	000a      	movs	r2, r1
 800c2fe:	0001      	movs	r1, r0
 800c300:	4802      	ldr	r0, [pc, #8]	; (800c30c <vsiprintf+0x14>)
 800c302:	6800      	ldr	r0, [r0, #0]
 800c304:	f7ff ffe2 	bl	800c2cc <_vsiprintf_r>
 800c308:	bd10      	pop	{r4, pc}
 800c30a:	46c0      	nop			; (mov r8, r8)
 800c30c:	2000005c 	.word	0x2000005c

0800c310 <_write_r>:
 800c310:	b570      	push	{r4, r5, r6, lr}
 800c312:	0004      	movs	r4, r0
 800c314:	0008      	movs	r0, r1
 800c316:	0011      	movs	r1, r2
 800c318:	001a      	movs	r2, r3
 800c31a:	2300      	movs	r3, #0
 800c31c:	4d05      	ldr	r5, [pc, #20]	; (800c334 <_write_r+0x24>)
 800c31e:	602b      	str	r3, [r5, #0]
 800c320:	f7f8 f911 	bl	8004546 <_write>
 800c324:	1c43      	adds	r3, r0, #1
 800c326:	d103      	bne.n	800c330 <_write_r+0x20>
 800c328:	682b      	ldr	r3, [r5, #0]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d000      	beq.n	800c330 <_write_r+0x20>
 800c32e:	6023      	str	r3, [r4, #0]
 800c330:	bd70      	pop	{r4, r5, r6, pc}
 800c332:	46c0      	nop			; (mov r8, r8)
 800c334:	20001748 	.word	0x20001748

0800c338 <_close_r>:
 800c338:	2300      	movs	r3, #0
 800c33a:	b570      	push	{r4, r5, r6, lr}
 800c33c:	4d06      	ldr	r5, [pc, #24]	; (800c358 <_close_r+0x20>)
 800c33e:	0004      	movs	r4, r0
 800c340:	0008      	movs	r0, r1
 800c342:	602b      	str	r3, [r5, #0]
 800c344:	f7f8 f91b 	bl	800457e <_close>
 800c348:	1c43      	adds	r3, r0, #1
 800c34a:	d103      	bne.n	800c354 <_close_r+0x1c>
 800c34c:	682b      	ldr	r3, [r5, #0]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d000      	beq.n	800c354 <_close_r+0x1c>
 800c352:	6023      	str	r3, [r4, #0]
 800c354:	bd70      	pop	{r4, r5, r6, pc}
 800c356:	46c0      	nop			; (mov r8, r8)
 800c358:	20001748 	.word	0x20001748

0800c35c <quorem>:
 800c35c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c35e:	0006      	movs	r6, r0
 800c360:	690b      	ldr	r3, [r1, #16]
 800c362:	6932      	ldr	r2, [r6, #16]
 800c364:	b087      	sub	sp, #28
 800c366:	2000      	movs	r0, #0
 800c368:	9103      	str	r1, [sp, #12]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	db65      	blt.n	800c43a <quorem+0xde>
 800c36e:	3b01      	subs	r3, #1
 800c370:	009c      	lsls	r4, r3, #2
 800c372:	9300      	str	r3, [sp, #0]
 800c374:	000b      	movs	r3, r1
 800c376:	3314      	adds	r3, #20
 800c378:	9305      	str	r3, [sp, #20]
 800c37a:	191b      	adds	r3, r3, r4
 800c37c:	9304      	str	r3, [sp, #16]
 800c37e:	0033      	movs	r3, r6
 800c380:	3314      	adds	r3, #20
 800c382:	9302      	str	r3, [sp, #8]
 800c384:	191c      	adds	r4, r3, r4
 800c386:	9b04      	ldr	r3, [sp, #16]
 800c388:	6827      	ldr	r7, [r4, #0]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	0038      	movs	r0, r7
 800c38e:	1c5d      	adds	r5, r3, #1
 800c390:	0029      	movs	r1, r5
 800c392:	9301      	str	r3, [sp, #4]
 800c394:	f7f3 fed4 	bl	8000140 <__udivsi3>
 800c398:	9001      	str	r0, [sp, #4]
 800c39a:	42af      	cmp	r7, r5
 800c39c:	d324      	bcc.n	800c3e8 <quorem+0x8c>
 800c39e:	2500      	movs	r5, #0
 800c3a0:	46ac      	mov	ip, r5
 800c3a2:	9802      	ldr	r0, [sp, #8]
 800c3a4:	9f05      	ldr	r7, [sp, #20]
 800c3a6:	cf08      	ldmia	r7!, {r3}
 800c3a8:	9a01      	ldr	r2, [sp, #4]
 800c3aa:	b299      	uxth	r1, r3
 800c3ac:	4351      	muls	r1, r2
 800c3ae:	0c1b      	lsrs	r3, r3, #16
 800c3b0:	4353      	muls	r3, r2
 800c3b2:	1949      	adds	r1, r1, r5
 800c3b4:	0c0a      	lsrs	r2, r1, #16
 800c3b6:	189b      	adds	r3, r3, r2
 800c3b8:	6802      	ldr	r2, [r0, #0]
 800c3ba:	b289      	uxth	r1, r1
 800c3bc:	b292      	uxth	r2, r2
 800c3be:	4462      	add	r2, ip
 800c3c0:	1a52      	subs	r2, r2, r1
 800c3c2:	6801      	ldr	r1, [r0, #0]
 800c3c4:	0c1d      	lsrs	r5, r3, #16
 800c3c6:	0c09      	lsrs	r1, r1, #16
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	1acb      	subs	r3, r1, r3
 800c3cc:	1411      	asrs	r1, r2, #16
 800c3ce:	185b      	adds	r3, r3, r1
 800c3d0:	1419      	asrs	r1, r3, #16
 800c3d2:	b292      	uxth	r2, r2
 800c3d4:	041b      	lsls	r3, r3, #16
 800c3d6:	431a      	orrs	r2, r3
 800c3d8:	9b04      	ldr	r3, [sp, #16]
 800c3da:	468c      	mov	ip, r1
 800c3dc:	c004      	stmia	r0!, {r2}
 800c3de:	42bb      	cmp	r3, r7
 800c3e0:	d2e1      	bcs.n	800c3a6 <quorem+0x4a>
 800c3e2:	6823      	ldr	r3, [r4, #0]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d030      	beq.n	800c44a <quorem+0xee>
 800c3e8:	0030      	movs	r0, r6
 800c3ea:	9903      	ldr	r1, [sp, #12]
 800c3ec:	f001 fdbc 	bl	800df68 <__mcmp>
 800c3f0:	2800      	cmp	r0, #0
 800c3f2:	db21      	blt.n	800c438 <quorem+0xdc>
 800c3f4:	0030      	movs	r0, r6
 800c3f6:	2400      	movs	r4, #0
 800c3f8:	9b01      	ldr	r3, [sp, #4]
 800c3fa:	9903      	ldr	r1, [sp, #12]
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	9301      	str	r3, [sp, #4]
 800c400:	3014      	adds	r0, #20
 800c402:	3114      	adds	r1, #20
 800c404:	6803      	ldr	r3, [r0, #0]
 800c406:	c920      	ldmia	r1!, {r5}
 800c408:	b29a      	uxth	r2, r3
 800c40a:	1914      	adds	r4, r2, r4
 800c40c:	b2aa      	uxth	r2, r5
 800c40e:	1aa2      	subs	r2, r4, r2
 800c410:	0c1b      	lsrs	r3, r3, #16
 800c412:	0c2d      	lsrs	r5, r5, #16
 800c414:	1414      	asrs	r4, r2, #16
 800c416:	1b5b      	subs	r3, r3, r5
 800c418:	191b      	adds	r3, r3, r4
 800c41a:	141c      	asrs	r4, r3, #16
 800c41c:	b292      	uxth	r2, r2
 800c41e:	041b      	lsls	r3, r3, #16
 800c420:	4313      	orrs	r3, r2
 800c422:	c008      	stmia	r0!, {r3}
 800c424:	9b04      	ldr	r3, [sp, #16]
 800c426:	428b      	cmp	r3, r1
 800c428:	d2ec      	bcs.n	800c404 <quorem+0xa8>
 800c42a:	9b00      	ldr	r3, [sp, #0]
 800c42c:	9a02      	ldr	r2, [sp, #8]
 800c42e:	009b      	lsls	r3, r3, #2
 800c430:	18d3      	adds	r3, r2, r3
 800c432:	681a      	ldr	r2, [r3, #0]
 800c434:	2a00      	cmp	r2, #0
 800c436:	d015      	beq.n	800c464 <quorem+0x108>
 800c438:	9801      	ldr	r0, [sp, #4]
 800c43a:	b007      	add	sp, #28
 800c43c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c43e:	6823      	ldr	r3, [r4, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d106      	bne.n	800c452 <quorem+0xf6>
 800c444:	9b00      	ldr	r3, [sp, #0]
 800c446:	3b01      	subs	r3, #1
 800c448:	9300      	str	r3, [sp, #0]
 800c44a:	9b02      	ldr	r3, [sp, #8]
 800c44c:	3c04      	subs	r4, #4
 800c44e:	42a3      	cmp	r3, r4
 800c450:	d3f5      	bcc.n	800c43e <quorem+0xe2>
 800c452:	9b00      	ldr	r3, [sp, #0]
 800c454:	6133      	str	r3, [r6, #16]
 800c456:	e7c7      	b.n	800c3e8 <quorem+0x8c>
 800c458:	681a      	ldr	r2, [r3, #0]
 800c45a:	2a00      	cmp	r2, #0
 800c45c:	d106      	bne.n	800c46c <quorem+0x110>
 800c45e:	9a00      	ldr	r2, [sp, #0]
 800c460:	3a01      	subs	r2, #1
 800c462:	9200      	str	r2, [sp, #0]
 800c464:	9a02      	ldr	r2, [sp, #8]
 800c466:	3b04      	subs	r3, #4
 800c468:	429a      	cmp	r2, r3
 800c46a:	d3f5      	bcc.n	800c458 <quorem+0xfc>
 800c46c:	9b00      	ldr	r3, [sp, #0]
 800c46e:	6133      	str	r3, [r6, #16]
 800c470:	e7e2      	b.n	800c438 <quorem+0xdc>
	...

0800c474 <_dtoa_r>:
 800c474:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c476:	b09d      	sub	sp, #116	; 0x74
 800c478:	9202      	str	r2, [sp, #8]
 800c47a:	9303      	str	r3, [sp, #12]
 800c47c:	9b02      	ldr	r3, [sp, #8]
 800c47e:	9c03      	ldr	r4, [sp, #12]
 800c480:	9308      	str	r3, [sp, #32]
 800c482:	9409      	str	r4, [sp, #36]	; 0x24
 800c484:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c486:	0007      	movs	r7, r0
 800c488:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800c48a:	2c00      	cmp	r4, #0
 800c48c:	d10e      	bne.n	800c4ac <_dtoa_r+0x38>
 800c48e:	2010      	movs	r0, #16
 800c490:	f001 fa62 	bl	800d958 <malloc>
 800c494:	1e02      	subs	r2, r0, #0
 800c496:	6278      	str	r0, [r7, #36]	; 0x24
 800c498:	d104      	bne.n	800c4a4 <_dtoa_r+0x30>
 800c49a:	21ea      	movs	r1, #234	; 0xea
 800c49c:	4bc7      	ldr	r3, [pc, #796]	; (800c7bc <_dtoa_r+0x348>)
 800c49e:	48c8      	ldr	r0, [pc, #800]	; (800c7c0 <_dtoa_r+0x34c>)
 800c4a0:	f002 f96e 	bl	800e780 <__assert_func>
 800c4a4:	6044      	str	r4, [r0, #4]
 800c4a6:	6084      	str	r4, [r0, #8]
 800c4a8:	6004      	str	r4, [r0, #0]
 800c4aa:	60c4      	str	r4, [r0, #12]
 800c4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ae:	6819      	ldr	r1, [r3, #0]
 800c4b0:	2900      	cmp	r1, #0
 800c4b2:	d00a      	beq.n	800c4ca <_dtoa_r+0x56>
 800c4b4:	685a      	ldr	r2, [r3, #4]
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	4093      	lsls	r3, r2
 800c4ba:	604a      	str	r2, [r1, #4]
 800c4bc:	608b      	str	r3, [r1, #8]
 800c4be:	0038      	movs	r0, r7
 800c4c0:	f001 fac6 	bl	800da50 <_Bfree>
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c8:	601a      	str	r2, [r3, #0]
 800c4ca:	9b03      	ldr	r3, [sp, #12]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	da20      	bge.n	800c512 <_dtoa_r+0x9e>
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	602b      	str	r3, [r5, #0]
 800c4d4:	9b03      	ldr	r3, [sp, #12]
 800c4d6:	005b      	lsls	r3, r3, #1
 800c4d8:	085b      	lsrs	r3, r3, #1
 800c4da:	9309      	str	r3, [sp, #36]	; 0x24
 800c4dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c4de:	4bb9      	ldr	r3, [pc, #740]	; (800c7c4 <_dtoa_r+0x350>)
 800c4e0:	4ab8      	ldr	r2, [pc, #736]	; (800c7c4 <_dtoa_r+0x350>)
 800c4e2:	402b      	ands	r3, r5
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d117      	bne.n	800c518 <_dtoa_r+0xa4>
 800c4e8:	4bb7      	ldr	r3, [pc, #732]	; (800c7c8 <_dtoa_r+0x354>)
 800c4ea:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c4ec:	0328      	lsls	r0, r5, #12
 800c4ee:	6013      	str	r3, [r2, #0]
 800c4f0:	9b02      	ldr	r3, [sp, #8]
 800c4f2:	0b00      	lsrs	r0, r0, #12
 800c4f4:	4318      	orrs	r0, r3
 800c4f6:	d101      	bne.n	800c4fc <_dtoa_r+0x88>
 800c4f8:	f000 fdbf 	bl	800d07a <_dtoa_r+0xc06>
 800c4fc:	48b3      	ldr	r0, [pc, #716]	; (800c7cc <_dtoa_r+0x358>)
 800c4fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c500:	9006      	str	r0, [sp, #24]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d002      	beq.n	800c50c <_dtoa_r+0x98>
 800c506:	4bb2      	ldr	r3, [pc, #712]	; (800c7d0 <_dtoa_r+0x35c>)
 800c508:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c50a:	6013      	str	r3, [r2, #0]
 800c50c:	9806      	ldr	r0, [sp, #24]
 800c50e:	b01d      	add	sp, #116	; 0x74
 800c510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c512:	2300      	movs	r3, #0
 800c514:	602b      	str	r3, [r5, #0]
 800c516:	e7e1      	b.n	800c4dc <_dtoa_r+0x68>
 800c518:	9b08      	ldr	r3, [sp, #32]
 800c51a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c51c:	9312      	str	r3, [sp, #72]	; 0x48
 800c51e:	9413      	str	r4, [sp, #76]	; 0x4c
 800c520:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c522:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c524:	2200      	movs	r2, #0
 800c526:	2300      	movs	r3, #0
 800c528:	f7f3 ff90 	bl	800044c <__aeabi_dcmpeq>
 800c52c:	1e04      	subs	r4, r0, #0
 800c52e:	d009      	beq.n	800c544 <_dtoa_r+0xd0>
 800c530:	2301      	movs	r3, #1
 800c532:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c534:	6013      	str	r3, [r2, #0]
 800c536:	4ba7      	ldr	r3, [pc, #668]	; (800c7d4 <_dtoa_r+0x360>)
 800c538:	9306      	str	r3, [sp, #24]
 800c53a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d0e5      	beq.n	800c50c <_dtoa_r+0x98>
 800c540:	4ba5      	ldr	r3, [pc, #660]	; (800c7d8 <_dtoa_r+0x364>)
 800c542:	e7e1      	b.n	800c508 <_dtoa_r+0x94>
 800c544:	ab1a      	add	r3, sp, #104	; 0x68
 800c546:	9301      	str	r3, [sp, #4]
 800c548:	ab1b      	add	r3, sp, #108	; 0x6c
 800c54a:	9300      	str	r3, [sp, #0]
 800c54c:	0038      	movs	r0, r7
 800c54e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c550:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c552:	f001 fe31 	bl	800e1b8 <__d2b>
 800c556:	006e      	lsls	r6, r5, #1
 800c558:	9005      	str	r0, [sp, #20]
 800c55a:	0d76      	lsrs	r6, r6, #21
 800c55c:	d100      	bne.n	800c560 <_dtoa_r+0xec>
 800c55e:	e07c      	b.n	800c65a <_dtoa_r+0x1e6>
 800c560:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c562:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c564:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c566:	4a9d      	ldr	r2, [pc, #628]	; (800c7dc <_dtoa_r+0x368>)
 800c568:	031b      	lsls	r3, r3, #12
 800c56a:	0b1b      	lsrs	r3, r3, #12
 800c56c:	431a      	orrs	r2, r3
 800c56e:	0011      	movs	r1, r2
 800c570:	4b9b      	ldr	r3, [pc, #620]	; (800c7e0 <_dtoa_r+0x36c>)
 800c572:	9418      	str	r4, [sp, #96]	; 0x60
 800c574:	18f6      	adds	r6, r6, r3
 800c576:	2200      	movs	r2, #0
 800c578:	4b9a      	ldr	r3, [pc, #616]	; (800c7e4 <_dtoa_r+0x370>)
 800c57a:	f7f6 f8b3 	bl	80026e4 <__aeabi_dsub>
 800c57e:	4a9a      	ldr	r2, [pc, #616]	; (800c7e8 <_dtoa_r+0x374>)
 800c580:	4b9a      	ldr	r3, [pc, #616]	; (800c7ec <_dtoa_r+0x378>)
 800c582:	f7f5 fe43 	bl	800220c <__aeabi_dmul>
 800c586:	4a9a      	ldr	r2, [pc, #616]	; (800c7f0 <_dtoa_r+0x37c>)
 800c588:	4b9a      	ldr	r3, [pc, #616]	; (800c7f4 <_dtoa_r+0x380>)
 800c58a:	f7f4 ff01 	bl	8001390 <__aeabi_dadd>
 800c58e:	0004      	movs	r4, r0
 800c590:	0030      	movs	r0, r6
 800c592:	000d      	movs	r5, r1
 800c594:	f7f6 fc8c 	bl	8002eb0 <__aeabi_i2d>
 800c598:	4a97      	ldr	r2, [pc, #604]	; (800c7f8 <_dtoa_r+0x384>)
 800c59a:	4b98      	ldr	r3, [pc, #608]	; (800c7fc <_dtoa_r+0x388>)
 800c59c:	f7f5 fe36 	bl	800220c <__aeabi_dmul>
 800c5a0:	0002      	movs	r2, r0
 800c5a2:	000b      	movs	r3, r1
 800c5a4:	0020      	movs	r0, r4
 800c5a6:	0029      	movs	r1, r5
 800c5a8:	f7f4 fef2 	bl	8001390 <__aeabi_dadd>
 800c5ac:	0004      	movs	r4, r0
 800c5ae:	000d      	movs	r5, r1
 800c5b0:	f7f6 fc48 	bl	8002e44 <__aeabi_d2iz>
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	9002      	str	r0, [sp, #8]
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	0020      	movs	r0, r4
 800c5bc:	0029      	movs	r1, r5
 800c5be:	f7f3 ff4b 	bl	8000458 <__aeabi_dcmplt>
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	d00b      	beq.n	800c5de <_dtoa_r+0x16a>
 800c5c6:	9802      	ldr	r0, [sp, #8]
 800c5c8:	f7f6 fc72 	bl	8002eb0 <__aeabi_i2d>
 800c5cc:	002b      	movs	r3, r5
 800c5ce:	0022      	movs	r2, r4
 800c5d0:	f7f3 ff3c 	bl	800044c <__aeabi_dcmpeq>
 800c5d4:	4243      	negs	r3, r0
 800c5d6:	4158      	adcs	r0, r3
 800c5d8:	9b02      	ldr	r3, [sp, #8]
 800c5da:	1a1b      	subs	r3, r3, r0
 800c5dc:	9302      	str	r3, [sp, #8]
 800c5de:	2301      	movs	r3, #1
 800c5e0:	9316      	str	r3, [sp, #88]	; 0x58
 800c5e2:	9b02      	ldr	r3, [sp, #8]
 800c5e4:	2b16      	cmp	r3, #22
 800c5e6:	d80f      	bhi.n	800c608 <_dtoa_r+0x194>
 800c5e8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c5ea:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c5ec:	00da      	lsls	r2, r3, #3
 800c5ee:	4b84      	ldr	r3, [pc, #528]	; (800c800 <_dtoa_r+0x38c>)
 800c5f0:	189b      	adds	r3, r3, r2
 800c5f2:	681a      	ldr	r2, [r3, #0]
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	f7f3 ff2f 	bl	8000458 <__aeabi_dcmplt>
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	d049      	beq.n	800c692 <_dtoa_r+0x21e>
 800c5fe:	9b02      	ldr	r3, [sp, #8]
 800c600:	3b01      	subs	r3, #1
 800c602:	9302      	str	r3, [sp, #8]
 800c604:	2300      	movs	r3, #0
 800c606:	9316      	str	r3, [sp, #88]	; 0x58
 800c608:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c60a:	1b9e      	subs	r6, r3, r6
 800c60c:	2300      	movs	r3, #0
 800c60e:	930a      	str	r3, [sp, #40]	; 0x28
 800c610:	0033      	movs	r3, r6
 800c612:	3b01      	subs	r3, #1
 800c614:	930d      	str	r3, [sp, #52]	; 0x34
 800c616:	d504      	bpl.n	800c622 <_dtoa_r+0x1ae>
 800c618:	2301      	movs	r3, #1
 800c61a:	1b9b      	subs	r3, r3, r6
 800c61c:	930a      	str	r3, [sp, #40]	; 0x28
 800c61e:	2300      	movs	r3, #0
 800c620:	930d      	str	r3, [sp, #52]	; 0x34
 800c622:	9b02      	ldr	r3, [sp, #8]
 800c624:	2b00      	cmp	r3, #0
 800c626:	db36      	blt.n	800c696 <_dtoa_r+0x222>
 800c628:	9a02      	ldr	r2, [sp, #8]
 800c62a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c62c:	4694      	mov	ip, r2
 800c62e:	4463      	add	r3, ip
 800c630:	930d      	str	r3, [sp, #52]	; 0x34
 800c632:	2300      	movs	r3, #0
 800c634:	9215      	str	r2, [sp, #84]	; 0x54
 800c636:	930e      	str	r3, [sp, #56]	; 0x38
 800c638:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c63a:	2401      	movs	r4, #1
 800c63c:	2b09      	cmp	r3, #9
 800c63e:	d864      	bhi.n	800c70a <_dtoa_r+0x296>
 800c640:	2b05      	cmp	r3, #5
 800c642:	dd02      	ble.n	800c64a <_dtoa_r+0x1d6>
 800c644:	2400      	movs	r4, #0
 800c646:	3b04      	subs	r3, #4
 800c648:	9322      	str	r3, [sp, #136]	; 0x88
 800c64a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c64c:	1e98      	subs	r0, r3, #2
 800c64e:	2803      	cmp	r0, #3
 800c650:	d864      	bhi.n	800c71c <_dtoa_r+0x2a8>
 800c652:	f7f3 fd61 	bl	8000118 <__gnu_thumb1_case_uqi>
 800c656:	3829      	.short	0x3829
 800c658:	5836      	.short	0x5836
 800c65a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c65c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c65e:	189e      	adds	r6, r3, r2
 800c660:	4b68      	ldr	r3, [pc, #416]	; (800c804 <_dtoa_r+0x390>)
 800c662:	18f2      	adds	r2, r6, r3
 800c664:	2a20      	cmp	r2, #32
 800c666:	dd0f      	ble.n	800c688 <_dtoa_r+0x214>
 800c668:	2340      	movs	r3, #64	; 0x40
 800c66a:	1a9b      	subs	r3, r3, r2
 800c66c:	409d      	lsls	r5, r3
 800c66e:	4b66      	ldr	r3, [pc, #408]	; (800c808 <_dtoa_r+0x394>)
 800c670:	9802      	ldr	r0, [sp, #8]
 800c672:	18f3      	adds	r3, r6, r3
 800c674:	40d8      	lsrs	r0, r3
 800c676:	4328      	orrs	r0, r5
 800c678:	f7f6 fc4a 	bl	8002f10 <__aeabi_ui2d>
 800c67c:	2301      	movs	r3, #1
 800c67e:	4c63      	ldr	r4, [pc, #396]	; (800c80c <_dtoa_r+0x398>)
 800c680:	3e01      	subs	r6, #1
 800c682:	1909      	adds	r1, r1, r4
 800c684:	9318      	str	r3, [sp, #96]	; 0x60
 800c686:	e776      	b.n	800c576 <_dtoa_r+0x102>
 800c688:	2320      	movs	r3, #32
 800c68a:	9802      	ldr	r0, [sp, #8]
 800c68c:	1a9b      	subs	r3, r3, r2
 800c68e:	4098      	lsls	r0, r3
 800c690:	e7f2      	b.n	800c678 <_dtoa_r+0x204>
 800c692:	9016      	str	r0, [sp, #88]	; 0x58
 800c694:	e7b8      	b.n	800c608 <_dtoa_r+0x194>
 800c696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c698:	9a02      	ldr	r2, [sp, #8]
 800c69a:	1a9b      	subs	r3, r3, r2
 800c69c:	930a      	str	r3, [sp, #40]	; 0x28
 800c69e:	4253      	negs	r3, r2
 800c6a0:	930e      	str	r3, [sp, #56]	; 0x38
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	9315      	str	r3, [sp, #84]	; 0x54
 800c6a6:	e7c7      	b.n	800c638 <_dtoa_r+0x1c4>
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	930f      	str	r3, [sp, #60]	; 0x3c
 800c6ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c6ae:	930c      	str	r3, [sp, #48]	; 0x30
 800c6b0:	9307      	str	r3, [sp, #28]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	dc13      	bgt.n	800c6de <_dtoa_r+0x26a>
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	001a      	movs	r2, r3
 800c6ba:	930c      	str	r3, [sp, #48]	; 0x30
 800c6bc:	9307      	str	r3, [sp, #28]
 800c6be:	9223      	str	r2, [sp, #140]	; 0x8c
 800c6c0:	e00d      	b.n	800c6de <_dtoa_r+0x26a>
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	e7f1      	b.n	800c6aa <_dtoa_r+0x236>
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800c6ca:	930f      	str	r3, [sp, #60]	; 0x3c
 800c6cc:	4694      	mov	ip, r2
 800c6ce:	9b02      	ldr	r3, [sp, #8]
 800c6d0:	4463      	add	r3, ip
 800c6d2:	930c      	str	r3, [sp, #48]	; 0x30
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	9307      	str	r3, [sp, #28]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	dc00      	bgt.n	800c6de <_dtoa_r+0x26a>
 800c6dc:	2301      	movs	r3, #1
 800c6de:	2200      	movs	r2, #0
 800c6e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c6e2:	6042      	str	r2, [r0, #4]
 800c6e4:	3204      	adds	r2, #4
 800c6e6:	0015      	movs	r5, r2
 800c6e8:	3514      	adds	r5, #20
 800c6ea:	6841      	ldr	r1, [r0, #4]
 800c6ec:	429d      	cmp	r5, r3
 800c6ee:	d919      	bls.n	800c724 <_dtoa_r+0x2b0>
 800c6f0:	0038      	movs	r0, r7
 800c6f2:	f001 f969 	bl	800d9c8 <_Balloc>
 800c6f6:	9006      	str	r0, [sp, #24]
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	d117      	bne.n	800c72c <_dtoa_r+0x2b8>
 800c6fc:	21d5      	movs	r1, #213	; 0xd5
 800c6fe:	0002      	movs	r2, r0
 800c700:	4b43      	ldr	r3, [pc, #268]	; (800c810 <_dtoa_r+0x39c>)
 800c702:	0049      	lsls	r1, r1, #1
 800c704:	e6cb      	b.n	800c49e <_dtoa_r+0x2a>
 800c706:	2301      	movs	r3, #1
 800c708:	e7de      	b.n	800c6c8 <_dtoa_r+0x254>
 800c70a:	2300      	movs	r3, #0
 800c70c:	940f      	str	r4, [sp, #60]	; 0x3c
 800c70e:	9322      	str	r3, [sp, #136]	; 0x88
 800c710:	3b01      	subs	r3, #1
 800c712:	930c      	str	r3, [sp, #48]	; 0x30
 800c714:	9307      	str	r3, [sp, #28]
 800c716:	2200      	movs	r2, #0
 800c718:	3313      	adds	r3, #19
 800c71a:	e7d0      	b.n	800c6be <_dtoa_r+0x24a>
 800c71c:	2301      	movs	r3, #1
 800c71e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c720:	3b02      	subs	r3, #2
 800c722:	e7f6      	b.n	800c712 <_dtoa_r+0x29e>
 800c724:	3101      	adds	r1, #1
 800c726:	6041      	str	r1, [r0, #4]
 800c728:	0052      	lsls	r2, r2, #1
 800c72a:	e7dc      	b.n	800c6e6 <_dtoa_r+0x272>
 800c72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72e:	9a06      	ldr	r2, [sp, #24]
 800c730:	601a      	str	r2, [r3, #0]
 800c732:	9b07      	ldr	r3, [sp, #28]
 800c734:	2b0e      	cmp	r3, #14
 800c736:	d900      	bls.n	800c73a <_dtoa_r+0x2c6>
 800c738:	e0eb      	b.n	800c912 <_dtoa_r+0x49e>
 800c73a:	2c00      	cmp	r4, #0
 800c73c:	d100      	bne.n	800c740 <_dtoa_r+0x2cc>
 800c73e:	e0e8      	b.n	800c912 <_dtoa_r+0x49e>
 800c740:	9b02      	ldr	r3, [sp, #8]
 800c742:	2b00      	cmp	r3, #0
 800c744:	dd68      	ble.n	800c818 <_dtoa_r+0x3a4>
 800c746:	001a      	movs	r2, r3
 800c748:	210f      	movs	r1, #15
 800c74a:	4b2d      	ldr	r3, [pc, #180]	; (800c800 <_dtoa_r+0x38c>)
 800c74c:	400a      	ands	r2, r1
 800c74e:	00d2      	lsls	r2, r2, #3
 800c750:	189b      	adds	r3, r3, r2
 800c752:	681d      	ldr	r5, [r3, #0]
 800c754:	685e      	ldr	r6, [r3, #4]
 800c756:	9b02      	ldr	r3, [sp, #8]
 800c758:	111c      	asrs	r4, r3, #4
 800c75a:	2302      	movs	r3, #2
 800c75c:	9310      	str	r3, [sp, #64]	; 0x40
 800c75e:	9b02      	ldr	r3, [sp, #8]
 800c760:	05db      	lsls	r3, r3, #23
 800c762:	d50b      	bpl.n	800c77c <_dtoa_r+0x308>
 800c764:	4b2b      	ldr	r3, [pc, #172]	; (800c814 <_dtoa_r+0x3a0>)
 800c766:	400c      	ands	r4, r1
 800c768:	6a1a      	ldr	r2, [r3, #32]
 800c76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c76c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c76e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c770:	f7f5 f94a 	bl	8001a08 <__aeabi_ddiv>
 800c774:	2303      	movs	r3, #3
 800c776:	9008      	str	r0, [sp, #32]
 800c778:	9109      	str	r1, [sp, #36]	; 0x24
 800c77a:	9310      	str	r3, [sp, #64]	; 0x40
 800c77c:	4b25      	ldr	r3, [pc, #148]	; (800c814 <_dtoa_r+0x3a0>)
 800c77e:	9314      	str	r3, [sp, #80]	; 0x50
 800c780:	2c00      	cmp	r4, #0
 800c782:	d108      	bne.n	800c796 <_dtoa_r+0x322>
 800c784:	9808      	ldr	r0, [sp, #32]
 800c786:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c788:	002a      	movs	r2, r5
 800c78a:	0033      	movs	r3, r6
 800c78c:	f7f5 f93c 	bl	8001a08 <__aeabi_ddiv>
 800c790:	9008      	str	r0, [sp, #32]
 800c792:	9109      	str	r1, [sp, #36]	; 0x24
 800c794:	e05c      	b.n	800c850 <_dtoa_r+0x3dc>
 800c796:	2301      	movs	r3, #1
 800c798:	421c      	tst	r4, r3
 800c79a:	d00b      	beq.n	800c7b4 <_dtoa_r+0x340>
 800c79c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c79e:	0028      	movs	r0, r5
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	9310      	str	r3, [sp, #64]	; 0x40
 800c7a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c7a6:	0031      	movs	r1, r6
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	685b      	ldr	r3, [r3, #4]
 800c7ac:	f7f5 fd2e 	bl	800220c <__aeabi_dmul>
 800c7b0:	0005      	movs	r5, r0
 800c7b2:	000e      	movs	r6, r1
 800c7b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c7b6:	1064      	asrs	r4, r4, #1
 800c7b8:	3308      	adds	r3, #8
 800c7ba:	e7e0      	b.n	800c77e <_dtoa_r+0x30a>
 800c7bc:	0800f856 	.word	0x0800f856
 800c7c0:	0800f86d 	.word	0x0800f86d
 800c7c4:	7ff00000 	.word	0x7ff00000
 800c7c8:	0000270f 	.word	0x0000270f
 800c7cc:	0800f852 	.word	0x0800f852
 800c7d0:	0800f855 	.word	0x0800f855
 800c7d4:	0800f6d0 	.word	0x0800f6d0
 800c7d8:	0800f6d1 	.word	0x0800f6d1
 800c7dc:	3ff00000 	.word	0x3ff00000
 800c7e0:	fffffc01 	.word	0xfffffc01
 800c7e4:	3ff80000 	.word	0x3ff80000
 800c7e8:	636f4361 	.word	0x636f4361
 800c7ec:	3fd287a7 	.word	0x3fd287a7
 800c7f0:	8b60c8b3 	.word	0x8b60c8b3
 800c7f4:	3fc68a28 	.word	0x3fc68a28
 800c7f8:	509f79fb 	.word	0x509f79fb
 800c7fc:	3fd34413 	.word	0x3fd34413
 800c800:	0800f9d8 	.word	0x0800f9d8
 800c804:	00000432 	.word	0x00000432
 800c808:	00000412 	.word	0x00000412
 800c80c:	fe100000 	.word	0xfe100000
 800c810:	0800f8c8 	.word	0x0800f8c8
 800c814:	0800f9b0 	.word	0x0800f9b0
 800c818:	2302      	movs	r3, #2
 800c81a:	9310      	str	r3, [sp, #64]	; 0x40
 800c81c:	9b02      	ldr	r3, [sp, #8]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d016      	beq.n	800c850 <_dtoa_r+0x3dc>
 800c822:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c824:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c826:	425c      	negs	r4, r3
 800c828:	230f      	movs	r3, #15
 800c82a:	4ab6      	ldr	r2, [pc, #728]	; (800cb04 <_dtoa_r+0x690>)
 800c82c:	4023      	ands	r3, r4
 800c82e:	00db      	lsls	r3, r3, #3
 800c830:	18d3      	adds	r3, r2, r3
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	f7f5 fce9 	bl	800220c <__aeabi_dmul>
 800c83a:	2601      	movs	r6, #1
 800c83c:	2300      	movs	r3, #0
 800c83e:	9008      	str	r0, [sp, #32]
 800c840:	9109      	str	r1, [sp, #36]	; 0x24
 800c842:	4db1      	ldr	r5, [pc, #708]	; (800cb08 <_dtoa_r+0x694>)
 800c844:	1124      	asrs	r4, r4, #4
 800c846:	2c00      	cmp	r4, #0
 800c848:	d000      	beq.n	800c84c <_dtoa_r+0x3d8>
 800c84a:	e094      	b.n	800c976 <_dtoa_r+0x502>
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d19f      	bne.n	800c790 <_dtoa_r+0x31c>
 800c850:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c852:	2b00      	cmp	r3, #0
 800c854:	d100      	bne.n	800c858 <_dtoa_r+0x3e4>
 800c856:	e09b      	b.n	800c990 <_dtoa_r+0x51c>
 800c858:	9c08      	ldr	r4, [sp, #32]
 800c85a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c85c:	2200      	movs	r2, #0
 800c85e:	0020      	movs	r0, r4
 800c860:	0029      	movs	r1, r5
 800c862:	4baa      	ldr	r3, [pc, #680]	; (800cb0c <_dtoa_r+0x698>)
 800c864:	f7f3 fdf8 	bl	8000458 <__aeabi_dcmplt>
 800c868:	2800      	cmp	r0, #0
 800c86a:	d100      	bne.n	800c86e <_dtoa_r+0x3fa>
 800c86c:	e090      	b.n	800c990 <_dtoa_r+0x51c>
 800c86e:	9b07      	ldr	r3, [sp, #28]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d100      	bne.n	800c876 <_dtoa_r+0x402>
 800c874:	e08c      	b.n	800c990 <_dtoa_r+0x51c>
 800c876:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c878:	2b00      	cmp	r3, #0
 800c87a:	dd46      	ble.n	800c90a <_dtoa_r+0x496>
 800c87c:	9b02      	ldr	r3, [sp, #8]
 800c87e:	2200      	movs	r2, #0
 800c880:	0020      	movs	r0, r4
 800c882:	0029      	movs	r1, r5
 800c884:	1e5e      	subs	r6, r3, #1
 800c886:	4ba2      	ldr	r3, [pc, #648]	; (800cb10 <_dtoa_r+0x69c>)
 800c888:	f7f5 fcc0 	bl	800220c <__aeabi_dmul>
 800c88c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c88e:	9008      	str	r0, [sp, #32]
 800c890:	9109      	str	r1, [sp, #36]	; 0x24
 800c892:	3301      	adds	r3, #1
 800c894:	9310      	str	r3, [sp, #64]	; 0x40
 800c896:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c898:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c89a:	9c08      	ldr	r4, [sp, #32]
 800c89c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c89e:	9314      	str	r3, [sp, #80]	; 0x50
 800c8a0:	f7f6 fb06 	bl	8002eb0 <__aeabi_i2d>
 800c8a4:	0022      	movs	r2, r4
 800c8a6:	002b      	movs	r3, r5
 800c8a8:	f7f5 fcb0 	bl	800220c <__aeabi_dmul>
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	4b99      	ldr	r3, [pc, #612]	; (800cb14 <_dtoa_r+0x6a0>)
 800c8b0:	f7f4 fd6e 	bl	8001390 <__aeabi_dadd>
 800c8b4:	9010      	str	r0, [sp, #64]	; 0x40
 800c8b6:	9111      	str	r1, [sp, #68]	; 0x44
 800c8b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c8ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c8bc:	9208      	str	r2, [sp, #32]
 800c8be:	9309      	str	r3, [sp, #36]	; 0x24
 800c8c0:	4a95      	ldr	r2, [pc, #596]	; (800cb18 <_dtoa_r+0x6a4>)
 800c8c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c8c4:	4694      	mov	ip, r2
 800c8c6:	4463      	add	r3, ip
 800c8c8:	9317      	str	r3, [sp, #92]	; 0x5c
 800c8ca:	9309      	str	r3, [sp, #36]	; 0x24
 800c8cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d161      	bne.n	800c996 <_dtoa_r+0x522>
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	0020      	movs	r0, r4
 800c8d6:	0029      	movs	r1, r5
 800c8d8:	4b90      	ldr	r3, [pc, #576]	; (800cb1c <_dtoa_r+0x6a8>)
 800c8da:	f7f5 ff03 	bl	80026e4 <__aeabi_dsub>
 800c8de:	9a08      	ldr	r2, [sp, #32]
 800c8e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c8e2:	0004      	movs	r4, r0
 800c8e4:	000d      	movs	r5, r1
 800c8e6:	f7f3 fdcb 	bl	8000480 <__aeabi_dcmpgt>
 800c8ea:	2800      	cmp	r0, #0
 800c8ec:	d000      	beq.n	800c8f0 <_dtoa_r+0x47c>
 800c8ee:	e2af      	b.n	800ce50 <_dtoa_r+0x9dc>
 800c8f0:	488b      	ldr	r0, [pc, #556]	; (800cb20 <_dtoa_r+0x6ac>)
 800c8f2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c8f4:	4684      	mov	ip, r0
 800c8f6:	4461      	add	r1, ip
 800c8f8:	000b      	movs	r3, r1
 800c8fa:	0020      	movs	r0, r4
 800c8fc:	0029      	movs	r1, r5
 800c8fe:	9a08      	ldr	r2, [sp, #32]
 800c900:	f7f3 fdaa 	bl	8000458 <__aeabi_dcmplt>
 800c904:	2800      	cmp	r0, #0
 800c906:	d000      	beq.n	800c90a <_dtoa_r+0x496>
 800c908:	e29f      	b.n	800ce4a <_dtoa_r+0x9d6>
 800c90a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c90c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c90e:	9308      	str	r3, [sp, #32]
 800c910:	9409      	str	r4, [sp, #36]	; 0x24
 800c912:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c914:	2b00      	cmp	r3, #0
 800c916:	da00      	bge.n	800c91a <_dtoa_r+0x4a6>
 800c918:	e172      	b.n	800cc00 <_dtoa_r+0x78c>
 800c91a:	9a02      	ldr	r2, [sp, #8]
 800c91c:	2a0e      	cmp	r2, #14
 800c91e:	dd00      	ble.n	800c922 <_dtoa_r+0x4ae>
 800c920:	e16e      	b.n	800cc00 <_dtoa_r+0x78c>
 800c922:	4b78      	ldr	r3, [pc, #480]	; (800cb04 <_dtoa_r+0x690>)
 800c924:	00d2      	lsls	r2, r2, #3
 800c926:	189b      	adds	r3, r3, r2
 800c928:	685c      	ldr	r4, [r3, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	930a      	str	r3, [sp, #40]	; 0x28
 800c92e:	940b      	str	r4, [sp, #44]	; 0x2c
 800c930:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c932:	2b00      	cmp	r3, #0
 800c934:	db00      	blt.n	800c938 <_dtoa_r+0x4c4>
 800c936:	e0f7      	b.n	800cb28 <_dtoa_r+0x6b4>
 800c938:	9b07      	ldr	r3, [sp, #28]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	dd00      	ble.n	800c940 <_dtoa_r+0x4cc>
 800c93e:	e0f3      	b.n	800cb28 <_dtoa_r+0x6b4>
 800c940:	d000      	beq.n	800c944 <_dtoa_r+0x4d0>
 800c942:	e282      	b.n	800ce4a <_dtoa_r+0x9d6>
 800c944:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c946:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c948:	2200      	movs	r2, #0
 800c94a:	4b74      	ldr	r3, [pc, #464]	; (800cb1c <_dtoa_r+0x6a8>)
 800c94c:	f7f5 fc5e 	bl	800220c <__aeabi_dmul>
 800c950:	9a08      	ldr	r2, [sp, #32]
 800c952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c954:	f7f3 fd9e 	bl	8000494 <__aeabi_dcmpge>
 800c958:	9e07      	ldr	r6, [sp, #28]
 800c95a:	0035      	movs	r5, r6
 800c95c:	2800      	cmp	r0, #0
 800c95e:	d000      	beq.n	800c962 <_dtoa_r+0x4ee>
 800c960:	e259      	b.n	800ce16 <_dtoa_r+0x9a2>
 800c962:	9b06      	ldr	r3, [sp, #24]
 800c964:	9a06      	ldr	r2, [sp, #24]
 800c966:	3301      	adds	r3, #1
 800c968:	9308      	str	r3, [sp, #32]
 800c96a:	2331      	movs	r3, #49	; 0x31
 800c96c:	7013      	strb	r3, [r2, #0]
 800c96e:	9b02      	ldr	r3, [sp, #8]
 800c970:	3301      	adds	r3, #1
 800c972:	9302      	str	r3, [sp, #8]
 800c974:	e254      	b.n	800ce20 <_dtoa_r+0x9ac>
 800c976:	4234      	tst	r4, r6
 800c978:	d007      	beq.n	800c98a <_dtoa_r+0x516>
 800c97a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c97c:	3301      	adds	r3, #1
 800c97e:	9310      	str	r3, [sp, #64]	; 0x40
 800c980:	682a      	ldr	r2, [r5, #0]
 800c982:	686b      	ldr	r3, [r5, #4]
 800c984:	f7f5 fc42 	bl	800220c <__aeabi_dmul>
 800c988:	0033      	movs	r3, r6
 800c98a:	1064      	asrs	r4, r4, #1
 800c98c:	3508      	adds	r5, #8
 800c98e:	e75a      	b.n	800c846 <_dtoa_r+0x3d2>
 800c990:	9e02      	ldr	r6, [sp, #8]
 800c992:	9b07      	ldr	r3, [sp, #28]
 800c994:	e780      	b.n	800c898 <_dtoa_r+0x424>
 800c996:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c998:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c99a:	1e5a      	subs	r2, r3, #1
 800c99c:	4b59      	ldr	r3, [pc, #356]	; (800cb04 <_dtoa_r+0x690>)
 800c99e:	00d2      	lsls	r2, r2, #3
 800c9a0:	189b      	adds	r3, r3, r2
 800c9a2:	681a      	ldr	r2, [r3, #0]
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	2900      	cmp	r1, #0
 800c9a8:	d051      	beq.n	800ca4e <_dtoa_r+0x5da>
 800c9aa:	2000      	movs	r0, #0
 800c9ac:	495d      	ldr	r1, [pc, #372]	; (800cb24 <_dtoa_r+0x6b0>)
 800c9ae:	f7f5 f82b 	bl	8001a08 <__aeabi_ddiv>
 800c9b2:	9a08      	ldr	r2, [sp, #32]
 800c9b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9b6:	f7f5 fe95 	bl	80026e4 <__aeabi_dsub>
 800c9ba:	9a06      	ldr	r2, [sp, #24]
 800c9bc:	9b06      	ldr	r3, [sp, #24]
 800c9be:	4694      	mov	ip, r2
 800c9c0:	9317      	str	r3, [sp, #92]	; 0x5c
 800c9c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c9c4:	9010      	str	r0, [sp, #64]	; 0x40
 800c9c6:	9111      	str	r1, [sp, #68]	; 0x44
 800c9c8:	4463      	add	r3, ip
 800c9ca:	9319      	str	r3, [sp, #100]	; 0x64
 800c9cc:	0029      	movs	r1, r5
 800c9ce:	0020      	movs	r0, r4
 800c9d0:	f7f6 fa38 	bl	8002e44 <__aeabi_d2iz>
 800c9d4:	9014      	str	r0, [sp, #80]	; 0x50
 800c9d6:	f7f6 fa6b 	bl	8002eb0 <__aeabi_i2d>
 800c9da:	0002      	movs	r2, r0
 800c9dc:	000b      	movs	r3, r1
 800c9de:	0020      	movs	r0, r4
 800c9e0:	0029      	movs	r1, r5
 800c9e2:	f7f5 fe7f 	bl	80026e4 <__aeabi_dsub>
 800c9e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c9e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	9308      	str	r3, [sp, #32]
 800c9ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c9f0:	0004      	movs	r4, r0
 800c9f2:	3330      	adds	r3, #48	; 0x30
 800c9f4:	7013      	strb	r3, [r2, #0]
 800c9f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c9f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c9fa:	000d      	movs	r5, r1
 800c9fc:	f7f3 fd2c 	bl	8000458 <__aeabi_dcmplt>
 800ca00:	2800      	cmp	r0, #0
 800ca02:	d175      	bne.n	800caf0 <_dtoa_r+0x67c>
 800ca04:	0022      	movs	r2, r4
 800ca06:	002b      	movs	r3, r5
 800ca08:	2000      	movs	r0, #0
 800ca0a:	4940      	ldr	r1, [pc, #256]	; (800cb0c <_dtoa_r+0x698>)
 800ca0c:	f7f5 fe6a 	bl	80026e4 <__aeabi_dsub>
 800ca10:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ca12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ca14:	f7f3 fd20 	bl	8000458 <__aeabi_dcmplt>
 800ca18:	2800      	cmp	r0, #0
 800ca1a:	d000      	beq.n	800ca1e <_dtoa_r+0x5aa>
 800ca1c:	e0d2      	b.n	800cbc4 <_dtoa_r+0x750>
 800ca1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ca20:	9a08      	ldr	r2, [sp, #32]
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d100      	bne.n	800ca28 <_dtoa_r+0x5b4>
 800ca26:	e770      	b.n	800c90a <_dtoa_r+0x496>
 800ca28:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ca2a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	4b38      	ldr	r3, [pc, #224]	; (800cb10 <_dtoa_r+0x69c>)
 800ca30:	f7f5 fbec 	bl	800220c <__aeabi_dmul>
 800ca34:	4b36      	ldr	r3, [pc, #216]	; (800cb10 <_dtoa_r+0x69c>)
 800ca36:	9010      	str	r0, [sp, #64]	; 0x40
 800ca38:	9111      	str	r1, [sp, #68]	; 0x44
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	0020      	movs	r0, r4
 800ca3e:	0029      	movs	r1, r5
 800ca40:	f7f5 fbe4 	bl	800220c <__aeabi_dmul>
 800ca44:	9b08      	ldr	r3, [sp, #32]
 800ca46:	0004      	movs	r4, r0
 800ca48:	000d      	movs	r5, r1
 800ca4a:	9317      	str	r3, [sp, #92]	; 0x5c
 800ca4c:	e7be      	b.n	800c9cc <_dtoa_r+0x558>
 800ca4e:	9808      	ldr	r0, [sp, #32]
 800ca50:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca52:	f7f5 fbdb 	bl	800220c <__aeabi_dmul>
 800ca56:	9a06      	ldr	r2, [sp, #24]
 800ca58:	9b06      	ldr	r3, [sp, #24]
 800ca5a:	4694      	mov	ip, r2
 800ca5c:	9308      	str	r3, [sp, #32]
 800ca5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ca60:	9010      	str	r0, [sp, #64]	; 0x40
 800ca62:	9111      	str	r1, [sp, #68]	; 0x44
 800ca64:	4463      	add	r3, ip
 800ca66:	9319      	str	r3, [sp, #100]	; 0x64
 800ca68:	0029      	movs	r1, r5
 800ca6a:	0020      	movs	r0, r4
 800ca6c:	f7f6 f9ea 	bl	8002e44 <__aeabi_d2iz>
 800ca70:	9017      	str	r0, [sp, #92]	; 0x5c
 800ca72:	f7f6 fa1d 	bl	8002eb0 <__aeabi_i2d>
 800ca76:	0002      	movs	r2, r0
 800ca78:	000b      	movs	r3, r1
 800ca7a:	0020      	movs	r0, r4
 800ca7c:	0029      	movs	r1, r5
 800ca7e:	f7f5 fe31 	bl	80026e4 <__aeabi_dsub>
 800ca82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ca84:	9a08      	ldr	r2, [sp, #32]
 800ca86:	3330      	adds	r3, #48	; 0x30
 800ca88:	7013      	strb	r3, [r2, #0]
 800ca8a:	0013      	movs	r3, r2
 800ca8c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ca8e:	3301      	adds	r3, #1
 800ca90:	0004      	movs	r4, r0
 800ca92:	000d      	movs	r5, r1
 800ca94:	9308      	str	r3, [sp, #32]
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d12c      	bne.n	800caf4 <_dtoa_r+0x680>
 800ca9a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ca9c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ca9e:	9a06      	ldr	r2, [sp, #24]
 800caa0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800caa2:	4694      	mov	ip, r2
 800caa4:	4463      	add	r3, ip
 800caa6:	2200      	movs	r2, #0
 800caa8:	9308      	str	r3, [sp, #32]
 800caaa:	4b1e      	ldr	r3, [pc, #120]	; (800cb24 <_dtoa_r+0x6b0>)
 800caac:	f7f4 fc70 	bl	8001390 <__aeabi_dadd>
 800cab0:	0002      	movs	r2, r0
 800cab2:	000b      	movs	r3, r1
 800cab4:	0020      	movs	r0, r4
 800cab6:	0029      	movs	r1, r5
 800cab8:	f7f3 fce2 	bl	8000480 <__aeabi_dcmpgt>
 800cabc:	2800      	cmp	r0, #0
 800cabe:	d000      	beq.n	800cac2 <_dtoa_r+0x64e>
 800cac0:	e080      	b.n	800cbc4 <_dtoa_r+0x750>
 800cac2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cac4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cac6:	2000      	movs	r0, #0
 800cac8:	4916      	ldr	r1, [pc, #88]	; (800cb24 <_dtoa_r+0x6b0>)
 800caca:	f7f5 fe0b 	bl	80026e4 <__aeabi_dsub>
 800cace:	0002      	movs	r2, r0
 800cad0:	000b      	movs	r3, r1
 800cad2:	0020      	movs	r0, r4
 800cad4:	0029      	movs	r1, r5
 800cad6:	f7f3 fcbf 	bl	8000458 <__aeabi_dcmplt>
 800cada:	2800      	cmp	r0, #0
 800cadc:	d100      	bne.n	800cae0 <_dtoa_r+0x66c>
 800cade:	e714      	b.n	800c90a <_dtoa_r+0x496>
 800cae0:	9b08      	ldr	r3, [sp, #32]
 800cae2:	001a      	movs	r2, r3
 800cae4:	3a01      	subs	r2, #1
 800cae6:	9208      	str	r2, [sp, #32]
 800cae8:	7812      	ldrb	r2, [r2, #0]
 800caea:	2a30      	cmp	r2, #48	; 0x30
 800caec:	d0f8      	beq.n	800cae0 <_dtoa_r+0x66c>
 800caee:	9308      	str	r3, [sp, #32]
 800caf0:	9602      	str	r6, [sp, #8]
 800caf2:	e055      	b.n	800cba0 <_dtoa_r+0x72c>
 800caf4:	2200      	movs	r2, #0
 800caf6:	4b06      	ldr	r3, [pc, #24]	; (800cb10 <_dtoa_r+0x69c>)
 800caf8:	f7f5 fb88 	bl	800220c <__aeabi_dmul>
 800cafc:	0004      	movs	r4, r0
 800cafe:	000d      	movs	r5, r1
 800cb00:	e7b2      	b.n	800ca68 <_dtoa_r+0x5f4>
 800cb02:	46c0      	nop			; (mov r8, r8)
 800cb04:	0800f9d8 	.word	0x0800f9d8
 800cb08:	0800f9b0 	.word	0x0800f9b0
 800cb0c:	3ff00000 	.word	0x3ff00000
 800cb10:	40240000 	.word	0x40240000
 800cb14:	401c0000 	.word	0x401c0000
 800cb18:	fcc00000 	.word	0xfcc00000
 800cb1c:	40140000 	.word	0x40140000
 800cb20:	7cc00000 	.word	0x7cc00000
 800cb24:	3fe00000 	.word	0x3fe00000
 800cb28:	9b07      	ldr	r3, [sp, #28]
 800cb2a:	9e06      	ldr	r6, [sp, #24]
 800cb2c:	3b01      	subs	r3, #1
 800cb2e:	199b      	adds	r3, r3, r6
 800cb30:	930c      	str	r3, [sp, #48]	; 0x30
 800cb32:	9c08      	ldr	r4, [sp, #32]
 800cb34:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800cb36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb3a:	0020      	movs	r0, r4
 800cb3c:	0029      	movs	r1, r5
 800cb3e:	f7f4 ff63 	bl	8001a08 <__aeabi_ddiv>
 800cb42:	f7f6 f97f 	bl	8002e44 <__aeabi_d2iz>
 800cb46:	9007      	str	r0, [sp, #28]
 800cb48:	f7f6 f9b2 	bl	8002eb0 <__aeabi_i2d>
 800cb4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb50:	f7f5 fb5c 	bl	800220c <__aeabi_dmul>
 800cb54:	0002      	movs	r2, r0
 800cb56:	000b      	movs	r3, r1
 800cb58:	0020      	movs	r0, r4
 800cb5a:	0029      	movs	r1, r5
 800cb5c:	f7f5 fdc2 	bl	80026e4 <__aeabi_dsub>
 800cb60:	0033      	movs	r3, r6
 800cb62:	9a07      	ldr	r2, [sp, #28]
 800cb64:	3601      	adds	r6, #1
 800cb66:	3230      	adds	r2, #48	; 0x30
 800cb68:	701a      	strb	r2, [r3, #0]
 800cb6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb6c:	9608      	str	r6, [sp, #32]
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d139      	bne.n	800cbe6 <_dtoa_r+0x772>
 800cb72:	0002      	movs	r2, r0
 800cb74:	000b      	movs	r3, r1
 800cb76:	f7f4 fc0b 	bl	8001390 <__aeabi_dadd>
 800cb7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb7e:	0004      	movs	r4, r0
 800cb80:	000d      	movs	r5, r1
 800cb82:	f7f3 fc7d 	bl	8000480 <__aeabi_dcmpgt>
 800cb86:	2800      	cmp	r0, #0
 800cb88:	d11b      	bne.n	800cbc2 <_dtoa_r+0x74e>
 800cb8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb8e:	0020      	movs	r0, r4
 800cb90:	0029      	movs	r1, r5
 800cb92:	f7f3 fc5b 	bl	800044c <__aeabi_dcmpeq>
 800cb96:	2800      	cmp	r0, #0
 800cb98:	d002      	beq.n	800cba0 <_dtoa_r+0x72c>
 800cb9a:	9b07      	ldr	r3, [sp, #28]
 800cb9c:	07db      	lsls	r3, r3, #31
 800cb9e:	d410      	bmi.n	800cbc2 <_dtoa_r+0x74e>
 800cba0:	0038      	movs	r0, r7
 800cba2:	9905      	ldr	r1, [sp, #20]
 800cba4:	f000 ff54 	bl	800da50 <_Bfree>
 800cba8:	2300      	movs	r3, #0
 800cbaa:	9a08      	ldr	r2, [sp, #32]
 800cbac:	9802      	ldr	r0, [sp, #8]
 800cbae:	7013      	strb	r3, [r2, #0]
 800cbb0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800cbb2:	3001      	adds	r0, #1
 800cbb4:	6018      	str	r0, [r3, #0]
 800cbb6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d100      	bne.n	800cbbe <_dtoa_r+0x74a>
 800cbbc:	e4a6      	b.n	800c50c <_dtoa_r+0x98>
 800cbbe:	601a      	str	r2, [r3, #0]
 800cbc0:	e4a4      	b.n	800c50c <_dtoa_r+0x98>
 800cbc2:	9e02      	ldr	r6, [sp, #8]
 800cbc4:	9b08      	ldr	r3, [sp, #32]
 800cbc6:	9308      	str	r3, [sp, #32]
 800cbc8:	3b01      	subs	r3, #1
 800cbca:	781a      	ldrb	r2, [r3, #0]
 800cbcc:	2a39      	cmp	r2, #57	; 0x39
 800cbce:	d106      	bne.n	800cbde <_dtoa_r+0x76a>
 800cbd0:	9a06      	ldr	r2, [sp, #24]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d1f7      	bne.n	800cbc6 <_dtoa_r+0x752>
 800cbd6:	2230      	movs	r2, #48	; 0x30
 800cbd8:	9906      	ldr	r1, [sp, #24]
 800cbda:	3601      	adds	r6, #1
 800cbdc:	700a      	strb	r2, [r1, #0]
 800cbde:	781a      	ldrb	r2, [r3, #0]
 800cbe0:	3201      	adds	r2, #1
 800cbe2:	701a      	strb	r2, [r3, #0]
 800cbe4:	e784      	b.n	800caf0 <_dtoa_r+0x67c>
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	4baa      	ldr	r3, [pc, #680]	; (800ce94 <_dtoa_r+0xa20>)
 800cbea:	f7f5 fb0f 	bl	800220c <__aeabi_dmul>
 800cbee:	2200      	movs	r2, #0
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	0004      	movs	r4, r0
 800cbf4:	000d      	movs	r5, r1
 800cbf6:	f7f3 fc29 	bl	800044c <__aeabi_dcmpeq>
 800cbfa:	2800      	cmp	r0, #0
 800cbfc:	d09b      	beq.n	800cb36 <_dtoa_r+0x6c2>
 800cbfe:	e7cf      	b.n	800cba0 <_dtoa_r+0x72c>
 800cc00:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cc02:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800cc04:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cc06:	2d00      	cmp	r5, #0
 800cc08:	d012      	beq.n	800cc30 <_dtoa_r+0x7bc>
 800cc0a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800cc0c:	2a01      	cmp	r2, #1
 800cc0e:	dc66      	bgt.n	800ccde <_dtoa_r+0x86a>
 800cc10:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cc12:	2a00      	cmp	r2, #0
 800cc14:	d05d      	beq.n	800ccd2 <_dtoa_r+0x85e>
 800cc16:	4aa0      	ldr	r2, [pc, #640]	; (800ce98 <_dtoa_r+0xa24>)
 800cc18:	189b      	adds	r3, r3, r2
 800cc1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc1c:	2101      	movs	r1, #1
 800cc1e:	18d2      	adds	r2, r2, r3
 800cc20:	920a      	str	r2, [sp, #40]	; 0x28
 800cc22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cc24:	0038      	movs	r0, r7
 800cc26:	18d3      	adds	r3, r2, r3
 800cc28:	930d      	str	r3, [sp, #52]	; 0x34
 800cc2a:	f001 f80d 	bl	800dc48 <__i2b>
 800cc2e:	0005      	movs	r5, r0
 800cc30:	2c00      	cmp	r4, #0
 800cc32:	dd0e      	ble.n	800cc52 <_dtoa_r+0x7de>
 800cc34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	dd0b      	ble.n	800cc52 <_dtoa_r+0x7de>
 800cc3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cc3c:	0023      	movs	r3, r4
 800cc3e:	4294      	cmp	r4, r2
 800cc40:	dd00      	ble.n	800cc44 <_dtoa_r+0x7d0>
 800cc42:	0013      	movs	r3, r2
 800cc44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc46:	1ae4      	subs	r4, r4, r3
 800cc48:	1ad2      	subs	r2, r2, r3
 800cc4a:	920a      	str	r2, [sp, #40]	; 0x28
 800cc4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cc4e:	1ad3      	subs	r3, r2, r3
 800cc50:	930d      	str	r3, [sp, #52]	; 0x34
 800cc52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d01f      	beq.n	800cc98 <_dtoa_r+0x824>
 800cc58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d054      	beq.n	800cd08 <_dtoa_r+0x894>
 800cc5e:	2e00      	cmp	r6, #0
 800cc60:	dd11      	ble.n	800cc86 <_dtoa_r+0x812>
 800cc62:	0029      	movs	r1, r5
 800cc64:	0032      	movs	r2, r6
 800cc66:	0038      	movs	r0, r7
 800cc68:	f001 f8b4 	bl	800ddd4 <__pow5mult>
 800cc6c:	9a05      	ldr	r2, [sp, #20]
 800cc6e:	0001      	movs	r1, r0
 800cc70:	0005      	movs	r5, r0
 800cc72:	0038      	movs	r0, r7
 800cc74:	f000 fffe 	bl	800dc74 <__multiply>
 800cc78:	9905      	ldr	r1, [sp, #20]
 800cc7a:	9014      	str	r0, [sp, #80]	; 0x50
 800cc7c:	0038      	movs	r0, r7
 800cc7e:	f000 fee7 	bl	800da50 <_Bfree>
 800cc82:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cc84:	9305      	str	r3, [sp, #20]
 800cc86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc88:	1b9a      	subs	r2, r3, r6
 800cc8a:	42b3      	cmp	r3, r6
 800cc8c:	d004      	beq.n	800cc98 <_dtoa_r+0x824>
 800cc8e:	0038      	movs	r0, r7
 800cc90:	9905      	ldr	r1, [sp, #20]
 800cc92:	f001 f89f 	bl	800ddd4 <__pow5mult>
 800cc96:	9005      	str	r0, [sp, #20]
 800cc98:	2101      	movs	r1, #1
 800cc9a:	0038      	movs	r0, r7
 800cc9c:	f000 ffd4 	bl	800dc48 <__i2b>
 800cca0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cca2:	0006      	movs	r6, r0
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	dd31      	ble.n	800cd0c <_dtoa_r+0x898>
 800cca8:	001a      	movs	r2, r3
 800ccaa:	0001      	movs	r1, r0
 800ccac:	0038      	movs	r0, r7
 800ccae:	f001 f891 	bl	800ddd4 <__pow5mult>
 800ccb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ccb4:	0006      	movs	r6, r0
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	dd2d      	ble.n	800cd16 <_dtoa_r+0x8a2>
 800ccba:	2300      	movs	r3, #0
 800ccbc:	930e      	str	r3, [sp, #56]	; 0x38
 800ccbe:	6933      	ldr	r3, [r6, #16]
 800ccc0:	3303      	adds	r3, #3
 800ccc2:	009b      	lsls	r3, r3, #2
 800ccc4:	18f3      	adds	r3, r6, r3
 800ccc6:	6858      	ldr	r0, [r3, #4]
 800ccc8:	f000 ff76 	bl	800dbb8 <__hi0bits>
 800cccc:	2320      	movs	r3, #32
 800ccce:	1a18      	subs	r0, r3, r0
 800ccd0:	e039      	b.n	800cd46 <_dtoa_r+0x8d2>
 800ccd2:	2336      	movs	r3, #54	; 0x36
 800ccd4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ccd6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800ccd8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ccda:	1a9b      	subs	r3, r3, r2
 800ccdc:	e79d      	b.n	800cc1a <_dtoa_r+0x7a6>
 800ccde:	9b07      	ldr	r3, [sp, #28]
 800cce0:	1e5e      	subs	r6, r3, #1
 800cce2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cce4:	42b3      	cmp	r3, r6
 800cce6:	db07      	blt.n	800ccf8 <_dtoa_r+0x884>
 800cce8:	1b9e      	subs	r6, r3, r6
 800ccea:	9b07      	ldr	r3, [sp, #28]
 800ccec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	da93      	bge.n	800cc1a <_dtoa_r+0x7a6>
 800ccf2:	1ae4      	subs	r4, r4, r3
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	e790      	b.n	800cc1a <_dtoa_r+0x7a6>
 800ccf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ccfa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ccfc:	1af3      	subs	r3, r6, r3
 800ccfe:	18d3      	adds	r3, r2, r3
 800cd00:	960e      	str	r6, [sp, #56]	; 0x38
 800cd02:	9315      	str	r3, [sp, #84]	; 0x54
 800cd04:	2600      	movs	r6, #0
 800cd06:	e7f0      	b.n	800ccea <_dtoa_r+0x876>
 800cd08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd0a:	e7c0      	b.n	800cc8e <_dtoa_r+0x81a>
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	930e      	str	r3, [sp, #56]	; 0x38
 800cd10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cd12:	2b01      	cmp	r3, #1
 800cd14:	dc13      	bgt.n	800cd3e <_dtoa_r+0x8ca>
 800cd16:	2300      	movs	r3, #0
 800cd18:	930e      	str	r3, [sp, #56]	; 0x38
 800cd1a:	9b08      	ldr	r3, [sp, #32]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d10e      	bne.n	800cd3e <_dtoa_r+0x8ca>
 800cd20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd22:	031b      	lsls	r3, r3, #12
 800cd24:	d10b      	bne.n	800cd3e <_dtoa_r+0x8ca>
 800cd26:	4b5d      	ldr	r3, [pc, #372]	; (800ce9c <_dtoa_r+0xa28>)
 800cd28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd2a:	4213      	tst	r3, r2
 800cd2c:	d007      	beq.n	800cd3e <_dtoa_r+0x8ca>
 800cd2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd30:	3301      	adds	r3, #1
 800cd32:	930a      	str	r3, [sp, #40]	; 0x28
 800cd34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd36:	3301      	adds	r3, #1
 800cd38:	930d      	str	r3, [sp, #52]	; 0x34
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	930e      	str	r3, [sp, #56]	; 0x38
 800cd3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd40:	2001      	movs	r0, #1
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d1bb      	bne.n	800ccbe <_dtoa_r+0x84a>
 800cd46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd48:	221f      	movs	r2, #31
 800cd4a:	1818      	adds	r0, r3, r0
 800cd4c:	0003      	movs	r3, r0
 800cd4e:	4013      	ands	r3, r2
 800cd50:	4210      	tst	r0, r2
 800cd52:	d046      	beq.n	800cde2 <_dtoa_r+0x96e>
 800cd54:	3201      	adds	r2, #1
 800cd56:	1ad2      	subs	r2, r2, r3
 800cd58:	2a04      	cmp	r2, #4
 800cd5a:	dd3f      	ble.n	800cddc <_dtoa_r+0x968>
 800cd5c:	221c      	movs	r2, #28
 800cd5e:	1ad3      	subs	r3, r2, r3
 800cd60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd62:	18e4      	adds	r4, r4, r3
 800cd64:	18d2      	adds	r2, r2, r3
 800cd66:	920a      	str	r2, [sp, #40]	; 0x28
 800cd68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cd6a:	18d3      	adds	r3, r2, r3
 800cd6c:	930d      	str	r3, [sp, #52]	; 0x34
 800cd6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	dd05      	ble.n	800cd80 <_dtoa_r+0x90c>
 800cd74:	001a      	movs	r2, r3
 800cd76:	0038      	movs	r0, r7
 800cd78:	9905      	ldr	r1, [sp, #20]
 800cd7a:	f001 f887 	bl	800de8c <__lshift>
 800cd7e:	9005      	str	r0, [sp, #20]
 800cd80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	dd05      	ble.n	800cd92 <_dtoa_r+0x91e>
 800cd86:	0031      	movs	r1, r6
 800cd88:	001a      	movs	r2, r3
 800cd8a:	0038      	movs	r0, r7
 800cd8c:	f001 f87e 	bl	800de8c <__lshift>
 800cd90:	0006      	movs	r6, r0
 800cd92:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d026      	beq.n	800cde6 <_dtoa_r+0x972>
 800cd98:	0031      	movs	r1, r6
 800cd9a:	9805      	ldr	r0, [sp, #20]
 800cd9c:	f001 f8e4 	bl	800df68 <__mcmp>
 800cda0:	2800      	cmp	r0, #0
 800cda2:	da20      	bge.n	800cde6 <_dtoa_r+0x972>
 800cda4:	9b02      	ldr	r3, [sp, #8]
 800cda6:	220a      	movs	r2, #10
 800cda8:	3b01      	subs	r3, #1
 800cdaa:	9302      	str	r3, [sp, #8]
 800cdac:	0038      	movs	r0, r7
 800cdae:	2300      	movs	r3, #0
 800cdb0:	9905      	ldr	r1, [sp, #20]
 800cdb2:	f000 fe71 	bl	800da98 <__multadd>
 800cdb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cdb8:	9005      	str	r0, [sp, #20]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d100      	bne.n	800cdc0 <_dtoa_r+0x94c>
 800cdbe:	e166      	b.n	800d08e <_dtoa_r+0xc1a>
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	0029      	movs	r1, r5
 800cdc4:	220a      	movs	r2, #10
 800cdc6:	0038      	movs	r0, r7
 800cdc8:	f000 fe66 	bl	800da98 <__multadd>
 800cdcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cdce:	0005      	movs	r5, r0
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	dc47      	bgt.n	800ce64 <_dtoa_r+0x9f0>
 800cdd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cdd6:	2b02      	cmp	r3, #2
 800cdd8:	dc0d      	bgt.n	800cdf6 <_dtoa_r+0x982>
 800cdda:	e043      	b.n	800ce64 <_dtoa_r+0x9f0>
 800cddc:	2a04      	cmp	r2, #4
 800cdde:	d0c6      	beq.n	800cd6e <_dtoa_r+0x8fa>
 800cde0:	0013      	movs	r3, r2
 800cde2:	331c      	adds	r3, #28
 800cde4:	e7bc      	b.n	800cd60 <_dtoa_r+0x8ec>
 800cde6:	9b07      	ldr	r3, [sp, #28]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	dc35      	bgt.n	800ce58 <_dtoa_r+0x9e4>
 800cdec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cdee:	2b02      	cmp	r3, #2
 800cdf0:	dd32      	ble.n	800ce58 <_dtoa_r+0x9e4>
 800cdf2:	9b07      	ldr	r3, [sp, #28]
 800cdf4:	930c      	str	r3, [sp, #48]	; 0x30
 800cdf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d10c      	bne.n	800ce16 <_dtoa_r+0x9a2>
 800cdfc:	0031      	movs	r1, r6
 800cdfe:	2205      	movs	r2, #5
 800ce00:	0038      	movs	r0, r7
 800ce02:	f000 fe49 	bl	800da98 <__multadd>
 800ce06:	0006      	movs	r6, r0
 800ce08:	0001      	movs	r1, r0
 800ce0a:	9805      	ldr	r0, [sp, #20]
 800ce0c:	f001 f8ac 	bl	800df68 <__mcmp>
 800ce10:	2800      	cmp	r0, #0
 800ce12:	dd00      	ble.n	800ce16 <_dtoa_r+0x9a2>
 800ce14:	e5a5      	b.n	800c962 <_dtoa_r+0x4ee>
 800ce16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ce18:	43db      	mvns	r3, r3
 800ce1a:	9302      	str	r3, [sp, #8]
 800ce1c:	9b06      	ldr	r3, [sp, #24]
 800ce1e:	9308      	str	r3, [sp, #32]
 800ce20:	2400      	movs	r4, #0
 800ce22:	0031      	movs	r1, r6
 800ce24:	0038      	movs	r0, r7
 800ce26:	f000 fe13 	bl	800da50 <_Bfree>
 800ce2a:	2d00      	cmp	r5, #0
 800ce2c:	d100      	bne.n	800ce30 <_dtoa_r+0x9bc>
 800ce2e:	e6b7      	b.n	800cba0 <_dtoa_r+0x72c>
 800ce30:	2c00      	cmp	r4, #0
 800ce32:	d005      	beq.n	800ce40 <_dtoa_r+0x9cc>
 800ce34:	42ac      	cmp	r4, r5
 800ce36:	d003      	beq.n	800ce40 <_dtoa_r+0x9cc>
 800ce38:	0021      	movs	r1, r4
 800ce3a:	0038      	movs	r0, r7
 800ce3c:	f000 fe08 	bl	800da50 <_Bfree>
 800ce40:	0029      	movs	r1, r5
 800ce42:	0038      	movs	r0, r7
 800ce44:	f000 fe04 	bl	800da50 <_Bfree>
 800ce48:	e6aa      	b.n	800cba0 <_dtoa_r+0x72c>
 800ce4a:	2600      	movs	r6, #0
 800ce4c:	0035      	movs	r5, r6
 800ce4e:	e7e2      	b.n	800ce16 <_dtoa_r+0x9a2>
 800ce50:	9602      	str	r6, [sp, #8]
 800ce52:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800ce54:	0035      	movs	r5, r6
 800ce56:	e584      	b.n	800c962 <_dtoa_r+0x4ee>
 800ce58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d100      	bne.n	800ce60 <_dtoa_r+0x9ec>
 800ce5e:	e0ce      	b.n	800cffe <_dtoa_r+0xb8a>
 800ce60:	9b07      	ldr	r3, [sp, #28]
 800ce62:	930c      	str	r3, [sp, #48]	; 0x30
 800ce64:	2c00      	cmp	r4, #0
 800ce66:	dd05      	ble.n	800ce74 <_dtoa_r+0xa00>
 800ce68:	0029      	movs	r1, r5
 800ce6a:	0022      	movs	r2, r4
 800ce6c:	0038      	movs	r0, r7
 800ce6e:	f001 f80d 	bl	800de8c <__lshift>
 800ce72:	0005      	movs	r5, r0
 800ce74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce76:	0028      	movs	r0, r5
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d022      	beq.n	800cec2 <_dtoa_r+0xa4e>
 800ce7c:	0038      	movs	r0, r7
 800ce7e:	6869      	ldr	r1, [r5, #4]
 800ce80:	f000 fda2 	bl	800d9c8 <_Balloc>
 800ce84:	1e04      	subs	r4, r0, #0
 800ce86:	d10f      	bne.n	800cea8 <_dtoa_r+0xa34>
 800ce88:	0002      	movs	r2, r0
 800ce8a:	4b05      	ldr	r3, [pc, #20]	; (800cea0 <_dtoa_r+0xa2c>)
 800ce8c:	4905      	ldr	r1, [pc, #20]	; (800cea4 <_dtoa_r+0xa30>)
 800ce8e:	f7ff fb06 	bl	800c49e <_dtoa_r+0x2a>
 800ce92:	46c0      	nop			; (mov r8, r8)
 800ce94:	40240000 	.word	0x40240000
 800ce98:	00000433 	.word	0x00000433
 800ce9c:	7ff00000 	.word	0x7ff00000
 800cea0:	0800f8c8 	.word	0x0800f8c8
 800cea4:	000002ea 	.word	0x000002ea
 800cea8:	0029      	movs	r1, r5
 800ceaa:	692b      	ldr	r3, [r5, #16]
 800ceac:	310c      	adds	r1, #12
 800ceae:	1c9a      	adds	r2, r3, #2
 800ceb0:	0092      	lsls	r2, r2, #2
 800ceb2:	300c      	adds	r0, #12
 800ceb4:	f7fd fced 	bl	800a892 <memcpy>
 800ceb8:	2201      	movs	r2, #1
 800ceba:	0021      	movs	r1, r4
 800cebc:	0038      	movs	r0, r7
 800cebe:	f000 ffe5 	bl	800de8c <__lshift>
 800cec2:	9b06      	ldr	r3, [sp, #24]
 800cec4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cec6:	930a      	str	r3, [sp, #40]	; 0x28
 800cec8:	3b01      	subs	r3, #1
 800ceca:	189b      	adds	r3, r3, r2
 800cecc:	2201      	movs	r2, #1
 800cece:	002c      	movs	r4, r5
 800ced0:	0005      	movs	r5, r0
 800ced2:	9314      	str	r3, [sp, #80]	; 0x50
 800ced4:	9b08      	ldr	r3, [sp, #32]
 800ced6:	4013      	ands	r3, r2
 800ced8:	930f      	str	r3, [sp, #60]	; 0x3c
 800ceda:	0031      	movs	r1, r6
 800cedc:	9805      	ldr	r0, [sp, #20]
 800cede:	f7ff fa3d 	bl	800c35c <quorem>
 800cee2:	0003      	movs	r3, r0
 800cee4:	0021      	movs	r1, r4
 800cee6:	3330      	adds	r3, #48	; 0x30
 800cee8:	900d      	str	r0, [sp, #52]	; 0x34
 800ceea:	9805      	ldr	r0, [sp, #20]
 800ceec:	9307      	str	r3, [sp, #28]
 800ceee:	f001 f83b 	bl	800df68 <__mcmp>
 800cef2:	002a      	movs	r2, r5
 800cef4:	900e      	str	r0, [sp, #56]	; 0x38
 800cef6:	0031      	movs	r1, r6
 800cef8:	0038      	movs	r0, r7
 800cefa:	f001 f851 	bl	800dfa0 <__mdiff>
 800cefe:	68c3      	ldr	r3, [r0, #12]
 800cf00:	9008      	str	r0, [sp, #32]
 800cf02:	9310      	str	r3, [sp, #64]	; 0x40
 800cf04:	2301      	movs	r3, #1
 800cf06:	930c      	str	r3, [sp, #48]	; 0x30
 800cf08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d104      	bne.n	800cf18 <_dtoa_r+0xaa4>
 800cf0e:	0001      	movs	r1, r0
 800cf10:	9805      	ldr	r0, [sp, #20]
 800cf12:	f001 f829 	bl	800df68 <__mcmp>
 800cf16:	900c      	str	r0, [sp, #48]	; 0x30
 800cf18:	0038      	movs	r0, r7
 800cf1a:	9908      	ldr	r1, [sp, #32]
 800cf1c:	f000 fd98 	bl	800da50 <_Bfree>
 800cf20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf24:	3301      	adds	r3, #1
 800cf26:	9308      	str	r3, [sp, #32]
 800cf28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cf2a:	4313      	orrs	r3, r2
 800cf2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cf2e:	4313      	orrs	r3, r2
 800cf30:	d10c      	bne.n	800cf4c <_dtoa_r+0xad8>
 800cf32:	9b07      	ldr	r3, [sp, #28]
 800cf34:	2b39      	cmp	r3, #57	; 0x39
 800cf36:	d026      	beq.n	800cf86 <_dtoa_r+0xb12>
 800cf38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	dd02      	ble.n	800cf44 <_dtoa_r+0xad0>
 800cf3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf40:	3331      	adds	r3, #49	; 0x31
 800cf42:	9307      	str	r3, [sp, #28]
 800cf44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf46:	9a07      	ldr	r2, [sp, #28]
 800cf48:	701a      	strb	r2, [r3, #0]
 800cf4a:	e76a      	b.n	800ce22 <_dtoa_r+0x9ae>
 800cf4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	db04      	blt.n	800cf5c <_dtoa_r+0xae8>
 800cf52:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800cf54:	4313      	orrs	r3, r2
 800cf56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cf58:	4313      	orrs	r3, r2
 800cf5a:	d11f      	bne.n	800cf9c <_dtoa_r+0xb28>
 800cf5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	ddf0      	ble.n	800cf44 <_dtoa_r+0xad0>
 800cf62:	9905      	ldr	r1, [sp, #20]
 800cf64:	2201      	movs	r2, #1
 800cf66:	0038      	movs	r0, r7
 800cf68:	f000 ff90 	bl	800de8c <__lshift>
 800cf6c:	0031      	movs	r1, r6
 800cf6e:	9005      	str	r0, [sp, #20]
 800cf70:	f000 fffa 	bl	800df68 <__mcmp>
 800cf74:	2800      	cmp	r0, #0
 800cf76:	dc03      	bgt.n	800cf80 <_dtoa_r+0xb0c>
 800cf78:	d1e4      	bne.n	800cf44 <_dtoa_r+0xad0>
 800cf7a:	9b07      	ldr	r3, [sp, #28]
 800cf7c:	07db      	lsls	r3, r3, #31
 800cf7e:	d5e1      	bpl.n	800cf44 <_dtoa_r+0xad0>
 800cf80:	9b07      	ldr	r3, [sp, #28]
 800cf82:	2b39      	cmp	r3, #57	; 0x39
 800cf84:	d1db      	bne.n	800cf3e <_dtoa_r+0xaca>
 800cf86:	2339      	movs	r3, #57	; 0x39
 800cf88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf8a:	7013      	strb	r3, [r2, #0]
 800cf8c:	9b08      	ldr	r3, [sp, #32]
 800cf8e:	9308      	str	r3, [sp, #32]
 800cf90:	3b01      	subs	r3, #1
 800cf92:	781a      	ldrb	r2, [r3, #0]
 800cf94:	2a39      	cmp	r2, #57	; 0x39
 800cf96:	d068      	beq.n	800d06a <_dtoa_r+0xbf6>
 800cf98:	3201      	adds	r2, #1
 800cf9a:	e7d5      	b.n	800cf48 <_dtoa_r+0xad4>
 800cf9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	dd07      	ble.n	800cfb2 <_dtoa_r+0xb3e>
 800cfa2:	9b07      	ldr	r3, [sp, #28]
 800cfa4:	2b39      	cmp	r3, #57	; 0x39
 800cfa6:	d0ee      	beq.n	800cf86 <_dtoa_r+0xb12>
 800cfa8:	9b07      	ldr	r3, [sp, #28]
 800cfaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cfac:	3301      	adds	r3, #1
 800cfae:	7013      	strb	r3, [r2, #0]
 800cfb0:	e737      	b.n	800ce22 <_dtoa_r+0x9ae>
 800cfb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfb4:	9a07      	ldr	r2, [sp, #28]
 800cfb6:	701a      	strb	r2, [r3, #0]
 800cfb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cfba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d03e      	beq.n	800d03e <_dtoa_r+0xbca>
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	220a      	movs	r2, #10
 800cfc4:	9905      	ldr	r1, [sp, #20]
 800cfc6:	0038      	movs	r0, r7
 800cfc8:	f000 fd66 	bl	800da98 <__multadd>
 800cfcc:	2300      	movs	r3, #0
 800cfce:	9005      	str	r0, [sp, #20]
 800cfd0:	220a      	movs	r2, #10
 800cfd2:	0021      	movs	r1, r4
 800cfd4:	0038      	movs	r0, r7
 800cfd6:	42ac      	cmp	r4, r5
 800cfd8:	d106      	bne.n	800cfe8 <_dtoa_r+0xb74>
 800cfda:	f000 fd5d 	bl	800da98 <__multadd>
 800cfde:	0004      	movs	r4, r0
 800cfe0:	0005      	movs	r5, r0
 800cfe2:	9b08      	ldr	r3, [sp, #32]
 800cfe4:	930a      	str	r3, [sp, #40]	; 0x28
 800cfe6:	e778      	b.n	800ceda <_dtoa_r+0xa66>
 800cfe8:	f000 fd56 	bl	800da98 <__multadd>
 800cfec:	0029      	movs	r1, r5
 800cfee:	0004      	movs	r4, r0
 800cff0:	2300      	movs	r3, #0
 800cff2:	220a      	movs	r2, #10
 800cff4:	0038      	movs	r0, r7
 800cff6:	f000 fd4f 	bl	800da98 <__multadd>
 800cffa:	0005      	movs	r5, r0
 800cffc:	e7f1      	b.n	800cfe2 <_dtoa_r+0xb6e>
 800cffe:	9b07      	ldr	r3, [sp, #28]
 800d000:	930c      	str	r3, [sp, #48]	; 0x30
 800d002:	2400      	movs	r4, #0
 800d004:	0031      	movs	r1, r6
 800d006:	9805      	ldr	r0, [sp, #20]
 800d008:	f7ff f9a8 	bl	800c35c <quorem>
 800d00c:	9b06      	ldr	r3, [sp, #24]
 800d00e:	3030      	adds	r0, #48	; 0x30
 800d010:	5518      	strb	r0, [r3, r4]
 800d012:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d014:	3401      	adds	r4, #1
 800d016:	9007      	str	r0, [sp, #28]
 800d018:	42a3      	cmp	r3, r4
 800d01a:	dd07      	ble.n	800d02c <_dtoa_r+0xbb8>
 800d01c:	2300      	movs	r3, #0
 800d01e:	220a      	movs	r2, #10
 800d020:	0038      	movs	r0, r7
 800d022:	9905      	ldr	r1, [sp, #20]
 800d024:	f000 fd38 	bl	800da98 <__multadd>
 800d028:	9005      	str	r0, [sp, #20]
 800d02a:	e7eb      	b.n	800d004 <_dtoa_r+0xb90>
 800d02c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d02e:	2001      	movs	r0, #1
 800d030:	2b00      	cmp	r3, #0
 800d032:	dd00      	ble.n	800d036 <_dtoa_r+0xbc2>
 800d034:	0018      	movs	r0, r3
 800d036:	2400      	movs	r4, #0
 800d038:	9b06      	ldr	r3, [sp, #24]
 800d03a:	181b      	adds	r3, r3, r0
 800d03c:	9308      	str	r3, [sp, #32]
 800d03e:	9905      	ldr	r1, [sp, #20]
 800d040:	2201      	movs	r2, #1
 800d042:	0038      	movs	r0, r7
 800d044:	f000 ff22 	bl	800de8c <__lshift>
 800d048:	0031      	movs	r1, r6
 800d04a:	9005      	str	r0, [sp, #20]
 800d04c:	f000 ff8c 	bl	800df68 <__mcmp>
 800d050:	2800      	cmp	r0, #0
 800d052:	dc9b      	bgt.n	800cf8c <_dtoa_r+0xb18>
 800d054:	d102      	bne.n	800d05c <_dtoa_r+0xbe8>
 800d056:	9b07      	ldr	r3, [sp, #28]
 800d058:	07db      	lsls	r3, r3, #31
 800d05a:	d497      	bmi.n	800cf8c <_dtoa_r+0xb18>
 800d05c:	9b08      	ldr	r3, [sp, #32]
 800d05e:	9308      	str	r3, [sp, #32]
 800d060:	3b01      	subs	r3, #1
 800d062:	781a      	ldrb	r2, [r3, #0]
 800d064:	2a30      	cmp	r2, #48	; 0x30
 800d066:	d0fa      	beq.n	800d05e <_dtoa_r+0xbea>
 800d068:	e6db      	b.n	800ce22 <_dtoa_r+0x9ae>
 800d06a:	9a06      	ldr	r2, [sp, #24]
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d18e      	bne.n	800cf8e <_dtoa_r+0xb1a>
 800d070:	9b02      	ldr	r3, [sp, #8]
 800d072:	3301      	adds	r3, #1
 800d074:	9302      	str	r3, [sp, #8]
 800d076:	2331      	movs	r3, #49	; 0x31
 800d078:	e799      	b.n	800cfae <_dtoa_r+0xb3a>
 800d07a:	4b09      	ldr	r3, [pc, #36]	; (800d0a0 <_dtoa_r+0xc2c>)
 800d07c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d07e:	9306      	str	r3, [sp, #24]
 800d080:	4b08      	ldr	r3, [pc, #32]	; (800d0a4 <_dtoa_r+0xc30>)
 800d082:	2a00      	cmp	r2, #0
 800d084:	d001      	beq.n	800d08a <_dtoa_r+0xc16>
 800d086:	f7ff fa3f 	bl	800c508 <_dtoa_r+0x94>
 800d08a:	f7ff fa3f 	bl	800c50c <_dtoa_r+0x98>
 800d08e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d090:	2b00      	cmp	r3, #0
 800d092:	dcb6      	bgt.n	800d002 <_dtoa_r+0xb8e>
 800d094:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d096:	2b02      	cmp	r3, #2
 800d098:	dd00      	ble.n	800d09c <_dtoa_r+0xc28>
 800d09a:	e6ac      	b.n	800cdf6 <_dtoa_r+0x982>
 800d09c:	e7b1      	b.n	800d002 <_dtoa_r+0xb8e>
 800d09e:	46c0      	nop			; (mov r8, r8)
 800d0a0:	0800f849 	.word	0x0800f849
 800d0a4:	0800f851 	.word	0x0800f851

0800d0a8 <__sflush_r>:
 800d0a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0aa:	898b      	ldrh	r3, [r1, #12]
 800d0ac:	0005      	movs	r5, r0
 800d0ae:	000c      	movs	r4, r1
 800d0b0:	071a      	lsls	r2, r3, #28
 800d0b2:	d45f      	bmi.n	800d174 <__sflush_r+0xcc>
 800d0b4:	684a      	ldr	r2, [r1, #4]
 800d0b6:	2a00      	cmp	r2, #0
 800d0b8:	dc04      	bgt.n	800d0c4 <__sflush_r+0x1c>
 800d0ba:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800d0bc:	2a00      	cmp	r2, #0
 800d0be:	dc01      	bgt.n	800d0c4 <__sflush_r+0x1c>
 800d0c0:	2000      	movs	r0, #0
 800d0c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d0c4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d0c6:	2f00      	cmp	r7, #0
 800d0c8:	d0fa      	beq.n	800d0c0 <__sflush_r+0x18>
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	2180      	movs	r1, #128	; 0x80
 800d0ce:	682e      	ldr	r6, [r5, #0]
 800d0d0:	602a      	str	r2, [r5, #0]
 800d0d2:	001a      	movs	r2, r3
 800d0d4:	0149      	lsls	r1, r1, #5
 800d0d6:	400a      	ands	r2, r1
 800d0d8:	420b      	tst	r3, r1
 800d0da:	d034      	beq.n	800d146 <__sflush_r+0x9e>
 800d0dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d0de:	89a3      	ldrh	r3, [r4, #12]
 800d0e0:	075b      	lsls	r3, r3, #29
 800d0e2:	d506      	bpl.n	800d0f2 <__sflush_r+0x4a>
 800d0e4:	6863      	ldr	r3, [r4, #4]
 800d0e6:	1ac0      	subs	r0, r0, r3
 800d0e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d001      	beq.n	800d0f2 <__sflush_r+0x4a>
 800d0ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d0f0:	1ac0      	subs	r0, r0, r3
 800d0f2:	0002      	movs	r2, r0
 800d0f4:	6a21      	ldr	r1, [r4, #32]
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	0028      	movs	r0, r5
 800d0fa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d0fc:	47b8      	blx	r7
 800d0fe:	89a1      	ldrh	r1, [r4, #12]
 800d100:	1c43      	adds	r3, r0, #1
 800d102:	d106      	bne.n	800d112 <__sflush_r+0x6a>
 800d104:	682b      	ldr	r3, [r5, #0]
 800d106:	2b1d      	cmp	r3, #29
 800d108:	d831      	bhi.n	800d16e <__sflush_r+0xc6>
 800d10a:	4a2c      	ldr	r2, [pc, #176]	; (800d1bc <__sflush_r+0x114>)
 800d10c:	40da      	lsrs	r2, r3
 800d10e:	07d3      	lsls	r3, r2, #31
 800d110:	d52d      	bpl.n	800d16e <__sflush_r+0xc6>
 800d112:	2300      	movs	r3, #0
 800d114:	6063      	str	r3, [r4, #4]
 800d116:	6923      	ldr	r3, [r4, #16]
 800d118:	6023      	str	r3, [r4, #0]
 800d11a:	04cb      	lsls	r3, r1, #19
 800d11c:	d505      	bpl.n	800d12a <__sflush_r+0x82>
 800d11e:	1c43      	adds	r3, r0, #1
 800d120:	d102      	bne.n	800d128 <__sflush_r+0x80>
 800d122:	682b      	ldr	r3, [r5, #0]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d100      	bne.n	800d12a <__sflush_r+0x82>
 800d128:	6560      	str	r0, [r4, #84]	; 0x54
 800d12a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d12c:	602e      	str	r6, [r5, #0]
 800d12e:	2900      	cmp	r1, #0
 800d130:	d0c6      	beq.n	800d0c0 <__sflush_r+0x18>
 800d132:	0023      	movs	r3, r4
 800d134:	3344      	adds	r3, #68	; 0x44
 800d136:	4299      	cmp	r1, r3
 800d138:	d002      	beq.n	800d140 <__sflush_r+0x98>
 800d13a:	0028      	movs	r0, r5
 800d13c:	f001 f93a 	bl	800e3b4 <_free_r>
 800d140:	2000      	movs	r0, #0
 800d142:	6360      	str	r0, [r4, #52]	; 0x34
 800d144:	e7bd      	b.n	800d0c2 <__sflush_r+0x1a>
 800d146:	2301      	movs	r3, #1
 800d148:	0028      	movs	r0, r5
 800d14a:	6a21      	ldr	r1, [r4, #32]
 800d14c:	47b8      	blx	r7
 800d14e:	1c43      	adds	r3, r0, #1
 800d150:	d1c5      	bne.n	800d0de <__sflush_r+0x36>
 800d152:	682b      	ldr	r3, [r5, #0]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d0c2      	beq.n	800d0de <__sflush_r+0x36>
 800d158:	2b1d      	cmp	r3, #29
 800d15a:	d001      	beq.n	800d160 <__sflush_r+0xb8>
 800d15c:	2b16      	cmp	r3, #22
 800d15e:	d101      	bne.n	800d164 <__sflush_r+0xbc>
 800d160:	602e      	str	r6, [r5, #0]
 800d162:	e7ad      	b.n	800d0c0 <__sflush_r+0x18>
 800d164:	2340      	movs	r3, #64	; 0x40
 800d166:	89a2      	ldrh	r2, [r4, #12]
 800d168:	4313      	orrs	r3, r2
 800d16a:	81a3      	strh	r3, [r4, #12]
 800d16c:	e7a9      	b.n	800d0c2 <__sflush_r+0x1a>
 800d16e:	2340      	movs	r3, #64	; 0x40
 800d170:	430b      	orrs	r3, r1
 800d172:	e7fa      	b.n	800d16a <__sflush_r+0xc2>
 800d174:	690f      	ldr	r7, [r1, #16]
 800d176:	2f00      	cmp	r7, #0
 800d178:	d0a2      	beq.n	800d0c0 <__sflush_r+0x18>
 800d17a:	680a      	ldr	r2, [r1, #0]
 800d17c:	600f      	str	r7, [r1, #0]
 800d17e:	1bd2      	subs	r2, r2, r7
 800d180:	9201      	str	r2, [sp, #4]
 800d182:	2200      	movs	r2, #0
 800d184:	079b      	lsls	r3, r3, #30
 800d186:	d100      	bne.n	800d18a <__sflush_r+0xe2>
 800d188:	694a      	ldr	r2, [r1, #20]
 800d18a:	60a2      	str	r2, [r4, #8]
 800d18c:	9b01      	ldr	r3, [sp, #4]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	dc00      	bgt.n	800d194 <__sflush_r+0xec>
 800d192:	e795      	b.n	800d0c0 <__sflush_r+0x18>
 800d194:	003a      	movs	r2, r7
 800d196:	0028      	movs	r0, r5
 800d198:	9b01      	ldr	r3, [sp, #4]
 800d19a:	6a21      	ldr	r1, [r4, #32]
 800d19c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d19e:	47b0      	blx	r6
 800d1a0:	2800      	cmp	r0, #0
 800d1a2:	dc06      	bgt.n	800d1b2 <__sflush_r+0x10a>
 800d1a4:	2340      	movs	r3, #64	; 0x40
 800d1a6:	2001      	movs	r0, #1
 800d1a8:	89a2      	ldrh	r2, [r4, #12]
 800d1aa:	4240      	negs	r0, r0
 800d1ac:	4313      	orrs	r3, r2
 800d1ae:	81a3      	strh	r3, [r4, #12]
 800d1b0:	e787      	b.n	800d0c2 <__sflush_r+0x1a>
 800d1b2:	9b01      	ldr	r3, [sp, #4]
 800d1b4:	183f      	adds	r7, r7, r0
 800d1b6:	1a1b      	subs	r3, r3, r0
 800d1b8:	9301      	str	r3, [sp, #4]
 800d1ba:	e7e7      	b.n	800d18c <__sflush_r+0xe4>
 800d1bc:	20400001 	.word	0x20400001

0800d1c0 <_fflush_r>:
 800d1c0:	690b      	ldr	r3, [r1, #16]
 800d1c2:	b570      	push	{r4, r5, r6, lr}
 800d1c4:	0005      	movs	r5, r0
 800d1c6:	000c      	movs	r4, r1
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d102      	bne.n	800d1d2 <_fflush_r+0x12>
 800d1cc:	2500      	movs	r5, #0
 800d1ce:	0028      	movs	r0, r5
 800d1d0:	bd70      	pop	{r4, r5, r6, pc}
 800d1d2:	2800      	cmp	r0, #0
 800d1d4:	d004      	beq.n	800d1e0 <_fflush_r+0x20>
 800d1d6:	6983      	ldr	r3, [r0, #24]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d101      	bne.n	800d1e0 <_fflush_r+0x20>
 800d1dc:	f7fd fa92 	bl	800a704 <__sinit>
 800d1e0:	4b14      	ldr	r3, [pc, #80]	; (800d234 <_fflush_r+0x74>)
 800d1e2:	429c      	cmp	r4, r3
 800d1e4:	d11b      	bne.n	800d21e <_fflush_r+0x5e>
 800d1e6:	686c      	ldr	r4, [r5, #4]
 800d1e8:	220c      	movs	r2, #12
 800d1ea:	5ea3      	ldrsh	r3, [r4, r2]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d0ed      	beq.n	800d1cc <_fflush_r+0xc>
 800d1f0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d1f2:	07d2      	lsls	r2, r2, #31
 800d1f4:	d404      	bmi.n	800d200 <_fflush_r+0x40>
 800d1f6:	059b      	lsls	r3, r3, #22
 800d1f8:	d402      	bmi.n	800d200 <_fflush_r+0x40>
 800d1fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1fc:	f7fd fb47 	bl	800a88e <__retarget_lock_acquire_recursive>
 800d200:	0028      	movs	r0, r5
 800d202:	0021      	movs	r1, r4
 800d204:	f7ff ff50 	bl	800d0a8 <__sflush_r>
 800d208:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d20a:	0005      	movs	r5, r0
 800d20c:	07db      	lsls	r3, r3, #31
 800d20e:	d4de      	bmi.n	800d1ce <_fflush_r+0xe>
 800d210:	89a3      	ldrh	r3, [r4, #12]
 800d212:	059b      	lsls	r3, r3, #22
 800d214:	d4db      	bmi.n	800d1ce <_fflush_r+0xe>
 800d216:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d218:	f7fd fb3a 	bl	800a890 <__retarget_lock_release_recursive>
 800d21c:	e7d7      	b.n	800d1ce <_fflush_r+0xe>
 800d21e:	4b06      	ldr	r3, [pc, #24]	; (800d238 <_fflush_r+0x78>)
 800d220:	429c      	cmp	r4, r3
 800d222:	d101      	bne.n	800d228 <_fflush_r+0x68>
 800d224:	68ac      	ldr	r4, [r5, #8]
 800d226:	e7df      	b.n	800d1e8 <_fflush_r+0x28>
 800d228:	4b04      	ldr	r3, [pc, #16]	; (800d23c <_fflush_r+0x7c>)
 800d22a:	429c      	cmp	r4, r3
 800d22c:	d1dc      	bne.n	800d1e8 <_fflush_r+0x28>
 800d22e:	68ec      	ldr	r4, [r5, #12]
 800d230:	e7da      	b.n	800d1e8 <_fflush_r+0x28>
 800d232:	46c0      	nop			; (mov r8, r8)
 800d234:	0800f67c 	.word	0x0800f67c
 800d238:	0800f69c 	.word	0x0800f69c
 800d23c:	0800f65c 	.word	0x0800f65c

0800d240 <rshift>:
 800d240:	0002      	movs	r2, r0
 800d242:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d244:	6904      	ldr	r4, [r0, #16]
 800d246:	3214      	adds	r2, #20
 800d248:	0013      	movs	r3, r2
 800d24a:	b085      	sub	sp, #20
 800d24c:	114f      	asrs	r7, r1, #5
 800d24e:	42bc      	cmp	r4, r7
 800d250:	dd31      	ble.n	800d2b6 <rshift+0x76>
 800d252:	00bb      	lsls	r3, r7, #2
 800d254:	18d3      	adds	r3, r2, r3
 800d256:	261f      	movs	r6, #31
 800d258:	9301      	str	r3, [sp, #4]
 800d25a:	000b      	movs	r3, r1
 800d25c:	00a5      	lsls	r5, r4, #2
 800d25e:	4033      	ands	r3, r6
 800d260:	1955      	adds	r5, r2, r5
 800d262:	9302      	str	r3, [sp, #8]
 800d264:	4231      	tst	r1, r6
 800d266:	d10c      	bne.n	800d282 <rshift+0x42>
 800d268:	0016      	movs	r6, r2
 800d26a:	9901      	ldr	r1, [sp, #4]
 800d26c:	428d      	cmp	r5, r1
 800d26e:	d838      	bhi.n	800d2e2 <rshift+0xa2>
 800d270:	9901      	ldr	r1, [sp, #4]
 800d272:	2300      	movs	r3, #0
 800d274:	3903      	subs	r1, #3
 800d276:	428d      	cmp	r5, r1
 800d278:	d301      	bcc.n	800d27e <rshift+0x3e>
 800d27a:	1be3      	subs	r3, r4, r7
 800d27c:	009b      	lsls	r3, r3, #2
 800d27e:	18d3      	adds	r3, r2, r3
 800d280:	e019      	b.n	800d2b6 <rshift+0x76>
 800d282:	2120      	movs	r1, #32
 800d284:	9b02      	ldr	r3, [sp, #8]
 800d286:	9e01      	ldr	r6, [sp, #4]
 800d288:	1acb      	subs	r3, r1, r3
 800d28a:	9303      	str	r3, [sp, #12]
 800d28c:	ce02      	ldmia	r6!, {r1}
 800d28e:	9b02      	ldr	r3, [sp, #8]
 800d290:	4694      	mov	ip, r2
 800d292:	40d9      	lsrs	r1, r3
 800d294:	9100      	str	r1, [sp, #0]
 800d296:	42b5      	cmp	r5, r6
 800d298:	d816      	bhi.n	800d2c8 <rshift+0x88>
 800d29a:	9e01      	ldr	r6, [sp, #4]
 800d29c:	2300      	movs	r3, #0
 800d29e:	3601      	adds	r6, #1
 800d2a0:	42b5      	cmp	r5, r6
 800d2a2:	d302      	bcc.n	800d2aa <rshift+0x6a>
 800d2a4:	1be3      	subs	r3, r4, r7
 800d2a6:	009b      	lsls	r3, r3, #2
 800d2a8:	3b04      	subs	r3, #4
 800d2aa:	9900      	ldr	r1, [sp, #0]
 800d2ac:	18d3      	adds	r3, r2, r3
 800d2ae:	6019      	str	r1, [r3, #0]
 800d2b0:	2900      	cmp	r1, #0
 800d2b2:	d000      	beq.n	800d2b6 <rshift+0x76>
 800d2b4:	3304      	adds	r3, #4
 800d2b6:	1a99      	subs	r1, r3, r2
 800d2b8:	1089      	asrs	r1, r1, #2
 800d2ba:	6101      	str	r1, [r0, #16]
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d101      	bne.n	800d2c4 <rshift+0x84>
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	6143      	str	r3, [r0, #20]
 800d2c4:	b005      	add	sp, #20
 800d2c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2c8:	6833      	ldr	r3, [r6, #0]
 800d2ca:	9903      	ldr	r1, [sp, #12]
 800d2cc:	408b      	lsls	r3, r1
 800d2ce:	9900      	ldr	r1, [sp, #0]
 800d2d0:	4319      	orrs	r1, r3
 800d2d2:	4663      	mov	r3, ip
 800d2d4:	c302      	stmia	r3!, {r1}
 800d2d6:	469c      	mov	ip, r3
 800d2d8:	ce02      	ldmia	r6!, {r1}
 800d2da:	9b02      	ldr	r3, [sp, #8]
 800d2dc:	40d9      	lsrs	r1, r3
 800d2de:	9100      	str	r1, [sp, #0]
 800d2e0:	e7d9      	b.n	800d296 <rshift+0x56>
 800d2e2:	c908      	ldmia	r1!, {r3}
 800d2e4:	c608      	stmia	r6!, {r3}
 800d2e6:	e7c1      	b.n	800d26c <rshift+0x2c>

0800d2e8 <__hexdig_fun>:
 800d2e8:	0002      	movs	r2, r0
 800d2ea:	3a30      	subs	r2, #48	; 0x30
 800d2ec:	0003      	movs	r3, r0
 800d2ee:	2a09      	cmp	r2, #9
 800d2f0:	d802      	bhi.n	800d2f8 <__hexdig_fun+0x10>
 800d2f2:	3b20      	subs	r3, #32
 800d2f4:	b2d8      	uxtb	r0, r3
 800d2f6:	4770      	bx	lr
 800d2f8:	0002      	movs	r2, r0
 800d2fa:	3a61      	subs	r2, #97	; 0x61
 800d2fc:	2a05      	cmp	r2, #5
 800d2fe:	d801      	bhi.n	800d304 <__hexdig_fun+0x1c>
 800d300:	3b47      	subs	r3, #71	; 0x47
 800d302:	e7f7      	b.n	800d2f4 <__hexdig_fun+0xc>
 800d304:	001a      	movs	r2, r3
 800d306:	3a41      	subs	r2, #65	; 0x41
 800d308:	2000      	movs	r0, #0
 800d30a:	2a05      	cmp	r2, #5
 800d30c:	d8f3      	bhi.n	800d2f6 <__hexdig_fun+0xe>
 800d30e:	3b27      	subs	r3, #39	; 0x27
 800d310:	e7f0      	b.n	800d2f4 <__hexdig_fun+0xc>
	...

0800d314 <__gethex>:
 800d314:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d316:	b08d      	sub	sp, #52	; 0x34
 800d318:	930a      	str	r3, [sp, #40]	; 0x28
 800d31a:	4bbf      	ldr	r3, [pc, #764]	; (800d618 <__gethex+0x304>)
 800d31c:	9005      	str	r0, [sp, #20]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	9109      	str	r1, [sp, #36]	; 0x24
 800d322:	0018      	movs	r0, r3
 800d324:	9202      	str	r2, [sp, #8]
 800d326:	9307      	str	r3, [sp, #28]
 800d328:	f7f2 feee 	bl	8000108 <strlen>
 800d32c:	2202      	movs	r2, #2
 800d32e:	9b07      	ldr	r3, [sp, #28]
 800d330:	4252      	negs	r2, r2
 800d332:	181b      	adds	r3, r3, r0
 800d334:	3b01      	subs	r3, #1
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	9003      	str	r0, [sp, #12]
 800d33a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d33c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d33e:	6819      	ldr	r1, [r3, #0]
 800d340:	1c8b      	adds	r3, r1, #2
 800d342:	1a52      	subs	r2, r2, r1
 800d344:	18d1      	adds	r1, r2, r3
 800d346:	9301      	str	r3, [sp, #4]
 800d348:	9108      	str	r1, [sp, #32]
 800d34a:	9901      	ldr	r1, [sp, #4]
 800d34c:	3301      	adds	r3, #1
 800d34e:	7808      	ldrb	r0, [r1, #0]
 800d350:	2830      	cmp	r0, #48	; 0x30
 800d352:	d0f7      	beq.n	800d344 <__gethex+0x30>
 800d354:	f7ff ffc8 	bl	800d2e8 <__hexdig_fun>
 800d358:	2300      	movs	r3, #0
 800d35a:	001c      	movs	r4, r3
 800d35c:	9304      	str	r3, [sp, #16]
 800d35e:	4298      	cmp	r0, r3
 800d360:	d11f      	bne.n	800d3a2 <__gethex+0x8e>
 800d362:	9a03      	ldr	r2, [sp, #12]
 800d364:	9907      	ldr	r1, [sp, #28]
 800d366:	9801      	ldr	r0, [sp, #4]
 800d368:	f001 f9ea 	bl	800e740 <strncmp>
 800d36c:	0007      	movs	r7, r0
 800d36e:	42a0      	cmp	r0, r4
 800d370:	d000      	beq.n	800d374 <__gethex+0x60>
 800d372:	e06b      	b.n	800d44c <__gethex+0x138>
 800d374:	9b01      	ldr	r3, [sp, #4]
 800d376:	9a03      	ldr	r2, [sp, #12]
 800d378:	5c98      	ldrb	r0, [r3, r2]
 800d37a:	189d      	adds	r5, r3, r2
 800d37c:	f7ff ffb4 	bl	800d2e8 <__hexdig_fun>
 800d380:	2301      	movs	r3, #1
 800d382:	9304      	str	r3, [sp, #16]
 800d384:	42a0      	cmp	r0, r4
 800d386:	d030      	beq.n	800d3ea <__gethex+0xd6>
 800d388:	9501      	str	r5, [sp, #4]
 800d38a:	9b01      	ldr	r3, [sp, #4]
 800d38c:	7818      	ldrb	r0, [r3, #0]
 800d38e:	2830      	cmp	r0, #48	; 0x30
 800d390:	d009      	beq.n	800d3a6 <__gethex+0x92>
 800d392:	f7ff ffa9 	bl	800d2e8 <__hexdig_fun>
 800d396:	4242      	negs	r2, r0
 800d398:	4142      	adcs	r2, r0
 800d39a:	2301      	movs	r3, #1
 800d39c:	002c      	movs	r4, r5
 800d39e:	9204      	str	r2, [sp, #16]
 800d3a0:	9308      	str	r3, [sp, #32]
 800d3a2:	9d01      	ldr	r5, [sp, #4]
 800d3a4:	e004      	b.n	800d3b0 <__gethex+0x9c>
 800d3a6:	9b01      	ldr	r3, [sp, #4]
 800d3a8:	3301      	adds	r3, #1
 800d3aa:	9301      	str	r3, [sp, #4]
 800d3ac:	e7ed      	b.n	800d38a <__gethex+0x76>
 800d3ae:	3501      	adds	r5, #1
 800d3b0:	7828      	ldrb	r0, [r5, #0]
 800d3b2:	f7ff ff99 	bl	800d2e8 <__hexdig_fun>
 800d3b6:	1e07      	subs	r7, r0, #0
 800d3b8:	d1f9      	bne.n	800d3ae <__gethex+0x9a>
 800d3ba:	0028      	movs	r0, r5
 800d3bc:	9a03      	ldr	r2, [sp, #12]
 800d3be:	9907      	ldr	r1, [sp, #28]
 800d3c0:	f001 f9be 	bl	800e740 <strncmp>
 800d3c4:	2800      	cmp	r0, #0
 800d3c6:	d10e      	bne.n	800d3e6 <__gethex+0xd2>
 800d3c8:	2c00      	cmp	r4, #0
 800d3ca:	d107      	bne.n	800d3dc <__gethex+0xc8>
 800d3cc:	9b03      	ldr	r3, [sp, #12]
 800d3ce:	18ed      	adds	r5, r5, r3
 800d3d0:	002c      	movs	r4, r5
 800d3d2:	7828      	ldrb	r0, [r5, #0]
 800d3d4:	f7ff ff88 	bl	800d2e8 <__hexdig_fun>
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	d102      	bne.n	800d3e2 <__gethex+0xce>
 800d3dc:	1b64      	subs	r4, r4, r5
 800d3de:	00a7      	lsls	r7, r4, #2
 800d3e0:	e003      	b.n	800d3ea <__gethex+0xd6>
 800d3e2:	3501      	adds	r5, #1
 800d3e4:	e7f5      	b.n	800d3d2 <__gethex+0xbe>
 800d3e6:	2c00      	cmp	r4, #0
 800d3e8:	d1f8      	bne.n	800d3dc <__gethex+0xc8>
 800d3ea:	2220      	movs	r2, #32
 800d3ec:	782b      	ldrb	r3, [r5, #0]
 800d3ee:	002e      	movs	r6, r5
 800d3f0:	4393      	bics	r3, r2
 800d3f2:	2b50      	cmp	r3, #80	; 0x50
 800d3f4:	d11d      	bne.n	800d432 <__gethex+0x11e>
 800d3f6:	786b      	ldrb	r3, [r5, #1]
 800d3f8:	2b2b      	cmp	r3, #43	; 0x2b
 800d3fa:	d02c      	beq.n	800d456 <__gethex+0x142>
 800d3fc:	2b2d      	cmp	r3, #45	; 0x2d
 800d3fe:	d02e      	beq.n	800d45e <__gethex+0x14a>
 800d400:	2300      	movs	r3, #0
 800d402:	1c6e      	adds	r6, r5, #1
 800d404:	9306      	str	r3, [sp, #24]
 800d406:	7830      	ldrb	r0, [r6, #0]
 800d408:	f7ff ff6e 	bl	800d2e8 <__hexdig_fun>
 800d40c:	1e43      	subs	r3, r0, #1
 800d40e:	b2db      	uxtb	r3, r3
 800d410:	2b18      	cmp	r3, #24
 800d412:	d82b      	bhi.n	800d46c <__gethex+0x158>
 800d414:	3810      	subs	r0, #16
 800d416:	0004      	movs	r4, r0
 800d418:	7870      	ldrb	r0, [r6, #1]
 800d41a:	f7ff ff65 	bl	800d2e8 <__hexdig_fun>
 800d41e:	1e43      	subs	r3, r0, #1
 800d420:	b2db      	uxtb	r3, r3
 800d422:	3601      	adds	r6, #1
 800d424:	2b18      	cmp	r3, #24
 800d426:	d91c      	bls.n	800d462 <__gethex+0x14e>
 800d428:	9b06      	ldr	r3, [sp, #24]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d000      	beq.n	800d430 <__gethex+0x11c>
 800d42e:	4264      	negs	r4, r4
 800d430:	193f      	adds	r7, r7, r4
 800d432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d434:	601e      	str	r6, [r3, #0]
 800d436:	9b04      	ldr	r3, [sp, #16]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d019      	beq.n	800d470 <__gethex+0x15c>
 800d43c:	2600      	movs	r6, #0
 800d43e:	9b08      	ldr	r3, [sp, #32]
 800d440:	42b3      	cmp	r3, r6
 800d442:	d100      	bne.n	800d446 <__gethex+0x132>
 800d444:	3606      	adds	r6, #6
 800d446:	0030      	movs	r0, r6
 800d448:	b00d      	add	sp, #52	; 0x34
 800d44a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d44c:	2301      	movs	r3, #1
 800d44e:	2700      	movs	r7, #0
 800d450:	9d01      	ldr	r5, [sp, #4]
 800d452:	9304      	str	r3, [sp, #16]
 800d454:	e7c9      	b.n	800d3ea <__gethex+0xd6>
 800d456:	2300      	movs	r3, #0
 800d458:	9306      	str	r3, [sp, #24]
 800d45a:	1cae      	adds	r6, r5, #2
 800d45c:	e7d3      	b.n	800d406 <__gethex+0xf2>
 800d45e:	2301      	movs	r3, #1
 800d460:	e7fa      	b.n	800d458 <__gethex+0x144>
 800d462:	230a      	movs	r3, #10
 800d464:	435c      	muls	r4, r3
 800d466:	1824      	adds	r4, r4, r0
 800d468:	3c10      	subs	r4, #16
 800d46a:	e7d5      	b.n	800d418 <__gethex+0x104>
 800d46c:	002e      	movs	r6, r5
 800d46e:	e7e0      	b.n	800d432 <__gethex+0x11e>
 800d470:	9b01      	ldr	r3, [sp, #4]
 800d472:	9904      	ldr	r1, [sp, #16]
 800d474:	1aeb      	subs	r3, r5, r3
 800d476:	3b01      	subs	r3, #1
 800d478:	2b07      	cmp	r3, #7
 800d47a:	dc0a      	bgt.n	800d492 <__gethex+0x17e>
 800d47c:	9805      	ldr	r0, [sp, #20]
 800d47e:	f000 faa3 	bl	800d9c8 <_Balloc>
 800d482:	1e04      	subs	r4, r0, #0
 800d484:	d108      	bne.n	800d498 <__gethex+0x184>
 800d486:	0002      	movs	r2, r0
 800d488:	21de      	movs	r1, #222	; 0xde
 800d48a:	4b64      	ldr	r3, [pc, #400]	; (800d61c <__gethex+0x308>)
 800d48c:	4864      	ldr	r0, [pc, #400]	; (800d620 <__gethex+0x30c>)
 800d48e:	f001 f977 	bl	800e780 <__assert_func>
 800d492:	3101      	adds	r1, #1
 800d494:	105b      	asrs	r3, r3, #1
 800d496:	e7ef      	b.n	800d478 <__gethex+0x164>
 800d498:	0003      	movs	r3, r0
 800d49a:	3314      	adds	r3, #20
 800d49c:	9304      	str	r3, [sp, #16]
 800d49e:	9309      	str	r3, [sp, #36]	; 0x24
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	001e      	movs	r6, r3
 800d4a4:	9306      	str	r3, [sp, #24]
 800d4a6:	9b01      	ldr	r3, [sp, #4]
 800d4a8:	42ab      	cmp	r3, r5
 800d4aa:	d340      	bcc.n	800d52e <__gethex+0x21a>
 800d4ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d4ae:	9b04      	ldr	r3, [sp, #16]
 800d4b0:	c540      	stmia	r5!, {r6}
 800d4b2:	1aed      	subs	r5, r5, r3
 800d4b4:	10ad      	asrs	r5, r5, #2
 800d4b6:	0030      	movs	r0, r6
 800d4b8:	6125      	str	r5, [r4, #16]
 800d4ba:	f000 fb7d 	bl	800dbb8 <__hi0bits>
 800d4be:	9b02      	ldr	r3, [sp, #8]
 800d4c0:	016d      	lsls	r5, r5, #5
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	1a2e      	subs	r6, r5, r0
 800d4c6:	9301      	str	r3, [sp, #4]
 800d4c8:	429e      	cmp	r6, r3
 800d4ca:	dd5a      	ble.n	800d582 <__gethex+0x26e>
 800d4cc:	1af6      	subs	r6, r6, r3
 800d4ce:	0031      	movs	r1, r6
 800d4d0:	0020      	movs	r0, r4
 800d4d2:	f000 ff1f 	bl	800e314 <__any_on>
 800d4d6:	1e05      	subs	r5, r0, #0
 800d4d8:	d016      	beq.n	800d508 <__gethex+0x1f4>
 800d4da:	2501      	movs	r5, #1
 800d4dc:	211f      	movs	r1, #31
 800d4de:	0028      	movs	r0, r5
 800d4e0:	1e73      	subs	r3, r6, #1
 800d4e2:	4019      	ands	r1, r3
 800d4e4:	4088      	lsls	r0, r1
 800d4e6:	0001      	movs	r1, r0
 800d4e8:	115a      	asrs	r2, r3, #5
 800d4ea:	9804      	ldr	r0, [sp, #16]
 800d4ec:	0092      	lsls	r2, r2, #2
 800d4ee:	5812      	ldr	r2, [r2, r0]
 800d4f0:	420a      	tst	r2, r1
 800d4f2:	d009      	beq.n	800d508 <__gethex+0x1f4>
 800d4f4:	42ab      	cmp	r3, r5
 800d4f6:	dd06      	ble.n	800d506 <__gethex+0x1f2>
 800d4f8:	0020      	movs	r0, r4
 800d4fa:	1eb1      	subs	r1, r6, #2
 800d4fc:	f000 ff0a 	bl	800e314 <__any_on>
 800d500:	3502      	adds	r5, #2
 800d502:	2800      	cmp	r0, #0
 800d504:	d100      	bne.n	800d508 <__gethex+0x1f4>
 800d506:	2502      	movs	r5, #2
 800d508:	0031      	movs	r1, r6
 800d50a:	0020      	movs	r0, r4
 800d50c:	f7ff fe98 	bl	800d240 <rshift>
 800d510:	19bf      	adds	r7, r7, r6
 800d512:	9b02      	ldr	r3, [sp, #8]
 800d514:	689b      	ldr	r3, [r3, #8]
 800d516:	9303      	str	r3, [sp, #12]
 800d518:	42bb      	cmp	r3, r7
 800d51a:	da42      	bge.n	800d5a2 <__gethex+0x28e>
 800d51c:	0021      	movs	r1, r4
 800d51e:	9805      	ldr	r0, [sp, #20]
 800d520:	f000 fa96 	bl	800da50 <_Bfree>
 800d524:	2300      	movs	r3, #0
 800d526:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d528:	26a3      	movs	r6, #163	; 0xa3
 800d52a:	6013      	str	r3, [r2, #0]
 800d52c:	e78b      	b.n	800d446 <__gethex+0x132>
 800d52e:	1e6b      	subs	r3, r5, #1
 800d530:	9308      	str	r3, [sp, #32]
 800d532:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d534:	781b      	ldrb	r3, [r3, #0]
 800d536:	4293      	cmp	r3, r2
 800d538:	d014      	beq.n	800d564 <__gethex+0x250>
 800d53a:	9b06      	ldr	r3, [sp, #24]
 800d53c:	2b20      	cmp	r3, #32
 800d53e:	d104      	bne.n	800d54a <__gethex+0x236>
 800d540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d542:	c340      	stmia	r3!, {r6}
 800d544:	2600      	movs	r6, #0
 800d546:	9309      	str	r3, [sp, #36]	; 0x24
 800d548:	9606      	str	r6, [sp, #24]
 800d54a:	9b08      	ldr	r3, [sp, #32]
 800d54c:	7818      	ldrb	r0, [r3, #0]
 800d54e:	f7ff fecb 	bl	800d2e8 <__hexdig_fun>
 800d552:	230f      	movs	r3, #15
 800d554:	4018      	ands	r0, r3
 800d556:	9b06      	ldr	r3, [sp, #24]
 800d558:	9d08      	ldr	r5, [sp, #32]
 800d55a:	4098      	lsls	r0, r3
 800d55c:	3304      	adds	r3, #4
 800d55e:	4306      	orrs	r6, r0
 800d560:	9306      	str	r3, [sp, #24]
 800d562:	e7a0      	b.n	800d4a6 <__gethex+0x192>
 800d564:	2301      	movs	r3, #1
 800d566:	9a03      	ldr	r2, [sp, #12]
 800d568:	1a9d      	subs	r5, r3, r2
 800d56a:	9b08      	ldr	r3, [sp, #32]
 800d56c:	195d      	adds	r5, r3, r5
 800d56e:	9b01      	ldr	r3, [sp, #4]
 800d570:	429d      	cmp	r5, r3
 800d572:	d3e2      	bcc.n	800d53a <__gethex+0x226>
 800d574:	0028      	movs	r0, r5
 800d576:	9907      	ldr	r1, [sp, #28]
 800d578:	f001 f8e2 	bl	800e740 <strncmp>
 800d57c:	2800      	cmp	r0, #0
 800d57e:	d1dc      	bne.n	800d53a <__gethex+0x226>
 800d580:	e791      	b.n	800d4a6 <__gethex+0x192>
 800d582:	9b01      	ldr	r3, [sp, #4]
 800d584:	2500      	movs	r5, #0
 800d586:	429e      	cmp	r6, r3
 800d588:	dac3      	bge.n	800d512 <__gethex+0x1fe>
 800d58a:	1b9e      	subs	r6, r3, r6
 800d58c:	0021      	movs	r1, r4
 800d58e:	0032      	movs	r2, r6
 800d590:	9805      	ldr	r0, [sp, #20]
 800d592:	f000 fc7b 	bl	800de8c <__lshift>
 800d596:	0003      	movs	r3, r0
 800d598:	3314      	adds	r3, #20
 800d59a:	0004      	movs	r4, r0
 800d59c:	1bbf      	subs	r7, r7, r6
 800d59e:	9304      	str	r3, [sp, #16]
 800d5a0:	e7b7      	b.n	800d512 <__gethex+0x1fe>
 800d5a2:	9b02      	ldr	r3, [sp, #8]
 800d5a4:	685e      	ldr	r6, [r3, #4]
 800d5a6:	42be      	cmp	r6, r7
 800d5a8:	dd71      	ble.n	800d68e <__gethex+0x37a>
 800d5aa:	9b01      	ldr	r3, [sp, #4]
 800d5ac:	1bf6      	subs	r6, r6, r7
 800d5ae:	42b3      	cmp	r3, r6
 800d5b0:	dc38      	bgt.n	800d624 <__gethex+0x310>
 800d5b2:	9b02      	ldr	r3, [sp, #8]
 800d5b4:	68db      	ldr	r3, [r3, #12]
 800d5b6:	2b02      	cmp	r3, #2
 800d5b8:	d026      	beq.n	800d608 <__gethex+0x2f4>
 800d5ba:	2b03      	cmp	r3, #3
 800d5bc:	d028      	beq.n	800d610 <__gethex+0x2fc>
 800d5be:	2b01      	cmp	r3, #1
 800d5c0:	d119      	bne.n	800d5f6 <__gethex+0x2e2>
 800d5c2:	9b01      	ldr	r3, [sp, #4]
 800d5c4:	42b3      	cmp	r3, r6
 800d5c6:	d116      	bne.n	800d5f6 <__gethex+0x2e2>
 800d5c8:	2b01      	cmp	r3, #1
 800d5ca:	d10d      	bne.n	800d5e8 <__gethex+0x2d4>
 800d5cc:	9b02      	ldr	r3, [sp, #8]
 800d5ce:	2662      	movs	r6, #98	; 0x62
 800d5d0:	685b      	ldr	r3, [r3, #4]
 800d5d2:	9301      	str	r3, [sp, #4]
 800d5d4:	9a01      	ldr	r2, [sp, #4]
 800d5d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5d8:	601a      	str	r2, [r3, #0]
 800d5da:	2301      	movs	r3, #1
 800d5dc:	9a04      	ldr	r2, [sp, #16]
 800d5de:	6123      	str	r3, [r4, #16]
 800d5e0:	6013      	str	r3, [r2, #0]
 800d5e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d5e4:	601c      	str	r4, [r3, #0]
 800d5e6:	e72e      	b.n	800d446 <__gethex+0x132>
 800d5e8:	9901      	ldr	r1, [sp, #4]
 800d5ea:	0020      	movs	r0, r4
 800d5ec:	3901      	subs	r1, #1
 800d5ee:	f000 fe91 	bl	800e314 <__any_on>
 800d5f2:	2800      	cmp	r0, #0
 800d5f4:	d1ea      	bne.n	800d5cc <__gethex+0x2b8>
 800d5f6:	0021      	movs	r1, r4
 800d5f8:	9805      	ldr	r0, [sp, #20]
 800d5fa:	f000 fa29 	bl	800da50 <_Bfree>
 800d5fe:	2300      	movs	r3, #0
 800d600:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d602:	2650      	movs	r6, #80	; 0x50
 800d604:	6013      	str	r3, [r2, #0]
 800d606:	e71e      	b.n	800d446 <__gethex+0x132>
 800d608:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d1f3      	bne.n	800d5f6 <__gethex+0x2e2>
 800d60e:	e7dd      	b.n	800d5cc <__gethex+0x2b8>
 800d610:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d612:	2b00      	cmp	r3, #0
 800d614:	d1da      	bne.n	800d5cc <__gethex+0x2b8>
 800d616:	e7ee      	b.n	800d5f6 <__gethex+0x2e2>
 800d618:	0800f940 	.word	0x0800f940
 800d61c:	0800f8c8 	.word	0x0800f8c8
 800d620:	0800f8d9 	.word	0x0800f8d9
 800d624:	1e77      	subs	r7, r6, #1
 800d626:	2d00      	cmp	r5, #0
 800d628:	d12f      	bne.n	800d68a <__gethex+0x376>
 800d62a:	2f00      	cmp	r7, #0
 800d62c:	d004      	beq.n	800d638 <__gethex+0x324>
 800d62e:	0039      	movs	r1, r7
 800d630:	0020      	movs	r0, r4
 800d632:	f000 fe6f 	bl	800e314 <__any_on>
 800d636:	0005      	movs	r5, r0
 800d638:	231f      	movs	r3, #31
 800d63a:	117a      	asrs	r2, r7, #5
 800d63c:	401f      	ands	r7, r3
 800d63e:	3b1e      	subs	r3, #30
 800d640:	40bb      	lsls	r3, r7
 800d642:	9904      	ldr	r1, [sp, #16]
 800d644:	0092      	lsls	r2, r2, #2
 800d646:	5852      	ldr	r2, [r2, r1]
 800d648:	421a      	tst	r2, r3
 800d64a:	d001      	beq.n	800d650 <__gethex+0x33c>
 800d64c:	2302      	movs	r3, #2
 800d64e:	431d      	orrs	r5, r3
 800d650:	9b01      	ldr	r3, [sp, #4]
 800d652:	0031      	movs	r1, r6
 800d654:	1b9b      	subs	r3, r3, r6
 800d656:	2602      	movs	r6, #2
 800d658:	0020      	movs	r0, r4
 800d65a:	9301      	str	r3, [sp, #4]
 800d65c:	f7ff fdf0 	bl	800d240 <rshift>
 800d660:	9b02      	ldr	r3, [sp, #8]
 800d662:	685f      	ldr	r7, [r3, #4]
 800d664:	2d00      	cmp	r5, #0
 800d666:	d041      	beq.n	800d6ec <__gethex+0x3d8>
 800d668:	9b02      	ldr	r3, [sp, #8]
 800d66a:	68db      	ldr	r3, [r3, #12]
 800d66c:	2b02      	cmp	r3, #2
 800d66e:	d010      	beq.n	800d692 <__gethex+0x37e>
 800d670:	2b03      	cmp	r3, #3
 800d672:	d012      	beq.n	800d69a <__gethex+0x386>
 800d674:	2b01      	cmp	r3, #1
 800d676:	d106      	bne.n	800d686 <__gethex+0x372>
 800d678:	07aa      	lsls	r2, r5, #30
 800d67a:	d504      	bpl.n	800d686 <__gethex+0x372>
 800d67c:	9a04      	ldr	r2, [sp, #16]
 800d67e:	6810      	ldr	r0, [r2, #0]
 800d680:	4305      	orrs	r5, r0
 800d682:	421d      	tst	r5, r3
 800d684:	d10c      	bne.n	800d6a0 <__gethex+0x38c>
 800d686:	2310      	movs	r3, #16
 800d688:	e02f      	b.n	800d6ea <__gethex+0x3d6>
 800d68a:	2501      	movs	r5, #1
 800d68c:	e7d4      	b.n	800d638 <__gethex+0x324>
 800d68e:	2601      	movs	r6, #1
 800d690:	e7e8      	b.n	800d664 <__gethex+0x350>
 800d692:	2301      	movs	r3, #1
 800d694:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d696:	1a9b      	subs	r3, r3, r2
 800d698:	9313      	str	r3, [sp, #76]	; 0x4c
 800d69a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d0f2      	beq.n	800d686 <__gethex+0x372>
 800d6a0:	6923      	ldr	r3, [r4, #16]
 800d6a2:	2000      	movs	r0, #0
 800d6a4:	9303      	str	r3, [sp, #12]
 800d6a6:	009b      	lsls	r3, r3, #2
 800d6a8:	9304      	str	r3, [sp, #16]
 800d6aa:	0023      	movs	r3, r4
 800d6ac:	9a04      	ldr	r2, [sp, #16]
 800d6ae:	3314      	adds	r3, #20
 800d6b0:	1899      	adds	r1, r3, r2
 800d6b2:	681a      	ldr	r2, [r3, #0]
 800d6b4:	1c55      	adds	r5, r2, #1
 800d6b6:	d01e      	beq.n	800d6f6 <__gethex+0x3e2>
 800d6b8:	3201      	adds	r2, #1
 800d6ba:	601a      	str	r2, [r3, #0]
 800d6bc:	0023      	movs	r3, r4
 800d6be:	3314      	adds	r3, #20
 800d6c0:	2e02      	cmp	r6, #2
 800d6c2:	d140      	bne.n	800d746 <__gethex+0x432>
 800d6c4:	9a02      	ldr	r2, [sp, #8]
 800d6c6:	9901      	ldr	r1, [sp, #4]
 800d6c8:	6812      	ldr	r2, [r2, #0]
 800d6ca:	3a01      	subs	r2, #1
 800d6cc:	428a      	cmp	r2, r1
 800d6ce:	d10b      	bne.n	800d6e8 <__gethex+0x3d4>
 800d6d0:	114a      	asrs	r2, r1, #5
 800d6d2:	211f      	movs	r1, #31
 800d6d4:	9801      	ldr	r0, [sp, #4]
 800d6d6:	0092      	lsls	r2, r2, #2
 800d6d8:	4001      	ands	r1, r0
 800d6da:	2001      	movs	r0, #1
 800d6dc:	0005      	movs	r5, r0
 800d6de:	408d      	lsls	r5, r1
 800d6e0:	58d3      	ldr	r3, [r2, r3]
 800d6e2:	422b      	tst	r3, r5
 800d6e4:	d000      	beq.n	800d6e8 <__gethex+0x3d4>
 800d6e6:	2601      	movs	r6, #1
 800d6e8:	2320      	movs	r3, #32
 800d6ea:	431e      	orrs	r6, r3
 800d6ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d6ee:	601c      	str	r4, [r3, #0]
 800d6f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6f2:	601f      	str	r7, [r3, #0]
 800d6f4:	e6a7      	b.n	800d446 <__gethex+0x132>
 800d6f6:	c301      	stmia	r3!, {r0}
 800d6f8:	4299      	cmp	r1, r3
 800d6fa:	d8da      	bhi.n	800d6b2 <__gethex+0x39e>
 800d6fc:	9b03      	ldr	r3, [sp, #12]
 800d6fe:	68a2      	ldr	r2, [r4, #8]
 800d700:	4293      	cmp	r3, r2
 800d702:	db17      	blt.n	800d734 <__gethex+0x420>
 800d704:	6863      	ldr	r3, [r4, #4]
 800d706:	9805      	ldr	r0, [sp, #20]
 800d708:	1c59      	adds	r1, r3, #1
 800d70a:	f000 f95d 	bl	800d9c8 <_Balloc>
 800d70e:	1e05      	subs	r5, r0, #0
 800d710:	d103      	bne.n	800d71a <__gethex+0x406>
 800d712:	0002      	movs	r2, r0
 800d714:	2184      	movs	r1, #132	; 0x84
 800d716:	4b1c      	ldr	r3, [pc, #112]	; (800d788 <__gethex+0x474>)
 800d718:	e6b8      	b.n	800d48c <__gethex+0x178>
 800d71a:	0021      	movs	r1, r4
 800d71c:	6923      	ldr	r3, [r4, #16]
 800d71e:	310c      	adds	r1, #12
 800d720:	1c9a      	adds	r2, r3, #2
 800d722:	0092      	lsls	r2, r2, #2
 800d724:	300c      	adds	r0, #12
 800d726:	f7fd f8b4 	bl	800a892 <memcpy>
 800d72a:	0021      	movs	r1, r4
 800d72c:	9805      	ldr	r0, [sp, #20]
 800d72e:	f000 f98f 	bl	800da50 <_Bfree>
 800d732:	002c      	movs	r4, r5
 800d734:	6923      	ldr	r3, [r4, #16]
 800d736:	1c5a      	adds	r2, r3, #1
 800d738:	6122      	str	r2, [r4, #16]
 800d73a:	2201      	movs	r2, #1
 800d73c:	3304      	adds	r3, #4
 800d73e:	009b      	lsls	r3, r3, #2
 800d740:	18e3      	adds	r3, r4, r3
 800d742:	605a      	str	r2, [r3, #4]
 800d744:	e7ba      	b.n	800d6bc <__gethex+0x3a8>
 800d746:	6922      	ldr	r2, [r4, #16]
 800d748:	9903      	ldr	r1, [sp, #12]
 800d74a:	428a      	cmp	r2, r1
 800d74c:	dd09      	ble.n	800d762 <__gethex+0x44e>
 800d74e:	2101      	movs	r1, #1
 800d750:	0020      	movs	r0, r4
 800d752:	f7ff fd75 	bl	800d240 <rshift>
 800d756:	9b02      	ldr	r3, [sp, #8]
 800d758:	3701      	adds	r7, #1
 800d75a:	689b      	ldr	r3, [r3, #8]
 800d75c:	42bb      	cmp	r3, r7
 800d75e:	dac2      	bge.n	800d6e6 <__gethex+0x3d2>
 800d760:	e6dc      	b.n	800d51c <__gethex+0x208>
 800d762:	221f      	movs	r2, #31
 800d764:	9d01      	ldr	r5, [sp, #4]
 800d766:	9901      	ldr	r1, [sp, #4]
 800d768:	2601      	movs	r6, #1
 800d76a:	4015      	ands	r5, r2
 800d76c:	4211      	tst	r1, r2
 800d76e:	d0bb      	beq.n	800d6e8 <__gethex+0x3d4>
 800d770:	9a04      	ldr	r2, [sp, #16]
 800d772:	189b      	adds	r3, r3, r2
 800d774:	3b04      	subs	r3, #4
 800d776:	6818      	ldr	r0, [r3, #0]
 800d778:	f000 fa1e 	bl	800dbb8 <__hi0bits>
 800d77c:	2320      	movs	r3, #32
 800d77e:	1b5d      	subs	r5, r3, r5
 800d780:	42a8      	cmp	r0, r5
 800d782:	dbe4      	blt.n	800d74e <__gethex+0x43a>
 800d784:	e7b0      	b.n	800d6e8 <__gethex+0x3d4>
 800d786:	46c0      	nop			; (mov r8, r8)
 800d788:	0800f8c8 	.word	0x0800f8c8

0800d78c <L_shift>:
 800d78c:	2308      	movs	r3, #8
 800d78e:	b570      	push	{r4, r5, r6, lr}
 800d790:	2520      	movs	r5, #32
 800d792:	1a9a      	subs	r2, r3, r2
 800d794:	0092      	lsls	r2, r2, #2
 800d796:	1aad      	subs	r5, r5, r2
 800d798:	6843      	ldr	r3, [r0, #4]
 800d79a:	6806      	ldr	r6, [r0, #0]
 800d79c:	001c      	movs	r4, r3
 800d79e:	40ac      	lsls	r4, r5
 800d7a0:	40d3      	lsrs	r3, r2
 800d7a2:	4334      	orrs	r4, r6
 800d7a4:	6004      	str	r4, [r0, #0]
 800d7a6:	6043      	str	r3, [r0, #4]
 800d7a8:	3004      	adds	r0, #4
 800d7aa:	4288      	cmp	r0, r1
 800d7ac:	d3f4      	bcc.n	800d798 <L_shift+0xc>
 800d7ae:	bd70      	pop	{r4, r5, r6, pc}

0800d7b0 <__match>:
 800d7b0:	b530      	push	{r4, r5, lr}
 800d7b2:	6803      	ldr	r3, [r0, #0]
 800d7b4:	780c      	ldrb	r4, [r1, #0]
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	2c00      	cmp	r4, #0
 800d7ba:	d102      	bne.n	800d7c2 <__match+0x12>
 800d7bc:	6003      	str	r3, [r0, #0]
 800d7be:	2001      	movs	r0, #1
 800d7c0:	bd30      	pop	{r4, r5, pc}
 800d7c2:	781a      	ldrb	r2, [r3, #0]
 800d7c4:	0015      	movs	r5, r2
 800d7c6:	3d41      	subs	r5, #65	; 0x41
 800d7c8:	2d19      	cmp	r5, #25
 800d7ca:	d800      	bhi.n	800d7ce <__match+0x1e>
 800d7cc:	3220      	adds	r2, #32
 800d7ce:	3101      	adds	r1, #1
 800d7d0:	42a2      	cmp	r2, r4
 800d7d2:	d0ef      	beq.n	800d7b4 <__match+0x4>
 800d7d4:	2000      	movs	r0, #0
 800d7d6:	e7f3      	b.n	800d7c0 <__match+0x10>

0800d7d8 <__hexnan>:
 800d7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7da:	680b      	ldr	r3, [r1, #0]
 800d7dc:	b08b      	sub	sp, #44	; 0x2c
 800d7de:	9201      	str	r2, [sp, #4]
 800d7e0:	9901      	ldr	r1, [sp, #4]
 800d7e2:	115a      	asrs	r2, r3, #5
 800d7e4:	0092      	lsls	r2, r2, #2
 800d7e6:	188a      	adds	r2, r1, r2
 800d7e8:	9202      	str	r2, [sp, #8]
 800d7ea:	0019      	movs	r1, r3
 800d7ec:	221f      	movs	r2, #31
 800d7ee:	4011      	ands	r1, r2
 800d7f0:	9008      	str	r0, [sp, #32]
 800d7f2:	9106      	str	r1, [sp, #24]
 800d7f4:	4213      	tst	r3, r2
 800d7f6:	d002      	beq.n	800d7fe <__hexnan+0x26>
 800d7f8:	9b02      	ldr	r3, [sp, #8]
 800d7fa:	3304      	adds	r3, #4
 800d7fc:	9302      	str	r3, [sp, #8]
 800d7fe:	9b02      	ldr	r3, [sp, #8]
 800d800:	2500      	movs	r5, #0
 800d802:	1f1e      	subs	r6, r3, #4
 800d804:	0037      	movs	r7, r6
 800d806:	0034      	movs	r4, r6
 800d808:	9b08      	ldr	r3, [sp, #32]
 800d80a:	6035      	str	r5, [r6, #0]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	9507      	str	r5, [sp, #28]
 800d810:	9305      	str	r3, [sp, #20]
 800d812:	9503      	str	r5, [sp, #12]
 800d814:	9b05      	ldr	r3, [sp, #20]
 800d816:	3301      	adds	r3, #1
 800d818:	9309      	str	r3, [sp, #36]	; 0x24
 800d81a:	9b05      	ldr	r3, [sp, #20]
 800d81c:	785b      	ldrb	r3, [r3, #1]
 800d81e:	9304      	str	r3, [sp, #16]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d028      	beq.n	800d876 <__hexnan+0x9e>
 800d824:	9804      	ldr	r0, [sp, #16]
 800d826:	f7ff fd5f 	bl	800d2e8 <__hexdig_fun>
 800d82a:	2800      	cmp	r0, #0
 800d82c:	d154      	bne.n	800d8d8 <__hexnan+0x100>
 800d82e:	9b04      	ldr	r3, [sp, #16]
 800d830:	2b20      	cmp	r3, #32
 800d832:	d819      	bhi.n	800d868 <__hexnan+0x90>
 800d834:	9b03      	ldr	r3, [sp, #12]
 800d836:	9a07      	ldr	r2, [sp, #28]
 800d838:	4293      	cmp	r3, r2
 800d83a:	dd12      	ble.n	800d862 <__hexnan+0x8a>
 800d83c:	42bc      	cmp	r4, r7
 800d83e:	d206      	bcs.n	800d84e <__hexnan+0x76>
 800d840:	2d07      	cmp	r5, #7
 800d842:	dc04      	bgt.n	800d84e <__hexnan+0x76>
 800d844:	002a      	movs	r2, r5
 800d846:	0039      	movs	r1, r7
 800d848:	0020      	movs	r0, r4
 800d84a:	f7ff ff9f 	bl	800d78c <L_shift>
 800d84e:	9b01      	ldr	r3, [sp, #4]
 800d850:	2508      	movs	r5, #8
 800d852:	429c      	cmp	r4, r3
 800d854:	d905      	bls.n	800d862 <__hexnan+0x8a>
 800d856:	1f27      	subs	r7, r4, #4
 800d858:	2500      	movs	r5, #0
 800d85a:	003c      	movs	r4, r7
 800d85c:	9b03      	ldr	r3, [sp, #12]
 800d85e:	603d      	str	r5, [r7, #0]
 800d860:	9307      	str	r3, [sp, #28]
 800d862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d864:	9305      	str	r3, [sp, #20]
 800d866:	e7d5      	b.n	800d814 <__hexnan+0x3c>
 800d868:	9b04      	ldr	r3, [sp, #16]
 800d86a:	2b29      	cmp	r3, #41	; 0x29
 800d86c:	d159      	bne.n	800d922 <__hexnan+0x14a>
 800d86e:	9b05      	ldr	r3, [sp, #20]
 800d870:	9a08      	ldr	r2, [sp, #32]
 800d872:	3302      	adds	r3, #2
 800d874:	6013      	str	r3, [r2, #0]
 800d876:	9b03      	ldr	r3, [sp, #12]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d052      	beq.n	800d922 <__hexnan+0x14a>
 800d87c:	42bc      	cmp	r4, r7
 800d87e:	d206      	bcs.n	800d88e <__hexnan+0xb6>
 800d880:	2d07      	cmp	r5, #7
 800d882:	dc04      	bgt.n	800d88e <__hexnan+0xb6>
 800d884:	002a      	movs	r2, r5
 800d886:	0039      	movs	r1, r7
 800d888:	0020      	movs	r0, r4
 800d88a:	f7ff ff7f 	bl	800d78c <L_shift>
 800d88e:	9b01      	ldr	r3, [sp, #4]
 800d890:	429c      	cmp	r4, r3
 800d892:	d935      	bls.n	800d900 <__hexnan+0x128>
 800d894:	001a      	movs	r2, r3
 800d896:	0023      	movs	r3, r4
 800d898:	cb02      	ldmia	r3!, {r1}
 800d89a:	c202      	stmia	r2!, {r1}
 800d89c:	429e      	cmp	r6, r3
 800d89e:	d2fb      	bcs.n	800d898 <__hexnan+0xc0>
 800d8a0:	9b02      	ldr	r3, [sp, #8]
 800d8a2:	1c61      	adds	r1, r4, #1
 800d8a4:	1eda      	subs	r2, r3, #3
 800d8a6:	2304      	movs	r3, #4
 800d8a8:	4291      	cmp	r1, r2
 800d8aa:	d805      	bhi.n	800d8b8 <__hexnan+0xe0>
 800d8ac:	9b02      	ldr	r3, [sp, #8]
 800d8ae:	3b04      	subs	r3, #4
 800d8b0:	1b1b      	subs	r3, r3, r4
 800d8b2:	089b      	lsrs	r3, r3, #2
 800d8b4:	3301      	adds	r3, #1
 800d8b6:	009b      	lsls	r3, r3, #2
 800d8b8:	9a01      	ldr	r2, [sp, #4]
 800d8ba:	18d3      	adds	r3, r2, r3
 800d8bc:	2200      	movs	r2, #0
 800d8be:	c304      	stmia	r3!, {r2}
 800d8c0:	429e      	cmp	r6, r3
 800d8c2:	d2fc      	bcs.n	800d8be <__hexnan+0xe6>
 800d8c4:	6833      	ldr	r3, [r6, #0]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d104      	bne.n	800d8d4 <__hexnan+0xfc>
 800d8ca:	9b01      	ldr	r3, [sp, #4]
 800d8cc:	429e      	cmp	r6, r3
 800d8ce:	d126      	bne.n	800d91e <__hexnan+0x146>
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	6033      	str	r3, [r6, #0]
 800d8d4:	2005      	movs	r0, #5
 800d8d6:	e025      	b.n	800d924 <__hexnan+0x14c>
 800d8d8:	9b03      	ldr	r3, [sp, #12]
 800d8da:	3501      	adds	r5, #1
 800d8dc:	3301      	adds	r3, #1
 800d8de:	9303      	str	r3, [sp, #12]
 800d8e0:	2d08      	cmp	r5, #8
 800d8e2:	dd06      	ble.n	800d8f2 <__hexnan+0x11a>
 800d8e4:	9b01      	ldr	r3, [sp, #4]
 800d8e6:	429c      	cmp	r4, r3
 800d8e8:	d9bb      	bls.n	800d862 <__hexnan+0x8a>
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	2501      	movs	r5, #1
 800d8ee:	3c04      	subs	r4, #4
 800d8f0:	6023      	str	r3, [r4, #0]
 800d8f2:	220f      	movs	r2, #15
 800d8f4:	6823      	ldr	r3, [r4, #0]
 800d8f6:	4010      	ands	r0, r2
 800d8f8:	011b      	lsls	r3, r3, #4
 800d8fa:	4318      	orrs	r0, r3
 800d8fc:	6020      	str	r0, [r4, #0]
 800d8fe:	e7b0      	b.n	800d862 <__hexnan+0x8a>
 800d900:	9b06      	ldr	r3, [sp, #24]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d0de      	beq.n	800d8c4 <__hexnan+0xec>
 800d906:	2120      	movs	r1, #32
 800d908:	9a06      	ldr	r2, [sp, #24]
 800d90a:	9b02      	ldr	r3, [sp, #8]
 800d90c:	1a89      	subs	r1, r1, r2
 800d90e:	2201      	movs	r2, #1
 800d910:	4252      	negs	r2, r2
 800d912:	40ca      	lsrs	r2, r1
 800d914:	3b04      	subs	r3, #4
 800d916:	6819      	ldr	r1, [r3, #0]
 800d918:	400a      	ands	r2, r1
 800d91a:	601a      	str	r2, [r3, #0]
 800d91c:	e7d2      	b.n	800d8c4 <__hexnan+0xec>
 800d91e:	3e04      	subs	r6, #4
 800d920:	e7d0      	b.n	800d8c4 <__hexnan+0xec>
 800d922:	2004      	movs	r0, #4
 800d924:	b00b      	add	sp, #44	; 0x2c
 800d926:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d928 <_localeconv_r>:
 800d928:	4800      	ldr	r0, [pc, #0]	; (800d92c <_localeconv_r+0x4>)
 800d92a:	4770      	bx	lr
 800d92c:	200001b4 	.word	0x200001b4

0800d930 <_lseek_r>:
 800d930:	b570      	push	{r4, r5, r6, lr}
 800d932:	0004      	movs	r4, r0
 800d934:	0008      	movs	r0, r1
 800d936:	0011      	movs	r1, r2
 800d938:	001a      	movs	r2, r3
 800d93a:	2300      	movs	r3, #0
 800d93c:	4d05      	ldr	r5, [pc, #20]	; (800d954 <_lseek_r+0x24>)
 800d93e:	602b      	str	r3, [r5, #0]
 800d940:	f7f6 fe3e 	bl	80045c0 <_lseek>
 800d944:	1c43      	adds	r3, r0, #1
 800d946:	d103      	bne.n	800d950 <_lseek_r+0x20>
 800d948:	682b      	ldr	r3, [r5, #0]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d000      	beq.n	800d950 <_lseek_r+0x20>
 800d94e:	6023      	str	r3, [r4, #0]
 800d950:	bd70      	pop	{r4, r5, r6, pc}
 800d952:	46c0      	nop			; (mov r8, r8)
 800d954:	20001748 	.word	0x20001748

0800d958 <malloc>:
 800d958:	b510      	push	{r4, lr}
 800d95a:	4b03      	ldr	r3, [pc, #12]	; (800d968 <malloc+0x10>)
 800d95c:	0001      	movs	r1, r0
 800d95e:	6818      	ldr	r0, [r3, #0]
 800d960:	f7fc ffca 	bl	800a8f8 <_malloc_r>
 800d964:	bd10      	pop	{r4, pc}
 800d966:	46c0      	nop			; (mov r8, r8)
 800d968:	2000005c 	.word	0x2000005c

0800d96c <__ascii_mbtowc>:
 800d96c:	b082      	sub	sp, #8
 800d96e:	2900      	cmp	r1, #0
 800d970:	d100      	bne.n	800d974 <__ascii_mbtowc+0x8>
 800d972:	a901      	add	r1, sp, #4
 800d974:	1e10      	subs	r0, r2, #0
 800d976:	d006      	beq.n	800d986 <__ascii_mbtowc+0x1a>
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d006      	beq.n	800d98a <__ascii_mbtowc+0x1e>
 800d97c:	7813      	ldrb	r3, [r2, #0]
 800d97e:	600b      	str	r3, [r1, #0]
 800d980:	7810      	ldrb	r0, [r2, #0]
 800d982:	1e43      	subs	r3, r0, #1
 800d984:	4198      	sbcs	r0, r3
 800d986:	b002      	add	sp, #8
 800d988:	4770      	bx	lr
 800d98a:	2002      	movs	r0, #2
 800d98c:	4240      	negs	r0, r0
 800d98e:	e7fa      	b.n	800d986 <__ascii_mbtowc+0x1a>

0800d990 <memchr>:
 800d990:	b2c9      	uxtb	r1, r1
 800d992:	1882      	adds	r2, r0, r2
 800d994:	4290      	cmp	r0, r2
 800d996:	d101      	bne.n	800d99c <memchr+0xc>
 800d998:	2000      	movs	r0, #0
 800d99a:	4770      	bx	lr
 800d99c:	7803      	ldrb	r3, [r0, #0]
 800d99e:	428b      	cmp	r3, r1
 800d9a0:	d0fb      	beq.n	800d99a <memchr+0xa>
 800d9a2:	3001      	adds	r0, #1
 800d9a4:	e7f6      	b.n	800d994 <memchr+0x4>
	...

0800d9a8 <__malloc_lock>:
 800d9a8:	b510      	push	{r4, lr}
 800d9aa:	4802      	ldr	r0, [pc, #8]	; (800d9b4 <__malloc_lock+0xc>)
 800d9ac:	f7fc ff6f 	bl	800a88e <__retarget_lock_acquire_recursive>
 800d9b0:	bd10      	pop	{r4, pc}
 800d9b2:	46c0      	nop			; (mov r8, r8)
 800d9b4:	2000173c 	.word	0x2000173c

0800d9b8 <__malloc_unlock>:
 800d9b8:	b510      	push	{r4, lr}
 800d9ba:	4802      	ldr	r0, [pc, #8]	; (800d9c4 <__malloc_unlock+0xc>)
 800d9bc:	f7fc ff68 	bl	800a890 <__retarget_lock_release_recursive>
 800d9c0:	bd10      	pop	{r4, pc}
 800d9c2:	46c0      	nop			; (mov r8, r8)
 800d9c4:	2000173c 	.word	0x2000173c

0800d9c8 <_Balloc>:
 800d9c8:	b570      	push	{r4, r5, r6, lr}
 800d9ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d9cc:	0006      	movs	r6, r0
 800d9ce:	000c      	movs	r4, r1
 800d9d0:	2d00      	cmp	r5, #0
 800d9d2:	d10e      	bne.n	800d9f2 <_Balloc+0x2a>
 800d9d4:	2010      	movs	r0, #16
 800d9d6:	f7ff ffbf 	bl	800d958 <malloc>
 800d9da:	1e02      	subs	r2, r0, #0
 800d9dc:	6270      	str	r0, [r6, #36]	; 0x24
 800d9de:	d104      	bne.n	800d9ea <_Balloc+0x22>
 800d9e0:	2166      	movs	r1, #102	; 0x66
 800d9e2:	4b19      	ldr	r3, [pc, #100]	; (800da48 <_Balloc+0x80>)
 800d9e4:	4819      	ldr	r0, [pc, #100]	; (800da4c <_Balloc+0x84>)
 800d9e6:	f000 fecb 	bl	800e780 <__assert_func>
 800d9ea:	6045      	str	r5, [r0, #4]
 800d9ec:	6085      	str	r5, [r0, #8]
 800d9ee:	6005      	str	r5, [r0, #0]
 800d9f0:	60c5      	str	r5, [r0, #12]
 800d9f2:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800d9f4:	68eb      	ldr	r3, [r5, #12]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d013      	beq.n	800da22 <_Balloc+0x5a>
 800d9fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d9fc:	00a2      	lsls	r2, r4, #2
 800d9fe:	68db      	ldr	r3, [r3, #12]
 800da00:	189b      	adds	r3, r3, r2
 800da02:	6818      	ldr	r0, [r3, #0]
 800da04:	2800      	cmp	r0, #0
 800da06:	d118      	bne.n	800da3a <_Balloc+0x72>
 800da08:	2101      	movs	r1, #1
 800da0a:	000d      	movs	r5, r1
 800da0c:	40a5      	lsls	r5, r4
 800da0e:	1d6a      	adds	r2, r5, #5
 800da10:	0030      	movs	r0, r6
 800da12:	0092      	lsls	r2, r2, #2
 800da14:	f000 fca1 	bl	800e35a <_calloc_r>
 800da18:	2800      	cmp	r0, #0
 800da1a:	d00c      	beq.n	800da36 <_Balloc+0x6e>
 800da1c:	6044      	str	r4, [r0, #4]
 800da1e:	6085      	str	r5, [r0, #8]
 800da20:	e00d      	b.n	800da3e <_Balloc+0x76>
 800da22:	2221      	movs	r2, #33	; 0x21
 800da24:	2104      	movs	r1, #4
 800da26:	0030      	movs	r0, r6
 800da28:	f000 fc97 	bl	800e35a <_calloc_r>
 800da2c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800da2e:	60e8      	str	r0, [r5, #12]
 800da30:	68db      	ldr	r3, [r3, #12]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d1e1      	bne.n	800d9fa <_Balloc+0x32>
 800da36:	2000      	movs	r0, #0
 800da38:	bd70      	pop	{r4, r5, r6, pc}
 800da3a:	6802      	ldr	r2, [r0, #0]
 800da3c:	601a      	str	r2, [r3, #0]
 800da3e:	2300      	movs	r3, #0
 800da40:	6103      	str	r3, [r0, #16]
 800da42:	60c3      	str	r3, [r0, #12]
 800da44:	e7f8      	b.n	800da38 <_Balloc+0x70>
 800da46:	46c0      	nop			; (mov r8, r8)
 800da48:	0800f856 	.word	0x0800f856
 800da4c:	0800f954 	.word	0x0800f954

0800da50 <_Bfree>:
 800da50:	b570      	push	{r4, r5, r6, lr}
 800da52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800da54:	0005      	movs	r5, r0
 800da56:	000c      	movs	r4, r1
 800da58:	2e00      	cmp	r6, #0
 800da5a:	d10e      	bne.n	800da7a <_Bfree+0x2a>
 800da5c:	2010      	movs	r0, #16
 800da5e:	f7ff ff7b 	bl	800d958 <malloc>
 800da62:	1e02      	subs	r2, r0, #0
 800da64:	6268      	str	r0, [r5, #36]	; 0x24
 800da66:	d104      	bne.n	800da72 <_Bfree+0x22>
 800da68:	218a      	movs	r1, #138	; 0x8a
 800da6a:	4b09      	ldr	r3, [pc, #36]	; (800da90 <_Bfree+0x40>)
 800da6c:	4809      	ldr	r0, [pc, #36]	; (800da94 <_Bfree+0x44>)
 800da6e:	f000 fe87 	bl	800e780 <__assert_func>
 800da72:	6046      	str	r6, [r0, #4]
 800da74:	6086      	str	r6, [r0, #8]
 800da76:	6006      	str	r6, [r0, #0]
 800da78:	60c6      	str	r6, [r0, #12]
 800da7a:	2c00      	cmp	r4, #0
 800da7c:	d007      	beq.n	800da8e <_Bfree+0x3e>
 800da7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800da80:	6862      	ldr	r2, [r4, #4]
 800da82:	68db      	ldr	r3, [r3, #12]
 800da84:	0092      	lsls	r2, r2, #2
 800da86:	189b      	adds	r3, r3, r2
 800da88:	681a      	ldr	r2, [r3, #0]
 800da8a:	6022      	str	r2, [r4, #0]
 800da8c:	601c      	str	r4, [r3, #0]
 800da8e:	bd70      	pop	{r4, r5, r6, pc}
 800da90:	0800f856 	.word	0x0800f856
 800da94:	0800f954 	.word	0x0800f954

0800da98 <__multadd>:
 800da98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da9a:	000e      	movs	r6, r1
 800da9c:	9001      	str	r0, [sp, #4]
 800da9e:	000c      	movs	r4, r1
 800daa0:	001d      	movs	r5, r3
 800daa2:	2000      	movs	r0, #0
 800daa4:	690f      	ldr	r7, [r1, #16]
 800daa6:	3614      	adds	r6, #20
 800daa8:	6833      	ldr	r3, [r6, #0]
 800daaa:	3001      	adds	r0, #1
 800daac:	b299      	uxth	r1, r3
 800daae:	4351      	muls	r1, r2
 800dab0:	0c1b      	lsrs	r3, r3, #16
 800dab2:	4353      	muls	r3, r2
 800dab4:	1949      	adds	r1, r1, r5
 800dab6:	0c0d      	lsrs	r5, r1, #16
 800dab8:	195b      	adds	r3, r3, r5
 800daba:	0c1d      	lsrs	r5, r3, #16
 800dabc:	b289      	uxth	r1, r1
 800dabe:	041b      	lsls	r3, r3, #16
 800dac0:	185b      	adds	r3, r3, r1
 800dac2:	c608      	stmia	r6!, {r3}
 800dac4:	4287      	cmp	r7, r0
 800dac6:	dcef      	bgt.n	800daa8 <__multadd+0x10>
 800dac8:	2d00      	cmp	r5, #0
 800daca:	d022      	beq.n	800db12 <__multadd+0x7a>
 800dacc:	68a3      	ldr	r3, [r4, #8]
 800dace:	42bb      	cmp	r3, r7
 800dad0:	dc19      	bgt.n	800db06 <__multadd+0x6e>
 800dad2:	6863      	ldr	r3, [r4, #4]
 800dad4:	9801      	ldr	r0, [sp, #4]
 800dad6:	1c59      	adds	r1, r3, #1
 800dad8:	f7ff ff76 	bl	800d9c8 <_Balloc>
 800dadc:	1e06      	subs	r6, r0, #0
 800dade:	d105      	bne.n	800daec <__multadd+0x54>
 800dae0:	0002      	movs	r2, r0
 800dae2:	21b5      	movs	r1, #181	; 0xb5
 800dae4:	4b0c      	ldr	r3, [pc, #48]	; (800db18 <__multadd+0x80>)
 800dae6:	480d      	ldr	r0, [pc, #52]	; (800db1c <__multadd+0x84>)
 800dae8:	f000 fe4a 	bl	800e780 <__assert_func>
 800daec:	0021      	movs	r1, r4
 800daee:	6923      	ldr	r3, [r4, #16]
 800daf0:	310c      	adds	r1, #12
 800daf2:	1c9a      	adds	r2, r3, #2
 800daf4:	0092      	lsls	r2, r2, #2
 800daf6:	300c      	adds	r0, #12
 800daf8:	f7fc fecb 	bl	800a892 <memcpy>
 800dafc:	0021      	movs	r1, r4
 800dafe:	9801      	ldr	r0, [sp, #4]
 800db00:	f7ff ffa6 	bl	800da50 <_Bfree>
 800db04:	0034      	movs	r4, r6
 800db06:	1d3b      	adds	r3, r7, #4
 800db08:	009b      	lsls	r3, r3, #2
 800db0a:	18e3      	adds	r3, r4, r3
 800db0c:	605d      	str	r5, [r3, #4]
 800db0e:	1c7b      	adds	r3, r7, #1
 800db10:	6123      	str	r3, [r4, #16]
 800db12:	0020      	movs	r0, r4
 800db14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800db16:	46c0      	nop			; (mov r8, r8)
 800db18:	0800f8c8 	.word	0x0800f8c8
 800db1c:	0800f954 	.word	0x0800f954

0800db20 <__s2b>:
 800db20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db22:	0006      	movs	r6, r0
 800db24:	0018      	movs	r0, r3
 800db26:	000c      	movs	r4, r1
 800db28:	3008      	adds	r0, #8
 800db2a:	2109      	movs	r1, #9
 800db2c:	9301      	str	r3, [sp, #4]
 800db2e:	0015      	movs	r5, r2
 800db30:	f7f2 fb90 	bl	8000254 <__divsi3>
 800db34:	2301      	movs	r3, #1
 800db36:	2100      	movs	r1, #0
 800db38:	4283      	cmp	r3, r0
 800db3a:	db0a      	blt.n	800db52 <__s2b+0x32>
 800db3c:	0030      	movs	r0, r6
 800db3e:	f7ff ff43 	bl	800d9c8 <_Balloc>
 800db42:	1e01      	subs	r1, r0, #0
 800db44:	d108      	bne.n	800db58 <__s2b+0x38>
 800db46:	0002      	movs	r2, r0
 800db48:	4b19      	ldr	r3, [pc, #100]	; (800dbb0 <__s2b+0x90>)
 800db4a:	481a      	ldr	r0, [pc, #104]	; (800dbb4 <__s2b+0x94>)
 800db4c:	31ce      	adds	r1, #206	; 0xce
 800db4e:	f000 fe17 	bl	800e780 <__assert_func>
 800db52:	005b      	lsls	r3, r3, #1
 800db54:	3101      	adds	r1, #1
 800db56:	e7ef      	b.n	800db38 <__s2b+0x18>
 800db58:	9b08      	ldr	r3, [sp, #32]
 800db5a:	6143      	str	r3, [r0, #20]
 800db5c:	2301      	movs	r3, #1
 800db5e:	6103      	str	r3, [r0, #16]
 800db60:	2d09      	cmp	r5, #9
 800db62:	dd18      	ble.n	800db96 <__s2b+0x76>
 800db64:	0023      	movs	r3, r4
 800db66:	3309      	adds	r3, #9
 800db68:	001f      	movs	r7, r3
 800db6a:	9300      	str	r3, [sp, #0]
 800db6c:	1964      	adds	r4, r4, r5
 800db6e:	783b      	ldrb	r3, [r7, #0]
 800db70:	220a      	movs	r2, #10
 800db72:	0030      	movs	r0, r6
 800db74:	3b30      	subs	r3, #48	; 0x30
 800db76:	f7ff ff8f 	bl	800da98 <__multadd>
 800db7a:	3701      	adds	r7, #1
 800db7c:	0001      	movs	r1, r0
 800db7e:	42a7      	cmp	r7, r4
 800db80:	d1f5      	bne.n	800db6e <__s2b+0x4e>
 800db82:	002c      	movs	r4, r5
 800db84:	9b00      	ldr	r3, [sp, #0]
 800db86:	3c08      	subs	r4, #8
 800db88:	191c      	adds	r4, r3, r4
 800db8a:	002f      	movs	r7, r5
 800db8c:	9b01      	ldr	r3, [sp, #4]
 800db8e:	429f      	cmp	r7, r3
 800db90:	db04      	blt.n	800db9c <__s2b+0x7c>
 800db92:	0008      	movs	r0, r1
 800db94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800db96:	2509      	movs	r5, #9
 800db98:	340a      	adds	r4, #10
 800db9a:	e7f6      	b.n	800db8a <__s2b+0x6a>
 800db9c:	1b63      	subs	r3, r4, r5
 800db9e:	5ddb      	ldrb	r3, [r3, r7]
 800dba0:	220a      	movs	r2, #10
 800dba2:	0030      	movs	r0, r6
 800dba4:	3b30      	subs	r3, #48	; 0x30
 800dba6:	f7ff ff77 	bl	800da98 <__multadd>
 800dbaa:	3701      	adds	r7, #1
 800dbac:	0001      	movs	r1, r0
 800dbae:	e7ed      	b.n	800db8c <__s2b+0x6c>
 800dbb0:	0800f8c8 	.word	0x0800f8c8
 800dbb4:	0800f954 	.word	0x0800f954

0800dbb8 <__hi0bits>:
 800dbb8:	0003      	movs	r3, r0
 800dbba:	0c02      	lsrs	r2, r0, #16
 800dbbc:	2000      	movs	r0, #0
 800dbbe:	4282      	cmp	r2, r0
 800dbc0:	d101      	bne.n	800dbc6 <__hi0bits+0xe>
 800dbc2:	041b      	lsls	r3, r3, #16
 800dbc4:	3010      	adds	r0, #16
 800dbc6:	0e1a      	lsrs	r2, r3, #24
 800dbc8:	d101      	bne.n	800dbce <__hi0bits+0x16>
 800dbca:	3008      	adds	r0, #8
 800dbcc:	021b      	lsls	r3, r3, #8
 800dbce:	0f1a      	lsrs	r2, r3, #28
 800dbd0:	d101      	bne.n	800dbd6 <__hi0bits+0x1e>
 800dbd2:	3004      	adds	r0, #4
 800dbd4:	011b      	lsls	r3, r3, #4
 800dbd6:	0f9a      	lsrs	r2, r3, #30
 800dbd8:	d101      	bne.n	800dbde <__hi0bits+0x26>
 800dbda:	3002      	adds	r0, #2
 800dbdc:	009b      	lsls	r3, r3, #2
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	db03      	blt.n	800dbea <__hi0bits+0x32>
 800dbe2:	3001      	adds	r0, #1
 800dbe4:	005b      	lsls	r3, r3, #1
 800dbe6:	d400      	bmi.n	800dbea <__hi0bits+0x32>
 800dbe8:	2020      	movs	r0, #32
 800dbea:	4770      	bx	lr

0800dbec <__lo0bits>:
 800dbec:	6803      	ldr	r3, [r0, #0]
 800dbee:	0002      	movs	r2, r0
 800dbf0:	2107      	movs	r1, #7
 800dbf2:	0018      	movs	r0, r3
 800dbf4:	4008      	ands	r0, r1
 800dbf6:	420b      	tst	r3, r1
 800dbf8:	d00d      	beq.n	800dc16 <__lo0bits+0x2a>
 800dbfa:	3906      	subs	r1, #6
 800dbfc:	2000      	movs	r0, #0
 800dbfe:	420b      	tst	r3, r1
 800dc00:	d105      	bne.n	800dc0e <__lo0bits+0x22>
 800dc02:	3002      	adds	r0, #2
 800dc04:	4203      	tst	r3, r0
 800dc06:	d003      	beq.n	800dc10 <__lo0bits+0x24>
 800dc08:	40cb      	lsrs	r3, r1
 800dc0a:	0008      	movs	r0, r1
 800dc0c:	6013      	str	r3, [r2, #0]
 800dc0e:	4770      	bx	lr
 800dc10:	089b      	lsrs	r3, r3, #2
 800dc12:	6013      	str	r3, [r2, #0]
 800dc14:	e7fb      	b.n	800dc0e <__lo0bits+0x22>
 800dc16:	b299      	uxth	r1, r3
 800dc18:	2900      	cmp	r1, #0
 800dc1a:	d101      	bne.n	800dc20 <__lo0bits+0x34>
 800dc1c:	2010      	movs	r0, #16
 800dc1e:	0c1b      	lsrs	r3, r3, #16
 800dc20:	b2d9      	uxtb	r1, r3
 800dc22:	2900      	cmp	r1, #0
 800dc24:	d101      	bne.n	800dc2a <__lo0bits+0x3e>
 800dc26:	3008      	adds	r0, #8
 800dc28:	0a1b      	lsrs	r3, r3, #8
 800dc2a:	0719      	lsls	r1, r3, #28
 800dc2c:	d101      	bne.n	800dc32 <__lo0bits+0x46>
 800dc2e:	3004      	adds	r0, #4
 800dc30:	091b      	lsrs	r3, r3, #4
 800dc32:	0799      	lsls	r1, r3, #30
 800dc34:	d101      	bne.n	800dc3a <__lo0bits+0x4e>
 800dc36:	3002      	adds	r0, #2
 800dc38:	089b      	lsrs	r3, r3, #2
 800dc3a:	07d9      	lsls	r1, r3, #31
 800dc3c:	d4e9      	bmi.n	800dc12 <__lo0bits+0x26>
 800dc3e:	3001      	adds	r0, #1
 800dc40:	085b      	lsrs	r3, r3, #1
 800dc42:	d1e6      	bne.n	800dc12 <__lo0bits+0x26>
 800dc44:	2020      	movs	r0, #32
 800dc46:	e7e2      	b.n	800dc0e <__lo0bits+0x22>

0800dc48 <__i2b>:
 800dc48:	b510      	push	{r4, lr}
 800dc4a:	000c      	movs	r4, r1
 800dc4c:	2101      	movs	r1, #1
 800dc4e:	f7ff febb 	bl	800d9c8 <_Balloc>
 800dc52:	2800      	cmp	r0, #0
 800dc54:	d106      	bne.n	800dc64 <__i2b+0x1c>
 800dc56:	21a0      	movs	r1, #160	; 0xa0
 800dc58:	0002      	movs	r2, r0
 800dc5a:	4b04      	ldr	r3, [pc, #16]	; (800dc6c <__i2b+0x24>)
 800dc5c:	4804      	ldr	r0, [pc, #16]	; (800dc70 <__i2b+0x28>)
 800dc5e:	0049      	lsls	r1, r1, #1
 800dc60:	f000 fd8e 	bl	800e780 <__assert_func>
 800dc64:	2301      	movs	r3, #1
 800dc66:	6144      	str	r4, [r0, #20]
 800dc68:	6103      	str	r3, [r0, #16]
 800dc6a:	bd10      	pop	{r4, pc}
 800dc6c:	0800f8c8 	.word	0x0800f8c8
 800dc70:	0800f954 	.word	0x0800f954

0800dc74 <__multiply>:
 800dc74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc76:	690b      	ldr	r3, [r1, #16]
 800dc78:	0014      	movs	r4, r2
 800dc7a:	6912      	ldr	r2, [r2, #16]
 800dc7c:	000d      	movs	r5, r1
 800dc7e:	b089      	sub	sp, #36	; 0x24
 800dc80:	4293      	cmp	r3, r2
 800dc82:	da01      	bge.n	800dc88 <__multiply+0x14>
 800dc84:	0025      	movs	r5, r4
 800dc86:	000c      	movs	r4, r1
 800dc88:	692f      	ldr	r7, [r5, #16]
 800dc8a:	6926      	ldr	r6, [r4, #16]
 800dc8c:	6869      	ldr	r1, [r5, #4]
 800dc8e:	19bb      	adds	r3, r7, r6
 800dc90:	9302      	str	r3, [sp, #8]
 800dc92:	68ab      	ldr	r3, [r5, #8]
 800dc94:	19ba      	adds	r2, r7, r6
 800dc96:	4293      	cmp	r3, r2
 800dc98:	da00      	bge.n	800dc9c <__multiply+0x28>
 800dc9a:	3101      	adds	r1, #1
 800dc9c:	f7ff fe94 	bl	800d9c8 <_Balloc>
 800dca0:	9001      	str	r0, [sp, #4]
 800dca2:	2800      	cmp	r0, #0
 800dca4:	d106      	bne.n	800dcb4 <__multiply+0x40>
 800dca6:	215e      	movs	r1, #94	; 0x5e
 800dca8:	0002      	movs	r2, r0
 800dcaa:	4b48      	ldr	r3, [pc, #288]	; (800ddcc <__multiply+0x158>)
 800dcac:	4848      	ldr	r0, [pc, #288]	; (800ddd0 <__multiply+0x15c>)
 800dcae:	31ff      	adds	r1, #255	; 0xff
 800dcb0:	f000 fd66 	bl	800e780 <__assert_func>
 800dcb4:	9b01      	ldr	r3, [sp, #4]
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	3314      	adds	r3, #20
 800dcba:	469c      	mov	ip, r3
 800dcbc:	19bb      	adds	r3, r7, r6
 800dcbe:	009b      	lsls	r3, r3, #2
 800dcc0:	4463      	add	r3, ip
 800dcc2:	9303      	str	r3, [sp, #12]
 800dcc4:	4663      	mov	r3, ip
 800dcc6:	9903      	ldr	r1, [sp, #12]
 800dcc8:	428b      	cmp	r3, r1
 800dcca:	d32c      	bcc.n	800dd26 <__multiply+0xb2>
 800dccc:	002b      	movs	r3, r5
 800dcce:	0022      	movs	r2, r4
 800dcd0:	3314      	adds	r3, #20
 800dcd2:	00bf      	lsls	r7, r7, #2
 800dcd4:	3214      	adds	r2, #20
 800dcd6:	9306      	str	r3, [sp, #24]
 800dcd8:	00b6      	lsls	r6, r6, #2
 800dcda:	19db      	adds	r3, r3, r7
 800dcdc:	9304      	str	r3, [sp, #16]
 800dcde:	1993      	adds	r3, r2, r6
 800dce0:	9307      	str	r3, [sp, #28]
 800dce2:	2304      	movs	r3, #4
 800dce4:	9305      	str	r3, [sp, #20]
 800dce6:	002b      	movs	r3, r5
 800dce8:	9904      	ldr	r1, [sp, #16]
 800dcea:	3315      	adds	r3, #21
 800dcec:	9200      	str	r2, [sp, #0]
 800dcee:	4299      	cmp	r1, r3
 800dcf0:	d305      	bcc.n	800dcfe <__multiply+0x8a>
 800dcf2:	1b4b      	subs	r3, r1, r5
 800dcf4:	3b15      	subs	r3, #21
 800dcf6:	089b      	lsrs	r3, r3, #2
 800dcf8:	3301      	adds	r3, #1
 800dcfa:	009b      	lsls	r3, r3, #2
 800dcfc:	9305      	str	r3, [sp, #20]
 800dcfe:	9b07      	ldr	r3, [sp, #28]
 800dd00:	9a00      	ldr	r2, [sp, #0]
 800dd02:	429a      	cmp	r2, r3
 800dd04:	d311      	bcc.n	800dd2a <__multiply+0xb6>
 800dd06:	9b02      	ldr	r3, [sp, #8]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	dd06      	ble.n	800dd1a <__multiply+0xa6>
 800dd0c:	9b03      	ldr	r3, [sp, #12]
 800dd0e:	3b04      	subs	r3, #4
 800dd10:	9303      	str	r3, [sp, #12]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	9300      	str	r3, [sp, #0]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d053      	beq.n	800ddc2 <__multiply+0x14e>
 800dd1a:	9b01      	ldr	r3, [sp, #4]
 800dd1c:	9a02      	ldr	r2, [sp, #8]
 800dd1e:	0018      	movs	r0, r3
 800dd20:	611a      	str	r2, [r3, #16]
 800dd22:	b009      	add	sp, #36	; 0x24
 800dd24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd26:	c304      	stmia	r3!, {r2}
 800dd28:	e7cd      	b.n	800dcc6 <__multiply+0x52>
 800dd2a:	9b00      	ldr	r3, [sp, #0]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	b298      	uxth	r0, r3
 800dd30:	2800      	cmp	r0, #0
 800dd32:	d01b      	beq.n	800dd6c <__multiply+0xf8>
 800dd34:	4667      	mov	r7, ip
 800dd36:	2400      	movs	r4, #0
 800dd38:	9e06      	ldr	r6, [sp, #24]
 800dd3a:	ce02      	ldmia	r6!, {r1}
 800dd3c:	683a      	ldr	r2, [r7, #0]
 800dd3e:	b28b      	uxth	r3, r1
 800dd40:	4343      	muls	r3, r0
 800dd42:	b292      	uxth	r2, r2
 800dd44:	189b      	adds	r3, r3, r2
 800dd46:	191b      	adds	r3, r3, r4
 800dd48:	0c0c      	lsrs	r4, r1, #16
 800dd4a:	4344      	muls	r4, r0
 800dd4c:	683a      	ldr	r2, [r7, #0]
 800dd4e:	0c11      	lsrs	r1, r2, #16
 800dd50:	1861      	adds	r1, r4, r1
 800dd52:	0c1c      	lsrs	r4, r3, #16
 800dd54:	1909      	adds	r1, r1, r4
 800dd56:	0c0c      	lsrs	r4, r1, #16
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	0409      	lsls	r1, r1, #16
 800dd5c:	430b      	orrs	r3, r1
 800dd5e:	c708      	stmia	r7!, {r3}
 800dd60:	9b04      	ldr	r3, [sp, #16]
 800dd62:	42b3      	cmp	r3, r6
 800dd64:	d8e9      	bhi.n	800dd3a <__multiply+0xc6>
 800dd66:	4663      	mov	r3, ip
 800dd68:	9a05      	ldr	r2, [sp, #20]
 800dd6a:	509c      	str	r4, [r3, r2]
 800dd6c:	9b00      	ldr	r3, [sp, #0]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	0c1e      	lsrs	r6, r3, #16
 800dd72:	d020      	beq.n	800ddb6 <__multiply+0x142>
 800dd74:	4663      	mov	r3, ip
 800dd76:	002c      	movs	r4, r5
 800dd78:	4660      	mov	r0, ip
 800dd7a:	2700      	movs	r7, #0
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	3414      	adds	r4, #20
 800dd80:	6822      	ldr	r2, [r4, #0]
 800dd82:	b29b      	uxth	r3, r3
 800dd84:	b291      	uxth	r1, r2
 800dd86:	4371      	muls	r1, r6
 800dd88:	6802      	ldr	r2, [r0, #0]
 800dd8a:	0c12      	lsrs	r2, r2, #16
 800dd8c:	1889      	adds	r1, r1, r2
 800dd8e:	19cf      	adds	r7, r1, r7
 800dd90:	0439      	lsls	r1, r7, #16
 800dd92:	430b      	orrs	r3, r1
 800dd94:	6003      	str	r3, [r0, #0]
 800dd96:	cc02      	ldmia	r4!, {r1}
 800dd98:	6843      	ldr	r3, [r0, #4]
 800dd9a:	0c09      	lsrs	r1, r1, #16
 800dd9c:	4371      	muls	r1, r6
 800dd9e:	b29b      	uxth	r3, r3
 800dda0:	0c3f      	lsrs	r7, r7, #16
 800dda2:	18cb      	adds	r3, r1, r3
 800dda4:	9a04      	ldr	r2, [sp, #16]
 800dda6:	19db      	adds	r3, r3, r7
 800dda8:	0c1f      	lsrs	r7, r3, #16
 800ddaa:	3004      	adds	r0, #4
 800ddac:	42a2      	cmp	r2, r4
 800ddae:	d8e7      	bhi.n	800dd80 <__multiply+0x10c>
 800ddb0:	4662      	mov	r2, ip
 800ddb2:	9905      	ldr	r1, [sp, #20]
 800ddb4:	5053      	str	r3, [r2, r1]
 800ddb6:	9b00      	ldr	r3, [sp, #0]
 800ddb8:	3304      	adds	r3, #4
 800ddba:	9300      	str	r3, [sp, #0]
 800ddbc:	2304      	movs	r3, #4
 800ddbe:	449c      	add	ip, r3
 800ddc0:	e79d      	b.n	800dcfe <__multiply+0x8a>
 800ddc2:	9b02      	ldr	r3, [sp, #8]
 800ddc4:	3b01      	subs	r3, #1
 800ddc6:	9302      	str	r3, [sp, #8]
 800ddc8:	e79d      	b.n	800dd06 <__multiply+0x92>
 800ddca:	46c0      	nop			; (mov r8, r8)
 800ddcc:	0800f8c8 	.word	0x0800f8c8
 800ddd0:	0800f954 	.word	0x0800f954

0800ddd4 <__pow5mult>:
 800ddd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ddd6:	2303      	movs	r3, #3
 800ddd8:	0015      	movs	r5, r2
 800ddda:	0007      	movs	r7, r0
 800dddc:	000e      	movs	r6, r1
 800ddde:	401a      	ands	r2, r3
 800dde0:	421d      	tst	r5, r3
 800dde2:	d008      	beq.n	800ddf6 <__pow5mult+0x22>
 800dde4:	4925      	ldr	r1, [pc, #148]	; (800de7c <__pow5mult+0xa8>)
 800dde6:	3a01      	subs	r2, #1
 800dde8:	0092      	lsls	r2, r2, #2
 800ddea:	5852      	ldr	r2, [r2, r1]
 800ddec:	2300      	movs	r3, #0
 800ddee:	0031      	movs	r1, r6
 800ddf0:	f7ff fe52 	bl	800da98 <__multadd>
 800ddf4:	0006      	movs	r6, r0
 800ddf6:	10ad      	asrs	r5, r5, #2
 800ddf8:	d03d      	beq.n	800de76 <__pow5mult+0xa2>
 800ddfa:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800ddfc:	2c00      	cmp	r4, #0
 800ddfe:	d10f      	bne.n	800de20 <__pow5mult+0x4c>
 800de00:	2010      	movs	r0, #16
 800de02:	f7ff fda9 	bl	800d958 <malloc>
 800de06:	1e02      	subs	r2, r0, #0
 800de08:	6278      	str	r0, [r7, #36]	; 0x24
 800de0a:	d105      	bne.n	800de18 <__pow5mult+0x44>
 800de0c:	21d7      	movs	r1, #215	; 0xd7
 800de0e:	4b1c      	ldr	r3, [pc, #112]	; (800de80 <__pow5mult+0xac>)
 800de10:	481c      	ldr	r0, [pc, #112]	; (800de84 <__pow5mult+0xb0>)
 800de12:	0049      	lsls	r1, r1, #1
 800de14:	f000 fcb4 	bl	800e780 <__assert_func>
 800de18:	6044      	str	r4, [r0, #4]
 800de1a:	6084      	str	r4, [r0, #8]
 800de1c:	6004      	str	r4, [r0, #0]
 800de1e:	60c4      	str	r4, [r0, #12]
 800de20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de22:	689c      	ldr	r4, [r3, #8]
 800de24:	9301      	str	r3, [sp, #4]
 800de26:	2c00      	cmp	r4, #0
 800de28:	d108      	bne.n	800de3c <__pow5mult+0x68>
 800de2a:	0038      	movs	r0, r7
 800de2c:	4916      	ldr	r1, [pc, #88]	; (800de88 <__pow5mult+0xb4>)
 800de2e:	f7ff ff0b 	bl	800dc48 <__i2b>
 800de32:	9b01      	ldr	r3, [sp, #4]
 800de34:	0004      	movs	r4, r0
 800de36:	6098      	str	r0, [r3, #8]
 800de38:	2300      	movs	r3, #0
 800de3a:	6003      	str	r3, [r0, #0]
 800de3c:	2301      	movs	r3, #1
 800de3e:	421d      	tst	r5, r3
 800de40:	d00a      	beq.n	800de58 <__pow5mult+0x84>
 800de42:	0031      	movs	r1, r6
 800de44:	0022      	movs	r2, r4
 800de46:	0038      	movs	r0, r7
 800de48:	f7ff ff14 	bl	800dc74 <__multiply>
 800de4c:	0031      	movs	r1, r6
 800de4e:	9001      	str	r0, [sp, #4]
 800de50:	0038      	movs	r0, r7
 800de52:	f7ff fdfd 	bl	800da50 <_Bfree>
 800de56:	9e01      	ldr	r6, [sp, #4]
 800de58:	106d      	asrs	r5, r5, #1
 800de5a:	d00c      	beq.n	800de76 <__pow5mult+0xa2>
 800de5c:	6820      	ldr	r0, [r4, #0]
 800de5e:	2800      	cmp	r0, #0
 800de60:	d107      	bne.n	800de72 <__pow5mult+0x9e>
 800de62:	0022      	movs	r2, r4
 800de64:	0021      	movs	r1, r4
 800de66:	0038      	movs	r0, r7
 800de68:	f7ff ff04 	bl	800dc74 <__multiply>
 800de6c:	2300      	movs	r3, #0
 800de6e:	6020      	str	r0, [r4, #0]
 800de70:	6003      	str	r3, [r0, #0]
 800de72:	0004      	movs	r4, r0
 800de74:	e7e2      	b.n	800de3c <__pow5mult+0x68>
 800de76:	0030      	movs	r0, r6
 800de78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800de7a:	46c0      	nop			; (mov r8, r8)
 800de7c:	0800faa0 	.word	0x0800faa0
 800de80:	0800f856 	.word	0x0800f856
 800de84:	0800f954 	.word	0x0800f954
 800de88:	00000271 	.word	0x00000271

0800de8c <__lshift>:
 800de8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de8e:	000c      	movs	r4, r1
 800de90:	0017      	movs	r7, r2
 800de92:	6923      	ldr	r3, [r4, #16]
 800de94:	1155      	asrs	r5, r2, #5
 800de96:	b087      	sub	sp, #28
 800de98:	18eb      	adds	r3, r5, r3
 800de9a:	9302      	str	r3, [sp, #8]
 800de9c:	3301      	adds	r3, #1
 800de9e:	9301      	str	r3, [sp, #4]
 800dea0:	6849      	ldr	r1, [r1, #4]
 800dea2:	68a3      	ldr	r3, [r4, #8]
 800dea4:	9004      	str	r0, [sp, #16]
 800dea6:	9a01      	ldr	r2, [sp, #4]
 800dea8:	4293      	cmp	r3, r2
 800deaa:	db10      	blt.n	800dece <__lshift+0x42>
 800deac:	9804      	ldr	r0, [sp, #16]
 800deae:	f7ff fd8b 	bl	800d9c8 <_Balloc>
 800deb2:	2300      	movs	r3, #0
 800deb4:	0002      	movs	r2, r0
 800deb6:	0006      	movs	r6, r0
 800deb8:	0019      	movs	r1, r3
 800deba:	3214      	adds	r2, #20
 800debc:	4298      	cmp	r0, r3
 800debe:	d10c      	bne.n	800deda <__lshift+0x4e>
 800dec0:	21da      	movs	r1, #218	; 0xda
 800dec2:	0002      	movs	r2, r0
 800dec4:	4b26      	ldr	r3, [pc, #152]	; (800df60 <__lshift+0xd4>)
 800dec6:	4827      	ldr	r0, [pc, #156]	; (800df64 <__lshift+0xd8>)
 800dec8:	31ff      	adds	r1, #255	; 0xff
 800deca:	f000 fc59 	bl	800e780 <__assert_func>
 800dece:	3101      	adds	r1, #1
 800ded0:	005b      	lsls	r3, r3, #1
 800ded2:	e7e8      	b.n	800dea6 <__lshift+0x1a>
 800ded4:	0098      	lsls	r0, r3, #2
 800ded6:	5011      	str	r1, [r2, r0]
 800ded8:	3301      	adds	r3, #1
 800deda:	42ab      	cmp	r3, r5
 800dedc:	dbfa      	blt.n	800ded4 <__lshift+0x48>
 800dede:	43eb      	mvns	r3, r5
 800dee0:	17db      	asrs	r3, r3, #31
 800dee2:	401d      	ands	r5, r3
 800dee4:	211f      	movs	r1, #31
 800dee6:	0023      	movs	r3, r4
 800dee8:	0038      	movs	r0, r7
 800deea:	00ad      	lsls	r5, r5, #2
 800deec:	1955      	adds	r5, r2, r5
 800deee:	6922      	ldr	r2, [r4, #16]
 800def0:	3314      	adds	r3, #20
 800def2:	0092      	lsls	r2, r2, #2
 800def4:	4008      	ands	r0, r1
 800def6:	4684      	mov	ip, r0
 800def8:	189a      	adds	r2, r3, r2
 800defa:	420f      	tst	r7, r1
 800defc:	d02a      	beq.n	800df54 <__lshift+0xc8>
 800defe:	3101      	adds	r1, #1
 800df00:	1a09      	subs	r1, r1, r0
 800df02:	9105      	str	r1, [sp, #20]
 800df04:	2100      	movs	r1, #0
 800df06:	9503      	str	r5, [sp, #12]
 800df08:	4667      	mov	r7, ip
 800df0a:	6818      	ldr	r0, [r3, #0]
 800df0c:	40b8      	lsls	r0, r7
 800df0e:	4301      	orrs	r1, r0
 800df10:	9803      	ldr	r0, [sp, #12]
 800df12:	c002      	stmia	r0!, {r1}
 800df14:	cb02      	ldmia	r3!, {r1}
 800df16:	9003      	str	r0, [sp, #12]
 800df18:	9805      	ldr	r0, [sp, #20]
 800df1a:	40c1      	lsrs	r1, r0
 800df1c:	429a      	cmp	r2, r3
 800df1e:	d8f3      	bhi.n	800df08 <__lshift+0x7c>
 800df20:	0020      	movs	r0, r4
 800df22:	3015      	adds	r0, #21
 800df24:	2304      	movs	r3, #4
 800df26:	4282      	cmp	r2, r0
 800df28:	d304      	bcc.n	800df34 <__lshift+0xa8>
 800df2a:	1b13      	subs	r3, r2, r4
 800df2c:	3b15      	subs	r3, #21
 800df2e:	089b      	lsrs	r3, r3, #2
 800df30:	3301      	adds	r3, #1
 800df32:	009b      	lsls	r3, r3, #2
 800df34:	50e9      	str	r1, [r5, r3]
 800df36:	2900      	cmp	r1, #0
 800df38:	d002      	beq.n	800df40 <__lshift+0xb4>
 800df3a:	9b02      	ldr	r3, [sp, #8]
 800df3c:	3302      	adds	r3, #2
 800df3e:	9301      	str	r3, [sp, #4]
 800df40:	9b01      	ldr	r3, [sp, #4]
 800df42:	9804      	ldr	r0, [sp, #16]
 800df44:	3b01      	subs	r3, #1
 800df46:	0021      	movs	r1, r4
 800df48:	6133      	str	r3, [r6, #16]
 800df4a:	f7ff fd81 	bl	800da50 <_Bfree>
 800df4e:	0030      	movs	r0, r6
 800df50:	b007      	add	sp, #28
 800df52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df54:	cb02      	ldmia	r3!, {r1}
 800df56:	c502      	stmia	r5!, {r1}
 800df58:	429a      	cmp	r2, r3
 800df5a:	d8fb      	bhi.n	800df54 <__lshift+0xc8>
 800df5c:	e7f0      	b.n	800df40 <__lshift+0xb4>
 800df5e:	46c0      	nop			; (mov r8, r8)
 800df60:	0800f8c8 	.word	0x0800f8c8
 800df64:	0800f954 	.word	0x0800f954

0800df68 <__mcmp>:
 800df68:	6902      	ldr	r2, [r0, #16]
 800df6a:	690b      	ldr	r3, [r1, #16]
 800df6c:	b530      	push	{r4, r5, lr}
 800df6e:	0004      	movs	r4, r0
 800df70:	1ad0      	subs	r0, r2, r3
 800df72:	429a      	cmp	r2, r3
 800df74:	d10d      	bne.n	800df92 <__mcmp+0x2a>
 800df76:	009b      	lsls	r3, r3, #2
 800df78:	3414      	adds	r4, #20
 800df7a:	3114      	adds	r1, #20
 800df7c:	18e2      	adds	r2, r4, r3
 800df7e:	18c9      	adds	r1, r1, r3
 800df80:	3a04      	subs	r2, #4
 800df82:	3904      	subs	r1, #4
 800df84:	6815      	ldr	r5, [r2, #0]
 800df86:	680b      	ldr	r3, [r1, #0]
 800df88:	429d      	cmp	r5, r3
 800df8a:	d003      	beq.n	800df94 <__mcmp+0x2c>
 800df8c:	2001      	movs	r0, #1
 800df8e:	429d      	cmp	r5, r3
 800df90:	d303      	bcc.n	800df9a <__mcmp+0x32>
 800df92:	bd30      	pop	{r4, r5, pc}
 800df94:	4294      	cmp	r4, r2
 800df96:	d3f3      	bcc.n	800df80 <__mcmp+0x18>
 800df98:	e7fb      	b.n	800df92 <__mcmp+0x2a>
 800df9a:	4240      	negs	r0, r0
 800df9c:	e7f9      	b.n	800df92 <__mcmp+0x2a>
	...

0800dfa0 <__mdiff>:
 800dfa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfa2:	000e      	movs	r6, r1
 800dfa4:	0007      	movs	r7, r0
 800dfa6:	0011      	movs	r1, r2
 800dfa8:	0030      	movs	r0, r6
 800dfaa:	b087      	sub	sp, #28
 800dfac:	0014      	movs	r4, r2
 800dfae:	f7ff ffdb 	bl	800df68 <__mcmp>
 800dfb2:	1e05      	subs	r5, r0, #0
 800dfb4:	d110      	bne.n	800dfd8 <__mdiff+0x38>
 800dfb6:	0001      	movs	r1, r0
 800dfb8:	0038      	movs	r0, r7
 800dfba:	f7ff fd05 	bl	800d9c8 <_Balloc>
 800dfbe:	1e02      	subs	r2, r0, #0
 800dfc0:	d104      	bne.n	800dfcc <__mdiff+0x2c>
 800dfc2:	4b40      	ldr	r3, [pc, #256]	; (800e0c4 <__mdiff+0x124>)
 800dfc4:	4940      	ldr	r1, [pc, #256]	; (800e0c8 <__mdiff+0x128>)
 800dfc6:	4841      	ldr	r0, [pc, #260]	; (800e0cc <__mdiff+0x12c>)
 800dfc8:	f000 fbda 	bl	800e780 <__assert_func>
 800dfcc:	2301      	movs	r3, #1
 800dfce:	6145      	str	r5, [r0, #20]
 800dfd0:	6103      	str	r3, [r0, #16]
 800dfd2:	0010      	movs	r0, r2
 800dfd4:	b007      	add	sp, #28
 800dfd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfd8:	2301      	movs	r3, #1
 800dfda:	9301      	str	r3, [sp, #4]
 800dfdc:	2800      	cmp	r0, #0
 800dfde:	db04      	blt.n	800dfea <__mdiff+0x4a>
 800dfe0:	0023      	movs	r3, r4
 800dfe2:	0034      	movs	r4, r6
 800dfe4:	001e      	movs	r6, r3
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	9301      	str	r3, [sp, #4]
 800dfea:	0038      	movs	r0, r7
 800dfec:	6861      	ldr	r1, [r4, #4]
 800dfee:	f7ff fceb 	bl	800d9c8 <_Balloc>
 800dff2:	1e02      	subs	r2, r0, #0
 800dff4:	d103      	bne.n	800dffe <__mdiff+0x5e>
 800dff6:	2190      	movs	r1, #144	; 0x90
 800dff8:	4b32      	ldr	r3, [pc, #200]	; (800e0c4 <__mdiff+0x124>)
 800dffa:	0089      	lsls	r1, r1, #2
 800dffc:	e7e3      	b.n	800dfc6 <__mdiff+0x26>
 800dffe:	9b01      	ldr	r3, [sp, #4]
 800e000:	2700      	movs	r7, #0
 800e002:	60c3      	str	r3, [r0, #12]
 800e004:	6920      	ldr	r0, [r4, #16]
 800e006:	3414      	adds	r4, #20
 800e008:	9401      	str	r4, [sp, #4]
 800e00a:	9b01      	ldr	r3, [sp, #4]
 800e00c:	0084      	lsls	r4, r0, #2
 800e00e:	191b      	adds	r3, r3, r4
 800e010:	0034      	movs	r4, r6
 800e012:	9302      	str	r3, [sp, #8]
 800e014:	6933      	ldr	r3, [r6, #16]
 800e016:	3414      	adds	r4, #20
 800e018:	0099      	lsls	r1, r3, #2
 800e01a:	1863      	adds	r3, r4, r1
 800e01c:	9303      	str	r3, [sp, #12]
 800e01e:	0013      	movs	r3, r2
 800e020:	3314      	adds	r3, #20
 800e022:	469c      	mov	ip, r3
 800e024:	9305      	str	r3, [sp, #20]
 800e026:	9b01      	ldr	r3, [sp, #4]
 800e028:	9304      	str	r3, [sp, #16]
 800e02a:	9b04      	ldr	r3, [sp, #16]
 800e02c:	cc02      	ldmia	r4!, {r1}
 800e02e:	cb20      	ldmia	r3!, {r5}
 800e030:	9304      	str	r3, [sp, #16]
 800e032:	b2ab      	uxth	r3, r5
 800e034:	19df      	adds	r7, r3, r7
 800e036:	b28b      	uxth	r3, r1
 800e038:	1afb      	subs	r3, r7, r3
 800e03a:	0c09      	lsrs	r1, r1, #16
 800e03c:	0c2d      	lsrs	r5, r5, #16
 800e03e:	1a6d      	subs	r5, r5, r1
 800e040:	1419      	asrs	r1, r3, #16
 800e042:	186d      	adds	r5, r5, r1
 800e044:	4661      	mov	r1, ip
 800e046:	142f      	asrs	r7, r5, #16
 800e048:	b29b      	uxth	r3, r3
 800e04a:	042d      	lsls	r5, r5, #16
 800e04c:	432b      	orrs	r3, r5
 800e04e:	c108      	stmia	r1!, {r3}
 800e050:	9b03      	ldr	r3, [sp, #12]
 800e052:	468c      	mov	ip, r1
 800e054:	42a3      	cmp	r3, r4
 800e056:	d8e8      	bhi.n	800e02a <__mdiff+0x8a>
 800e058:	0031      	movs	r1, r6
 800e05a:	9c03      	ldr	r4, [sp, #12]
 800e05c:	3115      	adds	r1, #21
 800e05e:	2304      	movs	r3, #4
 800e060:	428c      	cmp	r4, r1
 800e062:	d304      	bcc.n	800e06e <__mdiff+0xce>
 800e064:	1ba3      	subs	r3, r4, r6
 800e066:	3b15      	subs	r3, #21
 800e068:	089b      	lsrs	r3, r3, #2
 800e06a:	3301      	adds	r3, #1
 800e06c:	009b      	lsls	r3, r3, #2
 800e06e:	9901      	ldr	r1, [sp, #4]
 800e070:	18cc      	adds	r4, r1, r3
 800e072:	9905      	ldr	r1, [sp, #20]
 800e074:	0026      	movs	r6, r4
 800e076:	18cb      	adds	r3, r1, r3
 800e078:	469c      	mov	ip, r3
 800e07a:	9902      	ldr	r1, [sp, #8]
 800e07c:	428e      	cmp	r6, r1
 800e07e:	d310      	bcc.n	800e0a2 <__mdiff+0x102>
 800e080:	9e02      	ldr	r6, [sp, #8]
 800e082:	1ee1      	subs	r1, r4, #3
 800e084:	2500      	movs	r5, #0
 800e086:	428e      	cmp	r6, r1
 800e088:	d304      	bcc.n	800e094 <__mdiff+0xf4>
 800e08a:	0031      	movs	r1, r6
 800e08c:	3103      	adds	r1, #3
 800e08e:	1b0c      	subs	r4, r1, r4
 800e090:	08a4      	lsrs	r4, r4, #2
 800e092:	00a5      	lsls	r5, r4, #2
 800e094:	195b      	adds	r3, r3, r5
 800e096:	3b04      	subs	r3, #4
 800e098:	6819      	ldr	r1, [r3, #0]
 800e09a:	2900      	cmp	r1, #0
 800e09c:	d00f      	beq.n	800e0be <__mdiff+0x11e>
 800e09e:	6110      	str	r0, [r2, #16]
 800e0a0:	e797      	b.n	800dfd2 <__mdiff+0x32>
 800e0a2:	ce02      	ldmia	r6!, {r1}
 800e0a4:	b28d      	uxth	r5, r1
 800e0a6:	19ed      	adds	r5, r5, r7
 800e0a8:	0c0f      	lsrs	r7, r1, #16
 800e0aa:	1429      	asrs	r1, r5, #16
 800e0ac:	1879      	adds	r1, r7, r1
 800e0ae:	140f      	asrs	r7, r1, #16
 800e0b0:	b2ad      	uxth	r5, r5
 800e0b2:	0409      	lsls	r1, r1, #16
 800e0b4:	430d      	orrs	r5, r1
 800e0b6:	4661      	mov	r1, ip
 800e0b8:	c120      	stmia	r1!, {r5}
 800e0ba:	468c      	mov	ip, r1
 800e0bc:	e7dd      	b.n	800e07a <__mdiff+0xda>
 800e0be:	3801      	subs	r0, #1
 800e0c0:	e7e9      	b.n	800e096 <__mdiff+0xf6>
 800e0c2:	46c0      	nop			; (mov r8, r8)
 800e0c4:	0800f8c8 	.word	0x0800f8c8
 800e0c8:	00000232 	.word	0x00000232
 800e0cc:	0800f954 	.word	0x0800f954

0800e0d0 <__ulp>:
 800e0d0:	4b0f      	ldr	r3, [pc, #60]	; (800e110 <__ulp+0x40>)
 800e0d2:	4019      	ands	r1, r3
 800e0d4:	4b0f      	ldr	r3, [pc, #60]	; (800e114 <__ulp+0x44>)
 800e0d6:	18c9      	adds	r1, r1, r3
 800e0d8:	2900      	cmp	r1, #0
 800e0da:	dd04      	ble.n	800e0e6 <__ulp+0x16>
 800e0dc:	2200      	movs	r2, #0
 800e0de:	000b      	movs	r3, r1
 800e0e0:	0010      	movs	r0, r2
 800e0e2:	0019      	movs	r1, r3
 800e0e4:	4770      	bx	lr
 800e0e6:	4249      	negs	r1, r1
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	1509      	asrs	r1, r1, #20
 800e0ee:	2913      	cmp	r1, #19
 800e0f0:	dc04      	bgt.n	800e0fc <__ulp+0x2c>
 800e0f2:	2080      	movs	r0, #128	; 0x80
 800e0f4:	0300      	lsls	r0, r0, #12
 800e0f6:	4108      	asrs	r0, r1
 800e0f8:	0003      	movs	r3, r0
 800e0fa:	e7f1      	b.n	800e0e0 <__ulp+0x10>
 800e0fc:	3914      	subs	r1, #20
 800e0fe:	2001      	movs	r0, #1
 800e100:	291e      	cmp	r1, #30
 800e102:	dc02      	bgt.n	800e10a <__ulp+0x3a>
 800e104:	2080      	movs	r0, #128	; 0x80
 800e106:	0600      	lsls	r0, r0, #24
 800e108:	40c8      	lsrs	r0, r1
 800e10a:	0002      	movs	r2, r0
 800e10c:	e7e8      	b.n	800e0e0 <__ulp+0x10>
 800e10e:	46c0      	nop			; (mov r8, r8)
 800e110:	7ff00000 	.word	0x7ff00000
 800e114:	fcc00000 	.word	0xfcc00000

0800e118 <__b2d>:
 800e118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e11a:	0006      	movs	r6, r0
 800e11c:	6903      	ldr	r3, [r0, #16]
 800e11e:	3614      	adds	r6, #20
 800e120:	009b      	lsls	r3, r3, #2
 800e122:	18f3      	adds	r3, r6, r3
 800e124:	1f1d      	subs	r5, r3, #4
 800e126:	682c      	ldr	r4, [r5, #0]
 800e128:	000f      	movs	r7, r1
 800e12a:	0020      	movs	r0, r4
 800e12c:	9301      	str	r3, [sp, #4]
 800e12e:	f7ff fd43 	bl	800dbb8 <__hi0bits>
 800e132:	2320      	movs	r3, #32
 800e134:	1a1b      	subs	r3, r3, r0
 800e136:	491f      	ldr	r1, [pc, #124]	; (800e1b4 <__b2d+0x9c>)
 800e138:	603b      	str	r3, [r7, #0]
 800e13a:	280a      	cmp	r0, #10
 800e13c:	dc16      	bgt.n	800e16c <__b2d+0x54>
 800e13e:	230b      	movs	r3, #11
 800e140:	0027      	movs	r7, r4
 800e142:	1a1b      	subs	r3, r3, r0
 800e144:	40df      	lsrs	r7, r3
 800e146:	4339      	orrs	r1, r7
 800e148:	469c      	mov	ip, r3
 800e14a:	000b      	movs	r3, r1
 800e14c:	2100      	movs	r1, #0
 800e14e:	42ae      	cmp	r6, r5
 800e150:	d202      	bcs.n	800e158 <__b2d+0x40>
 800e152:	9901      	ldr	r1, [sp, #4]
 800e154:	3908      	subs	r1, #8
 800e156:	6809      	ldr	r1, [r1, #0]
 800e158:	3015      	adds	r0, #21
 800e15a:	4084      	lsls	r4, r0
 800e15c:	4660      	mov	r0, ip
 800e15e:	40c1      	lsrs	r1, r0
 800e160:	430c      	orrs	r4, r1
 800e162:	0022      	movs	r2, r4
 800e164:	0010      	movs	r0, r2
 800e166:	0019      	movs	r1, r3
 800e168:	b003      	add	sp, #12
 800e16a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e16c:	2700      	movs	r7, #0
 800e16e:	42ae      	cmp	r6, r5
 800e170:	d202      	bcs.n	800e178 <__b2d+0x60>
 800e172:	9d01      	ldr	r5, [sp, #4]
 800e174:	3d08      	subs	r5, #8
 800e176:	682f      	ldr	r7, [r5, #0]
 800e178:	230b      	movs	r3, #11
 800e17a:	425b      	negs	r3, r3
 800e17c:	469c      	mov	ip, r3
 800e17e:	4484      	add	ip, r0
 800e180:	280b      	cmp	r0, #11
 800e182:	d013      	beq.n	800e1ac <__b2d+0x94>
 800e184:	4663      	mov	r3, ip
 800e186:	2020      	movs	r0, #32
 800e188:	409c      	lsls	r4, r3
 800e18a:	1ac0      	subs	r0, r0, r3
 800e18c:	003b      	movs	r3, r7
 800e18e:	40c3      	lsrs	r3, r0
 800e190:	431c      	orrs	r4, r3
 800e192:	4321      	orrs	r1, r4
 800e194:	000b      	movs	r3, r1
 800e196:	2100      	movs	r1, #0
 800e198:	42b5      	cmp	r5, r6
 800e19a:	d901      	bls.n	800e1a0 <__b2d+0x88>
 800e19c:	3d04      	subs	r5, #4
 800e19e:	6829      	ldr	r1, [r5, #0]
 800e1a0:	4664      	mov	r4, ip
 800e1a2:	40c1      	lsrs	r1, r0
 800e1a4:	40a7      	lsls	r7, r4
 800e1a6:	430f      	orrs	r7, r1
 800e1a8:	003a      	movs	r2, r7
 800e1aa:	e7db      	b.n	800e164 <__b2d+0x4c>
 800e1ac:	4321      	orrs	r1, r4
 800e1ae:	000b      	movs	r3, r1
 800e1b0:	e7fa      	b.n	800e1a8 <__b2d+0x90>
 800e1b2:	46c0      	nop			; (mov r8, r8)
 800e1b4:	3ff00000 	.word	0x3ff00000

0800e1b8 <__d2b>:
 800e1b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e1ba:	2101      	movs	r1, #1
 800e1bc:	0014      	movs	r4, r2
 800e1be:	001e      	movs	r6, r3
 800e1c0:	9f08      	ldr	r7, [sp, #32]
 800e1c2:	f7ff fc01 	bl	800d9c8 <_Balloc>
 800e1c6:	1e05      	subs	r5, r0, #0
 800e1c8:	d105      	bne.n	800e1d6 <__d2b+0x1e>
 800e1ca:	0002      	movs	r2, r0
 800e1cc:	4b26      	ldr	r3, [pc, #152]	; (800e268 <__d2b+0xb0>)
 800e1ce:	4927      	ldr	r1, [pc, #156]	; (800e26c <__d2b+0xb4>)
 800e1d0:	4827      	ldr	r0, [pc, #156]	; (800e270 <__d2b+0xb8>)
 800e1d2:	f000 fad5 	bl	800e780 <__assert_func>
 800e1d6:	0333      	lsls	r3, r6, #12
 800e1d8:	0076      	lsls	r6, r6, #1
 800e1da:	0b1b      	lsrs	r3, r3, #12
 800e1dc:	0d76      	lsrs	r6, r6, #21
 800e1de:	d124      	bne.n	800e22a <__d2b+0x72>
 800e1e0:	9301      	str	r3, [sp, #4]
 800e1e2:	2c00      	cmp	r4, #0
 800e1e4:	d027      	beq.n	800e236 <__d2b+0x7e>
 800e1e6:	4668      	mov	r0, sp
 800e1e8:	9400      	str	r4, [sp, #0]
 800e1ea:	f7ff fcff 	bl	800dbec <__lo0bits>
 800e1ee:	9c00      	ldr	r4, [sp, #0]
 800e1f0:	2800      	cmp	r0, #0
 800e1f2:	d01e      	beq.n	800e232 <__d2b+0x7a>
 800e1f4:	9b01      	ldr	r3, [sp, #4]
 800e1f6:	2120      	movs	r1, #32
 800e1f8:	001a      	movs	r2, r3
 800e1fa:	1a09      	subs	r1, r1, r0
 800e1fc:	408a      	lsls	r2, r1
 800e1fe:	40c3      	lsrs	r3, r0
 800e200:	4322      	orrs	r2, r4
 800e202:	616a      	str	r2, [r5, #20]
 800e204:	9301      	str	r3, [sp, #4]
 800e206:	9c01      	ldr	r4, [sp, #4]
 800e208:	61ac      	str	r4, [r5, #24]
 800e20a:	1e63      	subs	r3, r4, #1
 800e20c:	419c      	sbcs	r4, r3
 800e20e:	3401      	adds	r4, #1
 800e210:	612c      	str	r4, [r5, #16]
 800e212:	2e00      	cmp	r6, #0
 800e214:	d018      	beq.n	800e248 <__d2b+0x90>
 800e216:	4b17      	ldr	r3, [pc, #92]	; (800e274 <__d2b+0xbc>)
 800e218:	18f6      	adds	r6, r6, r3
 800e21a:	2335      	movs	r3, #53	; 0x35
 800e21c:	1836      	adds	r6, r6, r0
 800e21e:	1a18      	subs	r0, r3, r0
 800e220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e222:	603e      	str	r6, [r7, #0]
 800e224:	6018      	str	r0, [r3, #0]
 800e226:	0028      	movs	r0, r5
 800e228:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e22a:	2280      	movs	r2, #128	; 0x80
 800e22c:	0352      	lsls	r2, r2, #13
 800e22e:	4313      	orrs	r3, r2
 800e230:	e7d6      	b.n	800e1e0 <__d2b+0x28>
 800e232:	616c      	str	r4, [r5, #20]
 800e234:	e7e7      	b.n	800e206 <__d2b+0x4e>
 800e236:	a801      	add	r0, sp, #4
 800e238:	f7ff fcd8 	bl	800dbec <__lo0bits>
 800e23c:	2401      	movs	r4, #1
 800e23e:	9b01      	ldr	r3, [sp, #4]
 800e240:	612c      	str	r4, [r5, #16]
 800e242:	616b      	str	r3, [r5, #20]
 800e244:	3020      	adds	r0, #32
 800e246:	e7e4      	b.n	800e212 <__d2b+0x5a>
 800e248:	4b0b      	ldr	r3, [pc, #44]	; (800e278 <__d2b+0xc0>)
 800e24a:	18c0      	adds	r0, r0, r3
 800e24c:	4b0b      	ldr	r3, [pc, #44]	; (800e27c <__d2b+0xc4>)
 800e24e:	6038      	str	r0, [r7, #0]
 800e250:	18e3      	adds	r3, r4, r3
 800e252:	009b      	lsls	r3, r3, #2
 800e254:	18eb      	adds	r3, r5, r3
 800e256:	6958      	ldr	r0, [r3, #20]
 800e258:	f7ff fcae 	bl	800dbb8 <__hi0bits>
 800e25c:	0164      	lsls	r4, r4, #5
 800e25e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e260:	1a24      	subs	r4, r4, r0
 800e262:	601c      	str	r4, [r3, #0]
 800e264:	e7df      	b.n	800e226 <__d2b+0x6e>
 800e266:	46c0      	nop			; (mov r8, r8)
 800e268:	0800f8c8 	.word	0x0800f8c8
 800e26c:	0000030a 	.word	0x0000030a
 800e270:	0800f954 	.word	0x0800f954
 800e274:	fffffbcd 	.word	0xfffffbcd
 800e278:	fffffbce 	.word	0xfffffbce
 800e27c:	3fffffff 	.word	0x3fffffff

0800e280 <__ratio>:
 800e280:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e282:	b087      	sub	sp, #28
 800e284:	000f      	movs	r7, r1
 800e286:	a904      	add	r1, sp, #16
 800e288:	0006      	movs	r6, r0
 800e28a:	f7ff ff45 	bl	800e118 <__b2d>
 800e28e:	9000      	str	r0, [sp, #0]
 800e290:	9101      	str	r1, [sp, #4]
 800e292:	9c00      	ldr	r4, [sp, #0]
 800e294:	9d01      	ldr	r5, [sp, #4]
 800e296:	0038      	movs	r0, r7
 800e298:	a905      	add	r1, sp, #20
 800e29a:	f7ff ff3d 	bl	800e118 <__b2d>
 800e29e:	9002      	str	r0, [sp, #8]
 800e2a0:	9103      	str	r1, [sp, #12]
 800e2a2:	9a02      	ldr	r2, [sp, #8]
 800e2a4:	9b03      	ldr	r3, [sp, #12]
 800e2a6:	6931      	ldr	r1, [r6, #16]
 800e2a8:	6938      	ldr	r0, [r7, #16]
 800e2aa:	9e05      	ldr	r6, [sp, #20]
 800e2ac:	1a08      	subs	r0, r1, r0
 800e2ae:	9904      	ldr	r1, [sp, #16]
 800e2b0:	0140      	lsls	r0, r0, #5
 800e2b2:	1b89      	subs	r1, r1, r6
 800e2b4:	1841      	adds	r1, r0, r1
 800e2b6:	0508      	lsls	r0, r1, #20
 800e2b8:	2900      	cmp	r1, #0
 800e2ba:	dd07      	ble.n	800e2cc <__ratio+0x4c>
 800e2bc:	9901      	ldr	r1, [sp, #4]
 800e2be:	1845      	adds	r5, r0, r1
 800e2c0:	0020      	movs	r0, r4
 800e2c2:	0029      	movs	r1, r5
 800e2c4:	f7f3 fba0 	bl	8001a08 <__aeabi_ddiv>
 800e2c8:	b007      	add	sp, #28
 800e2ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2cc:	9903      	ldr	r1, [sp, #12]
 800e2ce:	1a0b      	subs	r3, r1, r0
 800e2d0:	e7f6      	b.n	800e2c0 <__ratio+0x40>

0800e2d2 <__copybits>:
 800e2d2:	b570      	push	{r4, r5, r6, lr}
 800e2d4:	0014      	movs	r4, r2
 800e2d6:	0005      	movs	r5, r0
 800e2d8:	3901      	subs	r1, #1
 800e2da:	6913      	ldr	r3, [r2, #16]
 800e2dc:	1149      	asrs	r1, r1, #5
 800e2de:	3101      	adds	r1, #1
 800e2e0:	0089      	lsls	r1, r1, #2
 800e2e2:	3414      	adds	r4, #20
 800e2e4:	009b      	lsls	r3, r3, #2
 800e2e6:	1841      	adds	r1, r0, r1
 800e2e8:	18e3      	adds	r3, r4, r3
 800e2ea:	42a3      	cmp	r3, r4
 800e2ec:	d80d      	bhi.n	800e30a <__copybits+0x38>
 800e2ee:	0014      	movs	r4, r2
 800e2f0:	3411      	adds	r4, #17
 800e2f2:	2500      	movs	r5, #0
 800e2f4:	429c      	cmp	r4, r3
 800e2f6:	d803      	bhi.n	800e300 <__copybits+0x2e>
 800e2f8:	1a9b      	subs	r3, r3, r2
 800e2fa:	3b11      	subs	r3, #17
 800e2fc:	089b      	lsrs	r3, r3, #2
 800e2fe:	009d      	lsls	r5, r3, #2
 800e300:	2300      	movs	r3, #0
 800e302:	1940      	adds	r0, r0, r5
 800e304:	4281      	cmp	r1, r0
 800e306:	d803      	bhi.n	800e310 <__copybits+0x3e>
 800e308:	bd70      	pop	{r4, r5, r6, pc}
 800e30a:	cc40      	ldmia	r4!, {r6}
 800e30c:	c540      	stmia	r5!, {r6}
 800e30e:	e7ec      	b.n	800e2ea <__copybits+0x18>
 800e310:	c008      	stmia	r0!, {r3}
 800e312:	e7f7      	b.n	800e304 <__copybits+0x32>

0800e314 <__any_on>:
 800e314:	0002      	movs	r2, r0
 800e316:	6900      	ldr	r0, [r0, #16]
 800e318:	b510      	push	{r4, lr}
 800e31a:	3214      	adds	r2, #20
 800e31c:	114b      	asrs	r3, r1, #5
 800e31e:	4298      	cmp	r0, r3
 800e320:	db13      	blt.n	800e34a <__any_on+0x36>
 800e322:	dd0c      	ble.n	800e33e <__any_on+0x2a>
 800e324:	241f      	movs	r4, #31
 800e326:	0008      	movs	r0, r1
 800e328:	4020      	ands	r0, r4
 800e32a:	4221      	tst	r1, r4
 800e32c:	d007      	beq.n	800e33e <__any_on+0x2a>
 800e32e:	0099      	lsls	r1, r3, #2
 800e330:	588c      	ldr	r4, [r1, r2]
 800e332:	0021      	movs	r1, r4
 800e334:	40c1      	lsrs	r1, r0
 800e336:	4081      	lsls	r1, r0
 800e338:	2001      	movs	r0, #1
 800e33a:	428c      	cmp	r4, r1
 800e33c:	d104      	bne.n	800e348 <__any_on+0x34>
 800e33e:	009b      	lsls	r3, r3, #2
 800e340:	18d3      	adds	r3, r2, r3
 800e342:	4293      	cmp	r3, r2
 800e344:	d803      	bhi.n	800e34e <__any_on+0x3a>
 800e346:	2000      	movs	r0, #0
 800e348:	bd10      	pop	{r4, pc}
 800e34a:	0003      	movs	r3, r0
 800e34c:	e7f7      	b.n	800e33e <__any_on+0x2a>
 800e34e:	3b04      	subs	r3, #4
 800e350:	6819      	ldr	r1, [r3, #0]
 800e352:	2900      	cmp	r1, #0
 800e354:	d0f5      	beq.n	800e342 <__any_on+0x2e>
 800e356:	2001      	movs	r0, #1
 800e358:	e7f6      	b.n	800e348 <__any_on+0x34>

0800e35a <_calloc_r>:
 800e35a:	b570      	push	{r4, r5, r6, lr}
 800e35c:	0c13      	lsrs	r3, r2, #16
 800e35e:	0c0d      	lsrs	r5, r1, #16
 800e360:	d11e      	bne.n	800e3a0 <_calloc_r+0x46>
 800e362:	2b00      	cmp	r3, #0
 800e364:	d10c      	bne.n	800e380 <_calloc_r+0x26>
 800e366:	b289      	uxth	r1, r1
 800e368:	b294      	uxth	r4, r2
 800e36a:	434c      	muls	r4, r1
 800e36c:	0021      	movs	r1, r4
 800e36e:	f7fc fac3 	bl	800a8f8 <_malloc_r>
 800e372:	1e05      	subs	r5, r0, #0
 800e374:	d01b      	beq.n	800e3ae <_calloc_r+0x54>
 800e376:	0022      	movs	r2, r4
 800e378:	2100      	movs	r1, #0
 800e37a:	f7fc fa93 	bl	800a8a4 <memset>
 800e37e:	e016      	b.n	800e3ae <_calloc_r+0x54>
 800e380:	1c1d      	adds	r5, r3, #0
 800e382:	1c0b      	adds	r3, r1, #0
 800e384:	b292      	uxth	r2, r2
 800e386:	b289      	uxth	r1, r1
 800e388:	b29c      	uxth	r4, r3
 800e38a:	4351      	muls	r1, r2
 800e38c:	b2ab      	uxth	r3, r5
 800e38e:	4363      	muls	r3, r4
 800e390:	0c0c      	lsrs	r4, r1, #16
 800e392:	191c      	adds	r4, r3, r4
 800e394:	0c22      	lsrs	r2, r4, #16
 800e396:	d107      	bne.n	800e3a8 <_calloc_r+0x4e>
 800e398:	0424      	lsls	r4, r4, #16
 800e39a:	b289      	uxth	r1, r1
 800e39c:	430c      	orrs	r4, r1
 800e39e:	e7e5      	b.n	800e36c <_calloc_r+0x12>
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d101      	bne.n	800e3a8 <_calloc_r+0x4e>
 800e3a4:	1c13      	adds	r3, r2, #0
 800e3a6:	e7ed      	b.n	800e384 <_calloc_r+0x2a>
 800e3a8:	230c      	movs	r3, #12
 800e3aa:	2500      	movs	r5, #0
 800e3ac:	6003      	str	r3, [r0, #0]
 800e3ae:	0028      	movs	r0, r5
 800e3b0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e3b4 <_free_r>:
 800e3b4:	b570      	push	{r4, r5, r6, lr}
 800e3b6:	0005      	movs	r5, r0
 800e3b8:	2900      	cmp	r1, #0
 800e3ba:	d010      	beq.n	800e3de <_free_r+0x2a>
 800e3bc:	1f0c      	subs	r4, r1, #4
 800e3be:	6823      	ldr	r3, [r4, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	da00      	bge.n	800e3c6 <_free_r+0x12>
 800e3c4:	18e4      	adds	r4, r4, r3
 800e3c6:	0028      	movs	r0, r5
 800e3c8:	f7ff faee 	bl	800d9a8 <__malloc_lock>
 800e3cc:	4a1d      	ldr	r2, [pc, #116]	; (800e444 <_free_r+0x90>)
 800e3ce:	6813      	ldr	r3, [r2, #0]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d105      	bne.n	800e3e0 <_free_r+0x2c>
 800e3d4:	6063      	str	r3, [r4, #4]
 800e3d6:	6014      	str	r4, [r2, #0]
 800e3d8:	0028      	movs	r0, r5
 800e3da:	f7ff faed 	bl	800d9b8 <__malloc_unlock>
 800e3de:	bd70      	pop	{r4, r5, r6, pc}
 800e3e0:	42a3      	cmp	r3, r4
 800e3e2:	d908      	bls.n	800e3f6 <_free_r+0x42>
 800e3e4:	6821      	ldr	r1, [r4, #0]
 800e3e6:	1860      	adds	r0, r4, r1
 800e3e8:	4283      	cmp	r3, r0
 800e3ea:	d1f3      	bne.n	800e3d4 <_free_r+0x20>
 800e3ec:	6818      	ldr	r0, [r3, #0]
 800e3ee:	685b      	ldr	r3, [r3, #4]
 800e3f0:	1841      	adds	r1, r0, r1
 800e3f2:	6021      	str	r1, [r4, #0]
 800e3f4:	e7ee      	b.n	800e3d4 <_free_r+0x20>
 800e3f6:	001a      	movs	r2, r3
 800e3f8:	685b      	ldr	r3, [r3, #4]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d001      	beq.n	800e402 <_free_r+0x4e>
 800e3fe:	42a3      	cmp	r3, r4
 800e400:	d9f9      	bls.n	800e3f6 <_free_r+0x42>
 800e402:	6811      	ldr	r1, [r2, #0]
 800e404:	1850      	adds	r0, r2, r1
 800e406:	42a0      	cmp	r0, r4
 800e408:	d10b      	bne.n	800e422 <_free_r+0x6e>
 800e40a:	6820      	ldr	r0, [r4, #0]
 800e40c:	1809      	adds	r1, r1, r0
 800e40e:	1850      	adds	r0, r2, r1
 800e410:	6011      	str	r1, [r2, #0]
 800e412:	4283      	cmp	r3, r0
 800e414:	d1e0      	bne.n	800e3d8 <_free_r+0x24>
 800e416:	6818      	ldr	r0, [r3, #0]
 800e418:	685b      	ldr	r3, [r3, #4]
 800e41a:	1841      	adds	r1, r0, r1
 800e41c:	6011      	str	r1, [r2, #0]
 800e41e:	6053      	str	r3, [r2, #4]
 800e420:	e7da      	b.n	800e3d8 <_free_r+0x24>
 800e422:	42a0      	cmp	r0, r4
 800e424:	d902      	bls.n	800e42c <_free_r+0x78>
 800e426:	230c      	movs	r3, #12
 800e428:	602b      	str	r3, [r5, #0]
 800e42a:	e7d5      	b.n	800e3d8 <_free_r+0x24>
 800e42c:	6821      	ldr	r1, [r4, #0]
 800e42e:	1860      	adds	r0, r4, r1
 800e430:	4283      	cmp	r3, r0
 800e432:	d103      	bne.n	800e43c <_free_r+0x88>
 800e434:	6818      	ldr	r0, [r3, #0]
 800e436:	685b      	ldr	r3, [r3, #4]
 800e438:	1841      	adds	r1, r0, r1
 800e43a:	6021      	str	r1, [r4, #0]
 800e43c:	6063      	str	r3, [r4, #4]
 800e43e:	6054      	str	r4, [r2, #4]
 800e440:	e7ca      	b.n	800e3d8 <_free_r+0x24>
 800e442:	46c0      	nop			; (mov r8, r8)
 800e444:	20001740 	.word	0x20001740

0800e448 <__ssputs_r>:
 800e448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e44a:	688e      	ldr	r6, [r1, #8]
 800e44c:	b085      	sub	sp, #20
 800e44e:	0007      	movs	r7, r0
 800e450:	000c      	movs	r4, r1
 800e452:	9203      	str	r2, [sp, #12]
 800e454:	9301      	str	r3, [sp, #4]
 800e456:	429e      	cmp	r6, r3
 800e458:	d83c      	bhi.n	800e4d4 <__ssputs_r+0x8c>
 800e45a:	2390      	movs	r3, #144	; 0x90
 800e45c:	898a      	ldrh	r2, [r1, #12]
 800e45e:	00db      	lsls	r3, r3, #3
 800e460:	421a      	tst	r2, r3
 800e462:	d034      	beq.n	800e4ce <__ssputs_r+0x86>
 800e464:	6909      	ldr	r1, [r1, #16]
 800e466:	6823      	ldr	r3, [r4, #0]
 800e468:	6960      	ldr	r0, [r4, #20]
 800e46a:	1a5b      	subs	r3, r3, r1
 800e46c:	9302      	str	r3, [sp, #8]
 800e46e:	2303      	movs	r3, #3
 800e470:	4343      	muls	r3, r0
 800e472:	0fdd      	lsrs	r5, r3, #31
 800e474:	18ed      	adds	r5, r5, r3
 800e476:	9b01      	ldr	r3, [sp, #4]
 800e478:	9802      	ldr	r0, [sp, #8]
 800e47a:	3301      	adds	r3, #1
 800e47c:	181b      	adds	r3, r3, r0
 800e47e:	106d      	asrs	r5, r5, #1
 800e480:	42ab      	cmp	r3, r5
 800e482:	d900      	bls.n	800e486 <__ssputs_r+0x3e>
 800e484:	001d      	movs	r5, r3
 800e486:	0553      	lsls	r3, r2, #21
 800e488:	d532      	bpl.n	800e4f0 <__ssputs_r+0xa8>
 800e48a:	0029      	movs	r1, r5
 800e48c:	0038      	movs	r0, r7
 800e48e:	f7fc fa33 	bl	800a8f8 <_malloc_r>
 800e492:	1e06      	subs	r6, r0, #0
 800e494:	d109      	bne.n	800e4aa <__ssputs_r+0x62>
 800e496:	230c      	movs	r3, #12
 800e498:	603b      	str	r3, [r7, #0]
 800e49a:	2340      	movs	r3, #64	; 0x40
 800e49c:	2001      	movs	r0, #1
 800e49e:	89a2      	ldrh	r2, [r4, #12]
 800e4a0:	4240      	negs	r0, r0
 800e4a2:	4313      	orrs	r3, r2
 800e4a4:	81a3      	strh	r3, [r4, #12]
 800e4a6:	b005      	add	sp, #20
 800e4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4aa:	9a02      	ldr	r2, [sp, #8]
 800e4ac:	6921      	ldr	r1, [r4, #16]
 800e4ae:	f7fc f9f0 	bl	800a892 <memcpy>
 800e4b2:	89a3      	ldrh	r3, [r4, #12]
 800e4b4:	4a14      	ldr	r2, [pc, #80]	; (800e508 <__ssputs_r+0xc0>)
 800e4b6:	401a      	ands	r2, r3
 800e4b8:	2380      	movs	r3, #128	; 0x80
 800e4ba:	4313      	orrs	r3, r2
 800e4bc:	81a3      	strh	r3, [r4, #12]
 800e4be:	9b02      	ldr	r3, [sp, #8]
 800e4c0:	6126      	str	r6, [r4, #16]
 800e4c2:	18f6      	adds	r6, r6, r3
 800e4c4:	6026      	str	r6, [r4, #0]
 800e4c6:	6165      	str	r5, [r4, #20]
 800e4c8:	9e01      	ldr	r6, [sp, #4]
 800e4ca:	1aed      	subs	r5, r5, r3
 800e4cc:	60a5      	str	r5, [r4, #8]
 800e4ce:	9b01      	ldr	r3, [sp, #4]
 800e4d0:	429e      	cmp	r6, r3
 800e4d2:	d900      	bls.n	800e4d6 <__ssputs_r+0x8e>
 800e4d4:	9e01      	ldr	r6, [sp, #4]
 800e4d6:	0032      	movs	r2, r6
 800e4d8:	9903      	ldr	r1, [sp, #12]
 800e4da:	6820      	ldr	r0, [r4, #0]
 800e4dc:	f000 f97e 	bl	800e7dc <memmove>
 800e4e0:	68a3      	ldr	r3, [r4, #8]
 800e4e2:	2000      	movs	r0, #0
 800e4e4:	1b9b      	subs	r3, r3, r6
 800e4e6:	60a3      	str	r3, [r4, #8]
 800e4e8:	6823      	ldr	r3, [r4, #0]
 800e4ea:	199e      	adds	r6, r3, r6
 800e4ec:	6026      	str	r6, [r4, #0]
 800e4ee:	e7da      	b.n	800e4a6 <__ssputs_r+0x5e>
 800e4f0:	002a      	movs	r2, r5
 800e4f2:	0038      	movs	r0, r7
 800e4f4:	f000 f985 	bl	800e802 <_realloc_r>
 800e4f8:	1e06      	subs	r6, r0, #0
 800e4fa:	d1e0      	bne.n	800e4be <__ssputs_r+0x76>
 800e4fc:	0038      	movs	r0, r7
 800e4fe:	6921      	ldr	r1, [r4, #16]
 800e500:	f7ff ff58 	bl	800e3b4 <_free_r>
 800e504:	e7c7      	b.n	800e496 <__ssputs_r+0x4e>
 800e506:	46c0      	nop			; (mov r8, r8)
 800e508:	fffffb7f 	.word	0xfffffb7f

0800e50c <_svfiprintf_r>:
 800e50c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e50e:	b0a1      	sub	sp, #132	; 0x84
 800e510:	9003      	str	r0, [sp, #12]
 800e512:	001d      	movs	r5, r3
 800e514:	898b      	ldrh	r3, [r1, #12]
 800e516:	000f      	movs	r7, r1
 800e518:	0016      	movs	r6, r2
 800e51a:	061b      	lsls	r3, r3, #24
 800e51c:	d511      	bpl.n	800e542 <_svfiprintf_r+0x36>
 800e51e:	690b      	ldr	r3, [r1, #16]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d10e      	bne.n	800e542 <_svfiprintf_r+0x36>
 800e524:	2140      	movs	r1, #64	; 0x40
 800e526:	f7fc f9e7 	bl	800a8f8 <_malloc_r>
 800e52a:	6038      	str	r0, [r7, #0]
 800e52c:	6138      	str	r0, [r7, #16]
 800e52e:	2800      	cmp	r0, #0
 800e530:	d105      	bne.n	800e53e <_svfiprintf_r+0x32>
 800e532:	230c      	movs	r3, #12
 800e534:	9a03      	ldr	r2, [sp, #12]
 800e536:	3801      	subs	r0, #1
 800e538:	6013      	str	r3, [r2, #0]
 800e53a:	b021      	add	sp, #132	; 0x84
 800e53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e53e:	2340      	movs	r3, #64	; 0x40
 800e540:	617b      	str	r3, [r7, #20]
 800e542:	2300      	movs	r3, #0
 800e544:	ac08      	add	r4, sp, #32
 800e546:	6163      	str	r3, [r4, #20]
 800e548:	3320      	adds	r3, #32
 800e54a:	7663      	strb	r3, [r4, #25]
 800e54c:	3310      	adds	r3, #16
 800e54e:	76a3      	strb	r3, [r4, #26]
 800e550:	9507      	str	r5, [sp, #28]
 800e552:	0035      	movs	r5, r6
 800e554:	782b      	ldrb	r3, [r5, #0]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d001      	beq.n	800e55e <_svfiprintf_r+0x52>
 800e55a:	2b25      	cmp	r3, #37	; 0x25
 800e55c:	d147      	bne.n	800e5ee <_svfiprintf_r+0xe2>
 800e55e:	1bab      	subs	r3, r5, r6
 800e560:	9305      	str	r3, [sp, #20]
 800e562:	42b5      	cmp	r5, r6
 800e564:	d00c      	beq.n	800e580 <_svfiprintf_r+0x74>
 800e566:	0032      	movs	r2, r6
 800e568:	0039      	movs	r1, r7
 800e56a:	9803      	ldr	r0, [sp, #12]
 800e56c:	f7ff ff6c 	bl	800e448 <__ssputs_r>
 800e570:	1c43      	adds	r3, r0, #1
 800e572:	d100      	bne.n	800e576 <_svfiprintf_r+0x6a>
 800e574:	e0ae      	b.n	800e6d4 <_svfiprintf_r+0x1c8>
 800e576:	6962      	ldr	r2, [r4, #20]
 800e578:	9b05      	ldr	r3, [sp, #20]
 800e57a:	4694      	mov	ip, r2
 800e57c:	4463      	add	r3, ip
 800e57e:	6163      	str	r3, [r4, #20]
 800e580:	782b      	ldrb	r3, [r5, #0]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d100      	bne.n	800e588 <_svfiprintf_r+0x7c>
 800e586:	e0a5      	b.n	800e6d4 <_svfiprintf_r+0x1c8>
 800e588:	2201      	movs	r2, #1
 800e58a:	2300      	movs	r3, #0
 800e58c:	4252      	negs	r2, r2
 800e58e:	6062      	str	r2, [r4, #4]
 800e590:	a904      	add	r1, sp, #16
 800e592:	3254      	adds	r2, #84	; 0x54
 800e594:	1852      	adds	r2, r2, r1
 800e596:	1c6e      	adds	r6, r5, #1
 800e598:	6023      	str	r3, [r4, #0]
 800e59a:	60e3      	str	r3, [r4, #12]
 800e59c:	60a3      	str	r3, [r4, #8]
 800e59e:	7013      	strb	r3, [r2, #0]
 800e5a0:	65a3      	str	r3, [r4, #88]	; 0x58
 800e5a2:	2205      	movs	r2, #5
 800e5a4:	7831      	ldrb	r1, [r6, #0]
 800e5a6:	4854      	ldr	r0, [pc, #336]	; (800e6f8 <_svfiprintf_r+0x1ec>)
 800e5a8:	f7ff f9f2 	bl	800d990 <memchr>
 800e5ac:	1c75      	adds	r5, r6, #1
 800e5ae:	2800      	cmp	r0, #0
 800e5b0:	d11f      	bne.n	800e5f2 <_svfiprintf_r+0xe6>
 800e5b2:	6822      	ldr	r2, [r4, #0]
 800e5b4:	06d3      	lsls	r3, r2, #27
 800e5b6:	d504      	bpl.n	800e5c2 <_svfiprintf_r+0xb6>
 800e5b8:	2353      	movs	r3, #83	; 0x53
 800e5ba:	a904      	add	r1, sp, #16
 800e5bc:	185b      	adds	r3, r3, r1
 800e5be:	2120      	movs	r1, #32
 800e5c0:	7019      	strb	r1, [r3, #0]
 800e5c2:	0713      	lsls	r3, r2, #28
 800e5c4:	d504      	bpl.n	800e5d0 <_svfiprintf_r+0xc4>
 800e5c6:	2353      	movs	r3, #83	; 0x53
 800e5c8:	a904      	add	r1, sp, #16
 800e5ca:	185b      	adds	r3, r3, r1
 800e5cc:	212b      	movs	r1, #43	; 0x2b
 800e5ce:	7019      	strb	r1, [r3, #0]
 800e5d0:	7833      	ldrb	r3, [r6, #0]
 800e5d2:	2b2a      	cmp	r3, #42	; 0x2a
 800e5d4:	d016      	beq.n	800e604 <_svfiprintf_r+0xf8>
 800e5d6:	0035      	movs	r5, r6
 800e5d8:	2100      	movs	r1, #0
 800e5da:	200a      	movs	r0, #10
 800e5dc:	68e3      	ldr	r3, [r4, #12]
 800e5de:	782a      	ldrb	r2, [r5, #0]
 800e5e0:	1c6e      	adds	r6, r5, #1
 800e5e2:	3a30      	subs	r2, #48	; 0x30
 800e5e4:	2a09      	cmp	r2, #9
 800e5e6:	d94e      	bls.n	800e686 <_svfiprintf_r+0x17a>
 800e5e8:	2900      	cmp	r1, #0
 800e5ea:	d111      	bne.n	800e610 <_svfiprintf_r+0x104>
 800e5ec:	e017      	b.n	800e61e <_svfiprintf_r+0x112>
 800e5ee:	3501      	adds	r5, #1
 800e5f0:	e7b0      	b.n	800e554 <_svfiprintf_r+0x48>
 800e5f2:	4b41      	ldr	r3, [pc, #260]	; (800e6f8 <_svfiprintf_r+0x1ec>)
 800e5f4:	6822      	ldr	r2, [r4, #0]
 800e5f6:	1ac0      	subs	r0, r0, r3
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	4083      	lsls	r3, r0
 800e5fc:	4313      	orrs	r3, r2
 800e5fe:	002e      	movs	r6, r5
 800e600:	6023      	str	r3, [r4, #0]
 800e602:	e7ce      	b.n	800e5a2 <_svfiprintf_r+0x96>
 800e604:	9b07      	ldr	r3, [sp, #28]
 800e606:	1d19      	adds	r1, r3, #4
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	9107      	str	r1, [sp, #28]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	db01      	blt.n	800e614 <_svfiprintf_r+0x108>
 800e610:	930b      	str	r3, [sp, #44]	; 0x2c
 800e612:	e004      	b.n	800e61e <_svfiprintf_r+0x112>
 800e614:	425b      	negs	r3, r3
 800e616:	60e3      	str	r3, [r4, #12]
 800e618:	2302      	movs	r3, #2
 800e61a:	4313      	orrs	r3, r2
 800e61c:	6023      	str	r3, [r4, #0]
 800e61e:	782b      	ldrb	r3, [r5, #0]
 800e620:	2b2e      	cmp	r3, #46	; 0x2e
 800e622:	d10a      	bne.n	800e63a <_svfiprintf_r+0x12e>
 800e624:	786b      	ldrb	r3, [r5, #1]
 800e626:	2b2a      	cmp	r3, #42	; 0x2a
 800e628:	d135      	bne.n	800e696 <_svfiprintf_r+0x18a>
 800e62a:	9b07      	ldr	r3, [sp, #28]
 800e62c:	3502      	adds	r5, #2
 800e62e:	1d1a      	adds	r2, r3, #4
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	9207      	str	r2, [sp, #28]
 800e634:	2b00      	cmp	r3, #0
 800e636:	db2b      	blt.n	800e690 <_svfiprintf_r+0x184>
 800e638:	9309      	str	r3, [sp, #36]	; 0x24
 800e63a:	4e30      	ldr	r6, [pc, #192]	; (800e6fc <_svfiprintf_r+0x1f0>)
 800e63c:	2203      	movs	r2, #3
 800e63e:	0030      	movs	r0, r6
 800e640:	7829      	ldrb	r1, [r5, #0]
 800e642:	f7ff f9a5 	bl	800d990 <memchr>
 800e646:	2800      	cmp	r0, #0
 800e648:	d006      	beq.n	800e658 <_svfiprintf_r+0x14c>
 800e64a:	2340      	movs	r3, #64	; 0x40
 800e64c:	1b80      	subs	r0, r0, r6
 800e64e:	4083      	lsls	r3, r0
 800e650:	6822      	ldr	r2, [r4, #0]
 800e652:	3501      	adds	r5, #1
 800e654:	4313      	orrs	r3, r2
 800e656:	6023      	str	r3, [r4, #0]
 800e658:	7829      	ldrb	r1, [r5, #0]
 800e65a:	2206      	movs	r2, #6
 800e65c:	4828      	ldr	r0, [pc, #160]	; (800e700 <_svfiprintf_r+0x1f4>)
 800e65e:	1c6e      	adds	r6, r5, #1
 800e660:	7621      	strb	r1, [r4, #24]
 800e662:	f7ff f995 	bl	800d990 <memchr>
 800e666:	2800      	cmp	r0, #0
 800e668:	d03c      	beq.n	800e6e4 <_svfiprintf_r+0x1d8>
 800e66a:	4b26      	ldr	r3, [pc, #152]	; (800e704 <_svfiprintf_r+0x1f8>)
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d125      	bne.n	800e6bc <_svfiprintf_r+0x1b0>
 800e670:	2207      	movs	r2, #7
 800e672:	9b07      	ldr	r3, [sp, #28]
 800e674:	3307      	adds	r3, #7
 800e676:	4393      	bics	r3, r2
 800e678:	3308      	adds	r3, #8
 800e67a:	9307      	str	r3, [sp, #28]
 800e67c:	6963      	ldr	r3, [r4, #20]
 800e67e:	9a04      	ldr	r2, [sp, #16]
 800e680:	189b      	adds	r3, r3, r2
 800e682:	6163      	str	r3, [r4, #20]
 800e684:	e765      	b.n	800e552 <_svfiprintf_r+0x46>
 800e686:	4343      	muls	r3, r0
 800e688:	0035      	movs	r5, r6
 800e68a:	2101      	movs	r1, #1
 800e68c:	189b      	adds	r3, r3, r2
 800e68e:	e7a6      	b.n	800e5de <_svfiprintf_r+0xd2>
 800e690:	2301      	movs	r3, #1
 800e692:	425b      	negs	r3, r3
 800e694:	e7d0      	b.n	800e638 <_svfiprintf_r+0x12c>
 800e696:	2300      	movs	r3, #0
 800e698:	200a      	movs	r0, #10
 800e69a:	001a      	movs	r2, r3
 800e69c:	3501      	adds	r5, #1
 800e69e:	6063      	str	r3, [r4, #4]
 800e6a0:	7829      	ldrb	r1, [r5, #0]
 800e6a2:	1c6e      	adds	r6, r5, #1
 800e6a4:	3930      	subs	r1, #48	; 0x30
 800e6a6:	2909      	cmp	r1, #9
 800e6a8:	d903      	bls.n	800e6b2 <_svfiprintf_r+0x1a6>
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d0c5      	beq.n	800e63a <_svfiprintf_r+0x12e>
 800e6ae:	9209      	str	r2, [sp, #36]	; 0x24
 800e6b0:	e7c3      	b.n	800e63a <_svfiprintf_r+0x12e>
 800e6b2:	4342      	muls	r2, r0
 800e6b4:	0035      	movs	r5, r6
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	1852      	adds	r2, r2, r1
 800e6ba:	e7f1      	b.n	800e6a0 <_svfiprintf_r+0x194>
 800e6bc:	ab07      	add	r3, sp, #28
 800e6be:	9300      	str	r3, [sp, #0]
 800e6c0:	003a      	movs	r2, r7
 800e6c2:	0021      	movs	r1, r4
 800e6c4:	4b10      	ldr	r3, [pc, #64]	; (800e708 <_svfiprintf_r+0x1fc>)
 800e6c6:	9803      	ldr	r0, [sp, #12]
 800e6c8:	f7fc fa36 	bl	800ab38 <_printf_float>
 800e6cc:	9004      	str	r0, [sp, #16]
 800e6ce:	9b04      	ldr	r3, [sp, #16]
 800e6d0:	3301      	adds	r3, #1
 800e6d2:	d1d3      	bne.n	800e67c <_svfiprintf_r+0x170>
 800e6d4:	89bb      	ldrh	r3, [r7, #12]
 800e6d6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e6d8:	065b      	lsls	r3, r3, #25
 800e6da:	d400      	bmi.n	800e6de <_svfiprintf_r+0x1d2>
 800e6dc:	e72d      	b.n	800e53a <_svfiprintf_r+0x2e>
 800e6de:	2001      	movs	r0, #1
 800e6e0:	4240      	negs	r0, r0
 800e6e2:	e72a      	b.n	800e53a <_svfiprintf_r+0x2e>
 800e6e4:	ab07      	add	r3, sp, #28
 800e6e6:	9300      	str	r3, [sp, #0]
 800e6e8:	003a      	movs	r2, r7
 800e6ea:	0021      	movs	r1, r4
 800e6ec:	4b06      	ldr	r3, [pc, #24]	; (800e708 <_svfiprintf_r+0x1fc>)
 800e6ee:	9803      	ldr	r0, [sp, #12]
 800e6f0:	f7fc fcd4 	bl	800b09c <_printf_i>
 800e6f4:	e7ea      	b.n	800e6cc <_svfiprintf_r+0x1c0>
 800e6f6:	46c0      	nop			; (mov r8, r8)
 800e6f8:	0800faac 	.word	0x0800faac
 800e6fc:	0800fab2 	.word	0x0800fab2
 800e700:	0800fab6 	.word	0x0800fab6
 800e704:	0800ab39 	.word	0x0800ab39
 800e708:	0800e449 	.word	0x0800e449

0800e70c <_read_r>:
 800e70c:	b570      	push	{r4, r5, r6, lr}
 800e70e:	0004      	movs	r4, r0
 800e710:	0008      	movs	r0, r1
 800e712:	0011      	movs	r1, r2
 800e714:	001a      	movs	r2, r3
 800e716:	2300      	movs	r3, #0
 800e718:	4d05      	ldr	r5, [pc, #20]	; (800e730 <_read_r+0x24>)
 800e71a:	602b      	str	r3, [r5, #0]
 800e71c:	f7f5 fef6 	bl	800450c <_read>
 800e720:	1c43      	adds	r3, r0, #1
 800e722:	d103      	bne.n	800e72c <_read_r+0x20>
 800e724:	682b      	ldr	r3, [r5, #0]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d000      	beq.n	800e72c <_read_r+0x20>
 800e72a:	6023      	str	r3, [r4, #0]
 800e72c:	bd70      	pop	{r4, r5, r6, pc}
 800e72e:	46c0      	nop			; (mov r8, r8)
 800e730:	20001748 	.word	0x20001748

0800e734 <nan>:
 800e734:	2000      	movs	r0, #0
 800e736:	4901      	ldr	r1, [pc, #4]	; (800e73c <nan+0x8>)
 800e738:	4770      	bx	lr
 800e73a:	46c0      	nop			; (mov r8, r8)
 800e73c:	7ff80000 	.word	0x7ff80000

0800e740 <strncmp>:
 800e740:	b530      	push	{r4, r5, lr}
 800e742:	0005      	movs	r5, r0
 800e744:	1e10      	subs	r0, r2, #0
 800e746:	d008      	beq.n	800e75a <strncmp+0x1a>
 800e748:	2400      	movs	r4, #0
 800e74a:	3a01      	subs	r2, #1
 800e74c:	5d2b      	ldrb	r3, [r5, r4]
 800e74e:	5d08      	ldrb	r0, [r1, r4]
 800e750:	4283      	cmp	r3, r0
 800e752:	d101      	bne.n	800e758 <strncmp+0x18>
 800e754:	4294      	cmp	r4, r2
 800e756:	d101      	bne.n	800e75c <strncmp+0x1c>
 800e758:	1a18      	subs	r0, r3, r0
 800e75a:	bd30      	pop	{r4, r5, pc}
 800e75c:	3401      	adds	r4, #1
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d1f4      	bne.n	800e74c <strncmp+0xc>
 800e762:	e7f9      	b.n	800e758 <strncmp+0x18>

0800e764 <__ascii_wctomb>:
 800e764:	0003      	movs	r3, r0
 800e766:	1e08      	subs	r0, r1, #0
 800e768:	d005      	beq.n	800e776 <__ascii_wctomb+0x12>
 800e76a:	2aff      	cmp	r2, #255	; 0xff
 800e76c:	d904      	bls.n	800e778 <__ascii_wctomb+0x14>
 800e76e:	228a      	movs	r2, #138	; 0x8a
 800e770:	2001      	movs	r0, #1
 800e772:	601a      	str	r2, [r3, #0]
 800e774:	4240      	negs	r0, r0
 800e776:	4770      	bx	lr
 800e778:	2001      	movs	r0, #1
 800e77a:	700a      	strb	r2, [r1, #0]
 800e77c:	e7fb      	b.n	800e776 <__ascii_wctomb+0x12>
	...

0800e780 <__assert_func>:
 800e780:	b530      	push	{r4, r5, lr}
 800e782:	0014      	movs	r4, r2
 800e784:	001a      	movs	r2, r3
 800e786:	4b09      	ldr	r3, [pc, #36]	; (800e7ac <__assert_func+0x2c>)
 800e788:	0005      	movs	r5, r0
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	b085      	sub	sp, #20
 800e78e:	68d8      	ldr	r0, [r3, #12]
 800e790:	4b07      	ldr	r3, [pc, #28]	; (800e7b0 <__assert_func+0x30>)
 800e792:	2c00      	cmp	r4, #0
 800e794:	d101      	bne.n	800e79a <__assert_func+0x1a>
 800e796:	4b07      	ldr	r3, [pc, #28]	; (800e7b4 <__assert_func+0x34>)
 800e798:	001c      	movs	r4, r3
 800e79a:	9301      	str	r3, [sp, #4]
 800e79c:	9100      	str	r1, [sp, #0]
 800e79e:	002b      	movs	r3, r5
 800e7a0:	4905      	ldr	r1, [pc, #20]	; (800e7b8 <__assert_func+0x38>)
 800e7a2:	9402      	str	r4, [sp, #8]
 800e7a4:	f000 f80a 	bl	800e7bc <fiprintf>
 800e7a8:	f000 fa8a 	bl	800ecc0 <abort>
 800e7ac:	2000005c 	.word	0x2000005c
 800e7b0:	0800fabd 	.word	0x0800fabd
 800e7b4:	0800faf8 	.word	0x0800faf8
 800e7b8:	0800faca 	.word	0x0800faca

0800e7bc <fiprintf>:
 800e7bc:	b40e      	push	{r1, r2, r3}
 800e7be:	b503      	push	{r0, r1, lr}
 800e7c0:	0001      	movs	r1, r0
 800e7c2:	ab03      	add	r3, sp, #12
 800e7c4:	4804      	ldr	r0, [pc, #16]	; (800e7d8 <fiprintf+0x1c>)
 800e7c6:	cb04      	ldmia	r3!, {r2}
 800e7c8:	6800      	ldr	r0, [r0, #0]
 800e7ca:	9301      	str	r3, [sp, #4]
 800e7cc:	f000 f870 	bl	800e8b0 <_vfiprintf_r>
 800e7d0:	b002      	add	sp, #8
 800e7d2:	bc08      	pop	{r3}
 800e7d4:	b003      	add	sp, #12
 800e7d6:	4718      	bx	r3
 800e7d8:	2000005c 	.word	0x2000005c

0800e7dc <memmove>:
 800e7dc:	b510      	push	{r4, lr}
 800e7de:	4288      	cmp	r0, r1
 800e7e0:	d902      	bls.n	800e7e8 <memmove+0xc>
 800e7e2:	188b      	adds	r3, r1, r2
 800e7e4:	4298      	cmp	r0, r3
 800e7e6:	d303      	bcc.n	800e7f0 <memmove+0x14>
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	e007      	b.n	800e7fc <memmove+0x20>
 800e7ec:	5c8b      	ldrb	r3, [r1, r2]
 800e7ee:	5483      	strb	r3, [r0, r2]
 800e7f0:	3a01      	subs	r2, #1
 800e7f2:	d2fb      	bcs.n	800e7ec <memmove+0x10>
 800e7f4:	bd10      	pop	{r4, pc}
 800e7f6:	5ccc      	ldrb	r4, [r1, r3]
 800e7f8:	54c4      	strb	r4, [r0, r3]
 800e7fa:	3301      	adds	r3, #1
 800e7fc:	429a      	cmp	r2, r3
 800e7fe:	d1fa      	bne.n	800e7f6 <memmove+0x1a>
 800e800:	e7f8      	b.n	800e7f4 <memmove+0x18>

0800e802 <_realloc_r>:
 800e802:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e804:	0007      	movs	r7, r0
 800e806:	000e      	movs	r6, r1
 800e808:	0014      	movs	r4, r2
 800e80a:	2900      	cmp	r1, #0
 800e80c:	d105      	bne.n	800e81a <_realloc_r+0x18>
 800e80e:	0011      	movs	r1, r2
 800e810:	f7fc f872 	bl	800a8f8 <_malloc_r>
 800e814:	0005      	movs	r5, r0
 800e816:	0028      	movs	r0, r5
 800e818:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e81a:	2a00      	cmp	r2, #0
 800e81c:	d103      	bne.n	800e826 <_realloc_r+0x24>
 800e81e:	f7ff fdc9 	bl	800e3b4 <_free_r>
 800e822:	0025      	movs	r5, r4
 800e824:	e7f7      	b.n	800e816 <_realloc_r+0x14>
 800e826:	f000 fabf 	bl	800eda8 <_malloc_usable_size_r>
 800e82a:	9001      	str	r0, [sp, #4]
 800e82c:	4284      	cmp	r4, r0
 800e82e:	d803      	bhi.n	800e838 <_realloc_r+0x36>
 800e830:	0035      	movs	r5, r6
 800e832:	0843      	lsrs	r3, r0, #1
 800e834:	42a3      	cmp	r3, r4
 800e836:	d3ee      	bcc.n	800e816 <_realloc_r+0x14>
 800e838:	0021      	movs	r1, r4
 800e83a:	0038      	movs	r0, r7
 800e83c:	f7fc f85c 	bl	800a8f8 <_malloc_r>
 800e840:	1e05      	subs	r5, r0, #0
 800e842:	d0e8      	beq.n	800e816 <_realloc_r+0x14>
 800e844:	9b01      	ldr	r3, [sp, #4]
 800e846:	0022      	movs	r2, r4
 800e848:	429c      	cmp	r4, r3
 800e84a:	d900      	bls.n	800e84e <_realloc_r+0x4c>
 800e84c:	001a      	movs	r2, r3
 800e84e:	0031      	movs	r1, r6
 800e850:	0028      	movs	r0, r5
 800e852:	f7fc f81e 	bl	800a892 <memcpy>
 800e856:	0031      	movs	r1, r6
 800e858:	0038      	movs	r0, r7
 800e85a:	f7ff fdab 	bl	800e3b4 <_free_r>
 800e85e:	e7da      	b.n	800e816 <_realloc_r+0x14>

0800e860 <__sfputc_r>:
 800e860:	6893      	ldr	r3, [r2, #8]
 800e862:	b510      	push	{r4, lr}
 800e864:	3b01      	subs	r3, #1
 800e866:	6093      	str	r3, [r2, #8]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	da04      	bge.n	800e876 <__sfputc_r+0x16>
 800e86c:	6994      	ldr	r4, [r2, #24]
 800e86e:	42a3      	cmp	r3, r4
 800e870:	db07      	blt.n	800e882 <__sfputc_r+0x22>
 800e872:	290a      	cmp	r1, #10
 800e874:	d005      	beq.n	800e882 <__sfputc_r+0x22>
 800e876:	6813      	ldr	r3, [r2, #0]
 800e878:	1c58      	adds	r0, r3, #1
 800e87a:	6010      	str	r0, [r2, #0]
 800e87c:	7019      	strb	r1, [r3, #0]
 800e87e:	0008      	movs	r0, r1
 800e880:	bd10      	pop	{r4, pc}
 800e882:	f000 f94f 	bl	800eb24 <__swbuf_r>
 800e886:	0001      	movs	r1, r0
 800e888:	e7f9      	b.n	800e87e <__sfputc_r+0x1e>

0800e88a <__sfputs_r>:
 800e88a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e88c:	0006      	movs	r6, r0
 800e88e:	000f      	movs	r7, r1
 800e890:	0014      	movs	r4, r2
 800e892:	18d5      	adds	r5, r2, r3
 800e894:	42ac      	cmp	r4, r5
 800e896:	d101      	bne.n	800e89c <__sfputs_r+0x12>
 800e898:	2000      	movs	r0, #0
 800e89a:	e007      	b.n	800e8ac <__sfputs_r+0x22>
 800e89c:	7821      	ldrb	r1, [r4, #0]
 800e89e:	003a      	movs	r2, r7
 800e8a0:	0030      	movs	r0, r6
 800e8a2:	f7ff ffdd 	bl	800e860 <__sfputc_r>
 800e8a6:	3401      	adds	r4, #1
 800e8a8:	1c43      	adds	r3, r0, #1
 800e8aa:	d1f3      	bne.n	800e894 <__sfputs_r+0xa>
 800e8ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e8b0 <_vfiprintf_r>:
 800e8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8b2:	b0a1      	sub	sp, #132	; 0x84
 800e8b4:	0006      	movs	r6, r0
 800e8b6:	000c      	movs	r4, r1
 800e8b8:	001f      	movs	r7, r3
 800e8ba:	9203      	str	r2, [sp, #12]
 800e8bc:	2800      	cmp	r0, #0
 800e8be:	d004      	beq.n	800e8ca <_vfiprintf_r+0x1a>
 800e8c0:	6983      	ldr	r3, [r0, #24]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d101      	bne.n	800e8ca <_vfiprintf_r+0x1a>
 800e8c6:	f7fb ff1d 	bl	800a704 <__sinit>
 800e8ca:	4b8e      	ldr	r3, [pc, #568]	; (800eb04 <_vfiprintf_r+0x254>)
 800e8cc:	429c      	cmp	r4, r3
 800e8ce:	d11c      	bne.n	800e90a <_vfiprintf_r+0x5a>
 800e8d0:	6874      	ldr	r4, [r6, #4]
 800e8d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e8d4:	07db      	lsls	r3, r3, #31
 800e8d6:	d405      	bmi.n	800e8e4 <_vfiprintf_r+0x34>
 800e8d8:	89a3      	ldrh	r3, [r4, #12]
 800e8da:	059b      	lsls	r3, r3, #22
 800e8dc:	d402      	bmi.n	800e8e4 <_vfiprintf_r+0x34>
 800e8de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8e0:	f7fb ffd5 	bl	800a88e <__retarget_lock_acquire_recursive>
 800e8e4:	89a3      	ldrh	r3, [r4, #12]
 800e8e6:	071b      	lsls	r3, r3, #28
 800e8e8:	d502      	bpl.n	800e8f0 <_vfiprintf_r+0x40>
 800e8ea:	6923      	ldr	r3, [r4, #16]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d11d      	bne.n	800e92c <_vfiprintf_r+0x7c>
 800e8f0:	0021      	movs	r1, r4
 800e8f2:	0030      	movs	r0, r6
 800e8f4:	f000 f96c 	bl	800ebd0 <__swsetup_r>
 800e8f8:	2800      	cmp	r0, #0
 800e8fa:	d017      	beq.n	800e92c <_vfiprintf_r+0x7c>
 800e8fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e8fe:	07db      	lsls	r3, r3, #31
 800e900:	d50d      	bpl.n	800e91e <_vfiprintf_r+0x6e>
 800e902:	2001      	movs	r0, #1
 800e904:	4240      	negs	r0, r0
 800e906:	b021      	add	sp, #132	; 0x84
 800e908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e90a:	4b7f      	ldr	r3, [pc, #508]	; (800eb08 <_vfiprintf_r+0x258>)
 800e90c:	429c      	cmp	r4, r3
 800e90e:	d101      	bne.n	800e914 <_vfiprintf_r+0x64>
 800e910:	68b4      	ldr	r4, [r6, #8]
 800e912:	e7de      	b.n	800e8d2 <_vfiprintf_r+0x22>
 800e914:	4b7d      	ldr	r3, [pc, #500]	; (800eb0c <_vfiprintf_r+0x25c>)
 800e916:	429c      	cmp	r4, r3
 800e918:	d1db      	bne.n	800e8d2 <_vfiprintf_r+0x22>
 800e91a:	68f4      	ldr	r4, [r6, #12]
 800e91c:	e7d9      	b.n	800e8d2 <_vfiprintf_r+0x22>
 800e91e:	89a3      	ldrh	r3, [r4, #12]
 800e920:	059b      	lsls	r3, r3, #22
 800e922:	d4ee      	bmi.n	800e902 <_vfiprintf_r+0x52>
 800e924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e926:	f7fb ffb3 	bl	800a890 <__retarget_lock_release_recursive>
 800e92a:	e7ea      	b.n	800e902 <_vfiprintf_r+0x52>
 800e92c:	2300      	movs	r3, #0
 800e92e:	ad08      	add	r5, sp, #32
 800e930:	616b      	str	r3, [r5, #20]
 800e932:	3320      	adds	r3, #32
 800e934:	766b      	strb	r3, [r5, #25]
 800e936:	3310      	adds	r3, #16
 800e938:	76ab      	strb	r3, [r5, #26]
 800e93a:	9707      	str	r7, [sp, #28]
 800e93c:	9f03      	ldr	r7, [sp, #12]
 800e93e:	783b      	ldrb	r3, [r7, #0]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d001      	beq.n	800e948 <_vfiprintf_r+0x98>
 800e944:	2b25      	cmp	r3, #37	; 0x25
 800e946:	d14e      	bne.n	800e9e6 <_vfiprintf_r+0x136>
 800e948:	9b03      	ldr	r3, [sp, #12]
 800e94a:	1afb      	subs	r3, r7, r3
 800e94c:	9305      	str	r3, [sp, #20]
 800e94e:	9b03      	ldr	r3, [sp, #12]
 800e950:	429f      	cmp	r7, r3
 800e952:	d00d      	beq.n	800e970 <_vfiprintf_r+0xc0>
 800e954:	9b05      	ldr	r3, [sp, #20]
 800e956:	0021      	movs	r1, r4
 800e958:	0030      	movs	r0, r6
 800e95a:	9a03      	ldr	r2, [sp, #12]
 800e95c:	f7ff ff95 	bl	800e88a <__sfputs_r>
 800e960:	1c43      	adds	r3, r0, #1
 800e962:	d100      	bne.n	800e966 <_vfiprintf_r+0xb6>
 800e964:	e0b5      	b.n	800ead2 <_vfiprintf_r+0x222>
 800e966:	696a      	ldr	r2, [r5, #20]
 800e968:	9b05      	ldr	r3, [sp, #20]
 800e96a:	4694      	mov	ip, r2
 800e96c:	4463      	add	r3, ip
 800e96e:	616b      	str	r3, [r5, #20]
 800e970:	783b      	ldrb	r3, [r7, #0]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d100      	bne.n	800e978 <_vfiprintf_r+0xc8>
 800e976:	e0ac      	b.n	800ead2 <_vfiprintf_r+0x222>
 800e978:	2201      	movs	r2, #1
 800e97a:	1c7b      	adds	r3, r7, #1
 800e97c:	9303      	str	r3, [sp, #12]
 800e97e:	2300      	movs	r3, #0
 800e980:	4252      	negs	r2, r2
 800e982:	606a      	str	r2, [r5, #4]
 800e984:	a904      	add	r1, sp, #16
 800e986:	3254      	adds	r2, #84	; 0x54
 800e988:	1852      	adds	r2, r2, r1
 800e98a:	602b      	str	r3, [r5, #0]
 800e98c:	60eb      	str	r3, [r5, #12]
 800e98e:	60ab      	str	r3, [r5, #8]
 800e990:	7013      	strb	r3, [r2, #0]
 800e992:	65ab      	str	r3, [r5, #88]	; 0x58
 800e994:	9b03      	ldr	r3, [sp, #12]
 800e996:	2205      	movs	r2, #5
 800e998:	7819      	ldrb	r1, [r3, #0]
 800e99a:	485d      	ldr	r0, [pc, #372]	; (800eb10 <_vfiprintf_r+0x260>)
 800e99c:	f7fe fff8 	bl	800d990 <memchr>
 800e9a0:	9b03      	ldr	r3, [sp, #12]
 800e9a2:	1c5f      	adds	r7, r3, #1
 800e9a4:	2800      	cmp	r0, #0
 800e9a6:	d120      	bne.n	800e9ea <_vfiprintf_r+0x13a>
 800e9a8:	682a      	ldr	r2, [r5, #0]
 800e9aa:	06d3      	lsls	r3, r2, #27
 800e9ac:	d504      	bpl.n	800e9b8 <_vfiprintf_r+0x108>
 800e9ae:	2353      	movs	r3, #83	; 0x53
 800e9b0:	a904      	add	r1, sp, #16
 800e9b2:	185b      	adds	r3, r3, r1
 800e9b4:	2120      	movs	r1, #32
 800e9b6:	7019      	strb	r1, [r3, #0]
 800e9b8:	0713      	lsls	r3, r2, #28
 800e9ba:	d504      	bpl.n	800e9c6 <_vfiprintf_r+0x116>
 800e9bc:	2353      	movs	r3, #83	; 0x53
 800e9be:	a904      	add	r1, sp, #16
 800e9c0:	185b      	adds	r3, r3, r1
 800e9c2:	212b      	movs	r1, #43	; 0x2b
 800e9c4:	7019      	strb	r1, [r3, #0]
 800e9c6:	9b03      	ldr	r3, [sp, #12]
 800e9c8:	781b      	ldrb	r3, [r3, #0]
 800e9ca:	2b2a      	cmp	r3, #42	; 0x2a
 800e9cc:	d016      	beq.n	800e9fc <_vfiprintf_r+0x14c>
 800e9ce:	2100      	movs	r1, #0
 800e9d0:	68eb      	ldr	r3, [r5, #12]
 800e9d2:	9f03      	ldr	r7, [sp, #12]
 800e9d4:	783a      	ldrb	r2, [r7, #0]
 800e9d6:	1c78      	adds	r0, r7, #1
 800e9d8:	3a30      	subs	r2, #48	; 0x30
 800e9da:	4684      	mov	ip, r0
 800e9dc:	2a09      	cmp	r2, #9
 800e9de:	d94f      	bls.n	800ea80 <_vfiprintf_r+0x1d0>
 800e9e0:	2900      	cmp	r1, #0
 800e9e2:	d111      	bne.n	800ea08 <_vfiprintf_r+0x158>
 800e9e4:	e017      	b.n	800ea16 <_vfiprintf_r+0x166>
 800e9e6:	3701      	adds	r7, #1
 800e9e8:	e7a9      	b.n	800e93e <_vfiprintf_r+0x8e>
 800e9ea:	4b49      	ldr	r3, [pc, #292]	; (800eb10 <_vfiprintf_r+0x260>)
 800e9ec:	682a      	ldr	r2, [r5, #0]
 800e9ee:	1ac0      	subs	r0, r0, r3
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	4083      	lsls	r3, r0
 800e9f4:	4313      	orrs	r3, r2
 800e9f6:	602b      	str	r3, [r5, #0]
 800e9f8:	9703      	str	r7, [sp, #12]
 800e9fa:	e7cb      	b.n	800e994 <_vfiprintf_r+0xe4>
 800e9fc:	9b07      	ldr	r3, [sp, #28]
 800e9fe:	1d19      	adds	r1, r3, #4
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	9107      	str	r1, [sp, #28]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	db01      	blt.n	800ea0c <_vfiprintf_r+0x15c>
 800ea08:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea0a:	e004      	b.n	800ea16 <_vfiprintf_r+0x166>
 800ea0c:	425b      	negs	r3, r3
 800ea0e:	60eb      	str	r3, [r5, #12]
 800ea10:	2302      	movs	r3, #2
 800ea12:	4313      	orrs	r3, r2
 800ea14:	602b      	str	r3, [r5, #0]
 800ea16:	783b      	ldrb	r3, [r7, #0]
 800ea18:	2b2e      	cmp	r3, #46	; 0x2e
 800ea1a:	d10a      	bne.n	800ea32 <_vfiprintf_r+0x182>
 800ea1c:	787b      	ldrb	r3, [r7, #1]
 800ea1e:	2b2a      	cmp	r3, #42	; 0x2a
 800ea20:	d137      	bne.n	800ea92 <_vfiprintf_r+0x1e2>
 800ea22:	9b07      	ldr	r3, [sp, #28]
 800ea24:	3702      	adds	r7, #2
 800ea26:	1d1a      	adds	r2, r3, #4
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	9207      	str	r2, [sp, #28]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	db2d      	blt.n	800ea8c <_vfiprintf_r+0x1dc>
 800ea30:	9309      	str	r3, [sp, #36]	; 0x24
 800ea32:	2203      	movs	r2, #3
 800ea34:	7839      	ldrb	r1, [r7, #0]
 800ea36:	4837      	ldr	r0, [pc, #220]	; (800eb14 <_vfiprintf_r+0x264>)
 800ea38:	f7fe ffaa 	bl	800d990 <memchr>
 800ea3c:	2800      	cmp	r0, #0
 800ea3e:	d007      	beq.n	800ea50 <_vfiprintf_r+0x1a0>
 800ea40:	4b34      	ldr	r3, [pc, #208]	; (800eb14 <_vfiprintf_r+0x264>)
 800ea42:	682a      	ldr	r2, [r5, #0]
 800ea44:	1ac0      	subs	r0, r0, r3
 800ea46:	2340      	movs	r3, #64	; 0x40
 800ea48:	4083      	lsls	r3, r0
 800ea4a:	4313      	orrs	r3, r2
 800ea4c:	3701      	adds	r7, #1
 800ea4e:	602b      	str	r3, [r5, #0]
 800ea50:	7839      	ldrb	r1, [r7, #0]
 800ea52:	1c7b      	adds	r3, r7, #1
 800ea54:	2206      	movs	r2, #6
 800ea56:	4830      	ldr	r0, [pc, #192]	; (800eb18 <_vfiprintf_r+0x268>)
 800ea58:	9303      	str	r3, [sp, #12]
 800ea5a:	7629      	strb	r1, [r5, #24]
 800ea5c:	f7fe ff98 	bl	800d990 <memchr>
 800ea60:	2800      	cmp	r0, #0
 800ea62:	d045      	beq.n	800eaf0 <_vfiprintf_r+0x240>
 800ea64:	4b2d      	ldr	r3, [pc, #180]	; (800eb1c <_vfiprintf_r+0x26c>)
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d127      	bne.n	800eaba <_vfiprintf_r+0x20a>
 800ea6a:	2207      	movs	r2, #7
 800ea6c:	9b07      	ldr	r3, [sp, #28]
 800ea6e:	3307      	adds	r3, #7
 800ea70:	4393      	bics	r3, r2
 800ea72:	3308      	adds	r3, #8
 800ea74:	9307      	str	r3, [sp, #28]
 800ea76:	696b      	ldr	r3, [r5, #20]
 800ea78:	9a04      	ldr	r2, [sp, #16]
 800ea7a:	189b      	adds	r3, r3, r2
 800ea7c:	616b      	str	r3, [r5, #20]
 800ea7e:	e75d      	b.n	800e93c <_vfiprintf_r+0x8c>
 800ea80:	210a      	movs	r1, #10
 800ea82:	434b      	muls	r3, r1
 800ea84:	4667      	mov	r7, ip
 800ea86:	189b      	adds	r3, r3, r2
 800ea88:	3909      	subs	r1, #9
 800ea8a:	e7a3      	b.n	800e9d4 <_vfiprintf_r+0x124>
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	425b      	negs	r3, r3
 800ea90:	e7ce      	b.n	800ea30 <_vfiprintf_r+0x180>
 800ea92:	2300      	movs	r3, #0
 800ea94:	001a      	movs	r2, r3
 800ea96:	3701      	adds	r7, #1
 800ea98:	606b      	str	r3, [r5, #4]
 800ea9a:	7839      	ldrb	r1, [r7, #0]
 800ea9c:	1c78      	adds	r0, r7, #1
 800ea9e:	3930      	subs	r1, #48	; 0x30
 800eaa0:	4684      	mov	ip, r0
 800eaa2:	2909      	cmp	r1, #9
 800eaa4:	d903      	bls.n	800eaae <_vfiprintf_r+0x1fe>
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d0c3      	beq.n	800ea32 <_vfiprintf_r+0x182>
 800eaaa:	9209      	str	r2, [sp, #36]	; 0x24
 800eaac:	e7c1      	b.n	800ea32 <_vfiprintf_r+0x182>
 800eaae:	230a      	movs	r3, #10
 800eab0:	435a      	muls	r2, r3
 800eab2:	4667      	mov	r7, ip
 800eab4:	1852      	adds	r2, r2, r1
 800eab6:	3b09      	subs	r3, #9
 800eab8:	e7ef      	b.n	800ea9a <_vfiprintf_r+0x1ea>
 800eaba:	ab07      	add	r3, sp, #28
 800eabc:	9300      	str	r3, [sp, #0]
 800eabe:	0022      	movs	r2, r4
 800eac0:	0029      	movs	r1, r5
 800eac2:	0030      	movs	r0, r6
 800eac4:	4b16      	ldr	r3, [pc, #88]	; (800eb20 <_vfiprintf_r+0x270>)
 800eac6:	f7fc f837 	bl	800ab38 <_printf_float>
 800eaca:	9004      	str	r0, [sp, #16]
 800eacc:	9b04      	ldr	r3, [sp, #16]
 800eace:	3301      	adds	r3, #1
 800ead0:	d1d1      	bne.n	800ea76 <_vfiprintf_r+0x1c6>
 800ead2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ead4:	07db      	lsls	r3, r3, #31
 800ead6:	d405      	bmi.n	800eae4 <_vfiprintf_r+0x234>
 800ead8:	89a3      	ldrh	r3, [r4, #12]
 800eada:	059b      	lsls	r3, r3, #22
 800eadc:	d402      	bmi.n	800eae4 <_vfiprintf_r+0x234>
 800eade:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eae0:	f7fb fed6 	bl	800a890 <__retarget_lock_release_recursive>
 800eae4:	89a3      	ldrh	r3, [r4, #12]
 800eae6:	065b      	lsls	r3, r3, #25
 800eae8:	d500      	bpl.n	800eaec <_vfiprintf_r+0x23c>
 800eaea:	e70a      	b.n	800e902 <_vfiprintf_r+0x52>
 800eaec:	980d      	ldr	r0, [sp, #52]	; 0x34
 800eaee:	e70a      	b.n	800e906 <_vfiprintf_r+0x56>
 800eaf0:	ab07      	add	r3, sp, #28
 800eaf2:	9300      	str	r3, [sp, #0]
 800eaf4:	0022      	movs	r2, r4
 800eaf6:	0029      	movs	r1, r5
 800eaf8:	0030      	movs	r0, r6
 800eafa:	4b09      	ldr	r3, [pc, #36]	; (800eb20 <_vfiprintf_r+0x270>)
 800eafc:	f7fc face 	bl	800b09c <_printf_i>
 800eb00:	e7e3      	b.n	800eaca <_vfiprintf_r+0x21a>
 800eb02:	46c0      	nop			; (mov r8, r8)
 800eb04:	0800f67c 	.word	0x0800f67c
 800eb08:	0800f69c 	.word	0x0800f69c
 800eb0c:	0800f65c 	.word	0x0800f65c
 800eb10:	0800faac 	.word	0x0800faac
 800eb14:	0800fab2 	.word	0x0800fab2
 800eb18:	0800fab6 	.word	0x0800fab6
 800eb1c:	0800ab39 	.word	0x0800ab39
 800eb20:	0800e88b 	.word	0x0800e88b

0800eb24 <__swbuf_r>:
 800eb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb26:	0005      	movs	r5, r0
 800eb28:	000e      	movs	r6, r1
 800eb2a:	0014      	movs	r4, r2
 800eb2c:	2800      	cmp	r0, #0
 800eb2e:	d004      	beq.n	800eb3a <__swbuf_r+0x16>
 800eb30:	6983      	ldr	r3, [r0, #24]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d101      	bne.n	800eb3a <__swbuf_r+0x16>
 800eb36:	f7fb fde5 	bl	800a704 <__sinit>
 800eb3a:	4b22      	ldr	r3, [pc, #136]	; (800ebc4 <__swbuf_r+0xa0>)
 800eb3c:	429c      	cmp	r4, r3
 800eb3e:	d12e      	bne.n	800eb9e <__swbuf_r+0x7a>
 800eb40:	686c      	ldr	r4, [r5, #4]
 800eb42:	69a3      	ldr	r3, [r4, #24]
 800eb44:	60a3      	str	r3, [r4, #8]
 800eb46:	89a3      	ldrh	r3, [r4, #12]
 800eb48:	071b      	lsls	r3, r3, #28
 800eb4a:	d532      	bpl.n	800ebb2 <__swbuf_r+0x8e>
 800eb4c:	6923      	ldr	r3, [r4, #16]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d02f      	beq.n	800ebb2 <__swbuf_r+0x8e>
 800eb52:	6823      	ldr	r3, [r4, #0]
 800eb54:	6922      	ldr	r2, [r4, #16]
 800eb56:	b2f7      	uxtb	r7, r6
 800eb58:	1a98      	subs	r0, r3, r2
 800eb5a:	6963      	ldr	r3, [r4, #20]
 800eb5c:	b2f6      	uxtb	r6, r6
 800eb5e:	4283      	cmp	r3, r0
 800eb60:	dc05      	bgt.n	800eb6e <__swbuf_r+0x4a>
 800eb62:	0021      	movs	r1, r4
 800eb64:	0028      	movs	r0, r5
 800eb66:	f7fe fb2b 	bl	800d1c0 <_fflush_r>
 800eb6a:	2800      	cmp	r0, #0
 800eb6c:	d127      	bne.n	800ebbe <__swbuf_r+0x9a>
 800eb6e:	68a3      	ldr	r3, [r4, #8]
 800eb70:	3001      	adds	r0, #1
 800eb72:	3b01      	subs	r3, #1
 800eb74:	60a3      	str	r3, [r4, #8]
 800eb76:	6823      	ldr	r3, [r4, #0]
 800eb78:	1c5a      	adds	r2, r3, #1
 800eb7a:	6022      	str	r2, [r4, #0]
 800eb7c:	701f      	strb	r7, [r3, #0]
 800eb7e:	6963      	ldr	r3, [r4, #20]
 800eb80:	4283      	cmp	r3, r0
 800eb82:	d004      	beq.n	800eb8e <__swbuf_r+0x6a>
 800eb84:	89a3      	ldrh	r3, [r4, #12]
 800eb86:	07db      	lsls	r3, r3, #31
 800eb88:	d507      	bpl.n	800eb9a <__swbuf_r+0x76>
 800eb8a:	2e0a      	cmp	r6, #10
 800eb8c:	d105      	bne.n	800eb9a <__swbuf_r+0x76>
 800eb8e:	0021      	movs	r1, r4
 800eb90:	0028      	movs	r0, r5
 800eb92:	f7fe fb15 	bl	800d1c0 <_fflush_r>
 800eb96:	2800      	cmp	r0, #0
 800eb98:	d111      	bne.n	800ebbe <__swbuf_r+0x9a>
 800eb9a:	0030      	movs	r0, r6
 800eb9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb9e:	4b0a      	ldr	r3, [pc, #40]	; (800ebc8 <__swbuf_r+0xa4>)
 800eba0:	429c      	cmp	r4, r3
 800eba2:	d101      	bne.n	800eba8 <__swbuf_r+0x84>
 800eba4:	68ac      	ldr	r4, [r5, #8]
 800eba6:	e7cc      	b.n	800eb42 <__swbuf_r+0x1e>
 800eba8:	4b08      	ldr	r3, [pc, #32]	; (800ebcc <__swbuf_r+0xa8>)
 800ebaa:	429c      	cmp	r4, r3
 800ebac:	d1c9      	bne.n	800eb42 <__swbuf_r+0x1e>
 800ebae:	68ec      	ldr	r4, [r5, #12]
 800ebb0:	e7c7      	b.n	800eb42 <__swbuf_r+0x1e>
 800ebb2:	0021      	movs	r1, r4
 800ebb4:	0028      	movs	r0, r5
 800ebb6:	f000 f80b 	bl	800ebd0 <__swsetup_r>
 800ebba:	2800      	cmp	r0, #0
 800ebbc:	d0c9      	beq.n	800eb52 <__swbuf_r+0x2e>
 800ebbe:	2601      	movs	r6, #1
 800ebc0:	4276      	negs	r6, r6
 800ebc2:	e7ea      	b.n	800eb9a <__swbuf_r+0x76>
 800ebc4:	0800f67c 	.word	0x0800f67c
 800ebc8:	0800f69c 	.word	0x0800f69c
 800ebcc:	0800f65c 	.word	0x0800f65c

0800ebd0 <__swsetup_r>:
 800ebd0:	4b37      	ldr	r3, [pc, #220]	; (800ecb0 <__swsetup_r+0xe0>)
 800ebd2:	b570      	push	{r4, r5, r6, lr}
 800ebd4:	681d      	ldr	r5, [r3, #0]
 800ebd6:	0006      	movs	r6, r0
 800ebd8:	000c      	movs	r4, r1
 800ebda:	2d00      	cmp	r5, #0
 800ebdc:	d005      	beq.n	800ebea <__swsetup_r+0x1a>
 800ebde:	69ab      	ldr	r3, [r5, #24]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d102      	bne.n	800ebea <__swsetup_r+0x1a>
 800ebe4:	0028      	movs	r0, r5
 800ebe6:	f7fb fd8d 	bl	800a704 <__sinit>
 800ebea:	4b32      	ldr	r3, [pc, #200]	; (800ecb4 <__swsetup_r+0xe4>)
 800ebec:	429c      	cmp	r4, r3
 800ebee:	d10f      	bne.n	800ec10 <__swsetup_r+0x40>
 800ebf0:	686c      	ldr	r4, [r5, #4]
 800ebf2:	230c      	movs	r3, #12
 800ebf4:	5ee2      	ldrsh	r2, [r4, r3]
 800ebf6:	b293      	uxth	r3, r2
 800ebf8:	0711      	lsls	r1, r2, #28
 800ebfa:	d42d      	bmi.n	800ec58 <__swsetup_r+0x88>
 800ebfc:	06d9      	lsls	r1, r3, #27
 800ebfe:	d411      	bmi.n	800ec24 <__swsetup_r+0x54>
 800ec00:	2309      	movs	r3, #9
 800ec02:	2001      	movs	r0, #1
 800ec04:	6033      	str	r3, [r6, #0]
 800ec06:	3337      	adds	r3, #55	; 0x37
 800ec08:	4313      	orrs	r3, r2
 800ec0a:	81a3      	strh	r3, [r4, #12]
 800ec0c:	4240      	negs	r0, r0
 800ec0e:	bd70      	pop	{r4, r5, r6, pc}
 800ec10:	4b29      	ldr	r3, [pc, #164]	; (800ecb8 <__swsetup_r+0xe8>)
 800ec12:	429c      	cmp	r4, r3
 800ec14:	d101      	bne.n	800ec1a <__swsetup_r+0x4a>
 800ec16:	68ac      	ldr	r4, [r5, #8]
 800ec18:	e7eb      	b.n	800ebf2 <__swsetup_r+0x22>
 800ec1a:	4b28      	ldr	r3, [pc, #160]	; (800ecbc <__swsetup_r+0xec>)
 800ec1c:	429c      	cmp	r4, r3
 800ec1e:	d1e8      	bne.n	800ebf2 <__swsetup_r+0x22>
 800ec20:	68ec      	ldr	r4, [r5, #12]
 800ec22:	e7e6      	b.n	800ebf2 <__swsetup_r+0x22>
 800ec24:	075b      	lsls	r3, r3, #29
 800ec26:	d513      	bpl.n	800ec50 <__swsetup_r+0x80>
 800ec28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec2a:	2900      	cmp	r1, #0
 800ec2c:	d008      	beq.n	800ec40 <__swsetup_r+0x70>
 800ec2e:	0023      	movs	r3, r4
 800ec30:	3344      	adds	r3, #68	; 0x44
 800ec32:	4299      	cmp	r1, r3
 800ec34:	d002      	beq.n	800ec3c <__swsetup_r+0x6c>
 800ec36:	0030      	movs	r0, r6
 800ec38:	f7ff fbbc 	bl	800e3b4 <_free_r>
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	6363      	str	r3, [r4, #52]	; 0x34
 800ec40:	2224      	movs	r2, #36	; 0x24
 800ec42:	89a3      	ldrh	r3, [r4, #12]
 800ec44:	4393      	bics	r3, r2
 800ec46:	81a3      	strh	r3, [r4, #12]
 800ec48:	2300      	movs	r3, #0
 800ec4a:	6063      	str	r3, [r4, #4]
 800ec4c:	6923      	ldr	r3, [r4, #16]
 800ec4e:	6023      	str	r3, [r4, #0]
 800ec50:	2308      	movs	r3, #8
 800ec52:	89a2      	ldrh	r2, [r4, #12]
 800ec54:	4313      	orrs	r3, r2
 800ec56:	81a3      	strh	r3, [r4, #12]
 800ec58:	6923      	ldr	r3, [r4, #16]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d10b      	bne.n	800ec76 <__swsetup_r+0xa6>
 800ec5e:	21a0      	movs	r1, #160	; 0xa0
 800ec60:	2280      	movs	r2, #128	; 0x80
 800ec62:	89a3      	ldrh	r3, [r4, #12]
 800ec64:	0089      	lsls	r1, r1, #2
 800ec66:	0092      	lsls	r2, r2, #2
 800ec68:	400b      	ands	r3, r1
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	d003      	beq.n	800ec76 <__swsetup_r+0xa6>
 800ec6e:	0021      	movs	r1, r4
 800ec70:	0030      	movs	r0, r6
 800ec72:	f000 f855 	bl	800ed20 <__smakebuf_r>
 800ec76:	220c      	movs	r2, #12
 800ec78:	5ea3      	ldrsh	r3, [r4, r2]
 800ec7a:	2001      	movs	r0, #1
 800ec7c:	001a      	movs	r2, r3
 800ec7e:	b299      	uxth	r1, r3
 800ec80:	4002      	ands	r2, r0
 800ec82:	4203      	tst	r3, r0
 800ec84:	d00f      	beq.n	800eca6 <__swsetup_r+0xd6>
 800ec86:	2200      	movs	r2, #0
 800ec88:	60a2      	str	r2, [r4, #8]
 800ec8a:	6962      	ldr	r2, [r4, #20]
 800ec8c:	4252      	negs	r2, r2
 800ec8e:	61a2      	str	r2, [r4, #24]
 800ec90:	2000      	movs	r0, #0
 800ec92:	6922      	ldr	r2, [r4, #16]
 800ec94:	4282      	cmp	r2, r0
 800ec96:	d1ba      	bne.n	800ec0e <__swsetup_r+0x3e>
 800ec98:	060a      	lsls	r2, r1, #24
 800ec9a:	d5b8      	bpl.n	800ec0e <__swsetup_r+0x3e>
 800ec9c:	2240      	movs	r2, #64	; 0x40
 800ec9e:	4313      	orrs	r3, r2
 800eca0:	81a3      	strh	r3, [r4, #12]
 800eca2:	3801      	subs	r0, #1
 800eca4:	e7b3      	b.n	800ec0e <__swsetup_r+0x3e>
 800eca6:	0788      	lsls	r0, r1, #30
 800eca8:	d400      	bmi.n	800ecac <__swsetup_r+0xdc>
 800ecaa:	6962      	ldr	r2, [r4, #20]
 800ecac:	60a2      	str	r2, [r4, #8]
 800ecae:	e7ef      	b.n	800ec90 <__swsetup_r+0xc0>
 800ecb0:	2000005c 	.word	0x2000005c
 800ecb4:	0800f67c 	.word	0x0800f67c
 800ecb8:	0800f69c 	.word	0x0800f69c
 800ecbc:	0800f65c 	.word	0x0800f65c

0800ecc0 <abort>:
 800ecc0:	2006      	movs	r0, #6
 800ecc2:	b510      	push	{r4, lr}
 800ecc4:	f000 f8a2 	bl	800ee0c <raise>
 800ecc8:	2001      	movs	r0, #1
 800ecca:	f7f5 fc13 	bl	80044f4 <_exit>
	...

0800ecd0 <__swhatbuf_r>:
 800ecd0:	b570      	push	{r4, r5, r6, lr}
 800ecd2:	000e      	movs	r6, r1
 800ecd4:	001d      	movs	r5, r3
 800ecd6:	230e      	movs	r3, #14
 800ecd8:	5ec9      	ldrsh	r1, [r1, r3]
 800ecda:	0014      	movs	r4, r2
 800ecdc:	b096      	sub	sp, #88	; 0x58
 800ecde:	2900      	cmp	r1, #0
 800ece0:	da08      	bge.n	800ecf4 <__swhatbuf_r+0x24>
 800ece2:	220c      	movs	r2, #12
 800ece4:	5eb3      	ldrsh	r3, [r6, r2]
 800ece6:	2200      	movs	r2, #0
 800ece8:	602a      	str	r2, [r5, #0]
 800ecea:	061b      	lsls	r3, r3, #24
 800ecec:	d411      	bmi.n	800ed12 <__swhatbuf_r+0x42>
 800ecee:	2380      	movs	r3, #128	; 0x80
 800ecf0:	00db      	lsls	r3, r3, #3
 800ecf2:	e00f      	b.n	800ed14 <__swhatbuf_r+0x44>
 800ecf4:	466a      	mov	r2, sp
 800ecf6:	f000 f8a9 	bl	800ee4c <_fstat_r>
 800ecfa:	2800      	cmp	r0, #0
 800ecfc:	dbf1      	blt.n	800ece2 <__swhatbuf_r+0x12>
 800ecfe:	23f0      	movs	r3, #240	; 0xf0
 800ed00:	9901      	ldr	r1, [sp, #4]
 800ed02:	021b      	lsls	r3, r3, #8
 800ed04:	4019      	ands	r1, r3
 800ed06:	4b05      	ldr	r3, [pc, #20]	; (800ed1c <__swhatbuf_r+0x4c>)
 800ed08:	18c9      	adds	r1, r1, r3
 800ed0a:	424b      	negs	r3, r1
 800ed0c:	4159      	adcs	r1, r3
 800ed0e:	6029      	str	r1, [r5, #0]
 800ed10:	e7ed      	b.n	800ecee <__swhatbuf_r+0x1e>
 800ed12:	2340      	movs	r3, #64	; 0x40
 800ed14:	2000      	movs	r0, #0
 800ed16:	6023      	str	r3, [r4, #0]
 800ed18:	b016      	add	sp, #88	; 0x58
 800ed1a:	bd70      	pop	{r4, r5, r6, pc}
 800ed1c:	ffffe000 	.word	0xffffe000

0800ed20 <__smakebuf_r>:
 800ed20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed22:	2602      	movs	r6, #2
 800ed24:	898b      	ldrh	r3, [r1, #12]
 800ed26:	0005      	movs	r5, r0
 800ed28:	000c      	movs	r4, r1
 800ed2a:	4233      	tst	r3, r6
 800ed2c:	d006      	beq.n	800ed3c <__smakebuf_r+0x1c>
 800ed2e:	0023      	movs	r3, r4
 800ed30:	3347      	adds	r3, #71	; 0x47
 800ed32:	6023      	str	r3, [r4, #0]
 800ed34:	6123      	str	r3, [r4, #16]
 800ed36:	2301      	movs	r3, #1
 800ed38:	6163      	str	r3, [r4, #20]
 800ed3a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ed3c:	466a      	mov	r2, sp
 800ed3e:	ab01      	add	r3, sp, #4
 800ed40:	f7ff ffc6 	bl	800ecd0 <__swhatbuf_r>
 800ed44:	9900      	ldr	r1, [sp, #0]
 800ed46:	0007      	movs	r7, r0
 800ed48:	0028      	movs	r0, r5
 800ed4a:	f7fb fdd5 	bl	800a8f8 <_malloc_r>
 800ed4e:	2800      	cmp	r0, #0
 800ed50:	d108      	bne.n	800ed64 <__smakebuf_r+0x44>
 800ed52:	220c      	movs	r2, #12
 800ed54:	5ea3      	ldrsh	r3, [r4, r2]
 800ed56:	059a      	lsls	r2, r3, #22
 800ed58:	d4ef      	bmi.n	800ed3a <__smakebuf_r+0x1a>
 800ed5a:	2203      	movs	r2, #3
 800ed5c:	4393      	bics	r3, r2
 800ed5e:	431e      	orrs	r6, r3
 800ed60:	81a6      	strh	r6, [r4, #12]
 800ed62:	e7e4      	b.n	800ed2e <__smakebuf_r+0xe>
 800ed64:	4b0f      	ldr	r3, [pc, #60]	; (800eda4 <__smakebuf_r+0x84>)
 800ed66:	62ab      	str	r3, [r5, #40]	; 0x28
 800ed68:	2380      	movs	r3, #128	; 0x80
 800ed6a:	89a2      	ldrh	r2, [r4, #12]
 800ed6c:	6020      	str	r0, [r4, #0]
 800ed6e:	4313      	orrs	r3, r2
 800ed70:	81a3      	strh	r3, [r4, #12]
 800ed72:	9b00      	ldr	r3, [sp, #0]
 800ed74:	6120      	str	r0, [r4, #16]
 800ed76:	6163      	str	r3, [r4, #20]
 800ed78:	9b01      	ldr	r3, [sp, #4]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d00d      	beq.n	800ed9a <__smakebuf_r+0x7a>
 800ed7e:	0028      	movs	r0, r5
 800ed80:	230e      	movs	r3, #14
 800ed82:	5ee1      	ldrsh	r1, [r4, r3]
 800ed84:	f000 f874 	bl	800ee70 <_isatty_r>
 800ed88:	2800      	cmp	r0, #0
 800ed8a:	d006      	beq.n	800ed9a <__smakebuf_r+0x7a>
 800ed8c:	2203      	movs	r2, #3
 800ed8e:	89a3      	ldrh	r3, [r4, #12]
 800ed90:	4393      	bics	r3, r2
 800ed92:	001a      	movs	r2, r3
 800ed94:	2301      	movs	r3, #1
 800ed96:	4313      	orrs	r3, r2
 800ed98:	81a3      	strh	r3, [r4, #12]
 800ed9a:	89a0      	ldrh	r0, [r4, #12]
 800ed9c:	4307      	orrs	r7, r0
 800ed9e:	81a7      	strh	r7, [r4, #12]
 800eda0:	e7cb      	b.n	800ed3a <__smakebuf_r+0x1a>
 800eda2:	46c0      	nop			; (mov r8, r8)
 800eda4:	0800a689 	.word	0x0800a689

0800eda8 <_malloc_usable_size_r>:
 800eda8:	1f0b      	subs	r3, r1, #4
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	1f18      	subs	r0, r3, #4
 800edae:	2b00      	cmp	r3, #0
 800edb0:	da01      	bge.n	800edb6 <_malloc_usable_size_r+0xe>
 800edb2:	580b      	ldr	r3, [r1, r0]
 800edb4:	18c0      	adds	r0, r0, r3
 800edb6:	4770      	bx	lr

0800edb8 <_raise_r>:
 800edb8:	b570      	push	{r4, r5, r6, lr}
 800edba:	0004      	movs	r4, r0
 800edbc:	000d      	movs	r5, r1
 800edbe:	291f      	cmp	r1, #31
 800edc0:	d904      	bls.n	800edcc <_raise_r+0x14>
 800edc2:	2316      	movs	r3, #22
 800edc4:	6003      	str	r3, [r0, #0]
 800edc6:	2001      	movs	r0, #1
 800edc8:	4240      	negs	r0, r0
 800edca:	bd70      	pop	{r4, r5, r6, pc}
 800edcc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d004      	beq.n	800eddc <_raise_r+0x24>
 800edd2:	008a      	lsls	r2, r1, #2
 800edd4:	189b      	adds	r3, r3, r2
 800edd6:	681a      	ldr	r2, [r3, #0]
 800edd8:	2a00      	cmp	r2, #0
 800edda:	d108      	bne.n	800edee <_raise_r+0x36>
 800eddc:	0020      	movs	r0, r4
 800edde:	f000 f831 	bl	800ee44 <_getpid_r>
 800ede2:	002a      	movs	r2, r5
 800ede4:	0001      	movs	r1, r0
 800ede6:	0020      	movs	r0, r4
 800ede8:	f000 f81a 	bl	800ee20 <_kill_r>
 800edec:	e7ed      	b.n	800edca <_raise_r+0x12>
 800edee:	2000      	movs	r0, #0
 800edf0:	2a01      	cmp	r2, #1
 800edf2:	d0ea      	beq.n	800edca <_raise_r+0x12>
 800edf4:	1c51      	adds	r1, r2, #1
 800edf6:	d103      	bne.n	800ee00 <_raise_r+0x48>
 800edf8:	2316      	movs	r3, #22
 800edfa:	3001      	adds	r0, #1
 800edfc:	6023      	str	r3, [r4, #0]
 800edfe:	e7e4      	b.n	800edca <_raise_r+0x12>
 800ee00:	2400      	movs	r4, #0
 800ee02:	0028      	movs	r0, r5
 800ee04:	601c      	str	r4, [r3, #0]
 800ee06:	4790      	blx	r2
 800ee08:	0020      	movs	r0, r4
 800ee0a:	e7de      	b.n	800edca <_raise_r+0x12>

0800ee0c <raise>:
 800ee0c:	b510      	push	{r4, lr}
 800ee0e:	4b03      	ldr	r3, [pc, #12]	; (800ee1c <raise+0x10>)
 800ee10:	0001      	movs	r1, r0
 800ee12:	6818      	ldr	r0, [r3, #0]
 800ee14:	f7ff ffd0 	bl	800edb8 <_raise_r>
 800ee18:	bd10      	pop	{r4, pc}
 800ee1a:	46c0      	nop			; (mov r8, r8)
 800ee1c:	2000005c 	.word	0x2000005c

0800ee20 <_kill_r>:
 800ee20:	2300      	movs	r3, #0
 800ee22:	b570      	push	{r4, r5, r6, lr}
 800ee24:	4d06      	ldr	r5, [pc, #24]	; (800ee40 <_kill_r+0x20>)
 800ee26:	0004      	movs	r4, r0
 800ee28:	0008      	movs	r0, r1
 800ee2a:	0011      	movs	r1, r2
 800ee2c:	602b      	str	r3, [r5, #0]
 800ee2e:	f7f5 fb51 	bl	80044d4 <_kill>
 800ee32:	1c43      	adds	r3, r0, #1
 800ee34:	d103      	bne.n	800ee3e <_kill_r+0x1e>
 800ee36:	682b      	ldr	r3, [r5, #0]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d000      	beq.n	800ee3e <_kill_r+0x1e>
 800ee3c:	6023      	str	r3, [r4, #0]
 800ee3e:	bd70      	pop	{r4, r5, r6, pc}
 800ee40:	20001748 	.word	0x20001748

0800ee44 <_getpid_r>:
 800ee44:	b510      	push	{r4, lr}
 800ee46:	f7f5 fb3f 	bl	80044c8 <_getpid>
 800ee4a:	bd10      	pop	{r4, pc}

0800ee4c <_fstat_r>:
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	b570      	push	{r4, r5, r6, lr}
 800ee50:	4d06      	ldr	r5, [pc, #24]	; (800ee6c <_fstat_r+0x20>)
 800ee52:	0004      	movs	r4, r0
 800ee54:	0008      	movs	r0, r1
 800ee56:	0011      	movs	r1, r2
 800ee58:	602b      	str	r3, [r5, #0]
 800ee5a:	f7f5 fb9a 	bl	8004592 <_fstat>
 800ee5e:	1c43      	adds	r3, r0, #1
 800ee60:	d103      	bne.n	800ee6a <_fstat_r+0x1e>
 800ee62:	682b      	ldr	r3, [r5, #0]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d000      	beq.n	800ee6a <_fstat_r+0x1e>
 800ee68:	6023      	str	r3, [r4, #0]
 800ee6a:	bd70      	pop	{r4, r5, r6, pc}
 800ee6c:	20001748 	.word	0x20001748

0800ee70 <_isatty_r>:
 800ee70:	2300      	movs	r3, #0
 800ee72:	b570      	push	{r4, r5, r6, lr}
 800ee74:	4d06      	ldr	r5, [pc, #24]	; (800ee90 <_isatty_r+0x20>)
 800ee76:	0004      	movs	r4, r0
 800ee78:	0008      	movs	r0, r1
 800ee7a:	602b      	str	r3, [r5, #0]
 800ee7c:	f7f5 fb97 	bl	80045ae <_isatty>
 800ee80:	1c43      	adds	r3, r0, #1
 800ee82:	d103      	bne.n	800ee8c <_isatty_r+0x1c>
 800ee84:	682b      	ldr	r3, [r5, #0]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d000      	beq.n	800ee8c <_isatty_r+0x1c>
 800ee8a:	6023      	str	r3, [r4, #0]
 800ee8c:	bd70      	pop	{r4, r5, r6, pc}
 800ee8e:	46c0      	nop			; (mov r8, r8)
 800ee90:	20001748 	.word	0x20001748

0800ee94 <_init>:
 800ee94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee96:	46c0      	nop			; (mov r8, r8)
 800ee98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee9a:	bc08      	pop	{r3}
 800ee9c:	469e      	mov	lr, r3
 800ee9e:	4770      	bx	lr

0800eea0 <_fini>:
 800eea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eea2:	46c0      	nop			; (mov r8, r8)
 800eea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eea6:	bc08      	pop	{r3}
 800eea8:	469e      	mov	lr, r3
 800eeaa:	4770      	bx	lr
