
HMS_TRY1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008874  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000824  08008938  08008938  00018938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800915c  0800915c  0002021c  2**0
                  CONTENTS
  4 .ARM          00000000  0800915c  0800915c  0002021c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800915c  0800915c  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800915c  0800915c  0001915c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009160  08009160  00019160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  08009164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  2000021c  08009380  0002021c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  08009380  00020468  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f96  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000207f  00000000  00000000  000281da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  0002a260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000768  00000000  00000000  0002aad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012741  00000000  00000000  0002b238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4e3  00000000  00000000  0003d979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006053a  00000000  00000000  00048e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a9396  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e88  00000000  00000000  000a93e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000021c 	.word	0x2000021c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800891c 	.word	0x0800891c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000220 	.word	0x20000220
 8000104:	0800891c 	.word	0x0800891c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f8b5 	bl	80015ac <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f805 	bl	800145c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f8a7 	bl	80015ac <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f89d 	bl	80015ac <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f82d 	bl	80014e0 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f823 	bl	80014e0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_fdiv>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	4646      	mov	r6, r8
 80004ae:	46d6      	mov	lr, sl
 80004b0:	0245      	lsls	r5, r0, #9
 80004b2:	b5c0      	push	{r6, r7, lr}
 80004b4:	0047      	lsls	r7, r0, #1
 80004b6:	1c0c      	adds	r4, r1, #0
 80004b8:	0a6d      	lsrs	r5, r5, #9
 80004ba:	0e3f      	lsrs	r7, r7, #24
 80004bc:	0fc6      	lsrs	r6, r0, #31
 80004be:	2f00      	cmp	r7, #0
 80004c0:	d100      	bne.n	80004c4 <__aeabi_fdiv+0x1c>
 80004c2:	e070      	b.n	80005a6 <__aeabi_fdiv+0xfe>
 80004c4:	2fff      	cmp	r7, #255	; 0xff
 80004c6:	d100      	bne.n	80004ca <__aeabi_fdiv+0x22>
 80004c8:	e075      	b.n	80005b6 <__aeabi_fdiv+0x10e>
 80004ca:	00eb      	lsls	r3, r5, #3
 80004cc:	2580      	movs	r5, #128	; 0x80
 80004ce:	04ed      	lsls	r5, r5, #19
 80004d0:	431d      	orrs	r5, r3
 80004d2:	2300      	movs	r3, #0
 80004d4:	4699      	mov	r9, r3
 80004d6:	469a      	mov	sl, r3
 80004d8:	3f7f      	subs	r7, #127	; 0x7f
 80004da:	0260      	lsls	r0, r4, #9
 80004dc:	0a43      	lsrs	r3, r0, #9
 80004de:	4698      	mov	r8, r3
 80004e0:	0063      	lsls	r3, r4, #1
 80004e2:	0e1b      	lsrs	r3, r3, #24
 80004e4:	0fe4      	lsrs	r4, r4, #31
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d04e      	beq.n	8000588 <__aeabi_fdiv+0xe0>
 80004ea:	2bff      	cmp	r3, #255	; 0xff
 80004ec:	d046      	beq.n	800057c <__aeabi_fdiv+0xd4>
 80004ee:	4642      	mov	r2, r8
 80004f0:	00d0      	lsls	r0, r2, #3
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	04d2      	lsls	r2, r2, #19
 80004f6:	4302      	orrs	r2, r0
 80004f8:	4690      	mov	r8, r2
 80004fa:	2200      	movs	r2, #0
 80004fc:	3b7f      	subs	r3, #127	; 0x7f
 80004fe:	0031      	movs	r1, r6
 8000500:	1aff      	subs	r7, r7, r3
 8000502:	464b      	mov	r3, r9
 8000504:	4061      	eors	r1, r4
 8000506:	b2c9      	uxtb	r1, r1
 8000508:	4313      	orrs	r3, r2
 800050a:	2b0f      	cmp	r3, #15
 800050c:	d900      	bls.n	8000510 <__aeabi_fdiv+0x68>
 800050e:	e0b5      	b.n	800067c <__aeabi_fdiv+0x1d4>
 8000510:	486e      	ldr	r0, [pc, #440]	; (80006cc <__aeabi_fdiv+0x224>)
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	58c3      	ldr	r3, [r0, r3]
 8000516:	469f      	mov	pc, r3
 8000518:	2300      	movs	r3, #0
 800051a:	4698      	mov	r8, r3
 800051c:	0026      	movs	r6, r4
 800051e:	4645      	mov	r5, r8
 8000520:	4692      	mov	sl, r2
 8000522:	4653      	mov	r3, sl
 8000524:	2b02      	cmp	r3, #2
 8000526:	d100      	bne.n	800052a <__aeabi_fdiv+0x82>
 8000528:	e089      	b.n	800063e <__aeabi_fdiv+0x196>
 800052a:	2b03      	cmp	r3, #3
 800052c:	d100      	bne.n	8000530 <__aeabi_fdiv+0x88>
 800052e:	e09e      	b.n	800066e <__aeabi_fdiv+0x1c6>
 8000530:	2b01      	cmp	r3, #1
 8000532:	d018      	beq.n	8000566 <__aeabi_fdiv+0xbe>
 8000534:	003b      	movs	r3, r7
 8000536:	337f      	adds	r3, #127	; 0x7f
 8000538:	2b00      	cmp	r3, #0
 800053a:	dd69      	ble.n	8000610 <__aeabi_fdiv+0x168>
 800053c:	076a      	lsls	r2, r5, #29
 800053e:	d004      	beq.n	800054a <__aeabi_fdiv+0xa2>
 8000540:	220f      	movs	r2, #15
 8000542:	402a      	ands	r2, r5
 8000544:	2a04      	cmp	r2, #4
 8000546:	d000      	beq.n	800054a <__aeabi_fdiv+0xa2>
 8000548:	3504      	adds	r5, #4
 800054a:	012a      	lsls	r2, r5, #4
 800054c:	d503      	bpl.n	8000556 <__aeabi_fdiv+0xae>
 800054e:	4b60      	ldr	r3, [pc, #384]	; (80006d0 <__aeabi_fdiv+0x228>)
 8000550:	401d      	ands	r5, r3
 8000552:	003b      	movs	r3, r7
 8000554:	3380      	adds	r3, #128	; 0x80
 8000556:	2bfe      	cmp	r3, #254	; 0xfe
 8000558:	dd00      	ble.n	800055c <__aeabi_fdiv+0xb4>
 800055a:	e070      	b.n	800063e <__aeabi_fdiv+0x196>
 800055c:	01ad      	lsls	r5, r5, #6
 800055e:	0a6d      	lsrs	r5, r5, #9
 8000560:	b2d8      	uxtb	r0, r3
 8000562:	e002      	b.n	800056a <__aeabi_fdiv+0xc2>
 8000564:	000e      	movs	r6, r1
 8000566:	2000      	movs	r0, #0
 8000568:	2500      	movs	r5, #0
 800056a:	05c0      	lsls	r0, r0, #23
 800056c:	4328      	orrs	r0, r5
 800056e:	07f6      	lsls	r6, r6, #31
 8000570:	4330      	orrs	r0, r6
 8000572:	bce0      	pop	{r5, r6, r7}
 8000574:	46ba      	mov	sl, r7
 8000576:	46b1      	mov	r9, r6
 8000578:	46a8      	mov	r8, r5
 800057a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800057c:	4643      	mov	r3, r8
 800057e:	2b00      	cmp	r3, #0
 8000580:	d13f      	bne.n	8000602 <__aeabi_fdiv+0x15a>
 8000582:	2202      	movs	r2, #2
 8000584:	3fff      	subs	r7, #255	; 0xff
 8000586:	e003      	b.n	8000590 <__aeabi_fdiv+0xe8>
 8000588:	4643      	mov	r3, r8
 800058a:	2b00      	cmp	r3, #0
 800058c:	d12d      	bne.n	80005ea <__aeabi_fdiv+0x142>
 800058e:	2201      	movs	r2, #1
 8000590:	0031      	movs	r1, r6
 8000592:	464b      	mov	r3, r9
 8000594:	4061      	eors	r1, r4
 8000596:	b2c9      	uxtb	r1, r1
 8000598:	4313      	orrs	r3, r2
 800059a:	2b0f      	cmp	r3, #15
 800059c:	d834      	bhi.n	8000608 <__aeabi_fdiv+0x160>
 800059e:	484d      	ldr	r0, [pc, #308]	; (80006d4 <__aeabi_fdiv+0x22c>)
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	58c3      	ldr	r3, [r0, r3]
 80005a4:	469f      	mov	pc, r3
 80005a6:	2d00      	cmp	r5, #0
 80005a8:	d113      	bne.n	80005d2 <__aeabi_fdiv+0x12a>
 80005aa:	2304      	movs	r3, #4
 80005ac:	4699      	mov	r9, r3
 80005ae:	3b03      	subs	r3, #3
 80005b0:	2700      	movs	r7, #0
 80005b2:	469a      	mov	sl, r3
 80005b4:	e791      	b.n	80004da <__aeabi_fdiv+0x32>
 80005b6:	2d00      	cmp	r5, #0
 80005b8:	d105      	bne.n	80005c6 <__aeabi_fdiv+0x11e>
 80005ba:	2308      	movs	r3, #8
 80005bc:	4699      	mov	r9, r3
 80005be:	3b06      	subs	r3, #6
 80005c0:	27ff      	movs	r7, #255	; 0xff
 80005c2:	469a      	mov	sl, r3
 80005c4:	e789      	b.n	80004da <__aeabi_fdiv+0x32>
 80005c6:	230c      	movs	r3, #12
 80005c8:	4699      	mov	r9, r3
 80005ca:	3b09      	subs	r3, #9
 80005cc:	27ff      	movs	r7, #255	; 0xff
 80005ce:	469a      	mov	sl, r3
 80005d0:	e783      	b.n	80004da <__aeabi_fdiv+0x32>
 80005d2:	0028      	movs	r0, r5
 80005d4:	f001 fef6 	bl	80023c4 <__clzsi2>
 80005d8:	2776      	movs	r7, #118	; 0x76
 80005da:	1f43      	subs	r3, r0, #5
 80005dc:	409d      	lsls	r5, r3
 80005de:	2300      	movs	r3, #0
 80005e0:	427f      	negs	r7, r7
 80005e2:	4699      	mov	r9, r3
 80005e4:	469a      	mov	sl, r3
 80005e6:	1a3f      	subs	r7, r7, r0
 80005e8:	e777      	b.n	80004da <__aeabi_fdiv+0x32>
 80005ea:	4640      	mov	r0, r8
 80005ec:	f001 feea 	bl	80023c4 <__clzsi2>
 80005f0:	4642      	mov	r2, r8
 80005f2:	1f43      	subs	r3, r0, #5
 80005f4:	409a      	lsls	r2, r3
 80005f6:	2376      	movs	r3, #118	; 0x76
 80005f8:	425b      	negs	r3, r3
 80005fa:	4690      	mov	r8, r2
 80005fc:	1a1b      	subs	r3, r3, r0
 80005fe:	2200      	movs	r2, #0
 8000600:	e77d      	b.n	80004fe <__aeabi_fdiv+0x56>
 8000602:	23ff      	movs	r3, #255	; 0xff
 8000604:	2203      	movs	r2, #3
 8000606:	e77a      	b.n	80004fe <__aeabi_fdiv+0x56>
 8000608:	000e      	movs	r6, r1
 800060a:	20ff      	movs	r0, #255	; 0xff
 800060c:	2500      	movs	r5, #0
 800060e:	e7ac      	b.n	800056a <__aeabi_fdiv+0xc2>
 8000610:	2001      	movs	r0, #1
 8000612:	1ac0      	subs	r0, r0, r3
 8000614:	281b      	cmp	r0, #27
 8000616:	dca6      	bgt.n	8000566 <__aeabi_fdiv+0xbe>
 8000618:	379e      	adds	r7, #158	; 0x9e
 800061a:	002a      	movs	r2, r5
 800061c:	40bd      	lsls	r5, r7
 800061e:	40c2      	lsrs	r2, r0
 8000620:	1e6b      	subs	r3, r5, #1
 8000622:	419d      	sbcs	r5, r3
 8000624:	4315      	orrs	r5, r2
 8000626:	076b      	lsls	r3, r5, #29
 8000628:	d004      	beq.n	8000634 <__aeabi_fdiv+0x18c>
 800062a:	230f      	movs	r3, #15
 800062c:	402b      	ands	r3, r5
 800062e:	2b04      	cmp	r3, #4
 8000630:	d000      	beq.n	8000634 <__aeabi_fdiv+0x18c>
 8000632:	3504      	adds	r5, #4
 8000634:	016b      	lsls	r3, r5, #5
 8000636:	d544      	bpl.n	80006c2 <__aeabi_fdiv+0x21a>
 8000638:	2001      	movs	r0, #1
 800063a:	2500      	movs	r5, #0
 800063c:	e795      	b.n	800056a <__aeabi_fdiv+0xc2>
 800063e:	20ff      	movs	r0, #255	; 0xff
 8000640:	2500      	movs	r5, #0
 8000642:	e792      	b.n	800056a <__aeabi_fdiv+0xc2>
 8000644:	2580      	movs	r5, #128	; 0x80
 8000646:	2600      	movs	r6, #0
 8000648:	20ff      	movs	r0, #255	; 0xff
 800064a:	03ed      	lsls	r5, r5, #15
 800064c:	e78d      	b.n	800056a <__aeabi_fdiv+0xc2>
 800064e:	2300      	movs	r3, #0
 8000650:	4698      	mov	r8, r3
 8000652:	2080      	movs	r0, #128	; 0x80
 8000654:	03c0      	lsls	r0, r0, #15
 8000656:	4205      	tst	r5, r0
 8000658:	d009      	beq.n	800066e <__aeabi_fdiv+0x1c6>
 800065a:	4643      	mov	r3, r8
 800065c:	4203      	tst	r3, r0
 800065e:	d106      	bne.n	800066e <__aeabi_fdiv+0x1c6>
 8000660:	4645      	mov	r5, r8
 8000662:	4305      	orrs	r5, r0
 8000664:	026d      	lsls	r5, r5, #9
 8000666:	0026      	movs	r6, r4
 8000668:	20ff      	movs	r0, #255	; 0xff
 800066a:	0a6d      	lsrs	r5, r5, #9
 800066c:	e77d      	b.n	800056a <__aeabi_fdiv+0xc2>
 800066e:	2080      	movs	r0, #128	; 0x80
 8000670:	03c0      	lsls	r0, r0, #15
 8000672:	4305      	orrs	r5, r0
 8000674:	026d      	lsls	r5, r5, #9
 8000676:	20ff      	movs	r0, #255	; 0xff
 8000678:	0a6d      	lsrs	r5, r5, #9
 800067a:	e776      	b.n	800056a <__aeabi_fdiv+0xc2>
 800067c:	4642      	mov	r2, r8
 800067e:	016b      	lsls	r3, r5, #5
 8000680:	0150      	lsls	r0, r2, #5
 8000682:	4283      	cmp	r3, r0
 8000684:	d219      	bcs.n	80006ba <__aeabi_fdiv+0x212>
 8000686:	221b      	movs	r2, #27
 8000688:	2500      	movs	r5, #0
 800068a:	3f01      	subs	r7, #1
 800068c:	2601      	movs	r6, #1
 800068e:	001c      	movs	r4, r3
 8000690:	006d      	lsls	r5, r5, #1
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	2c00      	cmp	r4, #0
 8000696:	db01      	blt.n	800069c <__aeabi_fdiv+0x1f4>
 8000698:	4298      	cmp	r0, r3
 800069a:	d801      	bhi.n	80006a0 <__aeabi_fdiv+0x1f8>
 800069c:	1a1b      	subs	r3, r3, r0
 800069e:	4335      	orrs	r5, r6
 80006a0:	3a01      	subs	r2, #1
 80006a2:	2a00      	cmp	r2, #0
 80006a4:	d1f3      	bne.n	800068e <__aeabi_fdiv+0x1e6>
 80006a6:	1e5a      	subs	r2, r3, #1
 80006a8:	4193      	sbcs	r3, r2
 80006aa:	431d      	orrs	r5, r3
 80006ac:	003b      	movs	r3, r7
 80006ae:	337f      	adds	r3, #127	; 0x7f
 80006b0:	000e      	movs	r6, r1
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	dd00      	ble.n	80006b8 <__aeabi_fdiv+0x210>
 80006b6:	e741      	b.n	800053c <__aeabi_fdiv+0x94>
 80006b8:	e7aa      	b.n	8000610 <__aeabi_fdiv+0x168>
 80006ba:	221a      	movs	r2, #26
 80006bc:	2501      	movs	r5, #1
 80006be:	1a1b      	subs	r3, r3, r0
 80006c0:	e7e4      	b.n	800068c <__aeabi_fdiv+0x1e4>
 80006c2:	01ad      	lsls	r5, r5, #6
 80006c4:	2000      	movs	r0, #0
 80006c6:	0a6d      	lsrs	r5, r5, #9
 80006c8:	e74f      	b.n	800056a <__aeabi_fdiv+0xc2>
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	08008a30 	.word	0x08008a30
 80006d0:	f7ffffff 	.word	0xf7ffffff
 80006d4:	08008a70 	.word	0x08008a70

080006d8 <__aeabi_i2f>:
 80006d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006da:	2800      	cmp	r0, #0
 80006dc:	d013      	beq.n	8000706 <__aeabi_i2f+0x2e>
 80006de:	17c3      	asrs	r3, r0, #31
 80006e0:	18c6      	adds	r6, r0, r3
 80006e2:	405e      	eors	r6, r3
 80006e4:	0fc4      	lsrs	r4, r0, #31
 80006e6:	0030      	movs	r0, r6
 80006e8:	f001 fe6c 	bl	80023c4 <__clzsi2>
 80006ec:	239e      	movs	r3, #158	; 0x9e
 80006ee:	0005      	movs	r5, r0
 80006f0:	1a1b      	subs	r3, r3, r0
 80006f2:	2b96      	cmp	r3, #150	; 0x96
 80006f4:	dc0f      	bgt.n	8000716 <__aeabi_i2f+0x3e>
 80006f6:	2808      	cmp	r0, #8
 80006f8:	dd01      	ble.n	80006fe <__aeabi_i2f+0x26>
 80006fa:	3d08      	subs	r5, #8
 80006fc:	40ae      	lsls	r6, r5
 80006fe:	0276      	lsls	r6, r6, #9
 8000700:	0a76      	lsrs	r6, r6, #9
 8000702:	b2d8      	uxtb	r0, r3
 8000704:	e002      	b.n	800070c <__aeabi_i2f+0x34>
 8000706:	2400      	movs	r4, #0
 8000708:	2000      	movs	r0, #0
 800070a:	2600      	movs	r6, #0
 800070c:	05c0      	lsls	r0, r0, #23
 800070e:	4330      	orrs	r0, r6
 8000710:	07e4      	lsls	r4, r4, #31
 8000712:	4320      	orrs	r0, r4
 8000714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000716:	2b99      	cmp	r3, #153	; 0x99
 8000718:	dd0c      	ble.n	8000734 <__aeabi_i2f+0x5c>
 800071a:	2205      	movs	r2, #5
 800071c:	0031      	movs	r1, r6
 800071e:	1a12      	subs	r2, r2, r0
 8000720:	40d1      	lsrs	r1, r2
 8000722:	000a      	movs	r2, r1
 8000724:	0001      	movs	r1, r0
 8000726:	0030      	movs	r0, r6
 8000728:	311b      	adds	r1, #27
 800072a:	4088      	lsls	r0, r1
 800072c:	1e41      	subs	r1, r0, #1
 800072e:	4188      	sbcs	r0, r1
 8000730:	4302      	orrs	r2, r0
 8000732:	0016      	movs	r6, r2
 8000734:	2d05      	cmp	r5, #5
 8000736:	dc12      	bgt.n	800075e <__aeabi_i2f+0x86>
 8000738:	0031      	movs	r1, r6
 800073a:	4f0d      	ldr	r7, [pc, #52]	; (8000770 <__aeabi_i2f+0x98>)
 800073c:	4039      	ands	r1, r7
 800073e:	0772      	lsls	r2, r6, #29
 8000740:	d009      	beq.n	8000756 <__aeabi_i2f+0x7e>
 8000742:	200f      	movs	r0, #15
 8000744:	4030      	ands	r0, r6
 8000746:	2804      	cmp	r0, #4
 8000748:	d005      	beq.n	8000756 <__aeabi_i2f+0x7e>
 800074a:	3104      	adds	r1, #4
 800074c:	014a      	lsls	r2, r1, #5
 800074e:	d502      	bpl.n	8000756 <__aeabi_i2f+0x7e>
 8000750:	239f      	movs	r3, #159	; 0x9f
 8000752:	4039      	ands	r1, r7
 8000754:	1b5b      	subs	r3, r3, r5
 8000756:	0189      	lsls	r1, r1, #6
 8000758:	0a4e      	lsrs	r6, r1, #9
 800075a:	b2d8      	uxtb	r0, r3
 800075c:	e7d6      	b.n	800070c <__aeabi_i2f+0x34>
 800075e:	1f6a      	subs	r2, r5, #5
 8000760:	4096      	lsls	r6, r2
 8000762:	0031      	movs	r1, r6
 8000764:	4f02      	ldr	r7, [pc, #8]	; (8000770 <__aeabi_i2f+0x98>)
 8000766:	4039      	ands	r1, r7
 8000768:	0772      	lsls	r2, r6, #29
 800076a:	d0f4      	beq.n	8000756 <__aeabi_i2f+0x7e>
 800076c:	e7e9      	b.n	8000742 <__aeabi_i2f+0x6a>
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	fbffffff 	.word	0xfbffffff

08000774 <__aeabi_ui2f>:
 8000774:	b570      	push	{r4, r5, r6, lr}
 8000776:	1e05      	subs	r5, r0, #0
 8000778:	d00e      	beq.n	8000798 <__aeabi_ui2f+0x24>
 800077a:	f001 fe23 	bl	80023c4 <__clzsi2>
 800077e:	239e      	movs	r3, #158	; 0x9e
 8000780:	0004      	movs	r4, r0
 8000782:	1a1b      	subs	r3, r3, r0
 8000784:	2b96      	cmp	r3, #150	; 0x96
 8000786:	dc0c      	bgt.n	80007a2 <__aeabi_ui2f+0x2e>
 8000788:	2808      	cmp	r0, #8
 800078a:	dd01      	ble.n	8000790 <__aeabi_ui2f+0x1c>
 800078c:	3c08      	subs	r4, #8
 800078e:	40a5      	lsls	r5, r4
 8000790:	026d      	lsls	r5, r5, #9
 8000792:	0a6d      	lsrs	r5, r5, #9
 8000794:	b2d8      	uxtb	r0, r3
 8000796:	e001      	b.n	800079c <__aeabi_ui2f+0x28>
 8000798:	2000      	movs	r0, #0
 800079a:	2500      	movs	r5, #0
 800079c:	05c0      	lsls	r0, r0, #23
 800079e:	4328      	orrs	r0, r5
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	2b99      	cmp	r3, #153	; 0x99
 80007a4:	dd09      	ble.n	80007ba <__aeabi_ui2f+0x46>
 80007a6:	0002      	movs	r2, r0
 80007a8:	0029      	movs	r1, r5
 80007aa:	321b      	adds	r2, #27
 80007ac:	4091      	lsls	r1, r2
 80007ae:	1e4a      	subs	r2, r1, #1
 80007b0:	4191      	sbcs	r1, r2
 80007b2:	2205      	movs	r2, #5
 80007b4:	1a12      	subs	r2, r2, r0
 80007b6:	40d5      	lsrs	r5, r2
 80007b8:	430d      	orrs	r5, r1
 80007ba:	2c05      	cmp	r4, #5
 80007bc:	dc12      	bgt.n	80007e4 <__aeabi_ui2f+0x70>
 80007be:	0029      	movs	r1, r5
 80007c0:	4e0c      	ldr	r6, [pc, #48]	; (80007f4 <__aeabi_ui2f+0x80>)
 80007c2:	4031      	ands	r1, r6
 80007c4:	076a      	lsls	r2, r5, #29
 80007c6:	d009      	beq.n	80007dc <__aeabi_ui2f+0x68>
 80007c8:	200f      	movs	r0, #15
 80007ca:	4028      	ands	r0, r5
 80007cc:	2804      	cmp	r0, #4
 80007ce:	d005      	beq.n	80007dc <__aeabi_ui2f+0x68>
 80007d0:	3104      	adds	r1, #4
 80007d2:	014a      	lsls	r2, r1, #5
 80007d4:	d502      	bpl.n	80007dc <__aeabi_ui2f+0x68>
 80007d6:	239f      	movs	r3, #159	; 0x9f
 80007d8:	4031      	ands	r1, r6
 80007da:	1b1b      	subs	r3, r3, r4
 80007dc:	0189      	lsls	r1, r1, #6
 80007de:	0a4d      	lsrs	r5, r1, #9
 80007e0:	b2d8      	uxtb	r0, r3
 80007e2:	e7db      	b.n	800079c <__aeabi_ui2f+0x28>
 80007e4:	1f62      	subs	r2, r4, #5
 80007e6:	4095      	lsls	r5, r2
 80007e8:	0029      	movs	r1, r5
 80007ea:	4e02      	ldr	r6, [pc, #8]	; (80007f4 <__aeabi_ui2f+0x80>)
 80007ec:	4031      	ands	r1, r6
 80007ee:	076a      	lsls	r2, r5, #29
 80007f0:	d0f4      	beq.n	80007dc <__aeabi_ui2f+0x68>
 80007f2:	e7e9      	b.n	80007c8 <__aeabi_ui2f+0x54>
 80007f4:	fbffffff 	.word	0xfbffffff

080007f8 <__aeabi_dadd>:
 80007f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007fa:	464f      	mov	r7, r9
 80007fc:	4646      	mov	r6, r8
 80007fe:	46d6      	mov	lr, sl
 8000800:	000d      	movs	r5, r1
 8000802:	0004      	movs	r4, r0
 8000804:	b5c0      	push	{r6, r7, lr}
 8000806:	001f      	movs	r7, r3
 8000808:	0011      	movs	r1, r2
 800080a:	0328      	lsls	r0, r5, #12
 800080c:	0f62      	lsrs	r2, r4, #29
 800080e:	0a40      	lsrs	r0, r0, #9
 8000810:	4310      	orrs	r0, r2
 8000812:	007a      	lsls	r2, r7, #1
 8000814:	0d52      	lsrs	r2, r2, #21
 8000816:	00e3      	lsls	r3, r4, #3
 8000818:	033c      	lsls	r4, r7, #12
 800081a:	4691      	mov	r9, r2
 800081c:	0a64      	lsrs	r4, r4, #9
 800081e:	0ffa      	lsrs	r2, r7, #31
 8000820:	0f4f      	lsrs	r7, r1, #29
 8000822:	006e      	lsls	r6, r5, #1
 8000824:	4327      	orrs	r7, r4
 8000826:	4692      	mov	sl, r2
 8000828:	46b8      	mov	r8, r7
 800082a:	0d76      	lsrs	r6, r6, #21
 800082c:	0fed      	lsrs	r5, r5, #31
 800082e:	00c9      	lsls	r1, r1, #3
 8000830:	4295      	cmp	r5, r2
 8000832:	d100      	bne.n	8000836 <__aeabi_dadd+0x3e>
 8000834:	e099      	b.n	800096a <__aeabi_dadd+0x172>
 8000836:	464c      	mov	r4, r9
 8000838:	1b34      	subs	r4, r6, r4
 800083a:	46a4      	mov	ip, r4
 800083c:	2c00      	cmp	r4, #0
 800083e:	dc00      	bgt.n	8000842 <__aeabi_dadd+0x4a>
 8000840:	e07c      	b.n	800093c <__aeabi_dadd+0x144>
 8000842:	464a      	mov	r2, r9
 8000844:	2a00      	cmp	r2, #0
 8000846:	d100      	bne.n	800084a <__aeabi_dadd+0x52>
 8000848:	e0b8      	b.n	80009bc <__aeabi_dadd+0x1c4>
 800084a:	4ac5      	ldr	r2, [pc, #788]	; (8000b60 <__aeabi_dadd+0x368>)
 800084c:	4296      	cmp	r6, r2
 800084e:	d100      	bne.n	8000852 <__aeabi_dadd+0x5a>
 8000850:	e11c      	b.n	8000a8c <__aeabi_dadd+0x294>
 8000852:	2280      	movs	r2, #128	; 0x80
 8000854:	003c      	movs	r4, r7
 8000856:	0412      	lsls	r2, r2, #16
 8000858:	4314      	orrs	r4, r2
 800085a:	46a0      	mov	r8, r4
 800085c:	4662      	mov	r2, ip
 800085e:	2a38      	cmp	r2, #56	; 0x38
 8000860:	dd00      	ble.n	8000864 <__aeabi_dadd+0x6c>
 8000862:	e161      	b.n	8000b28 <__aeabi_dadd+0x330>
 8000864:	2a1f      	cmp	r2, #31
 8000866:	dd00      	ble.n	800086a <__aeabi_dadd+0x72>
 8000868:	e1cc      	b.n	8000c04 <__aeabi_dadd+0x40c>
 800086a:	4664      	mov	r4, ip
 800086c:	2220      	movs	r2, #32
 800086e:	1b12      	subs	r2, r2, r4
 8000870:	4644      	mov	r4, r8
 8000872:	4094      	lsls	r4, r2
 8000874:	000f      	movs	r7, r1
 8000876:	46a1      	mov	r9, r4
 8000878:	4664      	mov	r4, ip
 800087a:	4091      	lsls	r1, r2
 800087c:	40e7      	lsrs	r7, r4
 800087e:	464c      	mov	r4, r9
 8000880:	1e4a      	subs	r2, r1, #1
 8000882:	4191      	sbcs	r1, r2
 8000884:	433c      	orrs	r4, r7
 8000886:	4642      	mov	r2, r8
 8000888:	4321      	orrs	r1, r4
 800088a:	4664      	mov	r4, ip
 800088c:	40e2      	lsrs	r2, r4
 800088e:	1a80      	subs	r0, r0, r2
 8000890:	1a5c      	subs	r4, r3, r1
 8000892:	42a3      	cmp	r3, r4
 8000894:	419b      	sbcs	r3, r3
 8000896:	425f      	negs	r7, r3
 8000898:	1bc7      	subs	r7, r0, r7
 800089a:	023b      	lsls	r3, r7, #8
 800089c:	d400      	bmi.n	80008a0 <__aeabi_dadd+0xa8>
 800089e:	e0d0      	b.n	8000a42 <__aeabi_dadd+0x24a>
 80008a0:	027f      	lsls	r7, r7, #9
 80008a2:	0a7f      	lsrs	r7, r7, #9
 80008a4:	2f00      	cmp	r7, #0
 80008a6:	d100      	bne.n	80008aa <__aeabi_dadd+0xb2>
 80008a8:	e0ff      	b.n	8000aaa <__aeabi_dadd+0x2b2>
 80008aa:	0038      	movs	r0, r7
 80008ac:	f001 fd8a 	bl	80023c4 <__clzsi2>
 80008b0:	0001      	movs	r1, r0
 80008b2:	3908      	subs	r1, #8
 80008b4:	2320      	movs	r3, #32
 80008b6:	0022      	movs	r2, r4
 80008b8:	1a5b      	subs	r3, r3, r1
 80008ba:	408f      	lsls	r7, r1
 80008bc:	40da      	lsrs	r2, r3
 80008be:	408c      	lsls	r4, r1
 80008c0:	4317      	orrs	r7, r2
 80008c2:	42b1      	cmp	r1, r6
 80008c4:	da00      	bge.n	80008c8 <__aeabi_dadd+0xd0>
 80008c6:	e0ff      	b.n	8000ac8 <__aeabi_dadd+0x2d0>
 80008c8:	1b89      	subs	r1, r1, r6
 80008ca:	1c4b      	adds	r3, r1, #1
 80008cc:	2b1f      	cmp	r3, #31
 80008ce:	dd00      	ble.n	80008d2 <__aeabi_dadd+0xda>
 80008d0:	e0a8      	b.n	8000a24 <__aeabi_dadd+0x22c>
 80008d2:	2220      	movs	r2, #32
 80008d4:	0039      	movs	r1, r7
 80008d6:	1ad2      	subs	r2, r2, r3
 80008d8:	0020      	movs	r0, r4
 80008da:	4094      	lsls	r4, r2
 80008dc:	4091      	lsls	r1, r2
 80008de:	40d8      	lsrs	r0, r3
 80008e0:	1e62      	subs	r2, r4, #1
 80008e2:	4194      	sbcs	r4, r2
 80008e4:	40df      	lsrs	r7, r3
 80008e6:	2600      	movs	r6, #0
 80008e8:	4301      	orrs	r1, r0
 80008ea:	430c      	orrs	r4, r1
 80008ec:	0763      	lsls	r3, r4, #29
 80008ee:	d009      	beq.n	8000904 <__aeabi_dadd+0x10c>
 80008f0:	230f      	movs	r3, #15
 80008f2:	4023      	ands	r3, r4
 80008f4:	2b04      	cmp	r3, #4
 80008f6:	d005      	beq.n	8000904 <__aeabi_dadd+0x10c>
 80008f8:	1d23      	adds	r3, r4, #4
 80008fa:	42a3      	cmp	r3, r4
 80008fc:	41a4      	sbcs	r4, r4
 80008fe:	4264      	negs	r4, r4
 8000900:	193f      	adds	r7, r7, r4
 8000902:	001c      	movs	r4, r3
 8000904:	023b      	lsls	r3, r7, #8
 8000906:	d400      	bmi.n	800090a <__aeabi_dadd+0x112>
 8000908:	e09e      	b.n	8000a48 <__aeabi_dadd+0x250>
 800090a:	4b95      	ldr	r3, [pc, #596]	; (8000b60 <__aeabi_dadd+0x368>)
 800090c:	3601      	adds	r6, #1
 800090e:	429e      	cmp	r6, r3
 8000910:	d100      	bne.n	8000914 <__aeabi_dadd+0x11c>
 8000912:	e0b7      	b.n	8000a84 <__aeabi_dadd+0x28c>
 8000914:	4a93      	ldr	r2, [pc, #588]	; (8000b64 <__aeabi_dadd+0x36c>)
 8000916:	08e4      	lsrs	r4, r4, #3
 8000918:	4017      	ands	r7, r2
 800091a:	077b      	lsls	r3, r7, #29
 800091c:	0571      	lsls	r1, r6, #21
 800091e:	027f      	lsls	r7, r7, #9
 8000920:	4323      	orrs	r3, r4
 8000922:	0b3f      	lsrs	r7, r7, #12
 8000924:	0d4a      	lsrs	r2, r1, #21
 8000926:	0512      	lsls	r2, r2, #20
 8000928:	433a      	orrs	r2, r7
 800092a:	07ed      	lsls	r5, r5, #31
 800092c:	432a      	orrs	r2, r5
 800092e:	0018      	movs	r0, r3
 8000930:	0011      	movs	r1, r2
 8000932:	bce0      	pop	{r5, r6, r7}
 8000934:	46ba      	mov	sl, r7
 8000936:	46b1      	mov	r9, r6
 8000938:	46a8      	mov	r8, r5
 800093a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800093c:	2c00      	cmp	r4, #0
 800093e:	d04b      	beq.n	80009d8 <__aeabi_dadd+0x1e0>
 8000940:	464c      	mov	r4, r9
 8000942:	1ba4      	subs	r4, r4, r6
 8000944:	46a4      	mov	ip, r4
 8000946:	2e00      	cmp	r6, #0
 8000948:	d000      	beq.n	800094c <__aeabi_dadd+0x154>
 800094a:	e123      	b.n	8000b94 <__aeabi_dadd+0x39c>
 800094c:	0004      	movs	r4, r0
 800094e:	431c      	orrs	r4, r3
 8000950:	d100      	bne.n	8000954 <__aeabi_dadd+0x15c>
 8000952:	e1af      	b.n	8000cb4 <__aeabi_dadd+0x4bc>
 8000954:	4662      	mov	r2, ip
 8000956:	1e54      	subs	r4, r2, #1
 8000958:	2a01      	cmp	r2, #1
 800095a:	d100      	bne.n	800095e <__aeabi_dadd+0x166>
 800095c:	e215      	b.n	8000d8a <__aeabi_dadd+0x592>
 800095e:	4d80      	ldr	r5, [pc, #512]	; (8000b60 <__aeabi_dadd+0x368>)
 8000960:	45ac      	cmp	ip, r5
 8000962:	d100      	bne.n	8000966 <__aeabi_dadd+0x16e>
 8000964:	e1c8      	b.n	8000cf8 <__aeabi_dadd+0x500>
 8000966:	46a4      	mov	ip, r4
 8000968:	e11b      	b.n	8000ba2 <__aeabi_dadd+0x3aa>
 800096a:	464a      	mov	r2, r9
 800096c:	1ab2      	subs	r2, r6, r2
 800096e:	4694      	mov	ip, r2
 8000970:	2a00      	cmp	r2, #0
 8000972:	dc00      	bgt.n	8000976 <__aeabi_dadd+0x17e>
 8000974:	e0ac      	b.n	8000ad0 <__aeabi_dadd+0x2d8>
 8000976:	464a      	mov	r2, r9
 8000978:	2a00      	cmp	r2, #0
 800097a:	d043      	beq.n	8000a04 <__aeabi_dadd+0x20c>
 800097c:	4a78      	ldr	r2, [pc, #480]	; (8000b60 <__aeabi_dadd+0x368>)
 800097e:	4296      	cmp	r6, r2
 8000980:	d100      	bne.n	8000984 <__aeabi_dadd+0x18c>
 8000982:	e1af      	b.n	8000ce4 <__aeabi_dadd+0x4ec>
 8000984:	2280      	movs	r2, #128	; 0x80
 8000986:	003c      	movs	r4, r7
 8000988:	0412      	lsls	r2, r2, #16
 800098a:	4314      	orrs	r4, r2
 800098c:	46a0      	mov	r8, r4
 800098e:	4662      	mov	r2, ip
 8000990:	2a38      	cmp	r2, #56	; 0x38
 8000992:	dc67      	bgt.n	8000a64 <__aeabi_dadd+0x26c>
 8000994:	2a1f      	cmp	r2, #31
 8000996:	dc00      	bgt.n	800099a <__aeabi_dadd+0x1a2>
 8000998:	e15f      	b.n	8000c5a <__aeabi_dadd+0x462>
 800099a:	4647      	mov	r7, r8
 800099c:	3a20      	subs	r2, #32
 800099e:	40d7      	lsrs	r7, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	2a20      	cmp	r2, #32
 80009a4:	d005      	beq.n	80009b2 <__aeabi_dadd+0x1ba>
 80009a6:	4664      	mov	r4, ip
 80009a8:	2240      	movs	r2, #64	; 0x40
 80009aa:	1b12      	subs	r2, r2, r4
 80009ac:	4644      	mov	r4, r8
 80009ae:	4094      	lsls	r4, r2
 80009b0:	4321      	orrs	r1, r4
 80009b2:	1e4a      	subs	r2, r1, #1
 80009b4:	4191      	sbcs	r1, r2
 80009b6:	000c      	movs	r4, r1
 80009b8:	433c      	orrs	r4, r7
 80009ba:	e057      	b.n	8000a6c <__aeabi_dadd+0x274>
 80009bc:	003a      	movs	r2, r7
 80009be:	430a      	orrs	r2, r1
 80009c0:	d100      	bne.n	80009c4 <__aeabi_dadd+0x1cc>
 80009c2:	e105      	b.n	8000bd0 <__aeabi_dadd+0x3d8>
 80009c4:	0022      	movs	r2, r4
 80009c6:	3a01      	subs	r2, #1
 80009c8:	2c01      	cmp	r4, #1
 80009ca:	d100      	bne.n	80009ce <__aeabi_dadd+0x1d6>
 80009cc:	e182      	b.n	8000cd4 <__aeabi_dadd+0x4dc>
 80009ce:	4c64      	ldr	r4, [pc, #400]	; (8000b60 <__aeabi_dadd+0x368>)
 80009d0:	45a4      	cmp	ip, r4
 80009d2:	d05b      	beq.n	8000a8c <__aeabi_dadd+0x294>
 80009d4:	4694      	mov	ip, r2
 80009d6:	e741      	b.n	800085c <__aeabi_dadd+0x64>
 80009d8:	4c63      	ldr	r4, [pc, #396]	; (8000b68 <__aeabi_dadd+0x370>)
 80009da:	1c77      	adds	r7, r6, #1
 80009dc:	4227      	tst	r7, r4
 80009de:	d000      	beq.n	80009e2 <__aeabi_dadd+0x1ea>
 80009e0:	e0c4      	b.n	8000b6c <__aeabi_dadd+0x374>
 80009e2:	0004      	movs	r4, r0
 80009e4:	431c      	orrs	r4, r3
 80009e6:	2e00      	cmp	r6, #0
 80009e8:	d000      	beq.n	80009ec <__aeabi_dadd+0x1f4>
 80009ea:	e169      	b.n	8000cc0 <__aeabi_dadd+0x4c8>
 80009ec:	2c00      	cmp	r4, #0
 80009ee:	d100      	bne.n	80009f2 <__aeabi_dadd+0x1fa>
 80009f0:	e1bf      	b.n	8000d72 <__aeabi_dadd+0x57a>
 80009f2:	4644      	mov	r4, r8
 80009f4:	430c      	orrs	r4, r1
 80009f6:	d000      	beq.n	80009fa <__aeabi_dadd+0x202>
 80009f8:	e1d0      	b.n	8000d9c <__aeabi_dadd+0x5a4>
 80009fa:	0742      	lsls	r2, r0, #29
 80009fc:	08db      	lsrs	r3, r3, #3
 80009fe:	4313      	orrs	r3, r2
 8000a00:	08c0      	lsrs	r0, r0, #3
 8000a02:	e029      	b.n	8000a58 <__aeabi_dadd+0x260>
 8000a04:	003a      	movs	r2, r7
 8000a06:	430a      	orrs	r2, r1
 8000a08:	d100      	bne.n	8000a0c <__aeabi_dadd+0x214>
 8000a0a:	e170      	b.n	8000cee <__aeabi_dadd+0x4f6>
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	4664      	mov	r4, ip
 8000a10:	3a01      	subs	r2, #1
 8000a12:	2c01      	cmp	r4, #1
 8000a14:	d100      	bne.n	8000a18 <__aeabi_dadd+0x220>
 8000a16:	e0e0      	b.n	8000bda <__aeabi_dadd+0x3e2>
 8000a18:	4c51      	ldr	r4, [pc, #324]	; (8000b60 <__aeabi_dadd+0x368>)
 8000a1a:	45a4      	cmp	ip, r4
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_dadd+0x228>
 8000a1e:	e161      	b.n	8000ce4 <__aeabi_dadd+0x4ec>
 8000a20:	4694      	mov	ip, r2
 8000a22:	e7b4      	b.n	800098e <__aeabi_dadd+0x196>
 8000a24:	003a      	movs	r2, r7
 8000a26:	391f      	subs	r1, #31
 8000a28:	40ca      	lsrs	r2, r1
 8000a2a:	0011      	movs	r1, r2
 8000a2c:	2b20      	cmp	r3, #32
 8000a2e:	d003      	beq.n	8000a38 <__aeabi_dadd+0x240>
 8000a30:	2240      	movs	r2, #64	; 0x40
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	409f      	lsls	r7, r3
 8000a36:	433c      	orrs	r4, r7
 8000a38:	1e63      	subs	r3, r4, #1
 8000a3a:	419c      	sbcs	r4, r3
 8000a3c:	2700      	movs	r7, #0
 8000a3e:	2600      	movs	r6, #0
 8000a40:	430c      	orrs	r4, r1
 8000a42:	0763      	lsls	r3, r4, #29
 8000a44:	d000      	beq.n	8000a48 <__aeabi_dadd+0x250>
 8000a46:	e753      	b.n	80008f0 <__aeabi_dadd+0xf8>
 8000a48:	46b4      	mov	ip, r6
 8000a4a:	08e4      	lsrs	r4, r4, #3
 8000a4c:	077b      	lsls	r3, r7, #29
 8000a4e:	4323      	orrs	r3, r4
 8000a50:	08f8      	lsrs	r0, r7, #3
 8000a52:	4a43      	ldr	r2, [pc, #268]	; (8000b60 <__aeabi_dadd+0x368>)
 8000a54:	4594      	cmp	ip, r2
 8000a56:	d01d      	beq.n	8000a94 <__aeabi_dadd+0x29c>
 8000a58:	4662      	mov	r2, ip
 8000a5a:	0307      	lsls	r7, r0, #12
 8000a5c:	0552      	lsls	r2, r2, #21
 8000a5e:	0b3f      	lsrs	r7, r7, #12
 8000a60:	0d52      	lsrs	r2, r2, #21
 8000a62:	e760      	b.n	8000926 <__aeabi_dadd+0x12e>
 8000a64:	4644      	mov	r4, r8
 8000a66:	430c      	orrs	r4, r1
 8000a68:	1e62      	subs	r2, r4, #1
 8000a6a:	4194      	sbcs	r4, r2
 8000a6c:	18e4      	adds	r4, r4, r3
 8000a6e:	429c      	cmp	r4, r3
 8000a70:	419b      	sbcs	r3, r3
 8000a72:	425f      	negs	r7, r3
 8000a74:	183f      	adds	r7, r7, r0
 8000a76:	023b      	lsls	r3, r7, #8
 8000a78:	d5e3      	bpl.n	8000a42 <__aeabi_dadd+0x24a>
 8000a7a:	4b39      	ldr	r3, [pc, #228]	; (8000b60 <__aeabi_dadd+0x368>)
 8000a7c:	3601      	adds	r6, #1
 8000a7e:	429e      	cmp	r6, r3
 8000a80:	d000      	beq.n	8000a84 <__aeabi_dadd+0x28c>
 8000a82:	e0b5      	b.n	8000bf0 <__aeabi_dadd+0x3f8>
 8000a84:	0032      	movs	r2, r6
 8000a86:	2700      	movs	r7, #0
 8000a88:	2300      	movs	r3, #0
 8000a8a:	e74c      	b.n	8000926 <__aeabi_dadd+0x12e>
 8000a8c:	0742      	lsls	r2, r0, #29
 8000a8e:	08db      	lsrs	r3, r3, #3
 8000a90:	4313      	orrs	r3, r2
 8000a92:	08c0      	lsrs	r0, r0, #3
 8000a94:	001a      	movs	r2, r3
 8000a96:	4302      	orrs	r2, r0
 8000a98:	d100      	bne.n	8000a9c <__aeabi_dadd+0x2a4>
 8000a9a:	e1e1      	b.n	8000e60 <__aeabi_dadd+0x668>
 8000a9c:	2780      	movs	r7, #128	; 0x80
 8000a9e:	033f      	lsls	r7, r7, #12
 8000aa0:	4307      	orrs	r7, r0
 8000aa2:	033f      	lsls	r7, r7, #12
 8000aa4:	4a2e      	ldr	r2, [pc, #184]	; (8000b60 <__aeabi_dadd+0x368>)
 8000aa6:	0b3f      	lsrs	r7, r7, #12
 8000aa8:	e73d      	b.n	8000926 <__aeabi_dadd+0x12e>
 8000aaa:	0020      	movs	r0, r4
 8000aac:	f001 fc8a 	bl	80023c4 <__clzsi2>
 8000ab0:	0001      	movs	r1, r0
 8000ab2:	3118      	adds	r1, #24
 8000ab4:	291f      	cmp	r1, #31
 8000ab6:	dc00      	bgt.n	8000aba <__aeabi_dadd+0x2c2>
 8000ab8:	e6fc      	b.n	80008b4 <__aeabi_dadd+0xbc>
 8000aba:	3808      	subs	r0, #8
 8000abc:	4084      	lsls	r4, r0
 8000abe:	0027      	movs	r7, r4
 8000ac0:	2400      	movs	r4, #0
 8000ac2:	42b1      	cmp	r1, r6
 8000ac4:	db00      	blt.n	8000ac8 <__aeabi_dadd+0x2d0>
 8000ac6:	e6ff      	b.n	80008c8 <__aeabi_dadd+0xd0>
 8000ac8:	4a26      	ldr	r2, [pc, #152]	; (8000b64 <__aeabi_dadd+0x36c>)
 8000aca:	1a76      	subs	r6, r6, r1
 8000acc:	4017      	ands	r7, r2
 8000ace:	e70d      	b.n	80008ec <__aeabi_dadd+0xf4>
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	d02f      	beq.n	8000b34 <__aeabi_dadd+0x33c>
 8000ad4:	464a      	mov	r2, r9
 8000ad6:	1b92      	subs	r2, r2, r6
 8000ad8:	4694      	mov	ip, r2
 8000ada:	2e00      	cmp	r6, #0
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_dadd+0x2e8>
 8000ade:	e0ad      	b.n	8000c3c <__aeabi_dadd+0x444>
 8000ae0:	4a1f      	ldr	r2, [pc, #124]	; (8000b60 <__aeabi_dadd+0x368>)
 8000ae2:	4591      	cmp	r9, r2
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_dadd+0x2f0>
 8000ae6:	e10f      	b.n	8000d08 <__aeabi_dadd+0x510>
 8000ae8:	2280      	movs	r2, #128	; 0x80
 8000aea:	0412      	lsls	r2, r2, #16
 8000aec:	4310      	orrs	r0, r2
 8000aee:	4662      	mov	r2, ip
 8000af0:	2a38      	cmp	r2, #56	; 0x38
 8000af2:	dd00      	ble.n	8000af6 <__aeabi_dadd+0x2fe>
 8000af4:	e10f      	b.n	8000d16 <__aeabi_dadd+0x51e>
 8000af6:	2a1f      	cmp	r2, #31
 8000af8:	dd00      	ble.n	8000afc <__aeabi_dadd+0x304>
 8000afa:	e180      	b.n	8000dfe <__aeabi_dadd+0x606>
 8000afc:	4664      	mov	r4, ip
 8000afe:	2220      	movs	r2, #32
 8000b00:	001e      	movs	r6, r3
 8000b02:	1b12      	subs	r2, r2, r4
 8000b04:	4667      	mov	r7, ip
 8000b06:	0004      	movs	r4, r0
 8000b08:	4093      	lsls	r3, r2
 8000b0a:	4094      	lsls	r4, r2
 8000b0c:	40fe      	lsrs	r6, r7
 8000b0e:	1e5a      	subs	r2, r3, #1
 8000b10:	4193      	sbcs	r3, r2
 8000b12:	40f8      	lsrs	r0, r7
 8000b14:	4334      	orrs	r4, r6
 8000b16:	431c      	orrs	r4, r3
 8000b18:	4480      	add	r8, r0
 8000b1a:	1864      	adds	r4, r4, r1
 8000b1c:	428c      	cmp	r4, r1
 8000b1e:	41bf      	sbcs	r7, r7
 8000b20:	427f      	negs	r7, r7
 8000b22:	464e      	mov	r6, r9
 8000b24:	4447      	add	r7, r8
 8000b26:	e7a6      	b.n	8000a76 <__aeabi_dadd+0x27e>
 8000b28:	4642      	mov	r2, r8
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	0011      	movs	r1, r2
 8000b2e:	1e4a      	subs	r2, r1, #1
 8000b30:	4191      	sbcs	r1, r2
 8000b32:	e6ad      	b.n	8000890 <__aeabi_dadd+0x98>
 8000b34:	4c0c      	ldr	r4, [pc, #48]	; (8000b68 <__aeabi_dadd+0x370>)
 8000b36:	1c72      	adds	r2, r6, #1
 8000b38:	4222      	tst	r2, r4
 8000b3a:	d000      	beq.n	8000b3e <__aeabi_dadd+0x346>
 8000b3c:	e0a1      	b.n	8000c82 <__aeabi_dadd+0x48a>
 8000b3e:	0002      	movs	r2, r0
 8000b40:	431a      	orrs	r2, r3
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d000      	beq.n	8000b48 <__aeabi_dadd+0x350>
 8000b46:	e0fa      	b.n	8000d3e <__aeabi_dadd+0x546>
 8000b48:	2a00      	cmp	r2, #0
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_dadd+0x356>
 8000b4c:	e145      	b.n	8000dda <__aeabi_dadd+0x5e2>
 8000b4e:	003a      	movs	r2, r7
 8000b50:	430a      	orrs	r2, r1
 8000b52:	d000      	beq.n	8000b56 <__aeabi_dadd+0x35e>
 8000b54:	e146      	b.n	8000de4 <__aeabi_dadd+0x5ec>
 8000b56:	0742      	lsls	r2, r0, #29
 8000b58:	08db      	lsrs	r3, r3, #3
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	08c0      	lsrs	r0, r0, #3
 8000b5e:	e77b      	b.n	8000a58 <__aeabi_dadd+0x260>
 8000b60:	000007ff 	.word	0x000007ff
 8000b64:	ff7fffff 	.word	0xff7fffff
 8000b68:	000007fe 	.word	0x000007fe
 8000b6c:	4647      	mov	r7, r8
 8000b6e:	1a5c      	subs	r4, r3, r1
 8000b70:	1bc2      	subs	r2, r0, r7
 8000b72:	42a3      	cmp	r3, r4
 8000b74:	41bf      	sbcs	r7, r7
 8000b76:	427f      	negs	r7, r7
 8000b78:	46b9      	mov	r9, r7
 8000b7a:	0017      	movs	r7, r2
 8000b7c:	464a      	mov	r2, r9
 8000b7e:	1abf      	subs	r7, r7, r2
 8000b80:	023a      	lsls	r2, r7, #8
 8000b82:	d500      	bpl.n	8000b86 <__aeabi_dadd+0x38e>
 8000b84:	e08d      	b.n	8000ca2 <__aeabi_dadd+0x4aa>
 8000b86:	0023      	movs	r3, r4
 8000b88:	433b      	orrs	r3, r7
 8000b8a:	d000      	beq.n	8000b8e <__aeabi_dadd+0x396>
 8000b8c:	e68a      	b.n	80008a4 <__aeabi_dadd+0xac>
 8000b8e:	2000      	movs	r0, #0
 8000b90:	2500      	movs	r5, #0
 8000b92:	e761      	b.n	8000a58 <__aeabi_dadd+0x260>
 8000b94:	4cb4      	ldr	r4, [pc, #720]	; (8000e68 <__aeabi_dadd+0x670>)
 8000b96:	45a1      	cmp	r9, r4
 8000b98:	d100      	bne.n	8000b9c <__aeabi_dadd+0x3a4>
 8000b9a:	e0ad      	b.n	8000cf8 <__aeabi_dadd+0x500>
 8000b9c:	2480      	movs	r4, #128	; 0x80
 8000b9e:	0424      	lsls	r4, r4, #16
 8000ba0:	4320      	orrs	r0, r4
 8000ba2:	4664      	mov	r4, ip
 8000ba4:	2c38      	cmp	r4, #56	; 0x38
 8000ba6:	dc3d      	bgt.n	8000c24 <__aeabi_dadd+0x42c>
 8000ba8:	4662      	mov	r2, ip
 8000baa:	2c1f      	cmp	r4, #31
 8000bac:	dd00      	ble.n	8000bb0 <__aeabi_dadd+0x3b8>
 8000bae:	e0b7      	b.n	8000d20 <__aeabi_dadd+0x528>
 8000bb0:	2520      	movs	r5, #32
 8000bb2:	001e      	movs	r6, r3
 8000bb4:	1b2d      	subs	r5, r5, r4
 8000bb6:	0004      	movs	r4, r0
 8000bb8:	40ab      	lsls	r3, r5
 8000bba:	40ac      	lsls	r4, r5
 8000bbc:	40d6      	lsrs	r6, r2
 8000bbe:	40d0      	lsrs	r0, r2
 8000bc0:	4642      	mov	r2, r8
 8000bc2:	1e5d      	subs	r5, r3, #1
 8000bc4:	41ab      	sbcs	r3, r5
 8000bc6:	4334      	orrs	r4, r6
 8000bc8:	1a12      	subs	r2, r2, r0
 8000bca:	4690      	mov	r8, r2
 8000bcc:	4323      	orrs	r3, r4
 8000bce:	e02c      	b.n	8000c2a <__aeabi_dadd+0x432>
 8000bd0:	0742      	lsls	r2, r0, #29
 8000bd2:	08db      	lsrs	r3, r3, #3
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	08c0      	lsrs	r0, r0, #3
 8000bd8:	e73b      	b.n	8000a52 <__aeabi_dadd+0x25a>
 8000bda:	185c      	adds	r4, r3, r1
 8000bdc:	429c      	cmp	r4, r3
 8000bde:	419b      	sbcs	r3, r3
 8000be0:	4440      	add	r0, r8
 8000be2:	425b      	negs	r3, r3
 8000be4:	18c7      	adds	r7, r0, r3
 8000be6:	2601      	movs	r6, #1
 8000be8:	023b      	lsls	r3, r7, #8
 8000bea:	d400      	bmi.n	8000bee <__aeabi_dadd+0x3f6>
 8000bec:	e729      	b.n	8000a42 <__aeabi_dadd+0x24a>
 8000bee:	2602      	movs	r6, #2
 8000bf0:	4a9e      	ldr	r2, [pc, #632]	; (8000e6c <__aeabi_dadd+0x674>)
 8000bf2:	0863      	lsrs	r3, r4, #1
 8000bf4:	4017      	ands	r7, r2
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	4014      	ands	r4, r2
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	07fb      	lsls	r3, r7, #31
 8000bfe:	431c      	orrs	r4, r3
 8000c00:	087f      	lsrs	r7, r7, #1
 8000c02:	e673      	b.n	80008ec <__aeabi_dadd+0xf4>
 8000c04:	4644      	mov	r4, r8
 8000c06:	3a20      	subs	r2, #32
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	4662      	mov	r2, ip
 8000c0c:	2a20      	cmp	r2, #32
 8000c0e:	d005      	beq.n	8000c1c <__aeabi_dadd+0x424>
 8000c10:	4667      	mov	r7, ip
 8000c12:	2240      	movs	r2, #64	; 0x40
 8000c14:	1bd2      	subs	r2, r2, r7
 8000c16:	4647      	mov	r7, r8
 8000c18:	4097      	lsls	r7, r2
 8000c1a:	4339      	orrs	r1, r7
 8000c1c:	1e4a      	subs	r2, r1, #1
 8000c1e:	4191      	sbcs	r1, r2
 8000c20:	4321      	orrs	r1, r4
 8000c22:	e635      	b.n	8000890 <__aeabi_dadd+0x98>
 8000c24:	4303      	orrs	r3, r0
 8000c26:	1e58      	subs	r0, r3, #1
 8000c28:	4183      	sbcs	r3, r0
 8000c2a:	1acc      	subs	r4, r1, r3
 8000c2c:	42a1      	cmp	r1, r4
 8000c2e:	41bf      	sbcs	r7, r7
 8000c30:	4643      	mov	r3, r8
 8000c32:	427f      	negs	r7, r7
 8000c34:	4655      	mov	r5, sl
 8000c36:	464e      	mov	r6, r9
 8000c38:	1bdf      	subs	r7, r3, r7
 8000c3a:	e62e      	b.n	800089a <__aeabi_dadd+0xa2>
 8000c3c:	0002      	movs	r2, r0
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	d100      	bne.n	8000c44 <__aeabi_dadd+0x44c>
 8000c42:	e0bd      	b.n	8000dc0 <__aeabi_dadd+0x5c8>
 8000c44:	4662      	mov	r2, ip
 8000c46:	4664      	mov	r4, ip
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	2c01      	cmp	r4, #1
 8000c4c:	d100      	bne.n	8000c50 <__aeabi_dadd+0x458>
 8000c4e:	e0e5      	b.n	8000e1c <__aeabi_dadd+0x624>
 8000c50:	4c85      	ldr	r4, [pc, #532]	; (8000e68 <__aeabi_dadd+0x670>)
 8000c52:	45a4      	cmp	ip, r4
 8000c54:	d058      	beq.n	8000d08 <__aeabi_dadd+0x510>
 8000c56:	4694      	mov	ip, r2
 8000c58:	e749      	b.n	8000aee <__aeabi_dadd+0x2f6>
 8000c5a:	4664      	mov	r4, ip
 8000c5c:	2220      	movs	r2, #32
 8000c5e:	1b12      	subs	r2, r2, r4
 8000c60:	4644      	mov	r4, r8
 8000c62:	4094      	lsls	r4, r2
 8000c64:	000f      	movs	r7, r1
 8000c66:	46a1      	mov	r9, r4
 8000c68:	4664      	mov	r4, ip
 8000c6a:	4091      	lsls	r1, r2
 8000c6c:	40e7      	lsrs	r7, r4
 8000c6e:	464c      	mov	r4, r9
 8000c70:	1e4a      	subs	r2, r1, #1
 8000c72:	4191      	sbcs	r1, r2
 8000c74:	433c      	orrs	r4, r7
 8000c76:	4642      	mov	r2, r8
 8000c78:	430c      	orrs	r4, r1
 8000c7a:	4661      	mov	r1, ip
 8000c7c:	40ca      	lsrs	r2, r1
 8000c7e:	1880      	adds	r0, r0, r2
 8000c80:	e6f4      	b.n	8000a6c <__aeabi_dadd+0x274>
 8000c82:	4c79      	ldr	r4, [pc, #484]	; (8000e68 <__aeabi_dadd+0x670>)
 8000c84:	42a2      	cmp	r2, r4
 8000c86:	d100      	bne.n	8000c8a <__aeabi_dadd+0x492>
 8000c88:	e6fd      	b.n	8000a86 <__aeabi_dadd+0x28e>
 8000c8a:	1859      	adds	r1, r3, r1
 8000c8c:	4299      	cmp	r1, r3
 8000c8e:	419b      	sbcs	r3, r3
 8000c90:	4440      	add	r0, r8
 8000c92:	425f      	negs	r7, r3
 8000c94:	19c7      	adds	r7, r0, r7
 8000c96:	07fc      	lsls	r4, r7, #31
 8000c98:	0849      	lsrs	r1, r1, #1
 8000c9a:	0016      	movs	r6, r2
 8000c9c:	430c      	orrs	r4, r1
 8000c9e:	087f      	lsrs	r7, r7, #1
 8000ca0:	e6cf      	b.n	8000a42 <__aeabi_dadd+0x24a>
 8000ca2:	1acc      	subs	r4, r1, r3
 8000ca4:	42a1      	cmp	r1, r4
 8000ca6:	41bf      	sbcs	r7, r7
 8000ca8:	4643      	mov	r3, r8
 8000caa:	427f      	negs	r7, r7
 8000cac:	1a18      	subs	r0, r3, r0
 8000cae:	4655      	mov	r5, sl
 8000cb0:	1bc7      	subs	r7, r0, r7
 8000cb2:	e5f7      	b.n	80008a4 <__aeabi_dadd+0xac>
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	077b      	lsls	r3, r7, #29
 8000cb8:	4655      	mov	r5, sl
 8000cba:	430b      	orrs	r3, r1
 8000cbc:	08f8      	lsrs	r0, r7, #3
 8000cbe:	e6c8      	b.n	8000a52 <__aeabi_dadd+0x25a>
 8000cc0:	2c00      	cmp	r4, #0
 8000cc2:	d000      	beq.n	8000cc6 <__aeabi_dadd+0x4ce>
 8000cc4:	e081      	b.n	8000dca <__aeabi_dadd+0x5d2>
 8000cc6:	4643      	mov	r3, r8
 8000cc8:	430b      	orrs	r3, r1
 8000cca:	d115      	bne.n	8000cf8 <__aeabi_dadd+0x500>
 8000ccc:	2080      	movs	r0, #128	; 0x80
 8000cce:	2500      	movs	r5, #0
 8000cd0:	0300      	lsls	r0, r0, #12
 8000cd2:	e6e3      	b.n	8000a9c <__aeabi_dadd+0x2a4>
 8000cd4:	1a5c      	subs	r4, r3, r1
 8000cd6:	42a3      	cmp	r3, r4
 8000cd8:	419b      	sbcs	r3, r3
 8000cda:	1bc7      	subs	r7, r0, r7
 8000cdc:	425b      	negs	r3, r3
 8000cde:	2601      	movs	r6, #1
 8000ce0:	1aff      	subs	r7, r7, r3
 8000ce2:	e5da      	b.n	800089a <__aeabi_dadd+0xa2>
 8000ce4:	0742      	lsls	r2, r0, #29
 8000ce6:	08db      	lsrs	r3, r3, #3
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	08c0      	lsrs	r0, r0, #3
 8000cec:	e6d2      	b.n	8000a94 <__aeabi_dadd+0x29c>
 8000cee:	0742      	lsls	r2, r0, #29
 8000cf0:	08db      	lsrs	r3, r3, #3
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	08c0      	lsrs	r0, r0, #3
 8000cf6:	e6ac      	b.n	8000a52 <__aeabi_dadd+0x25a>
 8000cf8:	4643      	mov	r3, r8
 8000cfa:	4642      	mov	r2, r8
 8000cfc:	08c9      	lsrs	r1, r1, #3
 8000cfe:	075b      	lsls	r3, r3, #29
 8000d00:	4655      	mov	r5, sl
 8000d02:	430b      	orrs	r3, r1
 8000d04:	08d0      	lsrs	r0, r2, #3
 8000d06:	e6c5      	b.n	8000a94 <__aeabi_dadd+0x29c>
 8000d08:	4643      	mov	r3, r8
 8000d0a:	4642      	mov	r2, r8
 8000d0c:	075b      	lsls	r3, r3, #29
 8000d0e:	08c9      	lsrs	r1, r1, #3
 8000d10:	430b      	orrs	r3, r1
 8000d12:	08d0      	lsrs	r0, r2, #3
 8000d14:	e6be      	b.n	8000a94 <__aeabi_dadd+0x29c>
 8000d16:	4303      	orrs	r3, r0
 8000d18:	001c      	movs	r4, r3
 8000d1a:	1e63      	subs	r3, r4, #1
 8000d1c:	419c      	sbcs	r4, r3
 8000d1e:	e6fc      	b.n	8000b1a <__aeabi_dadd+0x322>
 8000d20:	0002      	movs	r2, r0
 8000d22:	3c20      	subs	r4, #32
 8000d24:	40e2      	lsrs	r2, r4
 8000d26:	0014      	movs	r4, r2
 8000d28:	4662      	mov	r2, ip
 8000d2a:	2a20      	cmp	r2, #32
 8000d2c:	d003      	beq.n	8000d36 <__aeabi_dadd+0x53e>
 8000d2e:	2540      	movs	r5, #64	; 0x40
 8000d30:	1aad      	subs	r5, r5, r2
 8000d32:	40a8      	lsls	r0, r5
 8000d34:	4303      	orrs	r3, r0
 8000d36:	1e58      	subs	r0, r3, #1
 8000d38:	4183      	sbcs	r3, r0
 8000d3a:	4323      	orrs	r3, r4
 8000d3c:	e775      	b.n	8000c2a <__aeabi_dadd+0x432>
 8000d3e:	2a00      	cmp	r2, #0
 8000d40:	d0e2      	beq.n	8000d08 <__aeabi_dadd+0x510>
 8000d42:	003a      	movs	r2, r7
 8000d44:	430a      	orrs	r2, r1
 8000d46:	d0cd      	beq.n	8000ce4 <__aeabi_dadd+0x4ec>
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	08db      	lsrs	r3, r3, #3
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	2280      	movs	r2, #128	; 0x80
 8000d50:	08c0      	lsrs	r0, r0, #3
 8000d52:	0312      	lsls	r2, r2, #12
 8000d54:	4210      	tst	r0, r2
 8000d56:	d006      	beq.n	8000d66 <__aeabi_dadd+0x56e>
 8000d58:	08fc      	lsrs	r4, r7, #3
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d103      	bne.n	8000d66 <__aeabi_dadd+0x56e>
 8000d5e:	0020      	movs	r0, r4
 8000d60:	08cb      	lsrs	r3, r1, #3
 8000d62:	077a      	lsls	r2, r7, #29
 8000d64:	4313      	orrs	r3, r2
 8000d66:	0f5a      	lsrs	r2, r3, #29
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	0752      	lsls	r2, r2, #29
 8000d6c:	08db      	lsrs	r3, r3, #3
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	e690      	b.n	8000a94 <__aeabi_dadd+0x29c>
 8000d72:	4643      	mov	r3, r8
 8000d74:	430b      	orrs	r3, r1
 8000d76:	d100      	bne.n	8000d7a <__aeabi_dadd+0x582>
 8000d78:	e709      	b.n	8000b8e <__aeabi_dadd+0x396>
 8000d7a:	4643      	mov	r3, r8
 8000d7c:	4642      	mov	r2, r8
 8000d7e:	08c9      	lsrs	r1, r1, #3
 8000d80:	075b      	lsls	r3, r3, #29
 8000d82:	4655      	mov	r5, sl
 8000d84:	430b      	orrs	r3, r1
 8000d86:	08d0      	lsrs	r0, r2, #3
 8000d88:	e666      	b.n	8000a58 <__aeabi_dadd+0x260>
 8000d8a:	1acc      	subs	r4, r1, r3
 8000d8c:	42a1      	cmp	r1, r4
 8000d8e:	4189      	sbcs	r1, r1
 8000d90:	1a3f      	subs	r7, r7, r0
 8000d92:	4249      	negs	r1, r1
 8000d94:	4655      	mov	r5, sl
 8000d96:	2601      	movs	r6, #1
 8000d98:	1a7f      	subs	r7, r7, r1
 8000d9a:	e57e      	b.n	800089a <__aeabi_dadd+0xa2>
 8000d9c:	4642      	mov	r2, r8
 8000d9e:	1a5c      	subs	r4, r3, r1
 8000da0:	1a87      	subs	r7, r0, r2
 8000da2:	42a3      	cmp	r3, r4
 8000da4:	4192      	sbcs	r2, r2
 8000da6:	4252      	negs	r2, r2
 8000da8:	1abf      	subs	r7, r7, r2
 8000daa:	023a      	lsls	r2, r7, #8
 8000dac:	d53d      	bpl.n	8000e2a <__aeabi_dadd+0x632>
 8000dae:	1acc      	subs	r4, r1, r3
 8000db0:	42a1      	cmp	r1, r4
 8000db2:	4189      	sbcs	r1, r1
 8000db4:	4643      	mov	r3, r8
 8000db6:	4249      	negs	r1, r1
 8000db8:	1a1f      	subs	r7, r3, r0
 8000dba:	4655      	mov	r5, sl
 8000dbc:	1a7f      	subs	r7, r7, r1
 8000dbe:	e595      	b.n	80008ec <__aeabi_dadd+0xf4>
 8000dc0:	077b      	lsls	r3, r7, #29
 8000dc2:	08c9      	lsrs	r1, r1, #3
 8000dc4:	430b      	orrs	r3, r1
 8000dc6:	08f8      	lsrs	r0, r7, #3
 8000dc8:	e643      	b.n	8000a52 <__aeabi_dadd+0x25a>
 8000dca:	4644      	mov	r4, r8
 8000dcc:	08db      	lsrs	r3, r3, #3
 8000dce:	430c      	orrs	r4, r1
 8000dd0:	d130      	bne.n	8000e34 <__aeabi_dadd+0x63c>
 8000dd2:	0742      	lsls	r2, r0, #29
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	08c0      	lsrs	r0, r0, #3
 8000dd8:	e65c      	b.n	8000a94 <__aeabi_dadd+0x29c>
 8000dda:	077b      	lsls	r3, r7, #29
 8000ddc:	08c9      	lsrs	r1, r1, #3
 8000dde:	430b      	orrs	r3, r1
 8000de0:	08f8      	lsrs	r0, r7, #3
 8000de2:	e639      	b.n	8000a58 <__aeabi_dadd+0x260>
 8000de4:	185c      	adds	r4, r3, r1
 8000de6:	429c      	cmp	r4, r3
 8000de8:	419b      	sbcs	r3, r3
 8000dea:	4440      	add	r0, r8
 8000dec:	425b      	negs	r3, r3
 8000dee:	18c7      	adds	r7, r0, r3
 8000df0:	023b      	lsls	r3, r7, #8
 8000df2:	d400      	bmi.n	8000df6 <__aeabi_dadd+0x5fe>
 8000df4:	e625      	b.n	8000a42 <__aeabi_dadd+0x24a>
 8000df6:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <__aeabi_dadd+0x674>)
 8000df8:	2601      	movs	r6, #1
 8000dfa:	401f      	ands	r7, r3
 8000dfc:	e621      	b.n	8000a42 <__aeabi_dadd+0x24a>
 8000dfe:	0004      	movs	r4, r0
 8000e00:	3a20      	subs	r2, #32
 8000e02:	40d4      	lsrs	r4, r2
 8000e04:	4662      	mov	r2, ip
 8000e06:	2a20      	cmp	r2, #32
 8000e08:	d004      	beq.n	8000e14 <__aeabi_dadd+0x61c>
 8000e0a:	2240      	movs	r2, #64	; 0x40
 8000e0c:	4666      	mov	r6, ip
 8000e0e:	1b92      	subs	r2, r2, r6
 8000e10:	4090      	lsls	r0, r2
 8000e12:	4303      	orrs	r3, r0
 8000e14:	1e5a      	subs	r2, r3, #1
 8000e16:	4193      	sbcs	r3, r2
 8000e18:	431c      	orrs	r4, r3
 8000e1a:	e67e      	b.n	8000b1a <__aeabi_dadd+0x322>
 8000e1c:	185c      	adds	r4, r3, r1
 8000e1e:	428c      	cmp	r4, r1
 8000e20:	4189      	sbcs	r1, r1
 8000e22:	4440      	add	r0, r8
 8000e24:	4249      	negs	r1, r1
 8000e26:	1847      	adds	r7, r0, r1
 8000e28:	e6dd      	b.n	8000be6 <__aeabi_dadd+0x3ee>
 8000e2a:	0023      	movs	r3, r4
 8000e2c:	433b      	orrs	r3, r7
 8000e2e:	d100      	bne.n	8000e32 <__aeabi_dadd+0x63a>
 8000e30:	e6ad      	b.n	8000b8e <__aeabi_dadd+0x396>
 8000e32:	e606      	b.n	8000a42 <__aeabi_dadd+0x24a>
 8000e34:	0744      	lsls	r4, r0, #29
 8000e36:	4323      	orrs	r3, r4
 8000e38:	2480      	movs	r4, #128	; 0x80
 8000e3a:	08c0      	lsrs	r0, r0, #3
 8000e3c:	0324      	lsls	r4, r4, #12
 8000e3e:	4220      	tst	r0, r4
 8000e40:	d008      	beq.n	8000e54 <__aeabi_dadd+0x65c>
 8000e42:	4642      	mov	r2, r8
 8000e44:	08d6      	lsrs	r6, r2, #3
 8000e46:	4226      	tst	r6, r4
 8000e48:	d104      	bne.n	8000e54 <__aeabi_dadd+0x65c>
 8000e4a:	4655      	mov	r5, sl
 8000e4c:	0030      	movs	r0, r6
 8000e4e:	08cb      	lsrs	r3, r1, #3
 8000e50:	0751      	lsls	r1, r2, #29
 8000e52:	430b      	orrs	r3, r1
 8000e54:	0f5a      	lsrs	r2, r3, #29
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	08db      	lsrs	r3, r3, #3
 8000e5a:	0752      	lsls	r2, r2, #29
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	e619      	b.n	8000a94 <__aeabi_dadd+0x29c>
 8000e60:	2300      	movs	r3, #0
 8000e62:	4a01      	ldr	r2, [pc, #4]	; (8000e68 <__aeabi_dadd+0x670>)
 8000e64:	001f      	movs	r7, r3
 8000e66:	e55e      	b.n	8000926 <__aeabi_dadd+0x12e>
 8000e68:	000007ff 	.word	0x000007ff
 8000e6c:	ff7fffff 	.word	0xff7fffff

08000e70 <__aeabi_ddiv>:
 8000e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e72:	4657      	mov	r7, sl
 8000e74:	464e      	mov	r6, r9
 8000e76:	4645      	mov	r5, r8
 8000e78:	46de      	mov	lr, fp
 8000e7a:	b5e0      	push	{r5, r6, r7, lr}
 8000e7c:	4681      	mov	r9, r0
 8000e7e:	0005      	movs	r5, r0
 8000e80:	030c      	lsls	r4, r1, #12
 8000e82:	0048      	lsls	r0, r1, #1
 8000e84:	4692      	mov	sl, r2
 8000e86:	001f      	movs	r7, r3
 8000e88:	b085      	sub	sp, #20
 8000e8a:	0b24      	lsrs	r4, r4, #12
 8000e8c:	0d40      	lsrs	r0, r0, #21
 8000e8e:	0fce      	lsrs	r6, r1, #31
 8000e90:	2800      	cmp	r0, #0
 8000e92:	d100      	bne.n	8000e96 <__aeabi_ddiv+0x26>
 8000e94:	e156      	b.n	8001144 <__aeabi_ddiv+0x2d4>
 8000e96:	4bd4      	ldr	r3, [pc, #848]	; (80011e8 <__aeabi_ddiv+0x378>)
 8000e98:	4298      	cmp	r0, r3
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x2e>
 8000e9c:	e172      	b.n	8001184 <__aeabi_ddiv+0x314>
 8000e9e:	0f6b      	lsrs	r3, r5, #29
 8000ea0:	00e4      	lsls	r4, r4, #3
 8000ea2:	431c      	orrs	r4, r3
 8000ea4:	2380      	movs	r3, #128	; 0x80
 8000ea6:	041b      	lsls	r3, r3, #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	4698      	mov	r8, r3
 8000eac:	4bcf      	ldr	r3, [pc, #828]	; (80011ec <__aeabi_ddiv+0x37c>)
 8000eae:	00ed      	lsls	r5, r5, #3
 8000eb0:	469b      	mov	fp, r3
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	4699      	mov	r9, r3
 8000eb6:	4483      	add	fp, r0
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	033c      	lsls	r4, r7, #12
 8000ebc:	007b      	lsls	r3, r7, #1
 8000ebe:	4650      	mov	r0, sl
 8000ec0:	0b24      	lsrs	r4, r4, #12
 8000ec2:	0d5b      	lsrs	r3, r3, #21
 8000ec4:	0fff      	lsrs	r7, r7, #31
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_ddiv+0x5c>
 8000eca:	e11f      	b.n	800110c <__aeabi_ddiv+0x29c>
 8000ecc:	4ac6      	ldr	r2, [pc, #792]	; (80011e8 <__aeabi_ddiv+0x378>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x64>
 8000ed2:	e162      	b.n	800119a <__aeabi_ddiv+0x32a>
 8000ed4:	49c5      	ldr	r1, [pc, #788]	; (80011ec <__aeabi_ddiv+0x37c>)
 8000ed6:	0f42      	lsrs	r2, r0, #29
 8000ed8:	468c      	mov	ip, r1
 8000eda:	00e4      	lsls	r4, r4, #3
 8000edc:	4659      	mov	r1, fp
 8000ede:	4314      	orrs	r4, r2
 8000ee0:	2280      	movs	r2, #128	; 0x80
 8000ee2:	4463      	add	r3, ip
 8000ee4:	0412      	lsls	r2, r2, #16
 8000ee6:	1acb      	subs	r3, r1, r3
 8000ee8:	4314      	orrs	r4, r2
 8000eea:	469b      	mov	fp, r3
 8000eec:	00c2      	lsls	r2, r0, #3
 8000eee:	2000      	movs	r0, #0
 8000ef0:	0033      	movs	r3, r6
 8000ef2:	407b      	eors	r3, r7
 8000ef4:	469a      	mov	sl, r3
 8000ef6:	464b      	mov	r3, r9
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d827      	bhi.n	8000f4c <__aeabi_ddiv+0xdc>
 8000efc:	49bc      	ldr	r1, [pc, #752]	; (80011f0 <__aeabi_ddiv+0x380>)
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	58cb      	ldr	r3, [r1, r3]
 8000f02:	469f      	mov	pc, r3
 8000f04:	46b2      	mov	sl, r6
 8000f06:	9b00      	ldr	r3, [sp, #0]
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d016      	beq.n	8000f3a <__aeabi_ddiv+0xca>
 8000f0c:	2b03      	cmp	r3, #3
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_ddiv+0xa2>
 8000f10:	e28e      	b.n	8001430 <__aeabi_ddiv+0x5c0>
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d000      	beq.n	8000f18 <__aeabi_ddiv+0xa8>
 8000f16:	e0d9      	b.n	80010cc <__aeabi_ddiv+0x25c>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	2400      	movs	r4, #0
 8000f1c:	2500      	movs	r5, #0
 8000f1e:	4652      	mov	r2, sl
 8000f20:	051b      	lsls	r3, r3, #20
 8000f22:	4323      	orrs	r3, r4
 8000f24:	07d2      	lsls	r2, r2, #31
 8000f26:	4313      	orrs	r3, r2
 8000f28:	0028      	movs	r0, r5
 8000f2a:	0019      	movs	r1, r3
 8000f2c:	b005      	add	sp, #20
 8000f2e:	bcf0      	pop	{r4, r5, r6, r7}
 8000f30:	46bb      	mov	fp, r7
 8000f32:	46b2      	mov	sl, r6
 8000f34:	46a9      	mov	r9, r5
 8000f36:	46a0      	mov	r8, r4
 8000f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f3a:	2400      	movs	r4, #0
 8000f3c:	2500      	movs	r5, #0
 8000f3e:	4baa      	ldr	r3, [pc, #680]	; (80011e8 <__aeabi_ddiv+0x378>)
 8000f40:	e7ed      	b.n	8000f1e <__aeabi_ddiv+0xae>
 8000f42:	46ba      	mov	sl, r7
 8000f44:	46a0      	mov	r8, r4
 8000f46:	0015      	movs	r5, r2
 8000f48:	9000      	str	r0, [sp, #0]
 8000f4a:	e7dc      	b.n	8000f06 <__aeabi_ddiv+0x96>
 8000f4c:	4544      	cmp	r4, r8
 8000f4e:	d200      	bcs.n	8000f52 <__aeabi_ddiv+0xe2>
 8000f50:	e1c7      	b.n	80012e2 <__aeabi_ddiv+0x472>
 8000f52:	d100      	bne.n	8000f56 <__aeabi_ddiv+0xe6>
 8000f54:	e1c2      	b.n	80012dc <__aeabi_ddiv+0x46c>
 8000f56:	2301      	movs	r3, #1
 8000f58:	425b      	negs	r3, r3
 8000f5a:	469c      	mov	ip, r3
 8000f5c:	002e      	movs	r6, r5
 8000f5e:	4640      	mov	r0, r8
 8000f60:	2500      	movs	r5, #0
 8000f62:	44e3      	add	fp, ip
 8000f64:	0223      	lsls	r3, r4, #8
 8000f66:	0e14      	lsrs	r4, r2, #24
 8000f68:	431c      	orrs	r4, r3
 8000f6a:	0c1b      	lsrs	r3, r3, #16
 8000f6c:	4699      	mov	r9, r3
 8000f6e:	0423      	lsls	r3, r4, #16
 8000f70:	0c1f      	lsrs	r7, r3, #16
 8000f72:	0212      	lsls	r2, r2, #8
 8000f74:	4649      	mov	r1, r9
 8000f76:	9200      	str	r2, [sp, #0]
 8000f78:	9701      	str	r7, [sp, #4]
 8000f7a:	f7ff f967 	bl	800024c <__aeabi_uidivmod>
 8000f7e:	0002      	movs	r2, r0
 8000f80:	437a      	muls	r2, r7
 8000f82:	040b      	lsls	r3, r1, #16
 8000f84:	0c31      	lsrs	r1, r6, #16
 8000f86:	4680      	mov	r8, r0
 8000f88:	4319      	orrs	r1, r3
 8000f8a:	428a      	cmp	r2, r1
 8000f8c:	d907      	bls.n	8000f9e <__aeabi_ddiv+0x12e>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	425b      	negs	r3, r3
 8000f92:	469c      	mov	ip, r3
 8000f94:	1909      	adds	r1, r1, r4
 8000f96:	44e0      	add	r8, ip
 8000f98:	428c      	cmp	r4, r1
 8000f9a:	d800      	bhi.n	8000f9e <__aeabi_ddiv+0x12e>
 8000f9c:	e207      	b.n	80013ae <__aeabi_ddiv+0x53e>
 8000f9e:	1a88      	subs	r0, r1, r2
 8000fa0:	4649      	mov	r1, r9
 8000fa2:	f7ff f953 	bl	800024c <__aeabi_uidivmod>
 8000fa6:	0409      	lsls	r1, r1, #16
 8000fa8:	468c      	mov	ip, r1
 8000faa:	0431      	lsls	r1, r6, #16
 8000fac:	4666      	mov	r6, ip
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0c09      	lsrs	r1, r1, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0003      	movs	r3, r0
 8000fb6:	4331      	orrs	r1, r6
 8000fb8:	428a      	cmp	r2, r1
 8000fba:	d904      	bls.n	8000fc6 <__aeabi_ddiv+0x156>
 8000fbc:	1909      	adds	r1, r1, r4
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	428c      	cmp	r4, r1
 8000fc2:	d800      	bhi.n	8000fc6 <__aeabi_ddiv+0x156>
 8000fc4:	e1ed      	b.n	80013a2 <__aeabi_ddiv+0x532>
 8000fc6:	1a88      	subs	r0, r1, r2
 8000fc8:	4642      	mov	r2, r8
 8000fca:	0412      	lsls	r2, r2, #16
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	4690      	mov	r8, r2
 8000fd0:	4641      	mov	r1, r8
 8000fd2:	9b00      	ldr	r3, [sp, #0]
 8000fd4:	040e      	lsls	r6, r1, #16
 8000fd6:	0c1b      	lsrs	r3, r3, #16
 8000fd8:	001f      	movs	r7, r3
 8000fda:	9302      	str	r3, [sp, #8]
 8000fdc:	9b00      	ldr	r3, [sp, #0]
 8000fde:	0c36      	lsrs	r6, r6, #16
 8000fe0:	041b      	lsls	r3, r3, #16
 8000fe2:	0c19      	lsrs	r1, r3, #16
 8000fe4:	000b      	movs	r3, r1
 8000fe6:	4373      	muls	r3, r6
 8000fe8:	0c12      	lsrs	r2, r2, #16
 8000fea:	437e      	muls	r6, r7
 8000fec:	9103      	str	r1, [sp, #12]
 8000fee:	4351      	muls	r1, r2
 8000ff0:	437a      	muls	r2, r7
 8000ff2:	0c1f      	lsrs	r7, r3, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	1876      	adds	r6, r6, r1
 8000ff8:	4466      	add	r6, ip
 8000ffa:	42b1      	cmp	r1, r6
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x196>
 8000ffe:	2180      	movs	r1, #128	; 0x80
 8001000:	0249      	lsls	r1, r1, #9
 8001002:	468c      	mov	ip, r1
 8001004:	4462      	add	r2, ip
 8001006:	0c31      	lsrs	r1, r6, #16
 8001008:	188a      	adds	r2, r1, r2
 800100a:	0431      	lsls	r1, r6, #16
 800100c:	041e      	lsls	r6, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	198e      	adds	r6, r1, r6
 8001012:	4290      	cmp	r0, r2
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1ac>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1ce>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1ce>
 800101c:	4643      	mov	r3, r8
 800101e:	1e59      	subs	r1, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c8>
 8001036:	e1a0      	b.n	800137a <__aeabi_ddiv+0x50a>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1cc>
 800103a:	e19b      	b.n	8001374 <__aeabi_ddiv+0x504>
 800103c:	4688      	mov	r8, r1
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a80      	subs	r0, r0, r2
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1e0>
 800104e:	e1d5      	b.n	80013fc <__aeabi_ddiv+0x58c>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8fb 	bl	800024c <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f8>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4d2>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ee 	bl	800024c <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x214>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4bc>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x242>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1841      	adds	r1, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	428e      	cmp	r6, r1
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x254>
 80010c2:	e0ff      	b.n	80012c4 <__aeabi_ddiv+0x454>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x258>
 80010c6:	e0fa      	b.n	80012be <__aeabi_ddiv+0x44e>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4a49      	ldr	r2, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x384>)
 80010ce:	445a      	add	r2, fp
 80010d0:	2a00      	cmp	r2, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x266>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3bc>
 80010d6:	076b      	lsls	r3, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x26c>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e8>
 80010dc:	08ed      	lsrs	r5, r5, #3
 80010de:	4643      	mov	r3, r8
 80010e0:	01db      	lsls	r3, r3, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x282>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x388>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	4690      	mov	r8, r2
 80010ec:	2280      	movs	r2, #128	; 0x80
 80010ee:	00d2      	lsls	r2, r2, #3
 80010f0:	445a      	add	r2, fp
 80010f2:	4b42      	ldr	r3, [pc, #264]	; (80011fc <__aeabi_ddiv+0x38c>)
 80010f4:	429a      	cmp	r2, r3
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x28a>
 80010f8:	e71f      	b.n	8000f3a <__aeabi_ddiv+0xca>
 80010fa:	4643      	mov	r3, r8
 80010fc:	075b      	lsls	r3, r3, #29
 80010fe:	431d      	orrs	r5, r3
 8001100:	4643      	mov	r3, r8
 8001102:	0552      	lsls	r2, r2, #21
 8001104:	025c      	lsls	r4, r3, #9
 8001106:	0b24      	lsrs	r4, r4, #12
 8001108:	0d53      	lsrs	r3, r2, #21
 800110a:	e708      	b.n	8000f1e <__aeabi_ddiv+0xae>
 800110c:	4652      	mov	r2, sl
 800110e:	4322      	orrs	r2, r4
 8001110:	d100      	bne.n	8001114 <__aeabi_ddiv+0x2a4>
 8001112:	e07b      	b.n	800120c <__aeabi_ddiv+0x39c>
 8001114:	2c00      	cmp	r4, #0
 8001116:	d100      	bne.n	800111a <__aeabi_ddiv+0x2aa>
 8001118:	e0fa      	b.n	8001310 <__aeabi_ddiv+0x4a0>
 800111a:	0020      	movs	r0, r4
 800111c:	f001 f952 	bl	80023c4 <__clzsi2>
 8001120:	0002      	movs	r2, r0
 8001122:	3a0b      	subs	r2, #11
 8001124:	231d      	movs	r3, #29
 8001126:	0001      	movs	r1, r0
 8001128:	1a9b      	subs	r3, r3, r2
 800112a:	4652      	mov	r2, sl
 800112c:	3908      	subs	r1, #8
 800112e:	40da      	lsrs	r2, r3
 8001130:	408c      	lsls	r4, r1
 8001132:	4314      	orrs	r4, r2
 8001134:	4652      	mov	r2, sl
 8001136:	408a      	lsls	r2, r1
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x390>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d5      	b.n	8000ef0 <__aeabi_ddiv+0x80>
 8001144:	464b      	mov	r3, r9
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x366>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2e2>
 8001150:	e0ce      	b.n	80012f0 <__aeabi_ddiv+0x480>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f936 	bl	80023c4 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4823      	ldr	r0, [pc, #140]	; (8001204 <__aeabi_ddiv+0x394>)
 8001178:	1a83      	subs	r3, r0, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69a      	b.n	8000eba <__aeabi_ddiv+0x4a>
 8001184:	464b      	mov	r3, r9
 8001186:	4323      	orrs	r3, r4
 8001188:	4698      	mov	r8, r3
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x358>
 800118c:	2308      	movs	r3, #8
 800118e:	4699      	mov	r9, r3
 8001190:	3b06      	subs	r3, #6
 8001192:	2500      	movs	r5, #0
 8001194:	4683      	mov	fp, r0
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e68f      	b.n	8000eba <__aeabi_ddiv+0x4a>
 800119a:	4652      	mov	r2, sl
 800119c:	4322      	orrs	r2, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x344>
 80011a0:	2302      	movs	r3, #2
 80011a2:	4649      	mov	r1, r9
 80011a4:	4319      	orrs	r1, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x398>)
 80011a8:	4689      	mov	r9, r1
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e69d      	b.n	8000ef0 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x398>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4652      	mov	r2, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e693      	b.n	8000ef0 <__aeabi_ddiv+0x80>
 80011c8:	230c      	movs	r3, #12
 80011ca:	4699      	mov	r9, r3
 80011cc:	3b09      	subs	r3, #9
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4683      	mov	fp, r0
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e671      	b.n	8000eba <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e669      	b.n	8000eba <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	08008ab0 	.word	0x08008ab0
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	4649      	mov	r1, r9
 800120e:	2301      	movs	r3, #1
 8001210:	4319      	orrs	r1, r3
 8001212:	4689      	mov	r9, r1
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66a      	b.n	8000ef0 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2480      	movs	r4, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b8a      	ldr	r3, [pc, #552]	; (800144c <__aeabi_ddiv+0x5dc>)
 8001224:	0324      	lsls	r4, r4, #12
 8001226:	e67a      	b.n	8000f1e <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2301      	movs	r3, #1
 800122e:	1a9b      	subs	r3, r3, r2
 8001230:	2b38      	cmp	r3, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3c6>
 8001234:	e670      	b.n	8000f18 <__aeabi_ddiv+0xa8>
 8001236:	2b1f      	cmp	r3, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3cc>
 800123a:	e0bf      	b.n	80013bc <__aeabi_ddiv+0x54c>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1a8a      	subs	r2, r1, r2
 8001242:	4641      	mov	r1, r8
 8001244:	40d1      	lsrs	r1, r2
 8001246:	000a      	movs	r2, r1
 8001248:	2b20      	cmp	r3, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3e6>
 800124c:	4641      	mov	r1, r8
 800124e:	4b80      	ldr	r3, [pc, #512]	; (8001450 <__aeabi_ddiv+0x5e0>)
 8001250:	445b      	add	r3, fp
 8001252:	4099      	lsls	r1, r3
 8001254:	430d      	orrs	r5, r1
 8001256:	1e6b      	subs	r3, r5, #1
 8001258:	419d      	sbcs	r5, r3
 800125a:	2307      	movs	r3, #7
 800125c:	432a      	orrs	r2, r5
 800125e:	001d      	movs	r5, r3
 8001260:	2400      	movs	r4, #0
 8001262:	4015      	ands	r5, r2
 8001264:	4213      	tst	r3, r2
 8001266:	d100      	bne.n	800126a <__aeabi_ddiv+0x3fa>
 8001268:	e0d4      	b.n	8001414 <__aeabi_ddiv+0x5a4>
 800126a:	210f      	movs	r1, #15
 800126c:	2300      	movs	r3, #0
 800126e:	4011      	ands	r1, r2
 8001270:	2904      	cmp	r1, #4
 8001272:	d100      	bne.n	8001276 <__aeabi_ddiv+0x406>
 8001274:	e0cb      	b.n	800140e <__aeabi_ddiv+0x59e>
 8001276:	1d11      	adds	r1, r2, #4
 8001278:	4291      	cmp	r1, r2
 800127a:	4192      	sbcs	r2, r2
 800127c:	4252      	negs	r2, r2
 800127e:	189b      	adds	r3, r3, r2
 8001280:	000a      	movs	r2, r1
 8001282:	0219      	lsls	r1, r3, #8
 8001284:	d400      	bmi.n	8001288 <__aeabi_ddiv+0x418>
 8001286:	e0c2      	b.n	800140e <__aeabi_ddiv+0x59e>
 8001288:	2301      	movs	r3, #1
 800128a:	2400      	movs	r4, #0
 800128c:	2500      	movs	r5, #0
 800128e:	e646      	b.n	8000f1e <__aeabi_ddiv+0xae>
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	4641      	mov	r1, r8
 8001294:	031b      	lsls	r3, r3, #12
 8001296:	4219      	tst	r1, r3
 8001298:	d008      	beq.n	80012ac <__aeabi_ddiv+0x43c>
 800129a:	421c      	tst	r4, r3
 800129c:	d106      	bne.n	80012ac <__aeabi_ddiv+0x43c>
 800129e:	431c      	orrs	r4, r3
 80012a0:	0324      	lsls	r4, r4, #12
 80012a2:	46ba      	mov	sl, r7
 80012a4:	0015      	movs	r5, r2
 80012a6:	4b69      	ldr	r3, [pc, #420]	; (800144c <__aeabi_ddiv+0x5dc>)
 80012a8:	0b24      	lsrs	r4, r4, #12
 80012aa:	e638      	b.n	8000f1e <__aeabi_ddiv+0xae>
 80012ac:	2480      	movs	r4, #128	; 0x80
 80012ae:	4643      	mov	r3, r8
 80012b0:	0324      	lsls	r4, r4, #12
 80012b2:	431c      	orrs	r4, r3
 80012b4:	0324      	lsls	r4, r4, #12
 80012b6:	46b2      	mov	sl, r6
 80012b8:	4b64      	ldr	r3, [pc, #400]	; (800144c <__aeabi_ddiv+0x5dc>)
 80012ba:	0b24      	lsrs	r4, r4, #12
 80012bc:	e62f      	b.n	8000f1e <__aeabi_ddiv+0xae>
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d100      	bne.n	80012c4 <__aeabi_ddiv+0x454>
 80012c2:	e703      	b.n	80010cc <__aeabi_ddiv+0x25c>
 80012c4:	19a6      	adds	r6, r4, r6
 80012c6:	1e68      	subs	r0, r5, #1
 80012c8:	42a6      	cmp	r6, r4
 80012ca:	d200      	bcs.n	80012ce <__aeabi_ddiv+0x45e>
 80012cc:	e08d      	b.n	80013ea <__aeabi_ddiv+0x57a>
 80012ce:	428e      	cmp	r6, r1
 80012d0:	d200      	bcs.n	80012d4 <__aeabi_ddiv+0x464>
 80012d2:	e0a3      	b.n	800141c <__aeabi_ddiv+0x5ac>
 80012d4:	d100      	bne.n	80012d8 <__aeabi_ddiv+0x468>
 80012d6:	e0b3      	b.n	8001440 <__aeabi_ddiv+0x5d0>
 80012d8:	0005      	movs	r5, r0
 80012da:	e6f5      	b.n	80010c8 <__aeabi_ddiv+0x258>
 80012dc:	42aa      	cmp	r2, r5
 80012de:	d900      	bls.n	80012e2 <__aeabi_ddiv+0x472>
 80012e0:	e639      	b.n	8000f56 <__aeabi_ddiv+0xe6>
 80012e2:	4643      	mov	r3, r8
 80012e4:	07de      	lsls	r6, r3, #31
 80012e6:	0858      	lsrs	r0, r3, #1
 80012e8:	086b      	lsrs	r3, r5, #1
 80012ea:	431e      	orrs	r6, r3
 80012ec:	07ed      	lsls	r5, r5, #31
 80012ee:	e639      	b.n	8000f64 <__aeabi_ddiv+0xf4>
 80012f0:	4648      	mov	r0, r9
 80012f2:	f001 f867 	bl	80023c4 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x494>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2ee>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x306>
 8001310:	f001 f858 	bl	80023c4 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4b2>
 8001320:	e700      	b.n	8001124 <__aeabi_ddiv+0x2b4>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2200      	movs	r2, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c8>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4c6>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x214>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4cc>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x214>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x214>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4dc>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f8>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4e2>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f8>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f8>
 8001358:	230f      	movs	r3, #15
 800135a:	402b      	ands	r3, r5
 800135c:	2b04      	cmp	r3, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4f2>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x26c>
 8001362:	2305      	movs	r3, #5
 8001364:	425b      	negs	r3, r3
 8001366:	42ab      	cmp	r3, r5
 8001368:	419b      	sbcs	r3, r3
 800136a:	3504      	adds	r5, #4
 800136c:	425b      	negs	r3, r3
 800136e:	08ed      	lsrs	r5, r5, #3
 8001370:	4498      	add	r8, r3
 8001372:	e6b4      	b.n	80010de <__aeabi_ddiv+0x26e>
 8001374:	42af      	cmp	r7, r5
 8001376:	d900      	bls.n	800137a <__aeabi_ddiv+0x50a>
 8001378:	e660      	b.n	800103c <__aeabi_ddiv+0x1cc>
 800137a:	4282      	cmp	r2, r0
 800137c:	d804      	bhi.n	8001388 <__aeabi_ddiv+0x518>
 800137e:	d000      	beq.n	8001382 <__aeabi_ddiv+0x512>
 8001380:	e65c      	b.n	800103c <__aeabi_ddiv+0x1cc>
 8001382:	42ae      	cmp	r6, r5
 8001384:	d800      	bhi.n	8001388 <__aeabi_ddiv+0x518>
 8001386:	e659      	b.n	800103c <__aeabi_ddiv+0x1cc>
 8001388:	2302      	movs	r3, #2
 800138a:	425b      	negs	r3, r3
 800138c:	469c      	mov	ip, r3
 800138e:	9b00      	ldr	r3, [sp, #0]
 8001390:	44e0      	add	r8, ip
 8001392:	469c      	mov	ip, r3
 8001394:	4465      	add	r5, ip
 8001396:	429d      	cmp	r5, r3
 8001398:	419b      	sbcs	r3, r3
 800139a:	425b      	negs	r3, r3
 800139c:	191b      	adds	r3, r3, r4
 800139e:	18c0      	adds	r0, r0, r3
 80013a0:	e64d      	b.n	800103e <__aeabi_ddiv+0x1ce>
 80013a2:	428a      	cmp	r2, r1
 80013a4:	d800      	bhi.n	80013a8 <__aeabi_ddiv+0x538>
 80013a6:	e60e      	b.n	8000fc6 <__aeabi_ddiv+0x156>
 80013a8:	1e83      	subs	r3, r0, #2
 80013aa:	1909      	adds	r1, r1, r4
 80013ac:	e60b      	b.n	8000fc6 <__aeabi_ddiv+0x156>
 80013ae:	428a      	cmp	r2, r1
 80013b0:	d800      	bhi.n	80013b4 <__aeabi_ddiv+0x544>
 80013b2:	e5f4      	b.n	8000f9e <__aeabi_ddiv+0x12e>
 80013b4:	1e83      	subs	r3, r0, #2
 80013b6:	4698      	mov	r8, r3
 80013b8:	1909      	adds	r1, r1, r4
 80013ba:	e5f0      	b.n	8000f9e <__aeabi_ddiv+0x12e>
 80013bc:	4925      	ldr	r1, [pc, #148]	; (8001454 <__aeabi_ddiv+0x5e4>)
 80013be:	0028      	movs	r0, r5
 80013c0:	4459      	add	r1, fp
 80013c2:	408d      	lsls	r5, r1
 80013c4:	4642      	mov	r2, r8
 80013c6:	408a      	lsls	r2, r1
 80013c8:	1e69      	subs	r1, r5, #1
 80013ca:	418d      	sbcs	r5, r1
 80013cc:	4641      	mov	r1, r8
 80013ce:	40d8      	lsrs	r0, r3
 80013d0:	40d9      	lsrs	r1, r3
 80013d2:	4302      	orrs	r2, r0
 80013d4:	432a      	orrs	r2, r5
 80013d6:	000b      	movs	r3, r1
 80013d8:	0751      	lsls	r1, r2, #29
 80013da:	d100      	bne.n	80013de <__aeabi_ddiv+0x56e>
 80013dc:	e751      	b.n	8001282 <__aeabi_ddiv+0x412>
 80013de:	210f      	movs	r1, #15
 80013e0:	4011      	ands	r1, r2
 80013e2:	2904      	cmp	r1, #4
 80013e4:	d000      	beq.n	80013e8 <__aeabi_ddiv+0x578>
 80013e6:	e746      	b.n	8001276 <__aeabi_ddiv+0x406>
 80013e8:	e74b      	b.n	8001282 <__aeabi_ddiv+0x412>
 80013ea:	0005      	movs	r5, r0
 80013ec:	428e      	cmp	r6, r1
 80013ee:	d000      	beq.n	80013f2 <__aeabi_ddiv+0x582>
 80013f0:	e66a      	b.n	80010c8 <__aeabi_ddiv+0x258>
 80013f2:	9a00      	ldr	r2, [sp, #0]
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d000      	beq.n	80013fa <__aeabi_ddiv+0x58a>
 80013f8:	e666      	b.n	80010c8 <__aeabi_ddiv+0x258>
 80013fa:	e667      	b.n	80010cc <__aeabi_ddiv+0x25c>
 80013fc:	4a16      	ldr	r2, [pc, #88]	; (8001458 <__aeabi_ddiv+0x5e8>)
 80013fe:	445a      	add	r2, fp
 8001400:	2a00      	cmp	r2, #0
 8001402:	dc00      	bgt.n	8001406 <__aeabi_ddiv+0x596>
 8001404:	e710      	b.n	8001228 <__aeabi_ddiv+0x3b8>
 8001406:	2301      	movs	r3, #1
 8001408:	2500      	movs	r5, #0
 800140a:	4498      	add	r8, r3
 800140c:	e667      	b.n	80010de <__aeabi_ddiv+0x26e>
 800140e:	075d      	lsls	r5, r3, #29
 8001410:	025b      	lsls	r3, r3, #9
 8001412:	0b1c      	lsrs	r4, r3, #12
 8001414:	08d2      	lsrs	r2, r2, #3
 8001416:	2300      	movs	r3, #0
 8001418:	4315      	orrs	r5, r2
 800141a:	e580      	b.n	8000f1e <__aeabi_ddiv+0xae>
 800141c:	9800      	ldr	r0, [sp, #0]
 800141e:	3d02      	subs	r5, #2
 8001420:	0042      	lsls	r2, r0, #1
 8001422:	4282      	cmp	r2, r0
 8001424:	41bf      	sbcs	r7, r7
 8001426:	427f      	negs	r7, r7
 8001428:	193c      	adds	r4, r7, r4
 800142a:	1936      	adds	r6, r6, r4
 800142c:	9200      	str	r2, [sp, #0]
 800142e:	e7dd      	b.n	80013ec <__aeabi_ddiv+0x57c>
 8001430:	2480      	movs	r4, #128	; 0x80
 8001432:	4643      	mov	r3, r8
 8001434:	0324      	lsls	r4, r4, #12
 8001436:	431c      	orrs	r4, r3
 8001438:	0324      	lsls	r4, r4, #12
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <__aeabi_ddiv+0x5dc>)
 800143c:	0b24      	lsrs	r4, r4, #12
 800143e:	e56e      	b.n	8000f1e <__aeabi_ddiv+0xae>
 8001440:	9a00      	ldr	r2, [sp, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d3ea      	bcc.n	800141c <__aeabi_ddiv+0x5ac>
 8001446:	0005      	movs	r5, r0
 8001448:	e7d3      	b.n	80013f2 <__aeabi_ddiv+0x582>
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	000007ff 	.word	0x000007ff
 8001450:	0000043e 	.word	0x0000043e
 8001454:	0000041e 	.word	0x0000041e
 8001458:	000003ff 	.word	0x000003ff

0800145c <__eqdf2>:
 800145c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800145e:	464e      	mov	r6, r9
 8001460:	4645      	mov	r5, r8
 8001462:	46de      	mov	lr, fp
 8001464:	4657      	mov	r7, sl
 8001466:	4690      	mov	r8, r2
 8001468:	b5e0      	push	{r5, r6, r7, lr}
 800146a:	0017      	movs	r7, r2
 800146c:	031a      	lsls	r2, r3, #12
 800146e:	0b12      	lsrs	r2, r2, #12
 8001470:	0005      	movs	r5, r0
 8001472:	4684      	mov	ip, r0
 8001474:	4819      	ldr	r0, [pc, #100]	; (80014dc <__eqdf2+0x80>)
 8001476:	030e      	lsls	r6, r1, #12
 8001478:	004c      	lsls	r4, r1, #1
 800147a:	4691      	mov	r9, r2
 800147c:	005a      	lsls	r2, r3, #1
 800147e:	0fdb      	lsrs	r3, r3, #31
 8001480:	469b      	mov	fp, r3
 8001482:	0b36      	lsrs	r6, r6, #12
 8001484:	0d64      	lsrs	r4, r4, #21
 8001486:	0fc9      	lsrs	r1, r1, #31
 8001488:	0d52      	lsrs	r2, r2, #21
 800148a:	4284      	cmp	r4, r0
 800148c:	d019      	beq.n	80014c2 <__eqdf2+0x66>
 800148e:	4282      	cmp	r2, r0
 8001490:	d010      	beq.n	80014b4 <__eqdf2+0x58>
 8001492:	2001      	movs	r0, #1
 8001494:	4294      	cmp	r4, r2
 8001496:	d10e      	bne.n	80014b6 <__eqdf2+0x5a>
 8001498:	454e      	cmp	r6, r9
 800149a:	d10c      	bne.n	80014b6 <__eqdf2+0x5a>
 800149c:	2001      	movs	r0, #1
 800149e:	45c4      	cmp	ip, r8
 80014a0:	d109      	bne.n	80014b6 <__eqdf2+0x5a>
 80014a2:	4559      	cmp	r1, fp
 80014a4:	d017      	beq.n	80014d6 <__eqdf2+0x7a>
 80014a6:	2c00      	cmp	r4, #0
 80014a8:	d105      	bne.n	80014b6 <__eqdf2+0x5a>
 80014aa:	0030      	movs	r0, r6
 80014ac:	4328      	orrs	r0, r5
 80014ae:	1e43      	subs	r3, r0, #1
 80014b0:	4198      	sbcs	r0, r3
 80014b2:	e000      	b.n	80014b6 <__eqdf2+0x5a>
 80014b4:	2001      	movs	r0, #1
 80014b6:	bcf0      	pop	{r4, r5, r6, r7}
 80014b8:	46bb      	mov	fp, r7
 80014ba:	46b2      	mov	sl, r6
 80014bc:	46a9      	mov	r9, r5
 80014be:	46a0      	mov	r8, r4
 80014c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c2:	0033      	movs	r3, r6
 80014c4:	2001      	movs	r0, #1
 80014c6:	432b      	orrs	r3, r5
 80014c8:	d1f5      	bne.n	80014b6 <__eqdf2+0x5a>
 80014ca:	42a2      	cmp	r2, r4
 80014cc:	d1f3      	bne.n	80014b6 <__eqdf2+0x5a>
 80014ce:	464b      	mov	r3, r9
 80014d0:	433b      	orrs	r3, r7
 80014d2:	d1f0      	bne.n	80014b6 <__eqdf2+0x5a>
 80014d4:	e7e2      	b.n	800149c <__eqdf2+0x40>
 80014d6:	2000      	movs	r0, #0
 80014d8:	e7ed      	b.n	80014b6 <__eqdf2+0x5a>
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	000007ff 	.word	0x000007ff

080014e0 <__gedf2>:
 80014e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e2:	4647      	mov	r7, r8
 80014e4:	46ce      	mov	lr, r9
 80014e6:	0004      	movs	r4, r0
 80014e8:	0018      	movs	r0, r3
 80014ea:	0016      	movs	r6, r2
 80014ec:	031b      	lsls	r3, r3, #12
 80014ee:	0b1b      	lsrs	r3, r3, #12
 80014f0:	4d2d      	ldr	r5, [pc, #180]	; (80015a8 <__gedf2+0xc8>)
 80014f2:	004a      	lsls	r2, r1, #1
 80014f4:	4699      	mov	r9, r3
 80014f6:	b580      	push	{r7, lr}
 80014f8:	0043      	lsls	r3, r0, #1
 80014fa:	030f      	lsls	r7, r1, #12
 80014fc:	46a4      	mov	ip, r4
 80014fe:	46b0      	mov	r8, r6
 8001500:	0b3f      	lsrs	r7, r7, #12
 8001502:	0d52      	lsrs	r2, r2, #21
 8001504:	0fc9      	lsrs	r1, r1, #31
 8001506:	0d5b      	lsrs	r3, r3, #21
 8001508:	0fc0      	lsrs	r0, r0, #31
 800150a:	42aa      	cmp	r2, r5
 800150c:	d021      	beq.n	8001552 <__gedf2+0x72>
 800150e:	42ab      	cmp	r3, r5
 8001510:	d013      	beq.n	800153a <__gedf2+0x5a>
 8001512:	2a00      	cmp	r2, #0
 8001514:	d122      	bne.n	800155c <__gedf2+0x7c>
 8001516:	433c      	orrs	r4, r7
 8001518:	2b00      	cmp	r3, #0
 800151a:	d102      	bne.n	8001522 <__gedf2+0x42>
 800151c:	464d      	mov	r5, r9
 800151e:	432e      	orrs	r6, r5
 8001520:	d022      	beq.n	8001568 <__gedf2+0x88>
 8001522:	2c00      	cmp	r4, #0
 8001524:	d010      	beq.n	8001548 <__gedf2+0x68>
 8001526:	4281      	cmp	r1, r0
 8001528:	d022      	beq.n	8001570 <__gedf2+0x90>
 800152a:	2002      	movs	r0, #2
 800152c:	3901      	subs	r1, #1
 800152e:	4008      	ands	r0, r1
 8001530:	3801      	subs	r0, #1
 8001532:	bcc0      	pop	{r6, r7}
 8001534:	46b9      	mov	r9, r7
 8001536:	46b0      	mov	r8, r6
 8001538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800153a:	464d      	mov	r5, r9
 800153c:	432e      	orrs	r6, r5
 800153e:	d129      	bne.n	8001594 <__gedf2+0xb4>
 8001540:	2a00      	cmp	r2, #0
 8001542:	d1f0      	bne.n	8001526 <__gedf2+0x46>
 8001544:	433c      	orrs	r4, r7
 8001546:	d1ee      	bne.n	8001526 <__gedf2+0x46>
 8001548:	2800      	cmp	r0, #0
 800154a:	d1f2      	bne.n	8001532 <__gedf2+0x52>
 800154c:	2001      	movs	r0, #1
 800154e:	4240      	negs	r0, r0
 8001550:	e7ef      	b.n	8001532 <__gedf2+0x52>
 8001552:	003d      	movs	r5, r7
 8001554:	4325      	orrs	r5, r4
 8001556:	d11d      	bne.n	8001594 <__gedf2+0xb4>
 8001558:	4293      	cmp	r3, r2
 800155a:	d0ee      	beq.n	800153a <__gedf2+0x5a>
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1e2      	bne.n	8001526 <__gedf2+0x46>
 8001560:	464c      	mov	r4, r9
 8001562:	4326      	orrs	r6, r4
 8001564:	d1df      	bne.n	8001526 <__gedf2+0x46>
 8001566:	e7e0      	b.n	800152a <__gedf2+0x4a>
 8001568:	2000      	movs	r0, #0
 800156a:	2c00      	cmp	r4, #0
 800156c:	d0e1      	beq.n	8001532 <__gedf2+0x52>
 800156e:	e7dc      	b.n	800152a <__gedf2+0x4a>
 8001570:	429a      	cmp	r2, r3
 8001572:	dc0a      	bgt.n	800158a <__gedf2+0xaa>
 8001574:	dbe8      	blt.n	8001548 <__gedf2+0x68>
 8001576:	454f      	cmp	r7, r9
 8001578:	d8d7      	bhi.n	800152a <__gedf2+0x4a>
 800157a:	d00e      	beq.n	800159a <__gedf2+0xba>
 800157c:	2000      	movs	r0, #0
 800157e:	454f      	cmp	r7, r9
 8001580:	d2d7      	bcs.n	8001532 <__gedf2+0x52>
 8001582:	2900      	cmp	r1, #0
 8001584:	d0e2      	beq.n	800154c <__gedf2+0x6c>
 8001586:	0008      	movs	r0, r1
 8001588:	e7d3      	b.n	8001532 <__gedf2+0x52>
 800158a:	4243      	negs	r3, r0
 800158c:	4158      	adcs	r0, r3
 800158e:	0040      	lsls	r0, r0, #1
 8001590:	3801      	subs	r0, #1
 8001592:	e7ce      	b.n	8001532 <__gedf2+0x52>
 8001594:	2002      	movs	r0, #2
 8001596:	4240      	negs	r0, r0
 8001598:	e7cb      	b.n	8001532 <__gedf2+0x52>
 800159a:	45c4      	cmp	ip, r8
 800159c:	d8c5      	bhi.n	800152a <__gedf2+0x4a>
 800159e:	2000      	movs	r0, #0
 80015a0:	45c4      	cmp	ip, r8
 80015a2:	d2c6      	bcs.n	8001532 <__gedf2+0x52>
 80015a4:	e7ed      	b.n	8001582 <__gedf2+0xa2>
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	000007ff 	.word	0x000007ff

080015ac <__ledf2>:
 80015ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ae:	4647      	mov	r7, r8
 80015b0:	46ce      	mov	lr, r9
 80015b2:	0004      	movs	r4, r0
 80015b4:	0018      	movs	r0, r3
 80015b6:	0016      	movs	r6, r2
 80015b8:	031b      	lsls	r3, r3, #12
 80015ba:	0b1b      	lsrs	r3, r3, #12
 80015bc:	4d2c      	ldr	r5, [pc, #176]	; (8001670 <__ledf2+0xc4>)
 80015be:	004a      	lsls	r2, r1, #1
 80015c0:	4699      	mov	r9, r3
 80015c2:	b580      	push	{r7, lr}
 80015c4:	0043      	lsls	r3, r0, #1
 80015c6:	030f      	lsls	r7, r1, #12
 80015c8:	46a4      	mov	ip, r4
 80015ca:	46b0      	mov	r8, r6
 80015cc:	0b3f      	lsrs	r7, r7, #12
 80015ce:	0d52      	lsrs	r2, r2, #21
 80015d0:	0fc9      	lsrs	r1, r1, #31
 80015d2:	0d5b      	lsrs	r3, r3, #21
 80015d4:	0fc0      	lsrs	r0, r0, #31
 80015d6:	42aa      	cmp	r2, r5
 80015d8:	d00d      	beq.n	80015f6 <__ledf2+0x4a>
 80015da:	42ab      	cmp	r3, r5
 80015dc:	d010      	beq.n	8001600 <__ledf2+0x54>
 80015de:	2a00      	cmp	r2, #0
 80015e0:	d127      	bne.n	8001632 <__ledf2+0x86>
 80015e2:	433c      	orrs	r4, r7
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d111      	bne.n	800160c <__ledf2+0x60>
 80015e8:	464d      	mov	r5, r9
 80015ea:	432e      	orrs	r6, r5
 80015ec:	d10e      	bne.n	800160c <__ledf2+0x60>
 80015ee:	2000      	movs	r0, #0
 80015f0:	2c00      	cmp	r4, #0
 80015f2:	d015      	beq.n	8001620 <__ledf2+0x74>
 80015f4:	e00e      	b.n	8001614 <__ledf2+0x68>
 80015f6:	003d      	movs	r5, r7
 80015f8:	4325      	orrs	r5, r4
 80015fa:	d110      	bne.n	800161e <__ledf2+0x72>
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d118      	bne.n	8001632 <__ledf2+0x86>
 8001600:	464d      	mov	r5, r9
 8001602:	432e      	orrs	r6, r5
 8001604:	d10b      	bne.n	800161e <__ledf2+0x72>
 8001606:	2a00      	cmp	r2, #0
 8001608:	d102      	bne.n	8001610 <__ledf2+0x64>
 800160a:	433c      	orrs	r4, r7
 800160c:	2c00      	cmp	r4, #0
 800160e:	d00b      	beq.n	8001628 <__ledf2+0x7c>
 8001610:	4281      	cmp	r1, r0
 8001612:	d014      	beq.n	800163e <__ledf2+0x92>
 8001614:	2002      	movs	r0, #2
 8001616:	3901      	subs	r1, #1
 8001618:	4008      	ands	r0, r1
 800161a:	3801      	subs	r0, #1
 800161c:	e000      	b.n	8001620 <__ledf2+0x74>
 800161e:	2002      	movs	r0, #2
 8001620:	bcc0      	pop	{r6, r7}
 8001622:	46b9      	mov	r9, r7
 8001624:	46b0      	mov	r8, r6
 8001626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001628:	2800      	cmp	r0, #0
 800162a:	d1f9      	bne.n	8001620 <__ledf2+0x74>
 800162c:	2001      	movs	r0, #1
 800162e:	4240      	negs	r0, r0
 8001630:	e7f6      	b.n	8001620 <__ledf2+0x74>
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1ec      	bne.n	8001610 <__ledf2+0x64>
 8001636:	464c      	mov	r4, r9
 8001638:	4326      	orrs	r6, r4
 800163a:	d1e9      	bne.n	8001610 <__ledf2+0x64>
 800163c:	e7ea      	b.n	8001614 <__ledf2+0x68>
 800163e:	429a      	cmp	r2, r3
 8001640:	dd04      	ble.n	800164c <__ledf2+0xa0>
 8001642:	4243      	negs	r3, r0
 8001644:	4158      	adcs	r0, r3
 8001646:	0040      	lsls	r0, r0, #1
 8001648:	3801      	subs	r0, #1
 800164a:	e7e9      	b.n	8001620 <__ledf2+0x74>
 800164c:	429a      	cmp	r2, r3
 800164e:	dbeb      	blt.n	8001628 <__ledf2+0x7c>
 8001650:	454f      	cmp	r7, r9
 8001652:	d8df      	bhi.n	8001614 <__ledf2+0x68>
 8001654:	d006      	beq.n	8001664 <__ledf2+0xb8>
 8001656:	2000      	movs	r0, #0
 8001658:	454f      	cmp	r7, r9
 800165a:	d2e1      	bcs.n	8001620 <__ledf2+0x74>
 800165c:	2900      	cmp	r1, #0
 800165e:	d0e5      	beq.n	800162c <__ledf2+0x80>
 8001660:	0008      	movs	r0, r1
 8001662:	e7dd      	b.n	8001620 <__ledf2+0x74>
 8001664:	45c4      	cmp	ip, r8
 8001666:	d8d5      	bhi.n	8001614 <__ledf2+0x68>
 8001668:	2000      	movs	r0, #0
 800166a:	45c4      	cmp	ip, r8
 800166c:	d2d8      	bcs.n	8001620 <__ledf2+0x74>
 800166e:	e7f5      	b.n	800165c <__ledf2+0xb0>
 8001670:	000007ff 	.word	0x000007ff

08001674 <__aeabi_dmul>:
 8001674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001676:	4657      	mov	r7, sl
 8001678:	464e      	mov	r6, r9
 800167a:	4645      	mov	r5, r8
 800167c:	46de      	mov	lr, fp
 800167e:	b5e0      	push	{r5, r6, r7, lr}
 8001680:	4698      	mov	r8, r3
 8001682:	030c      	lsls	r4, r1, #12
 8001684:	004b      	lsls	r3, r1, #1
 8001686:	0006      	movs	r6, r0
 8001688:	4692      	mov	sl, r2
 800168a:	b087      	sub	sp, #28
 800168c:	0b24      	lsrs	r4, r4, #12
 800168e:	0d5b      	lsrs	r3, r3, #21
 8001690:	0fcf      	lsrs	r7, r1, #31
 8001692:	2b00      	cmp	r3, #0
 8001694:	d100      	bne.n	8001698 <__aeabi_dmul+0x24>
 8001696:	e15c      	b.n	8001952 <__aeabi_dmul+0x2de>
 8001698:	4ad9      	ldr	r2, [pc, #868]	; (8001a00 <__aeabi_dmul+0x38c>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d100      	bne.n	80016a0 <__aeabi_dmul+0x2c>
 800169e:	e175      	b.n	800198c <__aeabi_dmul+0x318>
 80016a0:	0f42      	lsrs	r2, r0, #29
 80016a2:	00e4      	lsls	r4, r4, #3
 80016a4:	4314      	orrs	r4, r2
 80016a6:	2280      	movs	r2, #128	; 0x80
 80016a8:	0412      	lsls	r2, r2, #16
 80016aa:	4314      	orrs	r4, r2
 80016ac:	4ad5      	ldr	r2, [pc, #852]	; (8001a04 <__aeabi_dmul+0x390>)
 80016ae:	00c5      	lsls	r5, r0, #3
 80016b0:	4694      	mov	ip, r2
 80016b2:	4463      	add	r3, ip
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	2300      	movs	r3, #0
 80016b8:	4699      	mov	r9, r3
 80016ba:	469b      	mov	fp, r3
 80016bc:	4643      	mov	r3, r8
 80016be:	4642      	mov	r2, r8
 80016c0:	031e      	lsls	r6, r3, #12
 80016c2:	0fd2      	lsrs	r2, r2, #31
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	4650      	mov	r0, sl
 80016c8:	4690      	mov	r8, r2
 80016ca:	0b36      	lsrs	r6, r6, #12
 80016cc:	0d5b      	lsrs	r3, r3, #21
 80016ce:	d100      	bne.n	80016d2 <__aeabi_dmul+0x5e>
 80016d0:	e120      	b.n	8001914 <__aeabi_dmul+0x2a0>
 80016d2:	4acb      	ldr	r2, [pc, #812]	; (8001a00 <__aeabi_dmul+0x38c>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d100      	bne.n	80016da <__aeabi_dmul+0x66>
 80016d8:	e162      	b.n	80019a0 <__aeabi_dmul+0x32c>
 80016da:	49ca      	ldr	r1, [pc, #808]	; (8001a04 <__aeabi_dmul+0x390>)
 80016dc:	0f42      	lsrs	r2, r0, #29
 80016de:	468c      	mov	ip, r1
 80016e0:	9900      	ldr	r1, [sp, #0]
 80016e2:	4463      	add	r3, ip
 80016e4:	00f6      	lsls	r6, r6, #3
 80016e6:	468c      	mov	ip, r1
 80016e8:	4316      	orrs	r6, r2
 80016ea:	2280      	movs	r2, #128	; 0x80
 80016ec:	449c      	add	ip, r3
 80016ee:	0412      	lsls	r2, r2, #16
 80016f0:	4663      	mov	r3, ip
 80016f2:	4316      	orrs	r6, r2
 80016f4:	00c2      	lsls	r2, r0, #3
 80016f6:	2000      	movs	r0, #0
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	9900      	ldr	r1, [sp, #0]
 80016fc:	4643      	mov	r3, r8
 80016fe:	3101      	adds	r1, #1
 8001700:	468c      	mov	ip, r1
 8001702:	4649      	mov	r1, r9
 8001704:	407b      	eors	r3, r7
 8001706:	9301      	str	r3, [sp, #4]
 8001708:	290f      	cmp	r1, #15
 800170a:	d826      	bhi.n	800175a <__aeabi_dmul+0xe6>
 800170c:	4bbe      	ldr	r3, [pc, #760]	; (8001a08 <__aeabi_dmul+0x394>)
 800170e:	0089      	lsls	r1, r1, #2
 8001710:	5859      	ldr	r1, [r3, r1]
 8001712:	468f      	mov	pc, r1
 8001714:	4643      	mov	r3, r8
 8001716:	9301      	str	r3, [sp, #4]
 8001718:	0034      	movs	r4, r6
 800171a:	0015      	movs	r5, r2
 800171c:	4683      	mov	fp, r0
 800171e:	465b      	mov	r3, fp
 8001720:	2b02      	cmp	r3, #2
 8001722:	d016      	beq.n	8001752 <__aeabi_dmul+0xde>
 8001724:	2b03      	cmp	r3, #3
 8001726:	d100      	bne.n	800172a <__aeabi_dmul+0xb6>
 8001728:	e203      	b.n	8001b32 <__aeabi_dmul+0x4be>
 800172a:	2b01      	cmp	r3, #1
 800172c:	d000      	beq.n	8001730 <__aeabi_dmul+0xbc>
 800172e:	e0cd      	b.n	80018cc <__aeabi_dmul+0x258>
 8001730:	2200      	movs	r2, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2500      	movs	r5, #0
 8001736:	9b01      	ldr	r3, [sp, #4]
 8001738:	0512      	lsls	r2, r2, #20
 800173a:	4322      	orrs	r2, r4
 800173c:	07db      	lsls	r3, r3, #31
 800173e:	431a      	orrs	r2, r3
 8001740:	0028      	movs	r0, r5
 8001742:	0011      	movs	r1, r2
 8001744:	b007      	add	sp, #28
 8001746:	bcf0      	pop	{r4, r5, r6, r7}
 8001748:	46bb      	mov	fp, r7
 800174a:	46b2      	mov	sl, r6
 800174c:	46a9      	mov	r9, r5
 800174e:	46a0      	mov	r8, r4
 8001750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001752:	2400      	movs	r4, #0
 8001754:	2500      	movs	r5, #0
 8001756:	4aaa      	ldr	r2, [pc, #680]	; (8001a00 <__aeabi_dmul+0x38c>)
 8001758:	e7ed      	b.n	8001736 <__aeabi_dmul+0xc2>
 800175a:	0c28      	lsrs	r0, r5, #16
 800175c:	042d      	lsls	r5, r5, #16
 800175e:	0c2d      	lsrs	r5, r5, #16
 8001760:	002b      	movs	r3, r5
 8001762:	0c11      	lsrs	r1, r2, #16
 8001764:	0412      	lsls	r2, r2, #16
 8001766:	0c12      	lsrs	r2, r2, #16
 8001768:	4353      	muls	r3, r2
 800176a:	4698      	mov	r8, r3
 800176c:	0013      	movs	r3, r2
 800176e:	002f      	movs	r7, r5
 8001770:	4343      	muls	r3, r0
 8001772:	4699      	mov	r9, r3
 8001774:	434f      	muls	r7, r1
 8001776:	444f      	add	r7, r9
 8001778:	46bb      	mov	fp, r7
 800177a:	4647      	mov	r7, r8
 800177c:	000b      	movs	r3, r1
 800177e:	0c3f      	lsrs	r7, r7, #16
 8001780:	46ba      	mov	sl, r7
 8001782:	4343      	muls	r3, r0
 8001784:	44da      	add	sl, fp
 8001786:	9302      	str	r3, [sp, #8]
 8001788:	45d1      	cmp	r9, sl
 800178a:	d904      	bls.n	8001796 <__aeabi_dmul+0x122>
 800178c:	2780      	movs	r7, #128	; 0x80
 800178e:	027f      	lsls	r7, r7, #9
 8001790:	46b9      	mov	r9, r7
 8001792:	444b      	add	r3, r9
 8001794:	9302      	str	r3, [sp, #8]
 8001796:	4653      	mov	r3, sl
 8001798:	0c1b      	lsrs	r3, r3, #16
 800179a:	469b      	mov	fp, r3
 800179c:	4653      	mov	r3, sl
 800179e:	041f      	lsls	r7, r3, #16
 80017a0:	4643      	mov	r3, r8
 80017a2:	041b      	lsls	r3, r3, #16
 80017a4:	0c1b      	lsrs	r3, r3, #16
 80017a6:	4698      	mov	r8, r3
 80017a8:	003b      	movs	r3, r7
 80017aa:	4443      	add	r3, r8
 80017ac:	9304      	str	r3, [sp, #16]
 80017ae:	0c33      	lsrs	r3, r6, #16
 80017b0:	0436      	lsls	r6, r6, #16
 80017b2:	0c36      	lsrs	r6, r6, #16
 80017b4:	4698      	mov	r8, r3
 80017b6:	0033      	movs	r3, r6
 80017b8:	4343      	muls	r3, r0
 80017ba:	4699      	mov	r9, r3
 80017bc:	4643      	mov	r3, r8
 80017be:	4343      	muls	r3, r0
 80017c0:	002f      	movs	r7, r5
 80017c2:	469a      	mov	sl, r3
 80017c4:	4643      	mov	r3, r8
 80017c6:	4377      	muls	r7, r6
 80017c8:	435d      	muls	r5, r3
 80017ca:	0c38      	lsrs	r0, r7, #16
 80017cc:	444d      	add	r5, r9
 80017ce:	1945      	adds	r5, r0, r5
 80017d0:	45a9      	cmp	r9, r5
 80017d2:	d903      	bls.n	80017dc <__aeabi_dmul+0x168>
 80017d4:	2380      	movs	r3, #128	; 0x80
 80017d6:	025b      	lsls	r3, r3, #9
 80017d8:	4699      	mov	r9, r3
 80017da:	44ca      	add	sl, r9
 80017dc:	043f      	lsls	r7, r7, #16
 80017de:	0c28      	lsrs	r0, r5, #16
 80017e0:	0c3f      	lsrs	r7, r7, #16
 80017e2:	042d      	lsls	r5, r5, #16
 80017e4:	19ed      	adds	r5, r5, r7
 80017e6:	0c27      	lsrs	r7, r4, #16
 80017e8:	0424      	lsls	r4, r4, #16
 80017ea:	0c24      	lsrs	r4, r4, #16
 80017ec:	0003      	movs	r3, r0
 80017ee:	0020      	movs	r0, r4
 80017f0:	4350      	muls	r0, r2
 80017f2:	437a      	muls	r2, r7
 80017f4:	4691      	mov	r9, r2
 80017f6:	003a      	movs	r2, r7
 80017f8:	4453      	add	r3, sl
 80017fa:	9305      	str	r3, [sp, #20]
 80017fc:	0c03      	lsrs	r3, r0, #16
 80017fe:	469a      	mov	sl, r3
 8001800:	434a      	muls	r2, r1
 8001802:	4361      	muls	r1, r4
 8001804:	4449      	add	r1, r9
 8001806:	4451      	add	r1, sl
 8001808:	44ab      	add	fp, r5
 800180a:	4589      	cmp	r9, r1
 800180c:	d903      	bls.n	8001816 <__aeabi_dmul+0x1a2>
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	025b      	lsls	r3, r3, #9
 8001812:	4699      	mov	r9, r3
 8001814:	444a      	add	r2, r9
 8001816:	0400      	lsls	r0, r0, #16
 8001818:	0c0b      	lsrs	r3, r1, #16
 800181a:	0c00      	lsrs	r0, r0, #16
 800181c:	0409      	lsls	r1, r1, #16
 800181e:	1809      	adds	r1, r1, r0
 8001820:	0020      	movs	r0, r4
 8001822:	4699      	mov	r9, r3
 8001824:	4643      	mov	r3, r8
 8001826:	4370      	muls	r0, r6
 8001828:	435c      	muls	r4, r3
 800182a:	437e      	muls	r6, r7
 800182c:	435f      	muls	r7, r3
 800182e:	0c03      	lsrs	r3, r0, #16
 8001830:	4698      	mov	r8, r3
 8001832:	19a4      	adds	r4, r4, r6
 8001834:	4444      	add	r4, r8
 8001836:	444a      	add	r2, r9
 8001838:	9703      	str	r7, [sp, #12]
 800183a:	42a6      	cmp	r6, r4
 800183c:	d904      	bls.n	8001848 <__aeabi_dmul+0x1d4>
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	025b      	lsls	r3, r3, #9
 8001842:	4698      	mov	r8, r3
 8001844:	4447      	add	r7, r8
 8001846:	9703      	str	r7, [sp, #12]
 8001848:	0423      	lsls	r3, r4, #16
 800184a:	9e02      	ldr	r6, [sp, #8]
 800184c:	469a      	mov	sl, r3
 800184e:	9b05      	ldr	r3, [sp, #20]
 8001850:	445e      	add	r6, fp
 8001852:	4698      	mov	r8, r3
 8001854:	42ae      	cmp	r6, r5
 8001856:	41ad      	sbcs	r5, r5
 8001858:	1876      	adds	r6, r6, r1
 800185a:	428e      	cmp	r6, r1
 800185c:	4189      	sbcs	r1, r1
 800185e:	0400      	lsls	r0, r0, #16
 8001860:	0c00      	lsrs	r0, r0, #16
 8001862:	4450      	add	r0, sl
 8001864:	4440      	add	r0, r8
 8001866:	426d      	negs	r5, r5
 8001868:	1947      	adds	r7, r0, r5
 800186a:	46b8      	mov	r8, r7
 800186c:	4693      	mov	fp, r2
 800186e:	4249      	negs	r1, r1
 8001870:	4689      	mov	r9, r1
 8001872:	44c3      	add	fp, r8
 8001874:	44d9      	add	r9, fp
 8001876:	4298      	cmp	r0, r3
 8001878:	4180      	sbcs	r0, r0
 800187a:	45a8      	cmp	r8, r5
 800187c:	41ad      	sbcs	r5, r5
 800187e:	4593      	cmp	fp, r2
 8001880:	4192      	sbcs	r2, r2
 8001882:	4589      	cmp	r9, r1
 8001884:	4189      	sbcs	r1, r1
 8001886:	426d      	negs	r5, r5
 8001888:	4240      	negs	r0, r0
 800188a:	4328      	orrs	r0, r5
 800188c:	0c24      	lsrs	r4, r4, #16
 800188e:	4252      	negs	r2, r2
 8001890:	4249      	negs	r1, r1
 8001892:	430a      	orrs	r2, r1
 8001894:	9b03      	ldr	r3, [sp, #12]
 8001896:	1900      	adds	r0, r0, r4
 8001898:	1880      	adds	r0, r0, r2
 800189a:	18c7      	adds	r7, r0, r3
 800189c:	464b      	mov	r3, r9
 800189e:	0ddc      	lsrs	r4, r3, #23
 80018a0:	9b04      	ldr	r3, [sp, #16]
 80018a2:	0275      	lsls	r5, r6, #9
 80018a4:	431d      	orrs	r5, r3
 80018a6:	1e6a      	subs	r2, r5, #1
 80018a8:	4195      	sbcs	r5, r2
 80018aa:	464b      	mov	r3, r9
 80018ac:	0df6      	lsrs	r6, r6, #23
 80018ae:	027f      	lsls	r7, r7, #9
 80018b0:	4335      	orrs	r5, r6
 80018b2:	025a      	lsls	r2, r3, #9
 80018b4:	433c      	orrs	r4, r7
 80018b6:	4315      	orrs	r5, r2
 80018b8:	01fb      	lsls	r3, r7, #7
 80018ba:	d400      	bmi.n	80018be <__aeabi_dmul+0x24a>
 80018bc:	e11c      	b.n	8001af8 <__aeabi_dmul+0x484>
 80018be:	2101      	movs	r1, #1
 80018c0:	086a      	lsrs	r2, r5, #1
 80018c2:	400d      	ands	r5, r1
 80018c4:	4315      	orrs	r5, r2
 80018c6:	07e2      	lsls	r2, r4, #31
 80018c8:	4315      	orrs	r5, r2
 80018ca:	0864      	lsrs	r4, r4, #1
 80018cc:	494f      	ldr	r1, [pc, #316]	; (8001a0c <__aeabi_dmul+0x398>)
 80018ce:	4461      	add	r1, ip
 80018d0:	2900      	cmp	r1, #0
 80018d2:	dc00      	bgt.n	80018d6 <__aeabi_dmul+0x262>
 80018d4:	e0b0      	b.n	8001a38 <__aeabi_dmul+0x3c4>
 80018d6:	076b      	lsls	r3, r5, #29
 80018d8:	d009      	beq.n	80018ee <__aeabi_dmul+0x27a>
 80018da:	220f      	movs	r2, #15
 80018dc:	402a      	ands	r2, r5
 80018de:	2a04      	cmp	r2, #4
 80018e0:	d005      	beq.n	80018ee <__aeabi_dmul+0x27a>
 80018e2:	1d2a      	adds	r2, r5, #4
 80018e4:	42aa      	cmp	r2, r5
 80018e6:	41ad      	sbcs	r5, r5
 80018e8:	426d      	negs	r5, r5
 80018ea:	1964      	adds	r4, r4, r5
 80018ec:	0015      	movs	r5, r2
 80018ee:	01e3      	lsls	r3, r4, #7
 80018f0:	d504      	bpl.n	80018fc <__aeabi_dmul+0x288>
 80018f2:	2180      	movs	r1, #128	; 0x80
 80018f4:	4a46      	ldr	r2, [pc, #280]	; (8001a10 <__aeabi_dmul+0x39c>)
 80018f6:	00c9      	lsls	r1, r1, #3
 80018f8:	4014      	ands	r4, r2
 80018fa:	4461      	add	r1, ip
 80018fc:	4a45      	ldr	r2, [pc, #276]	; (8001a14 <__aeabi_dmul+0x3a0>)
 80018fe:	4291      	cmp	r1, r2
 8001900:	dd00      	ble.n	8001904 <__aeabi_dmul+0x290>
 8001902:	e726      	b.n	8001752 <__aeabi_dmul+0xde>
 8001904:	0762      	lsls	r2, r4, #29
 8001906:	08ed      	lsrs	r5, r5, #3
 8001908:	0264      	lsls	r4, r4, #9
 800190a:	0549      	lsls	r1, r1, #21
 800190c:	4315      	orrs	r5, r2
 800190e:	0b24      	lsrs	r4, r4, #12
 8001910:	0d4a      	lsrs	r2, r1, #21
 8001912:	e710      	b.n	8001736 <__aeabi_dmul+0xc2>
 8001914:	4652      	mov	r2, sl
 8001916:	4332      	orrs	r2, r6
 8001918:	d100      	bne.n	800191c <__aeabi_dmul+0x2a8>
 800191a:	e07f      	b.n	8001a1c <__aeabi_dmul+0x3a8>
 800191c:	2e00      	cmp	r6, #0
 800191e:	d100      	bne.n	8001922 <__aeabi_dmul+0x2ae>
 8001920:	e0dc      	b.n	8001adc <__aeabi_dmul+0x468>
 8001922:	0030      	movs	r0, r6
 8001924:	f000 fd4e 	bl	80023c4 <__clzsi2>
 8001928:	0002      	movs	r2, r0
 800192a:	3a0b      	subs	r2, #11
 800192c:	231d      	movs	r3, #29
 800192e:	0001      	movs	r1, r0
 8001930:	1a9b      	subs	r3, r3, r2
 8001932:	4652      	mov	r2, sl
 8001934:	3908      	subs	r1, #8
 8001936:	40da      	lsrs	r2, r3
 8001938:	408e      	lsls	r6, r1
 800193a:	4316      	orrs	r6, r2
 800193c:	4652      	mov	r2, sl
 800193e:	408a      	lsls	r2, r1
 8001940:	9b00      	ldr	r3, [sp, #0]
 8001942:	4935      	ldr	r1, [pc, #212]	; (8001a18 <__aeabi_dmul+0x3a4>)
 8001944:	1a18      	subs	r0, r3, r0
 8001946:	0003      	movs	r3, r0
 8001948:	468c      	mov	ip, r1
 800194a:	4463      	add	r3, ip
 800194c:	2000      	movs	r0, #0
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	e6d3      	b.n	80016fa <__aeabi_dmul+0x86>
 8001952:	0025      	movs	r5, r4
 8001954:	4305      	orrs	r5, r0
 8001956:	d04a      	beq.n	80019ee <__aeabi_dmul+0x37a>
 8001958:	2c00      	cmp	r4, #0
 800195a:	d100      	bne.n	800195e <__aeabi_dmul+0x2ea>
 800195c:	e0b0      	b.n	8001ac0 <__aeabi_dmul+0x44c>
 800195e:	0020      	movs	r0, r4
 8001960:	f000 fd30 	bl	80023c4 <__clzsi2>
 8001964:	0001      	movs	r1, r0
 8001966:	0002      	movs	r2, r0
 8001968:	390b      	subs	r1, #11
 800196a:	231d      	movs	r3, #29
 800196c:	0010      	movs	r0, r2
 800196e:	1a5b      	subs	r3, r3, r1
 8001970:	0031      	movs	r1, r6
 8001972:	0035      	movs	r5, r6
 8001974:	3808      	subs	r0, #8
 8001976:	4084      	lsls	r4, r0
 8001978:	40d9      	lsrs	r1, r3
 800197a:	4085      	lsls	r5, r0
 800197c:	430c      	orrs	r4, r1
 800197e:	4826      	ldr	r0, [pc, #152]	; (8001a18 <__aeabi_dmul+0x3a4>)
 8001980:	1a83      	subs	r3, r0, r2
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2300      	movs	r3, #0
 8001986:	4699      	mov	r9, r3
 8001988:	469b      	mov	fp, r3
 800198a:	e697      	b.n	80016bc <__aeabi_dmul+0x48>
 800198c:	0005      	movs	r5, r0
 800198e:	4325      	orrs	r5, r4
 8001990:	d126      	bne.n	80019e0 <__aeabi_dmul+0x36c>
 8001992:	2208      	movs	r2, #8
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2302      	movs	r3, #2
 8001998:	2400      	movs	r4, #0
 800199a:	4691      	mov	r9, r2
 800199c:	469b      	mov	fp, r3
 800199e:	e68d      	b.n	80016bc <__aeabi_dmul+0x48>
 80019a0:	4652      	mov	r2, sl
 80019a2:	9b00      	ldr	r3, [sp, #0]
 80019a4:	4332      	orrs	r2, r6
 80019a6:	d110      	bne.n	80019ca <__aeabi_dmul+0x356>
 80019a8:	4915      	ldr	r1, [pc, #84]	; (8001a00 <__aeabi_dmul+0x38c>)
 80019aa:	2600      	movs	r6, #0
 80019ac:	468c      	mov	ip, r1
 80019ae:	4463      	add	r3, ip
 80019b0:	4649      	mov	r1, r9
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	2302      	movs	r3, #2
 80019b6:	4319      	orrs	r1, r3
 80019b8:	4689      	mov	r9, r1
 80019ba:	2002      	movs	r0, #2
 80019bc:	e69d      	b.n	80016fa <__aeabi_dmul+0x86>
 80019be:	465b      	mov	r3, fp
 80019c0:	9701      	str	r7, [sp, #4]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d000      	beq.n	80019c8 <__aeabi_dmul+0x354>
 80019c6:	e6ad      	b.n	8001724 <__aeabi_dmul+0xb0>
 80019c8:	e6c3      	b.n	8001752 <__aeabi_dmul+0xde>
 80019ca:	4a0d      	ldr	r2, [pc, #52]	; (8001a00 <__aeabi_dmul+0x38c>)
 80019cc:	2003      	movs	r0, #3
 80019ce:	4694      	mov	ip, r2
 80019d0:	4463      	add	r3, ip
 80019d2:	464a      	mov	r2, r9
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	2303      	movs	r3, #3
 80019d8:	431a      	orrs	r2, r3
 80019da:	4691      	mov	r9, r2
 80019dc:	4652      	mov	r2, sl
 80019de:	e68c      	b.n	80016fa <__aeabi_dmul+0x86>
 80019e0:	220c      	movs	r2, #12
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	2303      	movs	r3, #3
 80019e6:	0005      	movs	r5, r0
 80019e8:	4691      	mov	r9, r2
 80019ea:	469b      	mov	fp, r3
 80019ec:	e666      	b.n	80016bc <__aeabi_dmul+0x48>
 80019ee:	2304      	movs	r3, #4
 80019f0:	4699      	mov	r9, r3
 80019f2:	2300      	movs	r3, #0
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	3301      	adds	r3, #1
 80019f8:	2400      	movs	r4, #0
 80019fa:	469b      	mov	fp, r3
 80019fc:	e65e      	b.n	80016bc <__aeabi_dmul+0x48>
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	000007ff 	.word	0x000007ff
 8001a04:	fffffc01 	.word	0xfffffc01
 8001a08:	08008af0 	.word	0x08008af0
 8001a0c:	000003ff 	.word	0x000003ff
 8001a10:	feffffff 	.word	0xfeffffff
 8001a14:	000007fe 	.word	0x000007fe
 8001a18:	fffffc0d 	.word	0xfffffc0d
 8001a1c:	4649      	mov	r1, r9
 8001a1e:	2301      	movs	r3, #1
 8001a20:	4319      	orrs	r1, r3
 8001a22:	4689      	mov	r9, r1
 8001a24:	2600      	movs	r6, #0
 8001a26:	2001      	movs	r0, #1
 8001a28:	e667      	b.n	80016fa <__aeabi_dmul+0x86>
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	2480      	movs	r4, #128	; 0x80
 8001a2e:	2500      	movs	r5, #0
 8001a30:	4a43      	ldr	r2, [pc, #268]	; (8001b40 <__aeabi_dmul+0x4cc>)
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	0324      	lsls	r4, r4, #12
 8001a36:	e67e      	b.n	8001736 <__aeabi_dmul+0xc2>
 8001a38:	2001      	movs	r0, #1
 8001a3a:	1a40      	subs	r0, r0, r1
 8001a3c:	2838      	cmp	r0, #56	; 0x38
 8001a3e:	dd00      	ble.n	8001a42 <__aeabi_dmul+0x3ce>
 8001a40:	e676      	b.n	8001730 <__aeabi_dmul+0xbc>
 8001a42:	281f      	cmp	r0, #31
 8001a44:	dd5b      	ble.n	8001afe <__aeabi_dmul+0x48a>
 8001a46:	221f      	movs	r2, #31
 8001a48:	0023      	movs	r3, r4
 8001a4a:	4252      	negs	r2, r2
 8001a4c:	1a51      	subs	r1, r2, r1
 8001a4e:	40cb      	lsrs	r3, r1
 8001a50:	0019      	movs	r1, r3
 8001a52:	2820      	cmp	r0, #32
 8001a54:	d003      	beq.n	8001a5e <__aeabi_dmul+0x3ea>
 8001a56:	4a3b      	ldr	r2, [pc, #236]	; (8001b44 <__aeabi_dmul+0x4d0>)
 8001a58:	4462      	add	r2, ip
 8001a5a:	4094      	lsls	r4, r2
 8001a5c:	4325      	orrs	r5, r4
 8001a5e:	1e6a      	subs	r2, r5, #1
 8001a60:	4195      	sbcs	r5, r2
 8001a62:	002a      	movs	r2, r5
 8001a64:	430a      	orrs	r2, r1
 8001a66:	2107      	movs	r1, #7
 8001a68:	000d      	movs	r5, r1
 8001a6a:	2400      	movs	r4, #0
 8001a6c:	4015      	ands	r5, r2
 8001a6e:	4211      	tst	r1, r2
 8001a70:	d05b      	beq.n	8001b2a <__aeabi_dmul+0x4b6>
 8001a72:	210f      	movs	r1, #15
 8001a74:	2400      	movs	r4, #0
 8001a76:	4011      	ands	r1, r2
 8001a78:	2904      	cmp	r1, #4
 8001a7a:	d053      	beq.n	8001b24 <__aeabi_dmul+0x4b0>
 8001a7c:	1d11      	adds	r1, r2, #4
 8001a7e:	4291      	cmp	r1, r2
 8001a80:	4192      	sbcs	r2, r2
 8001a82:	4252      	negs	r2, r2
 8001a84:	18a4      	adds	r4, r4, r2
 8001a86:	000a      	movs	r2, r1
 8001a88:	0223      	lsls	r3, r4, #8
 8001a8a:	d54b      	bpl.n	8001b24 <__aeabi_dmul+0x4b0>
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	2400      	movs	r4, #0
 8001a90:	2500      	movs	r5, #0
 8001a92:	e650      	b.n	8001736 <__aeabi_dmul+0xc2>
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	031b      	lsls	r3, r3, #12
 8001a98:	421c      	tst	r4, r3
 8001a9a:	d009      	beq.n	8001ab0 <__aeabi_dmul+0x43c>
 8001a9c:	421e      	tst	r6, r3
 8001a9e:	d107      	bne.n	8001ab0 <__aeabi_dmul+0x43c>
 8001aa0:	4333      	orrs	r3, r6
 8001aa2:	031c      	lsls	r4, r3, #12
 8001aa4:	4643      	mov	r3, r8
 8001aa6:	0015      	movs	r5, r2
 8001aa8:	0b24      	lsrs	r4, r4, #12
 8001aaa:	4a25      	ldr	r2, [pc, #148]	; (8001b40 <__aeabi_dmul+0x4cc>)
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	e642      	b.n	8001736 <__aeabi_dmul+0xc2>
 8001ab0:	2280      	movs	r2, #128	; 0x80
 8001ab2:	0312      	lsls	r2, r2, #12
 8001ab4:	4314      	orrs	r4, r2
 8001ab6:	0324      	lsls	r4, r4, #12
 8001ab8:	4a21      	ldr	r2, [pc, #132]	; (8001b40 <__aeabi_dmul+0x4cc>)
 8001aba:	0b24      	lsrs	r4, r4, #12
 8001abc:	9701      	str	r7, [sp, #4]
 8001abe:	e63a      	b.n	8001736 <__aeabi_dmul+0xc2>
 8001ac0:	f000 fc80 	bl	80023c4 <__clzsi2>
 8001ac4:	0001      	movs	r1, r0
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	3115      	adds	r1, #21
 8001aca:	3220      	adds	r2, #32
 8001acc:	291c      	cmp	r1, #28
 8001ace:	dc00      	bgt.n	8001ad2 <__aeabi_dmul+0x45e>
 8001ad0:	e74b      	b.n	800196a <__aeabi_dmul+0x2f6>
 8001ad2:	0034      	movs	r4, r6
 8001ad4:	3808      	subs	r0, #8
 8001ad6:	2500      	movs	r5, #0
 8001ad8:	4084      	lsls	r4, r0
 8001ada:	e750      	b.n	800197e <__aeabi_dmul+0x30a>
 8001adc:	f000 fc72 	bl	80023c4 <__clzsi2>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	001a      	movs	r2, r3
 8001ae4:	3215      	adds	r2, #21
 8001ae6:	3020      	adds	r0, #32
 8001ae8:	2a1c      	cmp	r2, #28
 8001aea:	dc00      	bgt.n	8001aee <__aeabi_dmul+0x47a>
 8001aec:	e71e      	b.n	800192c <__aeabi_dmul+0x2b8>
 8001aee:	4656      	mov	r6, sl
 8001af0:	3b08      	subs	r3, #8
 8001af2:	2200      	movs	r2, #0
 8001af4:	409e      	lsls	r6, r3
 8001af6:	e723      	b.n	8001940 <__aeabi_dmul+0x2cc>
 8001af8:	9b00      	ldr	r3, [sp, #0]
 8001afa:	469c      	mov	ip, r3
 8001afc:	e6e6      	b.n	80018cc <__aeabi_dmul+0x258>
 8001afe:	4912      	ldr	r1, [pc, #72]	; (8001b48 <__aeabi_dmul+0x4d4>)
 8001b00:	0022      	movs	r2, r4
 8001b02:	4461      	add	r1, ip
 8001b04:	002e      	movs	r6, r5
 8001b06:	408d      	lsls	r5, r1
 8001b08:	408a      	lsls	r2, r1
 8001b0a:	40c6      	lsrs	r6, r0
 8001b0c:	1e69      	subs	r1, r5, #1
 8001b0e:	418d      	sbcs	r5, r1
 8001b10:	4332      	orrs	r2, r6
 8001b12:	432a      	orrs	r2, r5
 8001b14:	40c4      	lsrs	r4, r0
 8001b16:	0753      	lsls	r3, r2, #29
 8001b18:	d0b6      	beq.n	8001a88 <__aeabi_dmul+0x414>
 8001b1a:	210f      	movs	r1, #15
 8001b1c:	4011      	ands	r1, r2
 8001b1e:	2904      	cmp	r1, #4
 8001b20:	d1ac      	bne.n	8001a7c <__aeabi_dmul+0x408>
 8001b22:	e7b1      	b.n	8001a88 <__aeabi_dmul+0x414>
 8001b24:	0765      	lsls	r5, r4, #29
 8001b26:	0264      	lsls	r4, r4, #9
 8001b28:	0b24      	lsrs	r4, r4, #12
 8001b2a:	08d2      	lsrs	r2, r2, #3
 8001b2c:	4315      	orrs	r5, r2
 8001b2e:	2200      	movs	r2, #0
 8001b30:	e601      	b.n	8001736 <__aeabi_dmul+0xc2>
 8001b32:	2280      	movs	r2, #128	; 0x80
 8001b34:	0312      	lsls	r2, r2, #12
 8001b36:	4314      	orrs	r4, r2
 8001b38:	0324      	lsls	r4, r4, #12
 8001b3a:	4a01      	ldr	r2, [pc, #4]	; (8001b40 <__aeabi_dmul+0x4cc>)
 8001b3c:	0b24      	lsrs	r4, r4, #12
 8001b3e:	e5fa      	b.n	8001736 <__aeabi_dmul+0xc2>
 8001b40:	000007ff 	.word	0x000007ff
 8001b44:	0000043e 	.word	0x0000043e
 8001b48:	0000041e 	.word	0x0000041e

08001b4c <__aeabi_dsub>:
 8001b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b4e:	4657      	mov	r7, sl
 8001b50:	464e      	mov	r6, r9
 8001b52:	4645      	mov	r5, r8
 8001b54:	46de      	mov	lr, fp
 8001b56:	b5e0      	push	{r5, r6, r7, lr}
 8001b58:	001e      	movs	r6, r3
 8001b5a:	0017      	movs	r7, r2
 8001b5c:	004a      	lsls	r2, r1, #1
 8001b5e:	030b      	lsls	r3, r1, #12
 8001b60:	0d52      	lsrs	r2, r2, #21
 8001b62:	0a5b      	lsrs	r3, r3, #9
 8001b64:	4690      	mov	r8, r2
 8001b66:	0f42      	lsrs	r2, r0, #29
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	0fcd      	lsrs	r5, r1, #31
 8001b6c:	4ccd      	ldr	r4, [pc, #820]	; (8001ea4 <__aeabi_dsub+0x358>)
 8001b6e:	0331      	lsls	r1, r6, #12
 8001b70:	00c3      	lsls	r3, r0, #3
 8001b72:	4694      	mov	ip, r2
 8001b74:	0070      	lsls	r0, r6, #1
 8001b76:	0f7a      	lsrs	r2, r7, #29
 8001b78:	0a49      	lsrs	r1, r1, #9
 8001b7a:	00ff      	lsls	r7, r7, #3
 8001b7c:	469a      	mov	sl, r3
 8001b7e:	46b9      	mov	r9, r7
 8001b80:	0d40      	lsrs	r0, r0, #21
 8001b82:	0ff6      	lsrs	r6, r6, #31
 8001b84:	4311      	orrs	r1, r2
 8001b86:	42a0      	cmp	r0, r4
 8001b88:	d100      	bne.n	8001b8c <__aeabi_dsub+0x40>
 8001b8a:	e0b1      	b.n	8001cf0 <__aeabi_dsub+0x1a4>
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	4056      	eors	r6, r2
 8001b90:	46b3      	mov	fp, r6
 8001b92:	42b5      	cmp	r5, r6
 8001b94:	d100      	bne.n	8001b98 <__aeabi_dsub+0x4c>
 8001b96:	e088      	b.n	8001caa <__aeabi_dsub+0x15e>
 8001b98:	4642      	mov	r2, r8
 8001b9a:	1a12      	subs	r2, r2, r0
 8001b9c:	2a00      	cmp	r2, #0
 8001b9e:	dc00      	bgt.n	8001ba2 <__aeabi_dsub+0x56>
 8001ba0:	e0ae      	b.n	8001d00 <__aeabi_dsub+0x1b4>
 8001ba2:	2800      	cmp	r0, #0
 8001ba4:	d100      	bne.n	8001ba8 <__aeabi_dsub+0x5c>
 8001ba6:	e0c1      	b.n	8001d2c <__aeabi_dsub+0x1e0>
 8001ba8:	48be      	ldr	r0, [pc, #760]	; (8001ea4 <__aeabi_dsub+0x358>)
 8001baa:	4580      	cmp	r8, r0
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dsub+0x64>
 8001bae:	e151      	b.n	8001e54 <__aeabi_dsub+0x308>
 8001bb0:	2080      	movs	r0, #128	; 0x80
 8001bb2:	0400      	lsls	r0, r0, #16
 8001bb4:	4301      	orrs	r1, r0
 8001bb6:	2a38      	cmp	r2, #56	; 0x38
 8001bb8:	dd00      	ble.n	8001bbc <__aeabi_dsub+0x70>
 8001bba:	e17b      	b.n	8001eb4 <__aeabi_dsub+0x368>
 8001bbc:	2a1f      	cmp	r2, #31
 8001bbe:	dd00      	ble.n	8001bc2 <__aeabi_dsub+0x76>
 8001bc0:	e1ee      	b.n	8001fa0 <__aeabi_dsub+0x454>
 8001bc2:	2020      	movs	r0, #32
 8001bc4:	003e      	movs	r6, r7
 8001bc6:	1a80      	subs	r0, r0, r2
 8001bc8:	000c      	movs	r4, r1
 8001bca:	40d6      	lsrs	r6, r2
 8001bcc:	40d1      	lsrs	r1, r2
 8001bce:	4087      	lsls	r7, r0
 8001bd0:	4662      	mov	r2, ip
 8001bd2:	4084      	lsls	r4, r0
 8001bd4:	1a52      	subs	r2, r2, r1
 8001bd6:	1e78      	subs	r0, r7, #1
 8001bd8:	4187      	sbcs	r7, r0
 8001bda:	4694      	mov	ip, r2
 8001bdc:	4334      	orrs	r4, r6
 8001bde:	4327      	orrs	r7, r4
 8001be0:	1bdc      	subs	r4, r3, r7
 8001be2:	42a3      	cmp	r3, r4
 8001be4:	419b      	sbcs	r3, r3
 8001be6:	4662      	mov	r2, ip
 8001be8:	425b      	negs	r3, r3
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	4699      	mov	r9, r3
 8001bee:	464b      	mov	r3, r9
 8001bf0:	021b      	lsls	r3, r3, #8
 8001bf2:	d400      	bmi.n	8001bf6 <__aeabi_dsub+0xaa>
 8001bf4:	e118      	b.n	8001e28 <__aeabi_dsub+0x2dc>
 8001bf6:	464b      	mov	r3, r9
 8001bf8:	0258      	lsls	r0, r3, #9
 8001bfa:	0a43      	lsrs	r3, r0, #9
 8001bfc:	4699      	mov	r9, r3
 8001bfe:	464b      	mov	r3, r9
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d100      	bne.n	8001c06 <__aeabi_dsub+0xba>
 8001c04:	e137      	b.n	8001e76 <__aeabi_dsub+0x32a>
 8001c06:	4648      	mov	r0, r9
 8001c08:	f000 fbdc 	bl	80023c4 <__clzsi2>
 8001c0c:	0001      	movs	r1, r0
 8001c0e:	3908      	subs	r1, #8
 8001c10:	2320      	movs	r3, #32
 8001c12:	0022      	movs	r2, r4
 8001c14:	4648      	mov	r0, r9
 8001c16:	1a5b      	subs	r3, r3, r1
 8001c18:	40da      	lsrs	r2, r3
 8001c1a:	4088      	lsls	r0, r1
 8001c1c:	408c      	lsls	r4, r1
 8001c1e:	4643      	mov	r3, r8
 8001c20:	4310      	orrs	r0, r2
 8001c22:	4588      	cmp	r8, r1
 8001c24:	dd00      	ble.n	8001c28 <__aeabi_dsub+0xdc>
 8001c26:	e136      	b.n	8001e96 <__aeabi_dsub+0x34a>
 8001c28:	1ac9      	subs	r1, r1, r3
 8001c2a:	1c4b      	adds	r3, r1, #1
 8001c2c:	2b1f      	cmp	r3, #31
 8001c2e:	dd00      	ble.n	8001c32 <__aeabi_dsub+0xe6>
 8001c30:	e0ea      	b.n	8001e08 <__aeabi_dsub+0x2bc>
 8001c32:	2220      	movs	r2, #32
 8001c34:	0026      	movs	r6, r4
 8001c36:	1ad2      	subs	r2, r2, r3
 8001c38:	0001      	movs	r1, r0
 8001c3a:	4094      	lsls	r4, r2
 8001c3c:	40de      	lsrs	r6, r3
 8001c3e:	40d8      	lsrs	r0, r3
 8001c40:	2300      	movs	r3, #0
 8001c42:	4091      	lsls	r1, r2
 8001c44:	1e62      	subs	r2, r4, #1
 8001c46:	4194      	sbcs	r4, r2
 8001c48:	4681      	mov	r9, r0
 8001c4a:	4698      	mov	r8, r3
 8001c4c:	4331      	orrs	r1, r6
 8001c4e:	430c      	orrs	r4, r1
 8001c50:	0763      	lsls	r3, r4, #29
 8001c52:	d009      	beq.n	8001c68 <__aeabi_dsub+0x11c>
 8001c54:	230f      	movs	r3, #15
 8001c56:	4023      	ands	r3, r4
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d005      	beq.n	8001c68 <__aeabi_dsub+0x11c>
 8001c5c:	1d23      	adds	r3, r4, #4
 8001c5e:	42a3      	cmp	r3, r4
 8001c60:	41a4      	sbcs	r4, r4
 8001c62:	4264      	negs	r4, r4
 8001c64:	44a1      	add	r9, r4
 8001c66:	001c      	movs	r4, r3
 8001c68:	464b      	mov	r3, r9
 8001c6a:	021b      	lsls	r3, r3, #8
 8001c6c:	d400      	bmi.n	8001c70 <__aeabi_dsub+0x124>
 8001c6e:	e0de      	b.n	8001e2e <__aeabi_dsub+0x2e2>
 8001c70:	4641      	mov	r1, r8
 8001c72:	4b8c      	ldr	r3, [pc, #560]	; (8001ea4 <__aeabi_dsub+0x358>)
 8001c74:	3101      	adds	r1, #1
 8001c76:	4299      	cmp	r1, r3
 8001c78:	d100      	bne.n	8001c7c <__aeabi_dsub+0x130>
 8001c7a:	e0e7      	b.n	8001e4c <__aeabi_dsub+0x300>
 8001c7c:	464b      	mov	r3, r9
 8001c7e:	488a      	ldr	r0, [pc, #552]	; (8001ea8 <__aeabi_dsub+0x35c>)
 8001c80:	08e4      	lsrs	r4, r4, #3
 8001c82:	4003      	ands	r3, r0
 8001c84:	0018      	movs	r0, r3
 8001c86:	0549      	lsls	r1, r1, #21
 8001c88:	075b      	lsls	r3, r3, #29
 8001c8a:	0240      	lsls	r0, r0, #9
 8001c8c:	4323      	orrs	r3, r4
 8001c8e:	0d4a      	lsrs	r2, r1, #21
 8001c90:	0b04      	lsrs	r4, r0, #12
 8001c92:	0512      	lsls	r2, r2, #20
 8001c94:	07ed      	lsls	r5, r5, #31
 8001c96:	4322      	orrs	r2, r4
 8001c98:	432a      	orrs	r2, r5
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	0011      	movs	r1, r2
 8001c9e:	bcf0      	pop	{r4, r5, r6, r7}
 8001ca0:	46bb      	mov	fp, r7
 8001ca2:	46b2      	mov	sl, r6
 8001ca4:	46a9      	mov	r9, r5
 8001ca6:	46a0      	mov	r8, r4
 8001ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001caa:	4642      	mov	r2, r8
 8001cac:	1a12      	subs	r2, r2, r0
 8001cae:	2a00      	cmp	r2, #0
 8001cb0:	dd52      	ble.n	8001d58 <__aeabi_dsub+0x20c>
 8001cb2:	2800      	cmp	r0, #0
 8001cb4:	d100      	bne.n	8001cb8 <__aeabi_dsub+0x16c>
 8001cb6:	e09c      	b.n	8001df2 <__aeabi_dsub+0x2a6>
 8001cb8:	45a0      	cmp	r8, r4
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dsub+0x172>
 8001cbc:	e0ca      	b.n	8001e54 <__aeabi_dsub+0x308>
 8001cbe:	2080      	movs	r0, #128	; 0x80
 8001cc0:	0400      	lsls	r0, r0, #16
 8001cc2:	4301      	orrs	r1, r0
 8001cc4:	2a38      	cmp	r2, #56	; 0x38
 8001cc6:	dd00      	ble.n	8001cca <__aeabi_dsub+0x17e>
 8001cc8:	e149      	b.n	8001f5e <__aeabi_dsub+0x412>
 8001cca:	2a1f      	cmp	r2, #31
 8001ccc:	dc00      	bgt.n	8001cd0 <__aeabi_dsub+0x184>
 8001cce:	e197      	b.n	8002000 <__aeabi_dsub+0x4b4>
 8001cd0:	0010      	movs	r0, r2
 8001cd2:	000e      	movs	r6, r1
 8001cd4:	3820      	subs	r0, #32
 8001cd6:	40c6      	lsrs	r6, r0
 8001cd8:	2a20      	cmp	r2, #32
 8001cda:	d004      	beq.n	8001ce6 <__aeabi_dsub+0x19a>
 8001cdc:	2040      	movs	r0, #64	; 0x40
 8001cde:	1a82      	subs	r2, r0, r2
 8001ce0:	4091      	lsls	r1, r2
 8001ce2:	430f      	orrs	r7, r1
 8001ce4:	46b9      	mov	r9, r7
 8001ce6:	464c      	mov	r4, r9
 8001ce8:	1e62      	subs	r2, r4, #1
 8001cea:	4194      	sbcs	r4, r2
 8001cec:	4334      	orrs	r4, r6
 8001cee:	e13a      	b.n	8001f66 <__aeabi_dsub+0x41a>
 8001cf0:	000a      	movs	r2, r1
 8001cf2:	433a      	orrs	r2, r7
 8001cf4:	d028      	beq.n	8001d48 <__aeabi_dsub+0x1fc>
 8001cf6:	46b3      	mov	fp, r6
 8001cf8:	42b5      	cmp	r5, r6
 8001cfa:	d02b      	beq.n	8001d54 <__aeabi_dsub+0x208>
 8001cfc:	4a6b      	ldr	r2, [pc, #428]	; (8001eac <__aeabi_dsub+0x360>)
 8001cfe:	4442      	add	r2, r8
 8001d00:	2a00      	cmp	r2, #0
 8001d02:	d05d      	beq.n	8001dc0 <__aeabi_dsub+0x274>
 8001d04:	4642      	mov	r2, r8
 8001d06:	4644      	mov	r4, r8
 8001d08:	1a82      	subs	r2, r0, r2
 8001d0a:	2c00      	cmp	r4, #0
 8001d0c:	d000      	beq.n	8001d10 <__aeabi_dsub+0x1c4>
 8001d0e:	e0f5      	b.n	8001efc <__aeabi_dsub+0x3b0>
 8001d10:	4665      	mov	r5, ip
 8001d12:	431d      	orrs	r5, r3
 8001d14:	d100      	bne.n	8001d18 <__aeabi_dsub+0x1cc>
 8001d16:	e19c      	b.n	8002052 <__aeabi_dsub+0x506>
 8001d18:	1e55      	subs	r5, r2, #1
 8001d1a:	2a01      	cmp	r2, #1
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_dsub+0x1d4>
 8001d1e:	e1fb      	b.n	8002118 <__aeabi_dsub+0x5cc>
 8001d20:	4c60      	ldr	r4, [pc, #384]	; (8001ea4 <__aeabi_dsub+0x358>)
 8001d22:	42a2      	cmp	r2, r4
 8001d24:	d100      	bne.n	8001d28 <__aeabi_dsub+0x1dc>
 8001d26:	e1bd      	b.n	80020a4 <__aeabi_dsub+0x558>
 8001d28:	002a      	movs	r2, r5
 8001d2a:	e0f0      	b.n	8001f0e <__aeabi_dsub+0x3c2>
 8001d2c:	0008      	movs	r0, r1
 8001d2e:	4338      	orrs	r0, r7
 8001d30:	d100      	bne.n	8001d34 <__aeabi_dsub+0x1e8>
 8001d32:	e0c3      	b.n	8001ebc <__aeabi_dsub+0x370>
 8001d34:	1e50      	subs	r0, r2, #1
 8001d36:	2a01      	cmp	r2, #1
 8001d38:	d100      	bne.n	8001d3c <__aeabi_dsub+0x1f0>
 8001d3a:	e1a8      	b.n	800208e <__aeabi_dsub+0x542>
 8001d3c:	4c59      	ldr	r4, [pc, #356]	; (8001ea4 <__aeabi_dsub+0x358>)
 8001d3e:	42a2      	cmp	r2, r4
 8001d40:	d100      	bne.n	8001d44 <__aeabi_dsub+0x1f8>
 8001d42:	e087      	b.n	8001e54 <__aeabi_dsub+0x308>
 8001d44:	0002      	movs	r2, r0
 8001d46:	e736      	b.n	8001bb6 <__aeabi_dsub+0x6a>
 8001d48:	2201      	movs	r2, #1
 8001d4a:	4056      	eors	r6, r2
 8001d4c:	46b3      	mov	fp, r6
 8001d4e:	42b5      	cmp	r5, r6
 8001d50:	d000      	beq.n	8001d54 <__aeabi_dsub+0x208>
 8001d52:	e721      	b.n	8001b98 <__aeabi_dsub+0x4c>
 8001d54:	4a55      	ldr	r2, [pc, #340]	; (8001eac <__aeabi_dsub+0x360>)
 8001d56:	4442      	add	r2, r8
 8001d58:	2a00      	cmp	r2, #0
 8001d5a:	d100      	bne.n	8001d5e <__aeabi_dsub+0x212>
 8001d5c:	e0b5      	b.n	8001eca <__aeabi_dsub+0x37e>
 8001d5e:	4642      	mov	r2, r8
 8001d60:	4644      	mov	r4, r8
 8001d62:	1a82      	subs	r2, r0, r2
 8001d64:	2c00      	cmp	r4, #0
 8001d66:	d100      	bne.n	8001d6a <__aeabi_dsub+0x21e>
 8001d68:	e138      	b.n	8001fdc <__aeabi_dsub+0x490>
 8001d6a:	4e4e      	ldr	r6, [pc, #312]	; (8001ea4 <__aeabi_dsub+0x358>)
 8001d6c:	42b0      	cmp	r0, r6
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x226>
 8001d70:	e1de      	b.n	8002130 <__aeabi_dsub+0x5e4>
 8001d72:	2680      	movs	r6, #128	; 0x80
 8001d74:	4664      	mov	r4, ip
 8001d76:	0436      	lsls	r6, r6, #16
 8001d78:	4334      	orrs	r4, r6
 8001d7a:	46a4      	mov	ip, r4
 8001d7c:	2a38      	cmp	r2, #56	; 0x38
 8001d7e:	dd00      	ble.n	8001d82 <__aeabi_dsub+0x236>
 8001d80:	e196      	b.n	80020b0 <__aeabi_dsub+0x564>
 8001d82:	2a1f      	cmp	r2, #31
 8001d84:	dd00      	ble.n	8001d88 <__aeabi_dsub+0x23c>
 8001d86:	e224      	b.n	80021d2 <__aeabi_dsub+0x686>
 8001d88:	2620      	movs	r6, #32
 8001d8a:	1ab4      	subs	r4, r6, r2
 8001d8c:	46a2      	mov	sl, r4
 8001d8e:	4664      	mov	r4, ip
 8001d90:	4656      	mov	r6, sl
 8001d92:	40b4      	lsls	r4, r6
 8001d94:	46a1      	mov	r9, r4
 8001d96:	001c      	movs	r4, r3
 8001d98:	464e      	mov	r6, r9
 8001d9a:	40d4      	lsrs	r4, r2
 8001d9c:	4326      	orrs	r6, r4
 8001d9e:	0034      	movs	r4, r6
 8001da0:	4656      	mov	r6, sl
 8001da2:	40b3      	lsls	r3, r6
 8001da4:	1e5e      	subs	r6, r3, #1
 8001da6:	41b3      	sbcs	r3, r6
 8001da8:	431c      	orrs	r4, r3
 8001daa:	4663      	mov	r3, ip
 8001dac:	40d3      	lsrs	r3, r2
 8001dae:	18c9      	adds	r1, r1, r3
 8001db0:	19e4      	adds	r4, r4, r7
 8001db2:	42bc      	cmp	r4, r7
 8001db4:	41bf      	sbcs	r7, r7
 8001db6:	427f      	negs	r7, r7
 8001db8:	46b9      	mov	r9, r7
 8001dba:	4680      	mov	r8, r0
 8001dbc:	4489      	add	r9, r1
 8001dbe:	e0d8      	b.n	8001f72 <__aeabi_dsub+0x426>
 8001dc0:	4640      	mov	r0, r8
 8001dc2:	4c3b      	ldr	r4, [pc, #236]	; (8001eb0 <__aeabi_dsub+0x364>)
 8001dc4:	3001      	adds	r0, #1
 8001dc6:	4220      	tst	r0, r4
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x280>
 8001dca:	e0b4      	b.n	8001f36 <__aeabi_dsub+0x3ea>
 8001dcc:	4640      	mov	r0, r8
 8001dce:	2800      	cmp	r0, #0
 8001dd0:	d000      	beq.n	8001dd4 <__aeabi_dsub+0x288>
 8001dd2:	e144      	b.n	800205e <__aeabi_dsub+0x512>
 8001dd4:	4660      	mov	r0, ip
 8001dd6:	4318      	orrs	r0, r3
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_dsub+0x290>
 8001dda:	e190      	b.n	80020fe <__aeabi_dsub+0x5b2>
 8001ddc:	0008      	movs	r0, r1
 8001dde:	4338      	orrs	r0, r7
 8001de0:	d000      	beq.n	8001de4 <__aeabi_dsub+0x298>
 8001de2:	e1aa      	b.n	800213a <__aeabi_dsub+0x5ee>
 8001de4:	4661      	mov	r1, ip
 8001de6:	08db      	lsrs	r3, r3, #3
 8001de8:	0749      	lsls	r1, r1, #29
 8001dea:	430b      	orrs	r3, r1
 8001dec:	4661      	mov	r1, ip
 8001dee:	08cc      	lsrs	r4, r1, #3
 8001df0:	e027      	b.n	8001e42 <__aeabi_dsub+0x2f6>
 8001df2:	0008      	movs	r0, r1
 8001df4:	4338      	orrs	r0, r7
 8001df6:	d061      	beq.n	8001ebc <__aeabi_dsub+0x370>
 8001df8:	1e50      	subs	r0, r2, #1
 8001dfa:	2a01      	cmp	r2, #1
 8001dfc:	d100      	bne.n	8001e00 <__aeabi_dsub+0x2b4>
 8001dfe:	e139      	b.n	8002074 <__aeabi_dsub+0x528>
 8001e00:	42a2      	cmp	r2, r4
 8001e02:	d027      	beq.n	8001e54 <__aeabi_dsub+0x308>
 8001e04:	0002      	movs	r2, r0
 8001e06:	e75d      	b.n	8001cc4 <__aeabi_dsub+0x178>
 8001e08:	0002      	movs	r2, r0
 8001e0a:	391f      	subs	r1, #31
 8001e0c:	40ca      	lsrs	r2, r1
 8001e0e:	0011      	movs	r1, r2
 8001e10:	2b20      	cmp	r3, #32
 8001e12:	d003      	beq.n	8001e1c <__aeabi_dsub+0x2d0>
 8001e14:	2240      	movs	r2, #64	; 0x40
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	4098      	lsls	r0, r3
 8001e1a:	4304      	orrs	r4, r0
 8001e1c:	1e63      	subs	r3, r4, #1
 8001e1e:	419c      	sbcs	r4, r3
 8001e20:	2300      	movs	r3, #0
 8001e22:	4699      	mov	r9, r3
 8001e24:	4698      	mov	r8, r3
 8001e26:	430c      	orrs	r4, r1
 8001e28:	0763      	lsls	r3, r4, #29
 8001e2a:	d000      	beq.n	8001e2e <__aeabi_dsub+0x2e2>
 8001e2c:	e712      	b.n	8001c54 <__aeabi_dsub+0x108>
 8001e2e:	464b      	mov	r3, r9
 8001e30:	464a      	mov	r2, r9
 8001e32:	08e4      	lsrs	r4, r4, #3
 8001e34:	075b      	lsls	r3, r3, #29
 8001e36:	4323      	orrs	r3, r4
 8001e38:	08d4      	lsrs	r4, r2, #3
 8001e3a:	4642      	mov	r2, r8
 8001e3c:	4919      	ldr	r1, [pc, #100]	; (8001ea4 <__aeabi_dsub+0x358>)
 8001e3e:	428a      	cmp	r2, r1
 8001e40:	d00e      	beq.n	8001e60 <__aeabi_dsub+0x314>
 8001e42:	0324      	lsls	r4, r4, #12
 8001e44:	0552      	lsls	r2, r2, #21
 8001e46:	0b24      	lsrs	r4, r4, #12
 8001e48:	0d52      	lsrs	r2, r2, #21
 8001e4a:	e722      	b.n	8001c92 <__aeabi_dsub+0x146>
 8001e4c:	000a      	movs	r2, r1
 8001e4e:	2400      	movs	r4, #0
 8001e50:	2300      	movs	r3, #0
 8001e52:	e71e      	b.n	8001c92 <__aeabi_dsub+0x146>
 8001e54:	08db      	lsrs	r3, r3, #3
 8001e56:	4662      	mov	r2, ip
 8001e58:	0752      	lsls	r2, r2, #29
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	4662      	mov	r2, ip
 8001e5e:	08d4      	lsrs	r4, r2, #3
 8001e60:	001a      	movs	r2, r3
 8001e62:	4322      	orrs	r2, r4
 8001e64:	d100      	bne.n	8001e68 <__aeabi_dsub+0x31c>
 8001e66:	e1fc      	b.n	8002262 <__aeabi_dsub+0x716>
 8001e68:	2280      	movs	r2, #128	; 0x80
 8001e6a:	0312      	lsls	r2, r2, #12
 8001e6c:	4314      	orrs	r4, r2
 8001e6e:	0324      	lsls	r4, r4, #12
 8001e70:	4a0c      	ldr	r2, [pc, #48]	; (8001ea4 <__aeabi_dsub+0x358>)
 8001e72:	0b24      	lsrs	r4, r4, #12
 8001e74:	e70d      	b.n	8001c92 <__aeabi_dsub+0x146>
 8001e76:	0020      	movs	r0, r4
 8001e78:	f000 faa4 	bl	80023c4 <__clzsi2>
 8001e7c:	0001      	movs	r1, r0
 8001e7e:	3118      	adds	r1, #24
 8001e80:	291f      	cmp	r1, #31
 8001e82:	dc00      	bgt.n	8001e86 <__aeabi_dsub+0x33a>
 8001e84:	e6c4      	b.n	8001c10 <__aeabi_dsub+0xc4>
 8001e86:	3808      	subs	r0, #8
 8001e88:	4084      	lsls	r4, r0
 8001e8a:	4643      	mov	r3, r8
 8001e8c:	0020      	movs	r0, r4
 8001e8e:	2400      	movs	r4, #0
 8001e90:	4588      	cmp	r8, r1
 8001e92:	dc00      	bgt.n	8001e96 <__aeabi_dsub+0x34a>
 8001e94:	e6c8      	b.n	8001c28 <__aeabi_dsub+0xdc>
 8001e96:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <__aeabi_dsub+0x35c>)
 8001e98:	1a5b      	subs	r3, r3, r1
 8001e9a:	4010      	ands	r0, r2
 8001e9c:	4698      	mov	r8, r3
 8001e9e:	4681      	mov	r9, r0
 8001ea0:	e6d6      	b.n	8001c50 <__aeabi_dsub+0x104>
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	000007ff 	.word	0x000007ff
 8001ea8:	ff7fffff 	.word	0xff7fffff
 8001eac:	fffff801 	.word	0xfffff801
 8001eb0:	000007fe 	.word	0x000007fe
 8001eb4:	430f      	orrs	r7, r1
 8001eb6:	1e7a      	subs	r2, r7, #1
 8001eb8:	4197      	sbcs	r7, r2
 8001eba:	e691      	b.n	8001be0 <__aeabi_dsub+0x94>
 8001ebc:	4661      	mov	r1, ip
 8001ebe:	08db      	lsrs	r3, r3, #3
 8001ec0:	0749      	lsls	r1, r1, #29
 8001ec2:	430b      	orrs	r3, r1
 8001ec4:	4661      	mov	r1, ip
 8001ec6:	08cc      	lsrs	r4, r1, #3
 8001ec8:	e7b8      	b.n	8001e3c <__aeabi_dsub+0x2f0>
 8001eca:	4640      	mov	r0, r8
 8001ecc:	4cd3      	ldr	r4, [pc, #844]	; (800221c <__aeabi_dsub+0x6d0>)
 8001ece:	3001      	adds	r0, #1
 8001ed0:	4220      	tst	r0, r4
 8001ed2:	d000      	beq.n	8001ed6 <__aeabi_dsub+0x38a>
 8001ed4:	e0a2      	b.n	800201c <__aeabi_dsub+0x4d0>
 8001ed6:	4640      	mov	r0, r8
 8001ed8:	2800      	cmp	r0, #0
 8001eda:	d000      	beq.n	8001ede <__aeabi_dsub+0x392>
 8001edc:	e101      	b.n	80020e2 <__aeabi_dsub+0x596>
 8001ede:	4660      	mov	r0, ip
 8001ee0:	4318      	orrs	r0, r3
 8001ee2:	d100      	bne.n	8001ee6 <__aeabi_dsub+0x39a>
 8001ee4:	e15e      	b.n	80021a4 <__aeabi_dsub+0x658>
 8001ee6:	0008      	movs	r0, r1
 8001ee8:	4338      	orrs	r0, r7
 8001eea:	d000      	beq.n	8001eee <__aeabi_dsub+0x3a2>
 8001eec:	e15f      	b.n	80021ae <__aeabi_dsub+0x662>
 8001eee:	4661      	mov	r1, ip
 8001ef0:	08db      	lsrs	r3, r3, #3
 8001ef2:	0749      	lsls	r1, r1, #29
 8001ef4:	430b      	orrs	r3, r1
 8001ef6:	4661      	mov	r1, ip
 8001ef8:	08cc      	lsrs	r4, r1, #3
 8001efa:	e7a2      	b.n	8001e42 <__aeabi_dsub+0x2f6>
 8001efc:	4dc8      	ldr	r5, [pc, #800]	; (8002220 <__aeabi_dsub+0x6d4>)
 8001efe:	42a8      	cmp	r0, r5
 8001f00:	d100      	bne.n	8001f04 <__aeabi_dsub+0x3b8>
 8001f02:	e0cf      	b.n	80020a4 <__aeabi_dsub+0x558>
 8001f04:	2580      	movs	r5, #128	; 0x80
 8001f06:	4664      	mov	r4, ip
 8001f08:	042d      	lsls	r5, r5, #16
 8001f0a:	432c      	orrs	r4, r5
 8001f0c:	46a4      	mov	ip, r4
 8001f0e:	2a38      	cmp	r2, #56	; 0x38
 8001f10:	dc56      	bgt.n	8001fc0 <__aeabi_dsub+0x474>
 8001f12:	2a1f      	cmp	r2, #31
 8001f14:	dd00      	ble.n	8001f18 <__aeabi_dsub+0x3cc>
 8001f16:	e0d1      	b.n	80020bc <__aeabi_dsub+0x570>
 8001f18:	2520      	movs	r5, #32
 8001f1a:	001e      	movs	r6, r3
 8001f1c:	1aad      	subs	r5, r5, r2
 8001f1e:	4664      	mov	r4, ip
 8001f20:	40ab      	lsls	r3, r5
 8001f22:	40ac      	lsls	r4, r5
 8001f24:	40d6      	lsrs	r6, r2
 8001f26:	1e5d      	subs	r5, r3, #1
 8001f28:	41ab      	sbcs	r3, r5
 8001f2a:	4334      	orrs	r4, r6
 8001f2c:	4323      	orrs	r3, r4
 8001f2e:	4664      	mov	r4, ip
 8001f30:	40d4      	lsrs	r4, r2
 8001f32:	1b09      	subs	r1, r1, r4
 8001f34:	e049      	b.n	8001fca <__aeabi_dsub+0x47e>
 8001f36:	4660      	mov	r0, ip
 8001f38:	1bdc      	subs	r4, r3, r7
 8001f3a:	1a46      	subs	r6, r0, r1
 8001f3c:	42a3      	cmp	r3, r4
 8001f3e:	4180      	sbcs	r0, r0
 8001f40:	4240      	negs	r0, r0
 8001f42:	4681      	mov	r9, r0
 8001f44:	0030      	movs	r0, r6
 8001f46:	464e      	mov	r6, r9
 8001f48:	1b80      	subs	r0, r0, r6
 8001f4a:	4681      	mov	r9, r0
 8001f4c:	0200      	lsls	r0, r0, #8
 8001f4e:	d476      	bmi.n	800203e <__aeabi_dsub+0x4f2>
 8001f50:	464b      	mov	r3, r9
 8001f52:	4323      	orrs	r3, r4
 8001f54:	d000      	beq.n	8001f58 <__aeabi_dsub+0x40c>
 8001f56:	e652      	b.n	8001bfe <__aeabi_dsub+0xb2>
 8001f58:	2400      	movs	r4, #0
 8001f5a:	2500      	movs	r5, #0
 8001f5c:	e771      	b.n	8001e42 <__aeabi_dsub+0x2f6>
 8001f5e:	4339      	orrs	r1, r7
 8001f60:	000c      	movs	r4, r1
 8001f62:	1e62      	subs	r2, r4, #1
 8001f64:	4194      	sbcs	r4, r2
 8001f66:	18e4      	adds	r4, r4, r3
 8001f68:	429c      	cmp	r4, r3
 8001f6a:	419b      	sbcs	r3, r3
 8001f6c:	425b      	negs	r3, r3
 8001f6e:	4463      	add	r3, ip
 8001f70:	4699      	mov	r9, r3
 8001f72:	464b      	mov	r3, r9
 8001f74:	021b      	lsls	r3, r3, #8
 8001f76:	d400      	bmi.n	8001f7a <__aeabi_dsub+0x42e>
 8001f78:	e756      	b.n	8001e28 <__aeabi_dsub+0x2dc>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	469c      	mov	ip, r3
 8001f7e:	4ba8      	ldr	r3, [pc, #672]	; (8002220 <__aeabi_dsub+0x6d4>)
 8001f80:	44e0      	add	r8, ip
 8001f82:	4598      	cmp	r8, r3
 8001f84:	d038      	beq.n	8001ff8 <__aeabi_dsub+0x4ac>
 8001f86:	464b      	mov	r3, r9
 8001f88:	48a6      	ldr	r0, [pc, #664]	; (8002224 <__aeabi_dsub+0x6d8>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4003      	ands	r3, r0
 8001f8e:	0018      	movs	r0, r3
 8001f90:	0863      	lsrs	r3, r4, #1
 8001f92:	4014      	ands	r4, r2
 8001f94:	431c      	orrs	r4, r3
 8001f96:	07c3      	lsls	r3, r0, #31
 8001f98:	431c      	orrs	r4, r3
 8001f9a:	0843      	lsrs	r3, r0, #1
 8001f9c:	4699      	mov	r9, r3
 8001f9e:	e657      	b.n	8001c50 <__aeabi_dsub+0x104>
 8001fa0:	0010      	movs	r0, r2
 8001fa2:	000e      	movs	r6, r1
 8001fa4:	3820      	subs	r0, #32
 8001fa6:	40c6      	lsrs	r6, r0
 8001fa8:	2a20      	cmp	r2, #32
 8001faa:	d004      	beq.n	8001fb6 <__aeabi_dsub+0x46a>
 8001fac:	2040      	movs	r0, #64	; 0x40
 8001fae:	1a82      	subs	r2, r0, r2
 8001fb0:	4091      	lsls	r1, r2
 8001fb2:	430f      	orrs	r7, r1
 8001fb4:	46b9      	mov	r9, r7
 8001fb6:	464f      	mov	r7, r9
 8001fb8:	1e7a      	subs	r2, r7, #1
 8001fba:	4197      	sbcs	r7, r2
 8001fbc:	4337      	orrs	r7, r6
 8001fbe:	e60f      	b.n	8001be0 <__aeabi_dsub+0x94>
 8001fc0:	4662      	mov	r2, ip
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	0013      	movs	r3, r2
 8001fc6:	1e5a      	subs	r2, r3, #1
 8001fc8:	4193      	sbcs	r3, r2
 8001fca:	1afc      	subs	r4, r7, r3
 8001fcc:	42a7      	cmp	r7, r4
 8001fce:	41bf      	sbcs	r7, r7
 8001fd0:	427f      	negs	r7, r7
 8001fd2:	1bcb      	subs	r3, r1, r7
 8001fd4:	4699      	mov	r9, r3
 8001fd6:	465d      	mov	r5, fp
 8001fd8:	4680      	mov	r8, r0
 8001fda:	e608      	b.n	8001bee <__aeabi_dsub+0xa2>
 8001fdc:	4666      	mov	r6, ip
 8001fde:	431e      	orrs	r6, r3
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x498>
 8001fe2:	e0be      	b.n	8002162 <__aeabi_dsub+0x616>
 8001fe4:	1e56      	subs	r6, r2, #1
 8001fe6:	2a01      	cmp	r2, #1
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x4a0>
 8001fea:	e109      	b.n	8002200 <__aeabi_dsub+0x6b4>
 8001fec:	4c8c      	ldr	r4, [pc, #560]	; (8002220 <__aeabi_dsub+0x6d4>)
 8001fee:	42a2      	cmp	r2, r4
 8001ff0:	d100      	bne.n	8001ff4 <__aeabi_dsub+0x4a8>
 8001ff2:	e119      	b.n	8002228 <__aeabi_dsub+0x6dc>
 8001ff4:	0032      	movs	r2, r6
 8001ff6:	e6c1      	b.n	8001d7c <__aeabi_dsub+0x230>
 8001ff8:	4642      	mov	r2, r8
 8001ffa:	2400      	movs	r4, #0
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	e648      	b.n	8001c92 <__aeabi_dsub+0x146>
 8002000:	2020      	movs	r0, #32
 8002002:	000c      	movs	r4, r1
 8002004:	1a80      	subs	r0, r0, r2
 8002006:	003e      	movs	r6, r7
 8002008:	4087      	lsls	r7, r0
 800200a:	4084      	lsls	r4, r0
 800200c:	40d6      	lsrs	r6, r2
 800200e:	1e78      	subs	r0, r7, #1
 8002010:	4187      	sbcs	r7, r0
 8002012:	40d1      	lsrs	r1, r2
 8002014:	4334      	orrs	r4, r6
 8002016:	433c      	orrs	r4, r7
 8002018:	448c      	add	ip, r1
 800201a:	e7a4      	b.n	8001f66 <__aeabi_dsub+0x41a>
 800201c:	4a80      	ldr	r2, [pc, #512]	; (8002220 <__aeabi_dsub+0x6d4>)
 800201e:	4290      	cmp	r0, r2
 8002020:	d100      	bne.n	8002024 <__aeabi_dsub+0x4d8>
 8002022:	e0e9      	b.n	80021f8 <__aeabi_dsub+0x6ac>
 8002024:	19df      	adds	r7, r3, r7
 8002026:	429f      	cmp	r7, r3
 8002028:	419b      	sbcs	r3, r3
 800202a:	4461      	add	r1, ip
 800202c:	425b      	negs	r3, r3
 800202e:	18c9      	adds	r1, r1, r3
 8002030:	07cc      	lsls	r4, r1, #31
 8002032:	087f      	lsrs	r7, r7, #1
 8002034:	084b      	lsrs	r3, r1, #1
 8002036:	4699      	mov	r9, r3
 8002038:	4680      	mov	r8, r0
 800203a:	433c      	orrs	r4, r7
 800203c:	e6f4      	b.n	8001e28 <__aeabi_dsub+0x2dc>
 800203e:	1afc      	subs	r4, r7, r3
 8002040:	42a7      	cmp	r7, r4
 8002042:	41bf      	sbcs	r7, r7
 8002044:	4663      	mov	r3, ip
 8002046:	427f      	negs	r7, r7
 8002048:	1ac9      	subs	r1, r1, r3
 800204a:	1bcb      	subs	r3, r1, r7
 800204c:	4699      	mov	r9, r3
 800204e:	465d      	mov	r5, fp
 8002050:	e5d5      	b.n	8001bfe <__aeabi_dsub+0xb2>
 8002052:	08ff      	lsrs	r7, r7, #3
 8002054:	074b      	lsls	r3, r1, #29
 8002056:	465d      	mov	r5, fp
 8002058:	433b      	orrs	r3, r7
 800205a:	08cc      	lsrs	r4, r1, #3
 800205c:	e6ee      	b.n	8001e3c <__aeabi_dsub+0x2f0>
 800205e:	4662      	mov	r2, ip
 8002060:	431a      	orrs	r2, r3
 8002062:	d000      	beq.n	8002066 <__aeabi_dsub+0x51a>
 8002064:	e082      	b.n	800216c <__aeabi_dsub+0x620>
 8002066:	000b      	movs	r3, r1
 8002068:	433b      	orrs	r3, r7
 800206a:	d11b      	bne.n	80020a4 <__aeabi_dsub+0x558>
 800206c:	2480      	movs	r4, #128	; 0x80
 800206e:	2500      	movs	r5, #0
 8002070:	0324      	lsls	r4, r4, #12
 8002072:	e6f9      	b.n	8001e68 <__aeabi_dsub+0x31c>
 8002074:	19dc      	adds	r4, r3, r7
 8002076:	429c      	cmp	r4, r3
 8002078:	419b      	sbcs	r3, r3
 800207a:	4461      	add	r1, ip
 800207c:	4689      	mov	r9, r1
 800207e:	425b      	negs	r3, r3
 8002080:	4499      	add	r9, r3
 8002082:	464b      	mov	r3, r9
 8002084:	021b      	lsls	r3, r3, #8
 8002086:	d444      	bmi.n	8002112 <__aeabi_dsub+0x5c6>
 8002088:	2301      	movs	r3, #1
 800208a:	4698      	mov	r8, r3
 800208c:	e6cc      	b.n	8001e28 <__aeabi_dsub+0x2dc>
 800208e:	1bdc      	subs	r4, r3, r7
 8002090:	4662      	mov	r2, ip
 8002092:	42a3      	cmp	r3, r4
 8002094:	419b      	sbcs	r3, r3
 8002096:	1a51      	subs	r1, r2, r1
 8002098:	425b      	negs	r3, r3
 800209a:	1acb      	subs	r3, r1, r3
 800209c:	4699      	mov	r9, r3
 800209e:	2301      	movs	r3, #1
 80020a0:	4698      	mov	r8, r3
 80020a2:	e5a4      	b.n	8001bee <__aeabi_dsub+0xa2>
 80020a4:	08ff      	lsrs	r7, r7, #3
 80020a6:	074b      	lsls	r3, r1, #29
 80020a8:	465d      	mov	r5, fp
 80020aa:	433b      	orrs	r3, r7
 80020ac:	08cc      	lsrs	r4, r1, #3
 80020ae:	e6d7      	b.n	8001e60 <__aeabi_dsub+0x314>
 80020b0:	4662      	mov	r2, ip
 80020b2:	431a      	orrs	r2, r3
 80020b4:	0014      	movs	r4, r2
 80020b6:	1e63      	subs	r3, r4, #1
 80020b8:	419c      	sbcs	r4, r3
 80020ba:	e679      	b.n	8001db0 <__aeabi_dsub+0x264>
 80020bc:	0015      	movs	r5, r2
 80020be:	4664      	mov	r4, ip
 80020c0:	3d20      	subs	r5, #32
 80020c2:	40ec      	lsrs	r4, r5
 80020c4:	46a0      	mov	r8, r4
 80020c6:	2a20      	cmp	r2, #32
 80020c8:	d005      	beq.n	80020d6 <__aeabi_dsub+0x58a>
 80020ca:	2540      	movs	r5, #64	; 0x40
 80020cc:	4664      	mov	r4, ip
 80020ce:	1aaa      	subs	r2, r5, r2
 80020d0:	4094      	lsls	r4, r2
 80020d2:	4323      	orrs	r3, r4
 80020d4:	469a      	mov	sl, r3
 80020d6:	4654      	mov	r4, sl
 80020d8:	1e63      	subs	r3, r4, #1
 80020da:	419c      	sbcs	r4, r3
 80020dc:	4643      	mov	r3, r8
 80020de:	4323      	orrs	r3, r4
 80020e0:	e773      	b.n	8001fca <__aeabi_dsub+0x47e>
 80020e2:	4662      	mov	r2, ip
 80020e4:	431a      	orrs	r2, r3
 80020e6:	d023      	beq.n	8002130 <__aeabi_dsub+0x5e4>
 80020e8:	000a      	movs	r2, r1
 80020ea:	433a      	orrs	r2, r7
 80020ec:	d000      	beq.n	80020f0 <__aeabi_dsub+0x5a4>
 80020ee:	e0a0      	b.n	8002232 <__aeabi_dsub+0x6e6>
 80020f0:	4662      	mov	r2, ip
 80020f2:	08db      	lsrs	r3, r3, #3
 80020f4:	0752      	lsls	r2, r2, #29
 80020f6:	4313      	orrs	r3, r2
 80020f8:	4662      	mov	r2, ip
 80020fa:	08d4      	lsrs	r4, r2, #3
 80020fc:	e6b0      	b.n	8001e60 <__aeabi_dsub+0x314>
 80020fe:	000b      	movs	r3, r1
 8002100:	433b      	orrs	r3, r7
 8002102:	d100      	bne.n	8002106 <__aeabi_dsub+0x5ba>
 8002104:	e728      	b.n	8001f58 <__aeabi_dsub+0x40c>
 8002106:	08ff      	lsrs	r7, r7, #3
 8002108:	074b      	lsls	r3, r1, #29
 800210a:	465d      	mov	r5, fp
 800210c:	433b      	orrs	r3, r7
 800210e:	08cc      	lsrs	r4, r1, #3
 8002110:	e697      	b.n	8001e42 <__aeabi_dsub+0x2f6>
 8002112:	2302      	movs	r3, #2
 8002114:	4698      	mov	r8, r3
 8002116:	e736      	b.n	8001f86 <__aeabi_dsub+0x43a>
 8002118:	1afc      	subs	r4, r7, r3
 800211a:	42a7      	cmp	r7, r4
 800211c:	41bf      	sbcs	r7, r7
 800211e:	4663      	mov	r3, ip
 8002120:	427f      	negs	r7, r7
 8002122:	1ac9      	subs	r1, r1, r3
 8002124:	1bcb      	subs	r3, r1, r7
 8002126:	4699      	mov	r9, r3
 8002128:	2301      	movs	r3, #1
 800212a:	465d      	mov	r5, fp
 800212c:	4698      	mov	r8, r3
 800212e:	e55e      	b.n	8001bee <__aeabi_dsub+0xa2>
 8002130:	074b      	lsls	r3, r1, #29
 8002132:	08ff      	lsrs	r7, r7, #3
 8002134:	433b      	orrs	r3, r7
 8002136:	08cc      	lsrs	r4, r1, #3
 8002138:	e692      	b.n	8001e60 <__aeabi_dsub+0x314>
 800213a:	1bdc      	subs	r4, r3, r7
 800213c:	4660      	mov	r0, ip
 800213e:	42a3      	cmp	r3, r4
 8002140:	41b6      	sbcs	r6, r6
 8002142:	1a40      	subs	r0, r0, r1
 8002144:	4276      	negs	r6, r6
 8002146:	1b80      	subs	r0, r0, r6
 8002148:	4681      	mov	r9, r0
 800214a:	0200      	lsls	r0, r0, #8
 800214c:	d560      	bpl.n	8002210 <__aeabi_dsub+0x6c4>
 800214e:	1afc      	subs	r4, r7, r3
 8002150:	42a7      	cmp	r7, r4
 8002152:	41bf      	sbcs	r7, r7
 8002154:	4663      	mov	r3, ip
 8002156:	427f      	negs	r7, r7
 8002158:	1ac9      	subs	r1, r1, r3
 800215a:	1bcb      	subs	r3, r1, r7
 800215c:	4699      	mov	r9, r3
 800215e:	465d      	mov	r5, fp
 8002160:	e576      	b.n	8001c50 <__aeabi_dsub+0x104>
 8002162:	08ff      	lsrs	r7, r7, #3
 8002164:	074b      	lsls	r3, r1, #29
 8002166:	433b      	orrs	r3, r7
 8002168:	08cc      	lsrs	r4, r1, #3
 800216a:	e667      	b.n	8001e3c <__aeabi_dsub+0x2f0>
 800216c:	000a      	movs	r2, r1
 800216e:	08db      	lsrs	r3, r3, #3
 8002170:	433a      	orrs	r2, r7
 8002172:	d100      	bne.n	8002176 <__aeabi_dsub+0x62a>
 8002174:	e66f      	b.n	8001e56 <__aeabi_dsub+0x30a>
 8002176:	4662      	mov	r2, ip
 8002178:	0752      	lsls	r2, r2, #29
 800217a:	4313      	orrs	r3, r2
 800217c:	4662      	mov	r2, ip
 800217e:	08d4      	lsrs	r4, r2, #3
 8002180:	2280      	movs	r2, #128	; 0x80
 8002182:	0312      	lsls	r2, r2, #12
 8002184:	4214      	tst	r4, r2
 8002186:	d007      	beq.n	8002198 <__aeabi_dsub+0x64c>
 8002188:	08c8      	lsrs	r0, r1, #3
 800218a:	4210      	tst	r0, r2
 800218c:	d104      	bne.n	8002198 <__aeabi_dsub+0x64c>
 800218e:	465d      	mov	r5, fp
 8002190:	0004      	movs	r4, r0
 8002192:	08fb      	lsrs	r3, r7, #3
 8002194:	0749      	lsls	r1, r1, #29
 8002196:	430b      	orrs	r3, r1
 8002198:	0f5a      	lsrs	r2, r3, #29
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	08db      	lsrs	r3, r3, #3
 800219e:	0752      	lsls	r2, r2, #29
 80021a0:	4313      	orrs	r3, r2
 80021a2:	e65d      	b.n	8001e60 <__aeabi_dsub+0x314>
 80021a4:	074b      	lsls	r3, r1, #29
 80021a6:	08ff      	lsrs	r7, r7, #3
 80021a8:	433b      	orrs	r3, r7
 80021aa:	08cc      	lsrs	r4, r1, #3
 80021ac:	e649      	b.n	8001e42 <__aeabi_dsub+0x2f6>
 80021ae:	19dc      	adds	r4, r3, r7
 80021b0:	429c      	cmp	r4, r3
 80021b2:	419b      	sbcs	r3, r3
 80021b4:	4461      	add	r1, ip
 80021b6:	4689      	mov	r9, r1
 80021b8:	425b      	negs	r3, r3
 80021ba:	4499      	add	r9, r3
 80021bc:	464b      	mov	r3, r9
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	d400      	bmi.n	80021c4 <__aeabi_dsub+0x678>
 80021c2:	e631      	b.n	8001e28 <__aeabi_dsub+0x2dc>
 80021c4:	464a      	mov	r2, r9
 80021c6:	4b17      	ldr	r3, [pc, #92]	; (8002224 <__aeabi_dsub+0x6d8>)
 80021c8:	401a      	ands	r2, r3
 80021ca:	2301      	movs	r3, #1
 80021cc:	4691      	mov	r9, r2
 80021ce:	4698      	mov	r8, r3
 80021d0:	e62a      	b.n	8001e28 <__aeabi_dsub+0x2dc>
 80021d2:	0016      	movs	r6, r2
 80021d4:	4664      	mov	r4, ip
 80021d6:	3e20      	subs	r6, #32
 80021d8:	40f4      	lsrs	r4, r6
 80021da:	46a0      	mov	r8, r4
 80021dc:	2a20      	cmp	r2, #32
 80021de:	d005      	beq.n	80021ec <__aeabi_dsub+0x6a0>
 80021e0:	2640      	movs	r6, #64	; 0x40
 80021e2:	4664      	mov	r4, ip
 80021e4:	1ab2      	subs	r2, r6, r2
 80021e6:	4094      	lsls	r4, r2
 80021e8:	4323      	orrs	r3, r4
 80021ea:	469a      	mov	sl, r3
 80021ec:	4654      	mov	r4, sl
 80021ee:	1e63      	subs	r3, r4, #1
 80021f0:	419c      	sbcs	r4, r3
 80021f2:	4643      	mov	r3, r8
 80021f4:	431c      	orrs	r4, r3
 80021f6:	e5db      	b.n	8001db0 <__aeabi_dsub+0x264>
 80021f8:	0002      	movs	r2, r0
 80021fa:	2400      	movs	r4, #0
 80021fc:	2300      	movs	r3, #0
 80021fe:	e548      	b.n	8001c92 <__aeabi_dsub+0x146>
 8002200:	19dc      	adds	r4, r3, r7
 8002202:	42bc      	cmp	r4, r7
 8002204:	41bf      	sbcs	r7, r7
 8002206:	4461      	add	r1, ip
 8002208:	4689      	mov	r9, r1
 800220a:	427f      	negs	r7, r7
 800220c:	44b9      	add	r9, r7
 800220e:	e738      	b.n	8002082 <__aeabi_dsub+0x536>
 8002210:	464b      	mov	r3, r9
 8002212:	4323      	orrs	r3, r4
 8002214:	d100      	bne.n	8002218 <__aeabi_dsub+0x6cc>
 8002216:	e69f      	b.n	8001f58 <__aeabi_dsub+0x40c>
 8002218:	e606      	b.n	8001e28 <__aeabi_dsub+0x2dc>
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	000007fe 	.word	0x000007fe
 8002220:	000007ff 	.word	0x000007ff
 8002224:	ff7fffff 	.word	0xff7fffff
 8002228:	08ff      	lsrs	r7, r7, #3
 800222a:	074b      	lsls	r3, r1, #29
 800222c:	433b      	orrs	r3, r7
 800222e:	08cc      	lsrs	r4, r1, #3
 8002230:	e616      	b.n	8001e60 <__aeabi_dsub+0x314>
 8002232:	4662      	mov	r2, ip
 8002234:	08db      	lsrs	r3, r3, #3
 8002236:	0752      	lsls	r2, r2, #29
 8002238:	4313      	orrs	r3, r2
 800223a:	4662      	mov	r2, ip
 800223c:	08d4      	lsrs	r4, r2, #3
 800223e:	2280      	movs	r2, #128	; 0x80
 8002240:	0312      	lsls	r2, r2, #12
 8002242:	4214      	tst	r4, r2
 8002244:	d007      	beq.n	8002256 <__aeabi_dsub+0x70a>
 8002246:	08c8      	lsrs	r0, r1, #3
 8002248:	4210      	tst	r0, r2
 800224a:	d104      	bne.n	8002256 <__aeabi_dsub+0x70a>
 800224c:	465d      	mov	r5, fp
 800224e:	0004      	movs	r4, r0
 8002250:	08fb      	lsrs	r3, r7, #3
 8002252:	0749      	lsls	r1, r1, #29
 8002254:	430b      	orrs	r3, r1
 8002256:	0f5a      	lsrs	r2, r3, #29
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	0752      	lsls	r2, r2, #29
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4313      	orrs	r3, r2
 8002260:	e5fe      	b.n	8001e60 <__aeabi_dsub+0x314>
 8002262:	2300      	movs	r3, #0
 8002264:	4a01      	ldr	r2, [pc, #4]	; (800226c <__aeabi_dsub+0x720>)
 8002266:	001c      	movs	r4, r3
 8002268:	e513      	b.n	8001c92 <__aeabi_dsub+0x146>
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	000007ff 	.word	0x000007ff

08002270 <__aeabi_dcmpun>:
 8002270:	b570      	push	{r4, r5, r6, lr}
 8002272:	0005      	movs	r5, r0
 8002274:	480c      	ldr	r0, [pc, #48]	; (80022a8 <__aeabi_dcmpun+0x38>)
 8002276:	031c      	lsls	r4, r3, #12
 8002278:	0016      	movs	r6, r2
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	030a      	lsls	r2, r1, #12
 800227e:	0049      	lsls	r1, r1, #1
 8002280:	0b12      	lsrs	r2, r2, #12
 8002282:	0d49      	lsrs	r1, r1, #21
 8002284:	0b24      	lsrs	r4, r4, #12
 8002286:	0d5b      	lsrs	r3, r3, #21
 8002288:	4281      	cmp	r1, r0
 800228a:	d008      	beq.n	800229e <__aeabi_dcmpun+0x2e>
 800228c:	4a06      	ldr	r2, [pc, #24]	; (80022a8 <__aeabi_dcmpun+0x38>)
 800228e:	2000      	movs	r0, #0
 8002290:	4293      	cmp	r3, r2
 8002292:	d103      	bne.n	800229c <__aeabi_dcmpun+0x2c>
 8002294:	0020      	movs	r0, r4
 8002296:	4330      	orrs	r0, r6
 8002298:	1e43      	subs	r3, r0, #1
 800229a:	4198      	sbcs	r0, r3
 800229c:	bd70      	pop	{r4, r5, r6, pc}
 800229e:	2001      	movs	r0, #1
 80022a0:	432a      	orrs	r2, r5
 80022a2:	d1fb      	bne.n	800229c <__aeabi_dcmpun+0x2c>
 80022a4:	e7f2      	b.n	800228c <__aeabi_dcmpun+0x1c>
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	000007ff 	.word	0x000007ff

080022ac <__aeabi_d2iz>:
 80022ac:	000a      	movs	r2, r1
 80022ae:	b530      	push	{r4, r5, lr}
 80022b0:	4c13      	ldr	r4, [pc, #76]	; (8002300 <__aeabi_d2iz+0x54>)
 80022b2:	0053      	lsls	r3, r2, #1
 80022b4:	0309      	lsls	r1, r1, #12
 80022b6:	0005      	movs	r5, r0
 80022b8:	0b09      	lsrs	r1, r1, #12
 80022ba:	2000      	movs	r0, #0
 80022bc:	0d5b      	lsrs	r3, r3, #21
 80022be:	0fd2      	lsrs	r2, r2, #31
 80022c0:	42a3      	cmp	r3, r4
 80022c2:	dd04      	ble.n	80022ce <__aeabi_d2iz+0x22>
 80022c4:	480f      	ldr	r0, [pc, #60]	; (8002304 <__aeabi_d2iz+0x58>)
 80022c6:	4283      	cmp	r3, r0
 80022c8:	dd02      	ble.n	80022d0 <__aeabi_d2iz+0x24>
 80022ca:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <__aeabi_d2iz+0x5c>)
 80022cc:	18d0      	adds	r0, r2, r3
 80022ce:	bd30      	pop	{r4, r5, pc}
 80022d0:	2080      	movs	r0, #128	; 0x80
 80022d2:	0340      	lsls	r0, r0, #13
 80022d4:	4301      	orrs	r1, r0
 80022d6:	480d      	ldr	r0, [pc, #52]	; (800230c <__aeabi_d2iz+0x60>)
 80022d8:	1ac0      	subs	r0, r0, r3
 80022da:	281f      	cmp	r0, #31
 80022dc:	dd08      	ble.n	80022f0 <__aeabi_d2iz+0x44>
 80022de:	480c      	ldr	r0, [pc, #48]	; (8002310 <__aeabi_d2iz+0x64>)
 80022e0:	1ac3      	subs	r3, r0, r3
 80022e2:	40d9      	lsrs	r1, r3
 80022e4:	000b      	movs	r3, r1
 80022e6:	4258      	negs	r0, r3
 80022e8:	2a00      	cmp	r2, #0
 80022ea:	d1f0      	bne.n	80022ce <__aeabi_d2iz+0x22>
 80022ec:	0018      	movs	r0, r3
 80022ee:	e7ee      	b.n	80022ce <__aeabi_d2iz+0x22>
 80022f0:	4c08      	ldr	r4, [pc, #32]	; (8002314 <__aeabi_d2iz+0x68>)
 80022f2:	40c5      	lsrs	r5, r0
 80022f4:	46a4      	mov	ip, r4
 80022f6:	4463      	add	r3, ip
 80022f8:	4099      	lsls	r1, r3
 80022fa:	000b      	movs	r3, r1
 80022fc:	432b      	orrs	r3, r5
 80022fe:	e7f2      	b.n	80022e6 <__aeabi_d2iz+0x3a>
 8002300:	000003fe 	.word	0x000003fe
 8002304:	0000041d 	.word	0x0000041d
 8002308:	7fffffff 	.word	0x7fffffff
 800230c:	00000433 	.word	0x00000433
 8002310:	00000413 	.word	0x00000413
 8002314:	fffffbed 	.word	0xfffffbed

08002318 <__aeabi_i2d>:
 8002318:	b570      	push	{r4, r5, r6, lr}
 800231a:	2800      	cmp	r0, #0
 800231c:	d016      	beq.n	800234c <__aeabi_i2d+0x34>
 800231e:	17c3      	asrs	r3, r0, #31
 8002320:	18c5      	adds	r5, r0, r3
 8002322:	405d      	eors	r5, r3
 8002324:	0fc4      	lsrs	r4, r0, #31
 8002326:	0028      	movs	r0, r5
 8002328:	f000 f84c 	bl	80023c4 <__clzsi2>
 800232c:	4a11      	ldr	r2, [pc, #68]	; (8002374 <__aeabi_i2d+0x5c>)
 800232e:	1a12      	subs	r2, r2, r0
 8002330:	280a      	cmp	r0, #10
 8002332:	dc16      	bgt.n	8002362 <__aeabi_i2d+0x4a>
 8002334:	0003      	movs	r3, r0
 8002336:	002e      	movs	r6, r5
 8002338:	3315      	adds	r3, #21
 800233a:	409e      	lsls	r6, r3
 800233c:	230b      	movs	r3, #11
 800233e:	1a18      	subs	r0, r3, r0
 8002340:	40c5      	lsrs	r5, r0
 8002342:	0552      	lsls	r2, r2, #21
 8002344:	032d      	lsls	r5, r5, #12
 8002346:	0b2d      	lsrs	r5, r5, #12
 8002348:	0d53      	lsrs	r3, r2, #21
 800234a:	e003      	b.n	8002354 <__aeabi_i2d+0x3c>
 800234c:	2400      	movs	r4, #0
 800234e:	2300      	movs	r3, #0
 8002350:	2500      	movs	r5, #0
 8002352:	2600      	movs	r6, #0
 8002354:	051b      	lsls	r3, r3, #20
 8002356:	432b      	orrs	r3, r5
 8002358:	07e4      	lsls	r4, r4, #31
 800235a:	4323      	orrs	r3, r4
 800235c:	0030      	movs	r0, r6
 800235e:	0019      	movs	r1, r3
 8002360:	bd70      	pop	{r4, r5, r6, pc}
 8002362:	380b      	subs	r0, #11
 8002364:	4085      	lsls	r5, r0
 8002366:	0552      	lsls	r2, r2, #21
 8002368:	032d      	lsls	r5, r5, #12
 800236a:	2600      	movs	r6, #0
 800236c:	0b2d      	lsrs	r5, r5, #12
 800236e:	0d53      	lsrs	r3, r2, #21
 8002370:	e7f0      	b.n	8002354 <__aeabi_i2d+0x3c>
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	0000041e 	.word	0x0000041e

08002378 <__aeabi_ui2d>:
 8002378:	b510      	push	{r4, lr}
 800237a:	1e04      	subs	r4, r0, #0
 800237c:	d010      	beq.n	80023a0 <__aeabi_ui2d+0x28>
 800237e:	f000 f821 	bl	80023c4 <__clzsi2>
 8002382:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <__aeabi_ui2d+0x48>)
 8002384:	1a1b      	subs	r3, r3, r0
 8002386:	280a      	cmp	r0, #10
 8002388:	dc11      	bgt.n	80023ae <__aeabi_ui2d+0x36>
 800238a:	220b      	movs	r2, #11
 800238c:	0021      	movs	r1, r4
 800238e:	1a12      	subs	r2, r2, r0
 8002390:	40d1      	lsrs	r1, r2
 8002392:	3015      	adds	r0, #21
 8002394:	030a      	lsls	r2, r1, #12
 8002396:	055b      	lsls	r3, r3, #21
 8002398:	4084      	lsls	r4, r0
 800239a:	0b12      	lsrs	r2, r2, #12
 800239c:	0d5b      	lsrs	r3, r3, #21
 800239e:	e001      	b.n	80023a4 <__aeabi_ui2d+0x2c>
 80023a0:	2300      	movs	r3, #0
 80023a2:	2200      	movs	r2, #0
 80023a4:	051b      	lsls	r3, r3, #20
 80023a6:	4313      	orrs	r3, r2
 80023a8:	0020      	movs	r0, r4
 80023aa:	0019      	movs	r1, r3
 80023ac:	bd10      	pop	{r4, pc}
 80023ae:	0022      	movs	r2, r4
 80023b0:	380b      	subs	r0, #11
 80023b2:	4082      	lsls	r2, r0
 80023b4:	055b      	lsls	r3, r3, #21
 80023b6:	0312      	lsls	r2, r2, #12
 80023b8:	2400      	movs	r4, #0
 80023ba:	0b12      	lsrs	r2, r2, #12
 80023bc:	0d5b      	lsrs	r3, r3, #21
 80023be:	e7f1      	b.n	80023a4 <__aeabi_ui2d+0x2c>
 80023c0:	0000041e 	.word	0x0000041e

080023c4 <__clzsi2>:
 80023c4:	211c      	movs	r1, #28
 80023c6:	2301      	movs	r3, #1
 80023c8:	041b      	lsls	r3, r3, #16
 80023ca:	4298      	cmp	r0, r3
 80023cc:	d301      	bcc.n	80023d2 <__clzsi2+0xe>
 80023ce:	0c00      	lsrs	r0, r0, #16
 80023d0:	3910      	subs	r1, #16
 80023d2:	0a1b      	lsrs	r3, r3, #8
 80023d4:	4298      	cmp	r0, r3
 80023d6:	d301      	bcc.n	80023dc <__clzsi2+0x18>
 80023d8:	0a00      	lsrs	r0, r0, #8
 80023da:	3908      	subs	r1, #8
 80023dc:	091b      	lsrs	r3, r3, #4
 80023de:	4298      	cmp	r0, r3
 80023e0:	d301      	bcc.n	80023e6 <__clzsi2+0x22>
 80023e2:	0900      	lsrs	r0, r0, #4
 80023e4:	3904      	subs	r1, #4
 80023e6:	a202      	add	r2, pc, #8	; (adr r2, 80023f0 <__clzsi2+0x2c>)
 80023e8:	5c10      	ldrb	r0, [r2, r0]
 80023ea:	1840      	adds	r0, r0, r1
 80023ec:	4770      	bx	lr
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	02020304 	.word	0x02020304
 80023f4:	01010101 	.word	0x01010101
	...

08002400 <main>:

void readECG();
void readTemperature();
void readHnS();

int main(void) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af04      	add	r7, sp, #16

	RCC_CONFIG_48MHZ();
 8002406:	f002 f803 	bl	8004410 <RCC_CONFIG_48MHZ>
	uart_print_config(9600);
 800240a:	2396      	movs	r3, #150	; 0x96
 800240c:	019b      	lsls	r3, r3, #6
 800240e:	0018      	movs	r0, r3
 8002410:	f002 fac8 	bl	80049a4 <uart_print_config>
	USART_INIT(USART3, PORTC, PORTC, 10, 11, 9600);
 8002414:	4a2c      	ldr	r2, [pc, #176]	; (80024c8 <main+0xc8>)
 8002416:	492c      	ldr	r1, [pc, #176]	; (80024c8 <main+0xc8>)
 8002418:	482c      	ldr	r0, [pc, #176]	; (80024cc <main+0xcc>)
 800241a:	2396      	movs	r3, #150	; 0x96
 800241c:	019b      	lsls	r3, r3, #6
 800241e:	9301      	str	r3, [sp, #4]
 8002420:	230b      	movs	r3, #11
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	230a      	movs	r3, #10
 8002426:	f002 f86f 	bl	8004508 <USART_INIT>
	USART_IT_EN(USART3, 0, 1, 0);
 800242a:	4828      	ldr	r0, [pc, #160]	; (80024cc <main+0xcc>)
 800242c:	2300      	movs	r3, #0
 800242e:	2201      	movs	r2, #1
 8002430:	2100      	movs	r1, #0
 8002432:	f002 f88d 	bl	8004550 <USART_IT_EN>
	print("Working\n");
 8002436:	4b26      	ldr	r3, [pc, #152]	; (80024d0 <main+0xd0>)
 8002438:	0018      	movs	r0, r3
 800243a:	f002 fa8b 	bl	8004954 <print>

	ret = adc_en(100);
 800243e:	2064      	movs	r0, #100	; 0x64
 8002440:	f001 f93a 	bl	80036b8 <adc_en>
 8002444:	0003      	movs	r3, r0
 8002446:	001a      	movs	r2, r3
 8002448:	4b22      	ldr	r3, [pc, #136]	; (80024d4 <main+0xd4>)
 800244a:	701a      	strb	r2, [r3, #0]
	if (ret != BML_OK) {
 800244c:	4b21      	ldr	r3, [pc, #132]	; (80024d4 <main+0xd4>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <main+0x60>
		USART_WRITE(USART2, "Error: ADC EN\n\r", 10, 100);
 8002454:	4920      	ldr	r1, [pc, #128]	; (80024d8 <main+0xd8>)
 8002456:	4821      	ldr	r0, [pc, #132]	; (80024dc <main+0xdc>)
 8002458:	2364      	movs	r3, #100	; 0x64
 800245a:	220a      	movs	r2, #10
 800245c:	f002 fa3e 	bl	80048dc <USART_WRITE>
//		while (1)
//			;
	}

	mlx90614_setUnit(MLX90614_UNIT_C);
 8002460:	2002      	movs	r0, #2
 8002462:	f002 fb2b 	bl	8004abc <mlx90614_setUnit>

	gpio_settingfn();
 8002466:	f000 f83d 	bl	80024e4 <gpio_settingfn>

	ret = mlx90614_init();
 800246a:	f002 fadb 	bl	8004a24 <mlx90614_init>
 800246e:	0003      	movs	r3, r0
 8002470:	001a      	movs	r2, r3
 8002472:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <main+0xd4>)
 8002474:	701a      	strb	r2, [r3, #0]
	if (ret != BML_OK) {
 8002476:	4b17      	ldr	r3, [pc, #92]	; (80024d4 <main+0xd4>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <main+0x86>
		print("Error in Init MLX\n\r");
 800247e:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <main+0xe0>)
 8002480:	0018      	movs	r0, r3
 8002482:	f002 fa67 	bl	8004954 <print>
//		while (1)
//			;
	}

	adc_config(sample_time_7, CONT_off, SCANDIR_off, AUTOFF_off, WAIT_off,
 8002486:	2300      	movs	r3, #0
 8002488:	9302      	str	r3, [sp, #8]
 800248a:	2301      	movs	r3, #1
 800248c:	9301      	str	r3, [sp, #4]
 800248e:	2300      	movs	r3, #0
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	2300      	movs	r3, #0
 8002494:	2200      	movs	r2, #0
 8002496:	2100      	movs	r1, #0
 8002498:	2007      	movs	r0, #7
 800249a:	f001 fa27 	bl	80038ec <adc_config>
	DISCEN_on, OVRMOD_off);

//	===============| TFT |=====================//
	LCD_Begin();
 800249e:	f002 fcab 	bl	8004df8 <LCD_Begin>
	LCD_SetRotation(0);
 80024a2:	2000      	movs	r0, #0
 80024a4:	f003 f80e 	bl	80054c4 <LCD_SetRotation>
//	LCD_FillScreen(BLACK);
	colorgradient(0, 0, TFTWIDTH, TFTHEIGHT, 50);
 80024a8:	23a0      	movs	r3, #160	; 0xa0
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	2232      	movs	r2, #50	; 0x32
 80024ae:	9200      	str	r2, [sp, #0]
 80024b0:	22f0      	movs	r2, #240	; 0xf0
 80024b2:	2100      	movs	r1, #0
 80024b4:	2000      	movs	r0, #0
 80024b6:	f000 f8d4 	bl	8002662 <colorgradient>

	LCD_SetTextSize(3);
 80024ba:	2003      	movs	r0, #3
 80024bc:	f002 ffec 	bl	8005498 <LCD_SetTextSize>
	//===========================================//

	while (1) {

//		print("---\n");
		readECG();
 80024c0:	f000 f904 	bl	80026cc <readECG>
 80024c4:	e7fc      	b.n	80024c0 <main+0xc0>
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	48000800 	.word	0x48000800
 80024cc:	40004800 	.word	0x40004800
 80024d0:	08008938 	.word	0x08008938
 80024d4:	20000238 	.word	0x20000238
 80024d8:	08008944 	.word	0x08008944
 80024dc:	40004400 	.word	0x40004400
 80024e0:	08008954 	.word	0x08008954

080024e4 <gpio_settingfn>:
	return 0;
}

//===================| Functions |=============================//

void gpio_settingfn(void) {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af02      	add	r7, sp, #8
	gpio_config(PORTA, 11, INPUT_MODE, LOW_SPEED, EN_PD, PHPL);	// Interrupt pin PA11
 80024ea:	2390      	movs	r3, #144	; 0x90
 80024ec:	05d8      	lsls	r0, r3, #23
 80024ee:	2300      	movs	r3, #0
 80024f0:	9301      	str	r3, [sp, #4]
 80024f2:	2302      	movs	r3, #2
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	2300      	movs	r3, #0
 80024f8:	2200      	movs	r2, #0
 80024fa:	210b      	movs	r1, #11
 80024fc:	f001 faf6 	bl	8003aec <gpio_config>
	gpio_config(PORTA, 12, INPUT_MODE, LOW_SPEED, EN_PD, PHPL);	// Interrupt pin PA12
 8002500:	2390      	movs	r3, #144	; 0x90
 8002502:	05d8      	lsls	r0, r3, #23
 8002504:	2300      	movs	r3, #0
 8002506:	9301      	str	r3, [sp, #4]
 8002508:	2302      	movs	r3, #2
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	2300      	movs	r3, #0
 800250e:	2200      	movs	r2, #0
 8002510:	210c      	movs	r1, #12
 8002512:	f001 faeb 	bl	8003aec <gpio_config>

	gpio_IT_config(PORTA, 11, RISING_EDGE);
 8002516:	2390      	movs	r3, #144	; 0x90
 8002518:	05db      	lsls	r3, r3, #23
 800251a:	2200      	movs	r2, #0
 800251c:	210b      	movs	r1, #11
 800251e:	0018      	movs	r0, r3
 8002520:	f001 fbee 	bl	8003d00 <gpio_IT_config>
	gpio_IT_config(PORTA, 12, RISING_EDGE);
 8002524:	2390      	movs	r3, #144	; 0x90
 8002526:	05db      	lsls	r3, r3, #23
 8002528:	2200      	movs	r2, #0
 800252a:	210c      	movs	r1, #12
 800252c:	0018      	movs	r0, r3
 800252e:	f001 fbe7 	bl	8003d00 <gpio_IT_config>

	gpio_IT_EN(11, EXTI4_15_IRQn);
 8002532:	2107      	movs	r1, #7
 8002534:	200b      	movs	r0, #11
 8002536:	f001 fd8f 	bl	8004058 <gpio_IT_EN>
	gpio_IT_EN(12, EXTI4_15_IRQn);
 800253a:	2107      	movs	r1, #7
 800253c:	200c      	movs	r0, #12
 800253e:	f001 fd8b 	bl	8004058 <gpio_IT_EN>

	gpio_config(ADC14_PORT, ADC14_PIN, ANALOG_MODE, LOW_SPEED, DI_PUPD, PHPL);// Analog Pin
 8002542:	4816      	ldr	r0, [pc, #88]	; (800259c <gpio_settingfn+0xb8>)
 8002544:	2300      	movs	r3, #0
 8002546:	9301      	str	r3, [sp, #4]
 8002548:	2300      	movs	r3, #0
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	2300      	movs	r3, #0
 800254e:	2203      	movs	r2, #3
 8002550:	2104      	movs	r1, #4
 8002552:	f001 facb 	bl	8003aec <gpio_config>

	gpio_config(SCL_PORT, SCL_PIN, ALT_MODE, HIGH_SPEED, EN_PU, OD);// I2C pins
 8002556:	4812      	ldr	r0, [pc, #72]	; (80025a0 <gpio_settingfn+0xbc>)
 8002558:	2301      	movs	r3, #1
 800255a:	9301      	str	r3, [sp, #4]
 800255c:	2301      	movs	r3, #1
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	2302      	movs	r3, #2
 8002562:	2202      	movs	r2, #2
 8002564:	2108      	movs	r1, #8
 8002566:	f001 fac1 	bl	8003aec <gpio_config>
	gpio_config(SDA_PORT, SDA_PIN, ALT_MODE, HIGH_SPEED, EN_PU, OD);
 800256a:	480d      	ldr	r0, [pc, #52]	; (80025a0 <gpio_settingfn+0xbc>)
 800256c:	2301      	movs	r3, #1
 800256e:	9301      	str	r3, [sp, #4]
 8002570:	2301      	movs	r3, #1
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	2302      	movs	r3, #2
 8002576:	2202      	movs	r2, #2
 8002578:	2109      	movs	r1, #9
 800257a:	f001 fab7 	bl	8003aec <gpio_config>

	gpio_altfn(SCL_PORT, SCL_PIN, I2C1_SCL_PB8);
 800257e:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <gpio_settingfn+0xbc>)
 8002580:	2201      	movs	r2, #1
 8002582:	2108      	movs	r1, #8
 8002584:	0018      	movs	r0, r3
 8002586:	f001 fb78 	bl	8003c7a <gpio_altfn>
	gpio_altfn(SDA_PORT, SDA_PIN, I2C1_SDA_PB9);
 800258a:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <gpio_settingfn+0xbc>)
 800258c:	2201      	movs	r2, #1
 800258e:	2109      	movs	r1, #9
 8002590:	0018      	movs	r0, r3
 8002592:	f001 fb72 	bl	8003c7a <gpio_altfn>
}
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	48000800 	.word	0x48000800
 80025a0:	48000400 	.word	0x48000400

080025a4 <gpio11_callback>:

void gpio11_callback() {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
	print("Gpio 11 IT\n");
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <gpio11_callback+0x14>)
 80025aa:	0018      	movs	r0, r3
 80025ac:	f002 f9d2 	bl	8004954 <print>
}
 80025b0:	46c0      	nop			; (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	08008968 	.word	0x08008968

080025bc <gpio12_callback>:
void gpio12_callback() {
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
	print("Gpio 12 IT\n");
 80025c0:	4b03      	ldr	r3, [pc, #12]	; (80025d0 <gpio12_callback+0x14>)
 80025c2:	0018      	movs	r0, r3
 80025c4:	f002 f9c6 	bl	8004954 <print>
}
 80025c8:	46c0      	nop			; (mov r8, r8)
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	08008974 	.word	0x08008974

080025d4 <temp2color>:

	//===============================================================//

}

uint16_t temp2color(int degree, int lo, int hi) {
 80025d4:	b5b0      	push	{r4, r5, r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af02      	add	r7, sp, #8
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
	uint8_t r, g, b;
	r = map(degree, lo, hi, 255, 0);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	b298      	uxth	r0, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	b299      	uxth	r1, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	2300      	movs	r3, #0
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	23ff      	movs	r3, #255	; 0xff
 80025f2:	f001 fa01 	bl	80039f8 <map>
 80025f6:	0003      	movs	r3, r0
 80025f8:	001a      	movs	r2, r3
 80025fa:	2417      	movs	r4, #23
 80025fc:	193b      	adds	r3, r7, r4
 80025fe:	701a      	strb	r2, [r3, #0]
	g = 0;
 8002600:	2516      	movs	r5, #22
 8002602:	197b      	adds	r3, r7, r5
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
	b = map(degree, lo, hi, 0, 255);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	b298      	uxth	r0, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	b299      	uxth	r1, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	b29a      	uxth	r2, r3
 8002614:	23ff      	movs	r3, #255	; 0xff
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	2300      	movs	r3, #0
 800261a:	f001 f9ed 	bl	80039f8 <map>
 800261e:	0003      	movs	r3, r0
 8002620:	001a      	movs	r2, r3
 8002622:	2015      	movs	r0, #21
 8002624:	183b      	adds	r3, r7, r0
 8002626:	701a      	strb	r2, [r3, #0]
	return LCD_Color565(r, g, b);
 8002628:	193b      	adds	r3, r7, r4
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	021b      	lsls	r3, r3, #8
 800262e:	b21b      	sxth	r3, r3
 8002630:	0adb      	lsrs	r3, r3, #11
 8002632:	02db      	lsls	r3, r3, #11
 8002634:	b21a      	sxth	r2, r3
 8002636:	197b      	adds	r3, r7, r5
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	b219      	sxth	r1, r3
 800263e:	23fc      	movs	r3, #252	; 0xfc
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	400b      	ands	r3, r1
 8002644:	b21b      	sxth	r3, r3
 8002646:	4313      	orrs	r3, r2
 8002648:	b21a      	sxth	r2, r3
 800264a:	183b      	adds	r3, r7, r0
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	08db      	lsrs	r3, r3, #3
 8002650:	b2db      	uxtb	r3, r3
 8002652:	b21b      	sxth	r3, r3
 8002654:	4313      	orrs	r3, r2
 8002656:	b21b      	sxth	r3, r3
 8002658:	b29b      	uxth	r3, r3
}
 800265a:	0018      	movs	r0, r3
 800265c:	46bd      	mov	sp, r7
 800265e:	b006      	add	sp, #24
 8002660:	bdb0      	pop	{r4, r5, r7, pc}

08002662 <colorgradient>:

void colorgradient(int x, int y, int w, int h, int percent) {
 8002662:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002664:	b087      	sub	sp, #28
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607a      	str	r2, [r7, #4]
 800266e:	603b      	str	r3, [r7, #0]
//	LCD_DrawRect(x, y, w, h, BLACK);
	for (int row = 1; row < h - 1; row++) {
 8002670:	2301      	movs	r3, #1
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	e01f      	b.n	80026b6 <colorgradient+0x54>
		LCD_DrawFastHLine(x + 1, y + row, w - 2, temp2color(row, 0, h));
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	b29b      	uxth	r3, r3
 800267a:	3301      	adds	r3, #1
 800267c:	b29b      	uxth	r3, r3
 800267e:	b21c      	sxth	r4, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	b29a      	uxth	r2, r3
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	b29b      	uxth	r3, r3
 8002688:	18d3      	adds	r3, r2, r3
 800268a:	b29b      	uxth	r3, r3
 800268c:	b21d      	sxth	r5, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	b29b      	uxth	r3, r3
 8002692:	3b02      	subs	r3, #2
 8002694:	b29b      	uxth	r3, r3
 8002696:	b21e      	sxth	r6, r3
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2100      	movs	r1, #0
 800269e:	0018      	movs	r0, r3
 80026a0:	f7ff ff98 	bl	80025d4 <temp2color>
 80026a4:	0003      	movs	r3, r0
 80026a6:	0032      	movs	r2, r6
 80026a8:	0029      	movs	r1, r5
 80026aa:	0020      	movs	r0, r4
 80026ac:	f002 fc56 	bl	8004f5c <LCD_DrawFastHLine>
	for (int row = 1; row < h - 1; row++) {
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	3301      	adds	r3, #1
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	3b01      	subs	r3, #1
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	429a      	cmp	r2, r3
 80026be:	dbda      	blt.n	8002676 <colorgradient+0x14>
	}
}
 80026c0:	46c0      	nop			; (mov r8, r8)
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	46bd      	mov	sp, r7
 80026c6:	b007      	add	sp, #28
 80026c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080026cc <readECG>:
		graph_x += graphRefreshRate;
	}

}

void readECG() {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
	ret = adc_read(&adcVal, 1, 10);
 80026d0:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <readECG+0x44>)
 80026d2:	220a      	movs	r2, #10
 80026d4:	2101      	movs	r1, #1
 80026d6:	0018      	movs	r0, r3
 80026d8:	f001 f810 	bl	80036fc <adc_read>
 80026dc:	0003      	movs	r3, r0
 80026de:	001a      	movs	r2, r3
 80026e0:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <readECG+0x48>)
 80026e2:	701a      	strb	r2, [r3, #0]
	if (ret == BML_OK) {
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <readECG+0x48>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d108      	bne.n	80026fe <readECG+0x32>
		print("ECG Value: %d\n\r", adcVal);
 80026ec:	4b08      	ldr	r3, [pc, #32]	; (8002710 <readECG+0x44>)
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	001a      	movs	r2, r3
 80026f2:	4b09      	ldr	r3, [pc, #36]	; (8002718 <readECG+0x4c>)
 80026f4:	0011      	movs	r1, r2
 80026f6:	0018      	movs	r0, r3
 80026f8:	f002 f92c 	bl	8004954 <print>
	} else {
		USART_WRITE(USART2, "Error: ADC read\n\r", 17, 100);
	}
}
 80026fc:	e005      	b.n	800270a <readECG+0x3e>
		USART_WRITE(USART2, "Error: ADC read\n\r", 17, 100);
 80026fe:	4907      	ldr	r1, [pc, #28]	; (800271c <readECG+0x50>)
 8002700:	4807      	ldr	r0, [pc, #28]	; (8002720 <readECG+0x54>)
 8002702:	2364      	movs	r3, #100	; 0x64
 8002704:	2211      	movs	r2, #17
 8002706:	f002 f8e9 	bl	80048dc <USART_WRITE>
}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	2000023a 	.word	0x2000023a
 8002714:	20000238 	.word	0x20000238
 8002718:	080089bc 	.word	0x080089bc
 800271c:	080089cc 	.word	0x080089cc
 8002720:	40004400 	.word	0x40004400

08002724 <EXTI4_15_IRQHandler>:

}

//=======================| Interrupt Handlers |=============================//

void EXTI4_15_IRQHandler() {
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0

	if (gpio_IT_CHK(11)) {
 800272a:	200b      	movs	r0, #11
 800272c:	f001 fcb4 	bl	8004098 <gpio_IT_CHK>
 8002730:	1e03      	subs	r3, r0, #0
 8002732:	d00d      	beq.n	8002750 <EXTI4_15_IRQHandler+0x2c>
		for (int i = 500000; i > 0; i--)
 8002734:	4b12      	ldr	r3, [pc, #72]	; (8002780 <EXTI4_15_IRQHandler+0x5c>)
 8002736:	607b      	str	r3, [r7, #4]
 8002738:	e002      	b.n	8002740 <EXTI4_15_IRQHandler+0x1c>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3b01      	subs	r3, #1
 800273e:	607b      	str	r3, [r7, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	dcf9      	bgt.n	800273a <EXTI4_15_IRQHandler+0x16>
			;
		gpio_IT_CLR(11);
 8002746:	200b      	movs	r0, #11
 8002748:	f001 fcbe 	bl	80040c8 <gpio_IT_CLR>
		gpio11_callback();
 800274c:	f7ff ff2a 	bl	80025a4 <gpio11_callback>
	}
	if (gpio_IT_CHK(12)) {
 8002750:	200c      	movs	r0, #12
 8002752:	f001 fca1 	bl	8004098 <gpio_IT_CHK>
 8002756:	1e03      	subs	r3, r0, #0
 8002758:	d00d      	beq.n	8002776 <EXTI4_15_IRQHandler+0x52>
		for (int i = 500000; i > 0; i--)
 800275a:	4b09      	ldr	r3, [pc, #36]	; (8002780 <EXTI4_15_IRQHandler+0x5c>)
 800275c:	603b      	str	r3, [r7, #0]
 800275e:	e002      	b.n	8002766 <EXTI4_15_IRQHandler+0x42>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	3b01      	subs	r3, #1
 8002764:	603b      	str	r3, [r7, #0]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	dcf9      	bgt.n	8002760 <EXTI4_15_IRQHandler+0x3c>
			;
		gpio_IT_CLR(12);
 800276c:	200c      	movs	r0, #12
 800276e:	f001 fcab 	bl	80040c8 <gpio_IT_CLR>
		gpio12_callback();
 8002772:	f7ff ff23 	bl	80025bc <gpio12_callback>
	}
}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	46bd      	mov	sp, r7
 800277a:	b002      	add	sp, #8
 800277c:	bd80      	pop	{r7, pc}
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	0007a120 	.word	0x0007a120

08002784 <USART3_4_IRQHandler>:

void USART3_4_IRQHandler() {
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
	char chr;
	uint8_t i = 0;
 800278a:	1dbb      	adds	r3, r7, #6
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
	if ((USART3->ISR & USART_ISR_RXNE) == USART_ISR_RXNE) {
 8002790:	4b19      	ldr	r3, [pc, #100]	; (80027f8 <USART3_4_IRQHandler+0x74>)
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	2220      	movs	r2, #32
 8002796:	4013      	ands	r3, r2
 8002798:	2b20      	cmp	r3, #32
 800279a:	d104      	bne.n	80027a6 <USART3_4_IRQHandler+0x22>
		chr = (uint8_t) (USART3->RDR);
 800279c:	4b16      	ldr	r3, [pc, #88]	; (80027f8 <USART3_4_IRQHandler+0x74>)
 800279e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	1dfb      	adds	r3, r7, #7
 80027a4:	701a      	strb	r2, [r3, #0]
//			USART_WRITE(USART2, chr, 1, 10);
	}
	if (chr == '\n') {
 80027a6:	1dfb      	adds	r3, r7, #7
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b0a      	cmp	r3, #10
 80027ac:	d114      	bne.n	80027d8 <USART3_4_IRQHandler+0x54>
		strcpy(hnsStrData, hnsStr);
 80027ae:	4a13      	ldr	r2, [pc, #76]	; (80027fc <USART3_4_IRQHandler+0x78>)
 80027b0:	4b13      	ldr	r3, [pc, #76]	; (8002800 <USART3_4_IRQHandler+0x7c>)
 80027b2:	0011      	movs	r1, r2
 80027b4:	0018      	movs	r0, r3
 80027b6:	f003 fd65 	bl	8006284 <strcpy>
//		print(hnsStrData);
//		USART_WRITE(USART2, '\n', 1, 10);
		memset(hnsStr, 0, idx);
 80027ba:	4b12      	ldr	r3, [pc, #72]	; (8002804 <USART3_4_IRQHandler+0x80>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	001a      	movs	r2, r3
 80027c0:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <USART3_4_IRQHandler+0x78>)
 80027c2:	2100      	movs	r1, #0
 80027c4:	0018      	movs	r0, r3
 80027c6:	f003 f8e7 	bl	8005998 <memset>
		idx = 0;
 80027ca:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <USART3_4_IRQHandler+0x80>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]
		hnsStrRecFlag = 1;
 80027d0:	4b0d      	ldr	r3, [pc, #52]	; (8002808 <USART3_4_IRQHandler+0x84>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	701a      	strb	r2, [r3, #0]
	} else {
		hnsStr[idx++] = chr;
	}
}
 80027d6:	e00a      	b.n	80027ee <USART3_4_IRQHandler+0x6a>
		hnsStr[idx++] = chr;
 80027d8:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <USART3_4_IRQHandler+0x80>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	b2d1      	uxtb	r1, r2
 80027e0:	4a08      	ldr	r2, [pc, #32]	; (8002804 <USART3_4_IRQHandler+0x80>)
 80027e2:	7011      	strb	r1, [r2, #0]
 80027e4:	0019      	movs	r1, r3
 80027e6:	4b05      	ldr	r3, [pc, #20]	; (80027fc <USART3_4_IRQHandler+0x78>)
 80027e8:	1dfa      	adds	r2, r7, #7
 80027ea:	7812      	ldrb	r2, [r2, #0]
 80027ec:	545a      	strb	r2, [r3, r1]
}
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	46bd      	mov	sp, r7
 80027f2:	b002      	add	sp, #8
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	46c0      	nop			; (mov r8, r8)
 80027f8:	40004800 	.word	0x40004800
 80027fc:	2000023c 	.word	0x2000023c
 8002800:	200002a0 	.word	0x200002a0
 8002804:	20000305 	.word	0x20000305
 8002808:	20000304 	.word	0x20000304

0800280c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002810:	e7fe      	b.n	8002810 <NMI_Handler+0x4>

08002812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002816:	e7fe      	b.n	8002816 <HardFault_Handler+0x4>

08002818 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800281c:	46c0      	nop			; (mov r8, r8)
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002830:	f000 f924 	bl	8002a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002834:	46c0      	nop			; (mov r8, r8)
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	af00      	add	r7, sp, #0
	return 1;
 800283e:	2301      	movs	r3, #1
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <_kill>:

int _kill(int pid, int sig)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002850:	f003 f878 	bl	8005944 <__errno>
 8002854:	0003      	movs	r3, r0
 8002856:	2216      	movs	r2, #22
 8002858:	601a      	str	r2, [r3, #0]
	return -1;
 800285a:	2301      	movs	r3, #1
 800285c:	425b      	negs	r3, r3
}
 800285e:	0018      	movs	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	b002      	add	sp, #8
 8002864:	bd80      	pop	{r7, pc}

08002866 <_exit>:

void _exit (int status)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800286e:	2301      	movs	r3, #1
 8002870:	425a      	negs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	0011      	movs	r1, r2
 8002876:	0018      	movs	r0, r3
 8002878:	f7ff ffe5 	bl	8002846 <_kill>
	while (1) {}		/* Make sure we hang here */
 800287c:	e7fe      	b.n	800287c <_exit+0x16>

0800287e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b086      	sub	sp, #24
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	e00a      	b.n	80028a6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002890:	e000      	b.n	8002894 <_read+0x16>
 8002892:	bf00      	nop
 8002894:	0001      	movs	r1, r0
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	60ba      	str	r2, [r7, #8]
 800289c:	b2ca      	uxtb	r2, r1
 800289e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	3301      	adds	r3, #1
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	dbf0      	blt.n	8002890 <_read+0x12>
	}

return len;
 80028ae:	687b      	ldr	r3, [r7, #4]
}
 80028b0:	0018      	movs	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	b006      	add	sp, #24
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	e009      	b.n	80028de <_write+0x26>
	{
		__io_putchar(*ptr++);
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	60ba      	str	r2, [r7, #8]
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	0018      	movs	r0, r3
 80028d4:	e000      	b.n	80028d8 <_write+0x20>
 80028d6:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	3301      	adds	r3, #1
 80028dc:	617b      	str	r3, [r7, #20]
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	dbf1      	blt.n	80028ca <_write+0x12>
	}
	return len;
 80028e6:	687b      	ldr	r3, [r7, #4]
}
 80028e8:	0018      	movs	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	b006      	add	sp, #24
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <_close>:

int _close(int file)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
	return -1;
 80028f8:	2301      	movs	r3, #1
 80028fa:	425b      	negs	r3, r3
}
 80028fc:	0018      	movs	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	b002      	add	sp, #8
 8002902:	bd80      	pop	{r7, pc}

08002904 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2280      	movs	r2, #128	; 0x80
 8002912:	0192      	lsls	r2, r2, #6
 8002914:	605a      	str	r2, [r3, #4]
	return 0;
 8002916:	2300      	movs	r3, #0
}
 8002918:	0018      	movs	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	b002      	add	sp, #8
 800291e:	bd80      	pop	{r7, pc}

08002920 <_isatty>:

int _isatty(int file)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
	return 1;
 8002928:	2301      	movs	r3, #1
}
 800292a:	0018      	movs	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	b002      	add	sp, #8
 8002930:	bd80      	pop	{r7, pc}

08002932 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b084      	sub	sp, #16
 8002936:	af00      	add	r7, sp, #0
 8002938:	60f8      	str	r0, [r7, #12]
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
	return 0;
 800293e:	2300      	movs	r3, #0
}
 8002940:	0018      	movs	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	b004      	add	sp, #16
 8002946:	bd80      	pop	{r7, pc}

08002948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002950:	4a14      	ldr	r2, [pc, #80]	; (80029a4 <_sbrk+0x5c>)
 8002952:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <_sbrk+0x60>)
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800295c:	4b13      	ldr	r3, [pc, #76]	; (80029ac <_sbrk+0x64>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d102      	bne.n	800296a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002964:	4b11      	ldr	r3, [pc, #68]	; (80029ac <_sbrk+0x64>)
 8002966:	4a12      	ldr	r2, [pc, #72]	; (80029b0 <_sbrk+0x68>)
 8002968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800296a:	4b10      	ldr	r3, [pc, #64]	; (80029ac <_sbrk+0x64>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	18d3      	adds	r3, r2, r3
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	429a      	cmp	r2, r3
 8002976:	d207      	bcs.n	8002988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002978:	f002 ffe4 	bl	8005944 <__errno>
 800297c:	0003      	movs	r3, r0
 800297e:	220c      	movs	r2, #12
 8002980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002982:	2301      	movs	r3, #1
 8002984:	425b      	negs	r3, r3
 8002986:	e009      	b.n	800299c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002988:	4b08      	ldr	r3, [pc, #32]	; (80029ac <_sbrk+0x64>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800298e:	4b07      	ldr	r3, [pc, #28]	; (80029ac <_sbrk+0x64>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	18d2      	adds	r2, r2, r3
 8002996:	4b05      	ldr	r3, [pc, #20]	; (80029ac <_sbrk+0x64>)
 8002998:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800299a:	68fb      	ldr	r3, [r7, #12]
}
 800299c:	0018      	movs	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	b006      	add	sp, #24
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	20004000 	.word	0x20004000
 80029a8:	00000400 	.word	0x00000400
 80029ac:	20000308 	.word	0x20000308
 80029b0:	20000468 	.word	0x20000468

080029b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80029b8:	46c0      	nop			; (mov r8, r8)
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029c0:	480d      	ldr	r0, [pc, #52]	; (80029f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029c4:	480d      	ldr	r0, [pc, #52]	; (80029fc <LoopForever+0x6>)
  ldr r1, =_edata
 80029c6:	490e      	ldr	r1, [pc, #56]	; (8002a00 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029c8:	4a0e      	ldr	r2, [pc, #56]	; (8002a04 <LoopForever+0xe>)
  movs r3, #0
 80029ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029cc:	e002      	b.n	80029d4 <LoopCopyDataInit>

080029ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029d2:	3304      	adds	r3, #4

080029d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029d8:	d3f9      	bcc.n	80029ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029da:	4a0b      	ldr	r2, [pc, #44]	; (8002a08 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029dc:	4c0b      	ldr	r4, [pc, #44]	; (8002a0c <LoopForever+0x16>)
  movs r3, #0
 80029de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029e0:	e001      	b.n	80029e6 <LoopFillZerobss>

080029e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029e4:	3204      	adds	r2, #4

080029e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029e8:	d3fb      	bcc.n	80029e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80029ea:	f7ff ffe3 	bl	80029b4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80029ee:	f002 ffaf 	bl	8005950 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029f2:	f7ff fd05 	bl	8002400 <main>

080029f6 <LoopForever>:

LoopForever:
    b LoopForever
 80029f6:	e7fe      	b.n	80029f6 <LoopForever>
  ldr   r0, =_estack
 80029f8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80029fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a00:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8002a04:	08009164 	.word	0x08009164
  ldr r2, =_sbss
 8002a08:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8002a0c:	20000468 	.word	0x20000468

08002a10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a10:	e7fe      	b.n	8002a10 <ADC1_IRQHandler>
	...

08002a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a14:	b590      	push	{r4, r7, lr}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a1c:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <HAL_InitTick+0x5c>)
 8002a1e:	681c      	ldr	r4, [r3, #0]
 8002a20:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <HAL_InitTick+0x60>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	0019      	movs	r1, r3
 8002a26:	23fa      	movs	r3, #250	; 0xfa
 8002a28:	0098      	lsls	r0, r3, #2
 8002a2a:	f7fd fb89 	bl	8000140 <__udivsi3>
 8002a2e:	0003      	movs	r3, r0
 8002a30:	0019      	movs	r1, r3
 8002a32:	0020      	movs	r0, r4
 8002a34:	f7fd fb84 	bl	8000140 <__udivsi3>
 8002a38:	0003      	movs	r3, r0
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f000 f905 	bl	8002c4a <HAL_SYSTICK_Config>
 8002a40:	1e03      	subs	r3, r0, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e00f      	b.n	8002a68 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d80b      	bhi.n	8002a66 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	2301      	movs	r3, #1
 8002a52:	425b      	negs	r3, r3
 8002a54:	2200      	movs	r2, #0
 8002a56:	0018      	movs	r0, r3
 8002a58:	f000 f8e2 	bl	8002c20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a5c:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <HAL_InitTick+0x64>)
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e000      	b.n	8002a68 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
}
 8002a68:	0018      	movs	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	b003      	add	sp, #12
 8002a6e:	bd90      	pop	{r4, r7, pc}
 8002a70:	20000000 	.word	0x20000000
 8002a74:	20000008 	.word	0x20000008
 8002a78:	20000004 	.word	0x20000004

08002a7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <HAL_IncTick+0x1c>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	001a      	movs	r2, r3
 8002a86:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <HAL_IncTick+0x20>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	18d2      	adds	r2, r2, r3
 8002a8c:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <HAL_IncTick+0x20>)
 8002a8e:	601a      	str	r2, [r3, #0]
}
 8002a90:	46c0      	nop			; (mov r8, r8)
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	20000008 	.word	0x20000008
 8002a9c:	2000030c 	.word	0x2000030c

08002aa0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8002aa4:	4b02      	ldr	r3, [pc, #8]	; (8002ab0 <HAL_GetTick+0x10>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
}
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	2000030c 	.word	0x2000030c

08002ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002abc:	f7ff fff0 	bl	8002aa0 <HAL_GetTick>
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	3301      	adds	r3, #1
 8002acc:	d005      	beq.n	8002ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <HAL_Delay+0x44>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	001a      	movs	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	189b      	adds	r3, r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	f7ff ffe0 	bl	8002aa0 <HAL_GetTick>
 8002ae0:	0002      	movs	r2, r0
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d8f7      	bhi.n	8002adc <HAL_Delay+0x28>
  {
  }
}
 8002aec:	46c0      	nop			; (mov r8, r8)
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b004      	add	sp, #16
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	20000008 	.word	0x20000008

08002afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002afc:	b590      	push	{r4, r7, lr}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	0002      	movs	r2, r0
 8002b04:	6039      	str	r1, [r7, #0]
 8002b06:	1dfb      	adds	r3, r7, #7
 8002b08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b0a:	1dfb      	adds	r3, r7, #7
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b7f      	cmp	r3, #127	; 0x7f
 8002b10:	d828      	bhi.n	8002b64 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b12:	4a2f      	ldr	r2, [pc, #188]	; (8002bd0 <__NVIC_SetPriority+0xd4>)
 8002b14:	1dfb      	adds	r3, r7, #7
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	b25b      	sxtb	r3, r3
 8002b1a:	089b      	lsrs	r3, r3, #2
 8002b1c:	33c0      	adds	r3, #192	; 0xc0
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	589b      	ldr	r3, [r3, r2]
 8002b22:	1dfa      	adds	r2, r7, #7
 8002b24:	7812      	ldrb	r2, [r2, #0]
 8002b26:	0011      	movs	r1, r2
 8002b28:	2203      	movs	r2, #3
 8002b2a:	400a      	ands	r2, r1
 8002b2c:	00d2      	lsls	r2, r2, #3
 8002b2e:	21ff      	movs	r1, #255	; 0xff
 8002b30:	4091      	lsls	r1, r2
 8002b32:	000a      	movs	r2, r1
 8002b34:	43d2      	mvns	r2, r2
 8002b36:	401a      	ands	r2, r3
 8002b38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	019b      	lsls	r3, r3, #6
 8002b3e:	22ff      	movs	r2, #255	; 0xff
 8002b40:	401a      	ands	r2, r3
 8002b42:	1dfb      	adds	r3, r7, #7
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	0018      	movs	r0, r3
 8002b48:	2303      	movs	r3, #3
 8002b4a:	4003      	ands	r3, r0
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b50:	481f      	ldr	r0, [pc, #124]	; (8002bd0 <__NVIC_SetPriority+0xd4>)
 8002b52:	1dfb      	adds	r3, r7, #7
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	b25b      	sxtb	r3, r3
 8002b58:	089b      	lsrs	r3, r3, #2
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	33c0      	adds	r3, #192	; 0xc0
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002b62:	e031      	b.n	8002bc8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b64:	4a1b      	ldr	r2, [pc, #108]	; (8002bd4 <__NVIC_SetPriority+0xd8>)
 8002b66:	1dfb      	adds	r3, r7, #7
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	0019      	movs	r1, r3
 8002b6c:	230f      	movs	r3, #15
 8002b6e:	400b      	ands	r3, r1
 8002b70:	3b08      	subs	r3, #8
 8002b72:	089b      	lsrs	r3, r3, #2
 8002b74:	3306      	adds	r3, #6
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	18d3      	adds	r3, r2, r3
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	1dfa      	adds	r2, r7, #7
 8002b80:	7812      	ldrb	r2, [r2, #0]
 8002b82:	0011      	movs	r1, r2
 8002b84:	2203      	movs	r2, #3
 8002b86:	400a      	ands	r2, r1
 8002b88:	00d2      	lsls	r2, r2, #3
 8002b8a:	21ff      	movs	r1, #255	; 0xff
 8002b8c:	4091      	lsls	r1, r2
 8002b8e:	000a      	movs	r2, r1
 8002b90:	43d2      	mvns	r2, r2
 8002b92:	401a      	ands	r2, r3
 8002b94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	019b      	lsls	r3, r3, #6
 8002b9a:	22ff      	movs	r2, #255	; 0xff
 8002b9c:	401a      	ands	r2, r3
 8002b9e:	1dfb      	adds	r3, r7, #7
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	4003      	ands	r3, r0
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bac:	4809      	ldr	r0, [pc, #36]	; (8002bd4 <__NVIC_SetPriority+0xd8>)
 8002bae:	1dfb      	adds	r3, r7, #7
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	001c      	movs	r4, r3
 8002bb4:	230f      	movs	r3, #15
 8002bb6:	4023      	ands	r3, r4
 8002bb8:	3b08      	subs	r3, #8
 8002bba:	089b      	lsrs	r3, r3, #2
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	3306      	adds	r3, #6
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	18c3      	adds	r3, r0, r3
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	601a      	str	r2, [r3, #0]
}
 8002bc8:	46c0      	nop			; (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b003      	add	sp, #12
 8002bce:	bd90      	pop	{r4, r7, pc}
 8002bd0:	e000e100 	.word	0xe000e100
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	1e5a      	subs	r2, r3, #1
 8002be4:	2380      	movs	r3, #128	; 0x80
 8002be6:	045b      	lsls	r3, r3, #17
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d301      	bcc.n	8002bf0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bec:	2301      	movs	r3, #1
 8002bee:	e010      	b.n	8002c12 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bf0:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <SysTick_Config+0x44>)
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	3a01      	subs	r2, #1
 8002bf6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	425b      	negs	r3, r3
 8002bfc:	2103      	movs	r1, #3
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f7ff ff7c 	bl	8002afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c04:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <SysTick_Config+0x44>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c0a:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <SysTick_Config+0x44>)
 8002c0c:	2207      	movs	r2, #7
 8002c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	0018      	movs	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	b002      	add	sp, #8
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	e000e010 	.word	0xe000e010

08002c20 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	607a      	str	r2, [r7, #4]
 8002c2a:	210f      	movs	r1, #15
 8002c2c:	187b      	adds	r3, r7, r1
 8002c2e:	1c02      	adds	r2, r0, #0
 8002c30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	187b      	adds	r3, r7, r1
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	b25b      	sxtb	r3, r3
 8002c3a:	0011      	movs	r1, r2
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f7ff ff5d 	bl	8002afc <__NVIC_SetPriority>
}
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	46bd      	mov	sp, r7
 8002c46:	b004      	add	sp, #16
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	0018      	movs	r0, r3
 8002c56:	f7ff ffbf 	bl	8002bd8 <SysTick_Config>
 8002c5a:	0003      	movs	r3, r0
}
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b002      	add	sp, #8
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e305      	b.n	8003282 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d100      	bne.n	8002c82 <HAL_RCC_OscConfig+0x1e>
 8002c80:	e08d      	b.n	8002d9e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c82:	4bc5      	ldr	r3, [pc, #788]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	220c      	movs	r2, #12
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d00e      	beq.n	8002cac <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c8e:	4bc2      	ldr	r3, [pc, #776]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	220c      	movs	r2, #12
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d116      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x64>
 8002c9a:	4bbf      	ldr	r3, [pc, #764]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	23c0      	movs	r3, #192	; 0xc0
 8002ca0:	025b      	lsls	r3, r3, #9
 8002ca2:	401a      	ands	r2, r3
 8002ca4:	2380      	movs	r3, #128	; 0x80
 8002ca6:	025b      	lsls	r3, r3, #9
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d10d      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cac:	4bba      	ldr	r3, [pc, #744]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	029b      	lsls	r3, r3, #10
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d100      	bne.n	8002cba <HAL_RCC_OscConfig+0x56>
 8002cb8:	e070      	b.n	8002d9c <HAL_RCC_OscConfig+0x138>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d000      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x60>
 8002cc2:	e06b      	b.n	8002d9c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e2dc      	b.n	8003282 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d107      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x7c>
 8002cd0:	4bb1      	ldr	r3, [pc, #708]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	4bb0      	ldr	r3, [pc, #704]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002cd6:	2180      	movs	r1, #128	; 0x80
 8002cd8:	0249      	lsls	r1, r1, #9
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	e02f      	b.n	8002d40 <HAL_RCC_OscConfig+0xdc>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10c      	bne.n	8002d02 <HAL_RCC_OscConfig+0x9e>
 8002ce8:	4bab      	ldr	r3, [pc, #684]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4baa      	ldr	r3, [pc, #680]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002cee:	49ab      	ldr	r1, [pc, #684]	; (8002f9c <HAL_RCC_OscConfig+0x338>)
 8002cf0:	400a      	ands	r2, r1
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	4ba8      	ldr	r3, [pc, #672]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4ba7      	ldr	r3, [pc, #668]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002cfa:	49a9      	ldr	r1, [pc, #676]	; (8002fa0 <HAL_RCC_OscConfig+0x33c>)
 8002cfc:	400a      	ands	r2, r1
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	e01e      	b.n	8002d40 <HAL_RCC_OscConfig+0xdc>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b05      	cmp	r3, #5
 8002d08:	d10e      	bne.n	8002d28 <HAL_RCC_OscConfig+0xc4>
 8002d0a:	4ba3      	ldr	r3, [pc, #652]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	4ba2      	ldr	r3, [pc, #648]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002d10:	2180      	movs	r1, #128	; 0x80
 8002d12:	02c9      	lsls	r1, r1, #11
 8002d14:	430a      	orrs	r2, r1
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	4b9f      	ldr	r3, [pc, #636]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	4b9e      	ldr	r3, [pc, #632]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002d1e:	2180      	movs	r1, #128	; 0x80
 8002d20:	0249      	lsls	r1, r1, #9
 8002d22:	430a      	orrs	r2, r1
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	e00b      	b.n	8002d40 <HAL_RCC_OscConfig+0xdc>
 8002d28:	4b9b      	ldr	r3, [pc, #620]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4b9a      	ldr	r3, [pc, #616]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002d2e:	499b      	ldr	r1, [pc, #620]	; (8002f9c <HAL_RCC_OscConfig+0x338>)
 8002d30:	400a      	ands	r2, r1
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	4b98      	ldr	r3, [pc, #608]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4b97      	ldr	r3, [pc, #604]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002d3a:	4999      	ldr	r1, [pc, #612]	; (8002fa0 <HAL_RCC_OscConfig+0x33c>)
 8002d3c:	400a      	ands	r2, r1
 8002d3e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d014      	beq.n	8002d72 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d48:	f7ff feaa 	bl	8002aa0 <HAL_GetTick>
 8002d4c:	0003      	movs	r3, r0
 8002d4e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d52:	f7ff fea5 	bl	8002aa0 <HAL_GetTick>
 8002d56:	0002      	movs	r2, r0
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b64      	cmp	r3, #100	; 0x64
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e28e      	b.n	8003282 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d64:	4b8c      	ldr	r3, [pc, #560]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	2380      	movs	r3, #128	; 0x80
 8002d6a:	029b      	lsls	r3, r3, #10
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d0f0      	beq.n	8002d52 <HAL_RCC_OscConfig+0xee>
 8002d70:	e015      	b.n	8002d9e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d72:	f7ff fe95 	bl	8002aa0 <HAL_GetTick>
 8002d76:	0003      	movs	r3, r0
 8002d78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d7c:	f7ff fe90 	bl	8002aa0 <HAL_GetTick>
 8002d80:	0002      	movs	r2, r0
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b64      	cmp	r3, #100	; 0x64
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e279      	b.n	8003282 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8e:	4b82      	ldr	r3, [pc, #520]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	2380      	movs	r3, #128	; 0x80
 8002d94:	029b      	lsls	r3, r3, #10
 8002d96:	4013      	ands	r3, r2
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x118>
 8002d9a:	e000      	b.n	8002d9e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d9c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2202      	movs	r2, #2
 8002da4:	4013      	ands	r3, r2
 8002da6:	d100      	bne.n	8002daa <HAL_RCC_OscConfig+0x146>
 8002da8:	e06c      	b.n	8002e84 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002daa:	4b7b      	ldr	r3, [pc, #492]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	220c      	movs	r2, #12
 8002db0:	4013      	ands	r3, r2
 8002db2:	d00e      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002db4:	4b78      	ldr	r3, [pc, #480]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	220c      	movs	r2, #12
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d11f      	bne.n	8002e00 <HAL_RCC_OscConfig+0x19c>
 8002dc0:	4b75      	ldr	r3, [pc, #468]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	23c0      	movs	r3, #192	; 0xc0
 8002dc6:	025b      	lsls	r3, r3, #9
 8002dc8:	401a      	ands	r2, r3
 8002dca:	2380      	movs	r3, #128	; 0x80
 8002dcc:	021b      	lsls	r3, r3, #8
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d116      	bne.n	8002e00 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd2:	4b71      	ldr	r3, [pc, #452]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_OscConfig+0x184>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e24c      	b.n	8003282 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de8:	4b6b      	ldr	r3, [pc, #428]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	22f8      	movs	r2, #248	; 0xf8
 8002dee:	4393      	bics	r3, r2
 8002df0:	0019      	movs	r1, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	00da      	lsls	r2, r3, #3
 8002df8:	4b67      	ldr	r3, [pc, #412]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dfe:	e041      	b.n	8002e84 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d024      	beq.n	8002e52 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e08:	4b63      	ldr	r3, [pc, #396]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	4b62      	ldr	r3, [pc, #392]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002e0e:	2101      	movs	r1, #1
 8002e10:	430a      	orrs	r2, r1
 8002e12:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e14:	f7ff fe44 	bl	8002aa0 <HAL_GetTick>
 8002e18:	0003      	movs	r3, r0
 8002e1a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e1e:	f7ff fe3f 	bl	8002aa0 <HAL_GetTick>
 8002e22:	0002      	movs	r2, r0
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e228      	b.n	8003282 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e30:	4b59      	ldr	r3, [pc, #356]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2202      	movs	r2, #2
 8002e36:	4013      	ands	r3, r2
 8002e38:	d0f1      	beq.n	8002e1e <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3a:	4b57      	ldr	r3, [pc, #348]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	22f8      	movs	r2, #248	; 0xf8
 8002e40:	4393      	bics	r3, r2
 8002e42:	0019      	movs	r1, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	00da      	lsls	r2, r3, #3
 8002e4a:	4b53      	ldr	r3, [pc, #332]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	e018      	b.n	8002e84 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e52:	4b51      	ldr	r3, [pc, #324]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	4b50      	ldr	r3, [pc, #320]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002e58:	2101      	movs	r1, #1
 8002e5a:	438a      	bics	r2, r1
 8002e5c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5e:	f7ff fe1f 	bl	8002aa0 <HAL_GetTick>
 8002e62:	0003      	movs	r3, r0
 8002e64:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e68:	f7ff fe1a 	bl	8002aa0 <HAL_GetTick>
 8002e6c:	0002      	movs	r2, r0
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e203      	b.n	8003282 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7a:	4b47      	ldr	r3, [pc, #284]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	4013      	ands	r3, r2
 8002e82:	d1f1      	bne.n	8002e68 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2208      	movs	r2, #8
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d036      	beq.n	8002efc <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d019      	beq.n	8002eca <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e96:	4b40      	ldr	r3, [pc, #256]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e9a:	4b3f      	ldr	r3, [pc, #252]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea2:	f7ff fdfd 	bl	8002aa0 <HAL_GetTick>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eac:	f7ff fdf8 	bl	8002aa0 <HAL_GetTick>
 8002eb0:	0002      	movs	r2, r0
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e1e1      	b.n	8003282 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ebe:	4b36      	ldr	r3, [pc, #216]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d0f1      	beq.n	8002eac <HAL_RCC_OscConfig+0x248>
 8002ec8:	e018      	b.n	8002efc <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eca:	4b33      	ldr	r3, [pc, #204]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002ecc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ece:	4b32      	ldr	r3, [pc, #200]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	438a      	bics	r2, r1
 8002ed4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed6:	f7ff fde3 	bl	8002aa0 <HAL_GetTick>
 8002eda:	0003      	movs	r3, r0
 8002edc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ee0:	f7ff fdde 	bl	8002aa0 <HAL_GetTick>
 8002ee4:	0002      	movs	r2, r0
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e1c7      	b.n	8003282 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef2:	4b29      	ldr	r3, [pc, #164]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d1f1      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2204      	movs	r2, #4
 8002f02:	4013      	ands	r3, r2
 8002f04:	d100      	bne.n	8002f08 <HAL_RCC_OscConfig+0x2a4>
 8002f06:	e0b5      	b.n	8003074 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f08:	201f      	movs	r0, #31
 8002f0a:	183b      	adds	r3, r7, r0
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f10:	4b21      	ldr	r3, [pc, #132]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002f12:	69da      	ldr	r2, [r3, #28]
 8002f14:	2380      	movs	r3, #128	; 0x80
 8002f16:	055b      	lsls	r3, r3, #21
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d110      	bne.n	8002f3e <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1c:	4b1e      	ldr	r3, [pc, #120]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002f1e:	69da      	ldr	r2, [r3, #28]
 8002f20:	4b1d      	ldr	r3, [pc, #116]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002f22:	2180      	movs	r1, #128	; 0x80
 8002f24:	0549      	lsls	r1, r1, #21
 8002f26:	430a      	orrs	r2, r1
 8002f28:	61da      	str	r2, [r3, #28]
 8002f2a:	4b1b      	ldr	r3, [pc, #108]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002f2c:	69da      	ldr	r2, [r3, #28]
 8002f2e:	2380      	movs	r3, #128	; 0x80
 8002f30:	055b      	lsls	r3, r3, #21
 8002f32:	4013      	ands	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f38:	183b      	adds	r3, r7, r0
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3e:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <HAL_RCC_OscConfig+0x340>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	4013      	ands	r3, r2
 8002f48:	d11a      	bne.n	8002f80 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f4a:	4b16      	ldr	r3, [pc, #88]	; (8002fa4 <HAL_RCC_OscConfig+0x340>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	4b15      	ldr	r3, [pc, #84]	; (8002fa4 <HAL_RCC_OscConfig+0x340>)
 8002f50:	2180      	movs	r1, #128	; 0x80
 8002f52:	0049      	lsls	r1, r1, #1
 8002f54:	430a      	orrs	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f58:	f7ff fda2 	bl	8002aa0 <HAL_GetTick>
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f62:	f7ff fd9d 	bl	8002aa0 <HAL_GetTick>
 8002f66:	0002      	movs	r2, r0
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b64      	cmp	r3, #100	; 0x64
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e186      	b.n	8003282 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f74:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <HAL_RCC_OscConfig+0x340>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	2380      	movs	r3, #128	; 0x80
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d10f      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x344>
 8002f88:	4b03      	ldr	r3, [pc, #12]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002f8a:	6a1a      	ldr	r2, [r3, #32]
 8002f8c:	4b02      	ldr	r3, [pc, #8]	; (8002f98 <HAL_RCC_OscConfig+0x334>)
 8002f8e:	2101      	movs	r1, #1
 8002f90:	430a      	orrs	r2, r1
 8002f92:	621a      	str	r2, [r3, #32]
 8002f94:	e036      	b.n	8003004 <HAL_RCC_OscConfig+0x3a0>
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	fffeffff 	.word	0xfffeffff
 8002fa0:	fffbffff 	.word	0xfffbffff
 8002fa4:	40007000 	.word	0x40007000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10c      	bne.n	8002fca <HAL_RCC_OscConfig+0x366>
 8002fb0:	4bb6      	ldr	r3, [pc, #728]	; (800328c <HAL_RCC_OscConfig+0x628>)
 8002fb2:	6a1a      	ldr	r2, [r3, #32]
 8002fb4:	4bb5      	ldr	r3, [pc, #724]	; (800328c <HAL_RCC_OscConfig+0x628>)
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	438a      	bics	r2, r1
 8002fba:	621a      	str	r2, [r3, #32]
 8002fbc:	4bb3      	ldr	r3, [pc, #716]	; (800328c <HAL_RCC_OscConfig+0x628>)
 8002fbe:	6a1a      	ldr	r2, [r3, #32]
 8002fc0:	4bb2      	ldr	r3, [pc, #712]	; (800328c <HAL_RCC_OscConfig+0x628>)
 8002fc2:	2104      	movs	r1, #4
 8002fc4:	438a      	bics	r2, r1
 8002fc6:	621a      	str	r2, [r3, #32]
 8002fc8:	e01c      	b.n	8003004 <HAL_RCC_OscConfig+0x3a0>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2b05      	cmp	r3, #5
 8002fd0:	d10c      	bne.n	8002fec <HAL_RCC_OscConfig+0x388>
 8002fd2:	4bae      	ldr	r3, [pc, #696]	; (800328c <HAL_RCC_OscConfig+0x628>)
 8002fd4:	6a1a      	ldr	r2, [r3, #32]
 8002fd6:	4bad      	ldr	r3, [pc, #692]	; (800328c <HAL_RCC_OscConfig+0x628>)
 8002fd8:	2104      	movs	r1, #4
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	621a      	str	r2, [r3, #32]
 8002fde:	4bab      	ldr	r3, [pc, #684]	; (800328c <HAL_RCC_OscConfig+0x628>)
 8002fe0:	6a1a      	ldr	r2, [r3, #32]
 8002fe2:	4baa      	ldr	r3, [pc, #680]	; (800328c <HAL_RCC_OscConfig+0x628>)
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	621a      	str	r2, [r3, #32]
 8002fea:	e00b      	b.n	8003004 <HAL_RCC_OscConfig+0x3a0>
 8002fec:	4ba7      	ldr	r3, [pc, #668]	; (800328c <HAL_RCC_OscConfig+0x628>)
 8002fee:	6a1a      	ldr	r2, [r3, #32]
 8002ff0:	4ba6      	ldr	r3, [pc, #664]	; (800328c <HAL_RCC_OscConfig+0x628>)
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	438a      	bics	r2, r1
 8002ff6:	621a      	str	r2, [r3, #32]
 8002ff8:	4ba4      	ldr	r3, [pc, #656]	; (800328c <HAL_RCC_OscConfig+0x628>)
 8002ffa:	6a1a      	ldr	r2, [r3, #32]
 8002ffc:	4ba3      	ldr	r3, [pc, #652]	; (800328c <HAL_RCC_OscConfig+0x628>)
 8002ffe:	2104      	movs	r1, #4
 8003000:	438a      	bics	r2, r1
 8003002:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d014      	beq.n	8003036 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300c:	f7ff fd48 	bl	8002aa0 <HAL_GetTick>
 8003010:	0003      	movs	r3, r0
 8003012:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003014:	e009      	b.n	800302a <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003016:	f7ff fd43 	bl	8002aa0 <HAL_GetTick>
 800301a:	0002      	movs	r2, r0
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	4a9b      	ldr	r2, [pc, #620]	; (8003290 <HAL_RCC_OscConfig+0x62c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e12b      	b.n	8003282 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302a:	4b98      	ldr	r3, [pc, #608]	; (800328c <HAL_RCC_OscConfig+0x628>)
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	2202      	movs	r2, #2
 8003030:	4013      	ands	r3, r2
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0x3b2>
 8003034:	e013      	b.n	800305e <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003036:	f7ff fd33 	bl	8002aa0 <HAL_GetTick>
 800303a:	0003      	movs	r3, r0
 800303c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800303e:	e009      	b.n	8003054 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003040:	f7ff fd2e 	bl	8002aa0 <HAL_GetTick>
 8003044:	0002      	movs	r2, r0
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	4a91      	ldr	r2, [pc, #580]	; (8003290 <HAL_RCC_OscConfig+0x62c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e116      	b.n	8003282 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003054:	4b8d      	ldr	r3, [pc, #564]	; (800328c <HAL_RCC_OscConfig+0x628>)
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	2202      	movs	r2, #2
 800305a:	4013      	ands	r3, r2
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800305e:	231f      	movs	r3, #31
 8003060:	18fb      	adds	r3, r7, r3
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d105      	bne.n	8003074 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003068:	4b88      	ldr	r3, [pc, #544]	; (800328c <HAL_RCC_OscConfig+0x628>)
 800306a:	69da      	ldr	r2, [r3, #28]
 800306c:	4b87      	ldr	r3, [pc, #540]	; (800328c <HAL_RCC_OscConfig+0x628>)
 800306e:	4989      	ldr	r1, [pc, #548]	; (8003294 <HAL_RCC_OscConfig+0x630>)
 8003070:	400a      	ands	r2, r1
 8003072:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2210      	movs	r2, #16
 800307a:	4013      	ands	r3, r2
 800307c:	d063      	beq.n	8003146 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d12a      	bne.n	80030dc <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003086:	4b81      	ldr	r3, [pc, #516]	; (800328c <HAL_RCC_OscConfig+0x628>)
 8003088:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800308a:	4b80      	ldr	r3, [pc, #512]	; (800328c <HAL_RCC_OscConfig+0x628>)
 800308c:	2104      	movs	r1, #4
 800308e:	430a      	orrs	r2, r1
 8003090:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003092:	4b7e      	ldr	r3, [pc, #504]	; (800328c <HAL_RCC_OscConfig+0x628>)
 8003094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003096:	4b7d      	ldr	r3, [pc, #500]	; (800328c <HAL_RCC_OscConfig+0x628>)
 8003098:	2101      	movs	r1, #1
 800309a:	430a      	orrs	r2, r1
 800309c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800309e:	f7ff fcff 	bl	8002aa0 <HAL_GetTick>
 80030a2:	0003      	movs	r3, r0
 80030a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80030a8:	f7ff fcfa 	bl	8002aa0 <HAL_GetTick>
 80030ac:	0002      	movs	r2, r0
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e0e3      	b.n	8003282 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80030ba:	4b74      	ldr	r3, [pc, #464]	; (800328c <HAL_RCC_OscConfig+0x628>)
 80030bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030be:	2202      	movs	r2, #2
 80030c0:	4013      	ands	r3, r2
 80030c2:	d0f1      	beq.n	80030a8 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80030c4:	4b71      	ldr	r3, [pc, #452]	; (800328c <HAL_RCC_OscConfig+0x628>)
 80030c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c8:	22f8      	movs	r2, #248	; 0xf8
 80030ca:	4393      	bics	r3, r2
 80030cc:	0019      	movs	r1, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	00da      	lsls	r2, r3, #3
 80030d4:	4b6d      	ldr	r3, [pc, #436]	; (800328c <HAL_RCC_OscConfig+0x628>)
 80030d6:	430a      	orrs	r2, r1
 80030d8:	635a      	str	r2, [r3, #52]	; 0x34
 80030da:	e034      	b.n	8003146 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	3305      	adds	r3, #5
 80030e2:	d111      	bne.n	8003108 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80030e4:	4b69      	ldr	r3, [pc, #420]	; (800328c <HAL_RCC_OscConfig+0x628>)
 80030e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030e8:	4b68      	ldr	r3, [pc, #416]	; (800328c <HAL_RCC_OscConfig+0x628>)
 80030ea:	2104      	movs	r1, #4
 80030ec:	438a      	bics	r2, r1
 80030ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80030f0:	4b66      	ldr	r3, [pc, #408]	; (800328c <HAL_RCC_OscConfig+0x628>)
 80030f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f4:	22f8      	movs	r2, #248	; 0xf8
 80030f6:	4393      	bics	r3, r2
 80030f8:	0019      	movs	r1, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	00da      	lsls	r2, r3, #3
 8003100:	4b62      	ldr	r3, [pc, #392]	; (800328c <HAL_RCC_OscConfig+0x628>)
 8003102:	430a      	orrs	r2, r1
 8003104:	635a      	str	r2, [r3, #52]	; 0x34
 8003106:	e01e      	b.n	8003146 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003108:	4b60      	ldr	r3, [pc, #384]	; (800328c <HAL_RCC_OscConfig+0x628>)
 800310a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800310c:	4b5f      	ldr	r3, [pc, #380]	; (800328c <HAL_RCC_OscConfig+0x628>)
 800310e:	2104      	movs	r1, #4
 8003110:	430a      	orrs	r2, r1
 8003112:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003114:	4b5d      	ldr	r3, [pc, #372]	; (800328c <HAL_RCC_OscConfig+0x628>)
 8003116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003118:	4b5c      	ldr	r3, [pc, #368]	; (800328c <HAL_RCC_OscConfig+0x628>)
 800311a:	2101      	movs	r1, #1
 800311c:	438a      	bics	r2, r1
 800311e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003120:	f7ff fcbe 	bl	8002aa0 <HAL_GetTick>
 8003124:	0003      	movs	r3, r0
 8003126:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800312a:	f7ff fcb9 	bl	8002aa0 <HAL_GetTick>
 800312e:	0002      	movs	r2, r0
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e0a2      	b.n	8003282 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800313c:	4b53      	ldr	r3, [pc, #332]	; (800328c <HAL_RCC_OscConfig+0x628>)
 800313e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003140:	2202      	movs	r2, #2
 8003142:	4013      	ands	r3, r2
 8003144:	d1f1      	bne.n	800312a <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d100      	bne.n	8003150 <HAL_RCC_OscConfig+0x4ec>
 800314e:	e097      	b.n	8003280 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003150:	4b4e      	ldr	r3, [pc, #312]	; (800328c <HAL_RCC_OscConfig+0x628>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	220c      	movs	r2, #12
 8003156:	4013      	ands	r3, r2
 8003158:	2b08      	cmp	r3, #8
 800315a:	d100      	bne.n	800315e <HAL_RCC_OscConfig+0x4fa>
 800315c:	e06b      	b.n	8003236 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d14c      	bne.n	8003200 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003166:	4b49      	ldr	r3, [pc, #292]	; (800328c <HAL_RCC_OscConfig+0x628>)
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	4b48      	ldr	r3, [pc, #288]	; (800328c <HAL_RCC_OscConfig+0x628>)
 800316c:	494a      	ldr	r1, [pc, #296]	; (8003298 <HAL_RCC_OscConfig+0x634>)
 800316e:	400a      	ands	r2, r1
 8003170:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003172:	f7ff fc95 	bl	8002aa0 <HAL_GetTick>
 8003176:	0003      	movs	r3, r0
 8003178:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800317c:	f7ff fc90 	bl	8002aa0 <HAL_GetTick>
 8003180:	0002      	movs	r2, r0
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e079      	b.n	8003282 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800318e:	4b3f      	ldr	r3, [pc, #252]	; (800328c <HAL_RCC_OscConfig+0x628>)
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	2380      	movs	r3, #128	; 0x80
 8003194:	049b      	lsls	r3, r3, #18
 8003196:	4013      	ands	r3, r2
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800319a:	4b3c      	ldr	r3, [pc, #240]	; (800328c <HAL_RCC_OscConfig+0x628>)
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	220f      	movs	r2, #15
 80031a0:	4393      	bics	r3, r2
 80031a2:	0019      	movs	r1, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a8:	4b38      	ldr	r3, [pc, #224]	; (800328c <HAL_RCC_OscConfig+0x628>)
 80031aa:	430a      	orrs	r2, r1
 80031ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80031ae:	4b37      	ldr	r3, [pc, #220]	; (800328c <HAL_RCC_OscConfig+0x628>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	4a3a      	ldr	r2, [pc, #232]	; (800329c <HAL_RCC_OscConfig+0x638>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	0019      	movs	r1, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	431a      	orrs	r2, r3
 80031c2:	4b32      	ldr	r3, [pc, #200]	; (800328c <HAL_RCC_OscConfig+0x628>)
 80031c4:	430a      	orrs	r2, r1
 80031c6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031c8:	4b30      	ldr	r3, [pc, #192]	; (800328c <HAL_RCC_OscConfig+0x628>)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	4b2f      	ldr	r3, [pc, #188]	; (800328c <HAL_RCC_OscConfig+0x628>)
 80031ce:	2180      	movs	r1, #128	; 0x80
 80031d0:	0449      	lsls	r1, r1, #17
 80031d2:	430a      	orrs	r2, r1
 80031d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d6:	f7ff fc63 	bl	8002aa0 <HAL_GetTick>
 80031da:	0003      	movs	r3, r0
 80031dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e0:	f7ff fc5e 	bl	8002aa0 <HAL_GetTick>
 80031e4:	0002      	movs	r2, r0
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e047      	b.n	8003282 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031f2:	4b26      	ldr	r3, [pc, #152]	; (800328c <HAL_RCC_OscConfig+0x628>)
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	2380      	movs	r3, #128	; 0x80
 80031f8:	049b      	lsls	r3, r3, #18
 80031fa:	4013      	ands	r3, r2
 80031fc:	d0f0      	beq.n	80031e0 <HAL_RCC_OscConfig+0x57c>
 80031fe:	e03f      	b.n	8003280 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003200:	4b22      	ldr	r3, [pc, #136]	; (800328c <HAL_RCC_OscConfig+0x628>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	4b21      	ldr	r3, [pc, #132]	; (800328c <HAL_RCC_OscConfig+0x628>)
 8003206:	4924      	ldr	r1, [pc, #144]	; (8003298 <HAL_RCC_OscConfig+0x634>)
 8003208:	400a      	ands	r2, r1
 800320a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320c:	f7ff fc48 	bl	8002aa0 <HAL_GetTick>
 8003210:	0003      	movs	r3, r0
 8003212:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003216:	f7ff fc43 	bl	8002aa0 <HAL_GetTick>
 800321a:	0002      	movs	r2, r0
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e02c      	b.n	8003282 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003228:	4b18      	ldr	r3, [pc, #96]	; (800328c <HAL_RCC_OscConfig+0x628>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	2380      	movs	r3, #128	; 0x80
 800322e:	049b      	lsls	r3, r3, #18
 8003230:	4013      	ands	r3, r2
 8003232:	d1f0      	bne.n	8003216 <HAL_RCC_OscConfig+0x5b2>
 8003234:	e024      	b.n	8003280 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d101      	bne.n	8003242 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e01f      	b.n	8003282 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003242:	4b12      	ldr	r3, [pc, #72]	; (800328c <HAL_RCC_OscConfig+0x628>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003248:	4b10      	ldr	r3, [pc, #64]	; (800328c <HAL_RCC_OscConfig+0x628>)
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	23c0      	movs	r3, #192	; 0xc0
 8003252:	025b      	lsls	r3, r3, #9
 8003254:	401a      	ands	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	429a      	cmp	r2, r3
 800325c:	d10e      	bne.n	800327c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	220f      	movs	r2, #15
 8003262:	401a      	ands	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003268:	429a      	cmp	r2, r3
 800326a:	d107      	bne.n	800327c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	23f0      	movs	r3, #240	; 0xf0
 8003270:	039b      	lsls	r3, r3, #14
 8003272:	401a      	ands	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003278:	429a      	cmp	r2, r3
 800327a:	d001      	beq.n	8003280 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e000      	b.n	8003282 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	0018      	movs	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	b008      	add	sp, #32
 8003288:	bd80      	pop	{r7, pc}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	40021000 	.word	0x40021000
 8003290:	00001388 	.word	0x00001388
 8003294:	efffffff 	.word	0xefffffff
 8003298:	feffffff 	.word	0xfeffffff
 800329c:	ffc27fff 	.word	0xffc27fff

080032a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0b3      	b.n	800341c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032b4:	4b5b      	ldr	r3, [pc, #364]	; (8003424 <HAL_RCC_ClockConfig+0x184>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2201      	movs	r2, #1
 80032ba:	4013      	ands	r3, r2
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d911      	bls.n	80032e6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c2:	4b58      	ldr	r3, [pc, #352]	; (8003424 <HAL_RCC_ClockConfig+0x184>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2201      	movs	r2, #1
 80032c8:	4393      	bics	r3, r2
 80032ca:	0019      	movs	r1, r3
 80032cc:	4b55      	ldr	r3, [pc, #340]	; (8003424 <HAL_RCC_ClockConfig+0x184>)
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d4:	4b53      	ldr	r3, [pc, #332]	; (8003424 <HAL_RCC_ClockConfig+0x184>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2201      	movs	r2, #1
 80032da:	4013      	ands	r3, r2
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d001      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e09a      	b.n	800341c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2202      	movs	r2, #2
 80032ec:	4013      	ands	r3, r2
 80032ee:	d015      	beq.n	800331c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2204      	movs	r2, #4
 80032f6:	4013      	ands	r3, r2
 80032f8:	d006      	beq.n	8003308 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80032fa:	4b4b      	ldr	r3, [pc, #300]	; (8003428 <HAL_RCC_ClockConfig+0x188>)
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	4b4a      	ldr	r3, [pc, #296]	; (8003428 <HAL_RCC_ClockConfig+0x188>)
 8003300:	21e0      	movs	r1, #224	; 0xe0
 8003302:	00c9      	lsls	r1, r1, #3
 8003304:	430a      	orrs	r2, r1
 8003306:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003308:	4b47      	ldr	r3, [pc, #284]	; (8003428 <HAL_RCC_ClockConfig+0x188>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	22f0      	movs	r2, #240	; 0xf0
 800330e:	4393      	bics	r3, r2
 8003310:	0019      	movs	r1, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	4b44      	ldr	r3, [pc, #272]	; (8003428 <HAL_RCC_ClockConfig+0x188>)
 8003318:	430a      	orrs	r2, r1
 800331a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2201      	movs	r2, #1
 8003322:	4013      	ands	r3, r2
 8003324:	d040      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d107      	bne.n	800333e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332e:	4b3e      	ldr	r3, [pc, #248]	; (8003428 <HAL_RCC_ClockConfig+0x188>)
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	2380      	movs	r3, #128	; 0x80
 8003334:	029b      	lsls	r3, r3, #10
 8003336:	4013      	ands	r3, r2
 8003338:	d114      	bne.n	8003364 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e06e      	b.n	800341c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b02      	cmp	r3, #2
 8003344:	d107      	bne.n	8003356 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003346:	4b38      	ldr	r3, [pc, #224]	; (8003428 <HAL_RCC_ClockConfig+0x188>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	2380      	movs	r3, #128	; 0x80
 800334c:	049b      	lsls	r3, r3, #18
 800334e:	4013      	ands	r3, r2
 8003350:	d108      	bne.n	8003364 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e062      	b.n	800341c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003356:	4b34      	ldr	r3, [pc, #208]	; (8003428 <HAL_RCC_ClockConfig+0x188>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2202      	movs	r2, #2
 800335c:	4013      	ands	r3, r2
 800335e:	d101      	bne.n	8003364 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e05b      	b.n	800341c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003364:	4b30      	ldr	r3, [pc, #192]	; (8003428 <HAL_RCC_ClockConfig+0x188>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2203      	movs	r2, #3
 800336a:	4393      	bics	r3, r2
 800336c:	0019      	movs	r1, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	4b2d      	ldr	r3, [pc, #180]	; (8003428 <HAL_RCC_ClockConfig+0x188>)
 8003374:	430a      	orrs	r2, r1
 8003376:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003378:	f7ff fb92 	bl	8002aa0 <HAL_GetTick>
 800337c:	0003      	movs	r3, r0
 800337e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003380:	e009      	b.n	8003396 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003382:	f7ff fb8d 	bl	8002aa0 <HAL_GetTick>
 8003386:	0002      	movs	r2, r0
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	4a27      	ldr	r2, [pc, #156]	; (800342c <HAL_RCC_ClockConfig+0x18c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e042      	b.n	800341c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003396:	4b24      	ldr	r3, [pc, #144]	; (8003428 <HAL_RCC_ClockConfig+0x188>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	220c      	movs	r2, #12
 800339c:	401a      	ands	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d1ec      	bne.n	8003382 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033a8:	4b1e      	ldr	r3, [pc, #120]	; (8003424 <HAL_RCC_ClockConfig+0x184>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2201      	movs	r2, #1
 80033ae:	4013      	ands	r3, r2
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d211      	bcs.n	80033da <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b6:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <HAL_RCC_ClockConfig+0x184>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2201      	movs	r2, #1
 80033bc:	4393      	bics	r3, r2
 80033be:	0019      	movs	r1, r3
 80033c0:	4b18      	ldr	r3, [pc, #96]	; (8003424 <HAL_RCC_ClockConfig+0x184>)
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c8:	4b16      	ldr	r3, [pc, #88]	; (8003424 <HAL_RCC_ClockConfig+0x184>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2201      	movs	r2, #1
 80033ce:	4013      	ands	r3, r2
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d001      	beq.n	80033da <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e020      	b.n	800341c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2204      	movs	r2, #4
 80033e0:	4013      	ands	r3, r2
 80033e2:	d009      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80033e4:	4b10      	ldr	r3, [pc, #64]	; (8003428 <HAL_RCC_ClockConfig+0x188>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	4a11      	ldr	r2, [pc, #68]	; (8003430 <HAL_RCC_ClockConfig+0x190>)
 80033ea:	4013      	ands	r3, r2
 80033ec:	0019      	movs	r1, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <HAL_RCC_ClockConfig+0x188>)
 80033f4:	430a      	orrs	r2, r1
 80033f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80033f8:	f000 f820 	bl	800343c <HAL_RCC_GetSysClockFreq>
 80033fc:	0001      	movs	r1, r0
 80033fe:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <HAL_RCC_ClockConfig+0x188>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	091b      	lsrs	r3, r3, #4
 8003404:	220f      	movs	r2, #15
 8003406:	4013      	ands	r3, r2
 8003408:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <HAL_RCC_ClockConfig+0x194>)
 800340a:	5cd3      	ldrb	r3, [r2, r3]
 800340c:	000a      	movs	r2, r1
 800340e:	40da      	lsrs	r2, r3
 8003410:	4b09      	ldr	r3, [pc, #36]	; (8003438 <HAL_RCC_ClockConfig+0x198>)
 8003412:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003414:	2000      	movs	r0, #0
 8003416:	f7ff fafd 	bl	8002a14 <HAL_InitTick>
  
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	0018      	movs	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	b004      	add	sp, #16
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40022000 	.word	0x40022000
 8003428:	40021000 	.word	0x40021000
 800342c:	00001388 	.word	0x00001388
 8003430:	fffff8ff 	.word	0xfffff8ff
 8003434:	08008b30 	.word	0x08008b30
 8003438:	20000000 	.word	0x20000000

0800343c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800343c:	b590      	push	{r4, r7, lr}
 800343e:	b08f      	sub	sp, #60	; 0x3c
 8003440:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003442:	2314      	movs	r3, #20
 8003444:	18fb      	adds	r3, r7, r3
 8003446:	4a2c      	ldr	r2, [pc, #176]	; (80034f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003448:	ca13      	ldmia	r2!, {r0, r1, r4}
 800344a:	c313      	stmia	r3!, {r0, r1, r4}
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003450:	1d3b      	adds	r3, r7, #4
 8003452:	4a2a      	ldr	r2, [pc, #168]	; (80034fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003454:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003456:	c313      	stmia	r3!, {r0, r1, r4}
 8003458:	6812      	ldr	r2, [r2, #0]
 800345a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003460:	2300      	movs	r3, #0
 8003462:	62bb      	str	r3, [r7, #40]	; 0x28
 8003464:	2300      	movs	r3, #0
 8003466:	637b      	str	r3, [r7, #52]	; 0x34
 8003468:	2300      	movs	r3, #0
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003470:	4b23      	ldr	r3, [pc, #140]	; (8003500 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003478:	220c      	movs	r2, #12
 800347a:	4013      	ands	r3, r2
 800347c:	2b04      	cmp	r3, #4
 800347e:	d002      	beq.n	8003486 <HAL_RCC_GetSysClockFreq+0x4a>
 8003480:	2b08      	cmp	r3, #8
 8003482:	d003      	beq.n	800348c <HAL_RCC_GetSysClockFreq+0x50>
 8003484:	e02f      	b.n	80034e6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003486:	4b1f      	ldr	r3, [pc, #124]	; (8003504 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003488:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800348a:	e02f      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800348c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348e:	0c9b      	lsrs	r3, r3, #18
 8003490:	220f      	movs	r2, #15
 8003492:	4013      	ands	r3, r2
 8003494:	2214      	movs	r2, #20
 8003496:	18ba      	adds	r2, r7, r2
 8003498:	5cd3      	ldrb	r3, [r2, r3]
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800349c:	4b18      	ldr	r3, [pc, #96]	; (8003500 <HAL_RCC_GetSysClockFreq+0xc4>)
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a0:	220f      	movs	r2, #15
 80034a2:	4013      	ands	r3, r2
 80034a4:	1d3a      	adds	r2, r7, #4
 80034a6:	5cd3      	ldrb	r3, [r2, r3]
 80034a8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80034aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034ac:	23c0      	movs	r3, #192	; 0xc0
 80034ae:	025b      	lsls	r3, r3, #9
 80034b0:	401a      	ands	r2, r3
 80034b2:	2380      	movs	r3, #128	; 0x80
 80034b4:	025b      	lsls	r3, r3, #9
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d109      	bne.n	80034ce <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034bc:	4811      	ldr	r0, [pc, #68]	; (8003504 <HAL_RCC_GetSysClockFreq+0xc8>)
 80034be:	f7fc fe3f 	bl	8000140 <__udivsi3>
 80034c2:	0003      	movs	r3, r0
 80034c4:	001a      	movs	r2, r3
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	4353      	muls	r3, r2
 80034ca:	637b      	str	r3, [r7, #52]	; 0x34
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034d0:	480c      	ldr	r0, [pc, #48]	; (8003504 <HAL_RCC_GetSysClockFreq+0xc8>)
 80034d2:	f7fc fe35 	bl	8000140 <__udivsi3>
 80034d6:	0003      	movs	r3, r0
 80034d8:	001a      	movs	r2, r3
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	4353      	muls	r3, r2
 80034de:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80034e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80034e4:	e002      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034e6:	4b07      	ldr	r3, [pc, #28]	; (8003504 <HAL_RCC_GetSysClockFreq+0xc8>)
 80034e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80034ea:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80034ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80034ee:	0018      	movs	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b00f      	add	sp, #60	; 0x3c
 80034f4:	bd90      	pop	{r4, r7, pc}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	08008a10 	.word	0x08008a10
 80034fc:	08008a20 	.word	0x08008a20
 8003500:	40021000 	.word	0x40021000
 8003504:	007a1200 	.word	0x007a1200

08003508 <adc_calib>:
 *  Created on: Oct 28, 2022
 *      Author: hp
 */
#include "adc.h"

BML_StatusTypeDef adc_calib(uint16_t timeout) {
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	0002      	movs	r2, r0
 8003510:	1dbb      	adds	r3, r7, #6
 8003512:	801a      	strh	r2, [r3, #0]
	// Calibrate ADC
	uint16_t i = timeout;
 8003514:	230e      	movs	r3, #14
 8003516:	18fb      	adds	r3, r7, r3
 8003518:	1dba      	adds	r2, r7, #6
 800351a:	8812      	ldrh	r2, [r2, #0]
 800351c:	801a      	strh	r2, [r3, #0]
	if ((ADC1->CR & ADC_CR_ADEN) != 0) /* (1) */
 800351e:	4b25      	ldr	r3, [pc, #148]	; (80035b4 <adc_calib+0xac>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2201      	movs	r2, #1
 8003524:	4013      	ands	r3, r2
 8003526:	d015      	beq.n	8003554 <adc_calib+0x4c>
	{
		ADC1->CR |= ADC_CR_ADDIS; /* (2) */
 8003528:	4b22      	ldr	r3, [pc, #136]	; (80035b4 <adc_calib+0xac>)
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	4b21      	ldr	r3, [pc, #132]	; (80035b4 <adc_calib+0xac>)
 800352e:	2102      	movs	r1, #2
 8003530:	430a      	orrs	r2, r1
 8003532:	609a      	str	r2, [r3, #8]
	}
	while ((ADC1->CR & ADC_CR_ADEN) != 0) {
 8003534:	e00e      	b.n	8003554 <adc_calib+0x4c>
		ADC_Delay(1);
 8003536:	2001      	movs	r0, #1
 8003538:	f7ff fabc 	bl	8002ab4 <HAL_Delay>
		i--;
 800353c:	210e      	movs	r1, #14
 800353e:	187b      	adds	r3, r7, r1
 8003540:	881a      	ldrh	r2, [r3, #0]
 8003542:	187b      	adds	r3, r7, r1
 8003544:	3a01      	subs	r2, #1
 8003546:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8003548:	187b      	adds	r3, r7, r1
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <adc_calib+0x4c>
			return BML_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e02b      	b.n	80035ac <adc_calib+0xa4>
	while ((ADC1->CR & ADC_CR_ADEN) != 0) {
 8003554:	4b17      	ldr	r3, [pc, #92]	; (80035b4 <adc_calib+0xac>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	2201      	movs	r2, #1
 800355a:	4013      	ands	r3, r2
 800355c:	d1eb      	bne.n	8003536 <adc_calib+0x2e>
		}
		/* For robust implementation, add here time-out management */
	}

	i = timeout;
 800355e:	230e      	movs	r3, #14
 8003560:	18fb      	adds	r3, r7, r3
 8003562:	1dba      	adds	r2, r7, #6
 8003564:	8812      	ldrh	r2, [r2, #0]
 8003566:	801a      	strh	r2, [r3, #0]

	ADC1->CFGR1 &= ~ADC_CFGR1_DMAEN; /* (3) */
 8003568:	4b12      	ldr	r3, [pc, #72]	; (80035b4 <adc_calib+0xac>)
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <adc_calib+0xac>)
 800356e:	2101      	movs	r1, #1
 8003570:	438a      	bics	r2, r1
 8003572:	60da      	str	r2, [r3, #12]
	ADC1->CR |= ADC_CR_ADCAL; /* (4) */
 8003574:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <adc_calib+0xac>)
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	4b0e      	ldr	r3, [pc, #56]	; (80035b4 <adc_calib+0xac>)
 800357a:	2180      	movs	r1, #128	; 0x80
 800357c:	0609      	lsls	r1, r1, #24
 800357e:	430a      	orrs	r2, r1
 8003580:	609a      	str	r2, [r3, #8]
	while ((ADC1->CR & ADC_CR_ADCAL) != 0) /* (5) */
 8003582:	e00e      	b.n	80035a2 <adc_calib+0x9a>
	{
		ADC_Delay(1);
 8003584:	2001      	movs	r0, #1
 8003586:	f7ff fa95 	bl	8002ab4 <HAL_Delay>
		i--;
 800358a:	210e      	movs	r1, #14
 800358c:	187b      	adds	r3, r7, r1
 800358e:	881a      	ldrh	r2, [r3, #0]
 8003590:	187b      	adds	r3, r7, r1
 8003592:	3a01      	subs	r2, #1
 8003594:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8003596:	187b      	adds	r3, r7, r1
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <adc_calib+0x9a>
			return BML_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e004      	b.n	80035ac <adc_calib+0xa4>
	while ((ADC1->CR & ADC_CR_ADCAL) != 0) /* (5) */
 80035a2:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <adc_calib+0xac>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	dbec      	blt.n	8003584 <adc_calib+0x7c>
		}
	}
	return BML_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	0018      	movs	r0, r3
 80035ae:	46bd      	mov	sp, r7
 80035b0:	b004      	add	sp, #16
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40012400 	.word	0x40012400

080035b8 <adc_ready>:
BML_StatusTypeDef adc_ready(uint16_t timeout) {
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	0002      	movs	r2, r0
 80035c0:	1dbb      	adds	r3, r7, #6
 80035c2:	801a      	strh	r2, [r3, #0]
	uint16_t i = timeout;
 80035c4:	230e      	movs	r3, #14
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	1dba      	adds	r2, r7, #6
 80035ca:	8812      	ldrh	r2, [r2, #0]
 80035cc:	801a      	strh	r2, [r3, #0]
	// ADC ENABLE
	if ((ADC1->ISR & ADC_ISR_ADRDY) != 0) /* (1) */
 80035ce:	4b15      	ldr	r3, [pc, #84]	; (8003624 <adc_ready+0x6c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2201      	movs	r2, #1
 80035d4:	4013      	ands	r3, r2
 80035d6:	d005      	beq.n	80035e4 <adc_ready+0x2c>
	{
		ADC1->ISR |= ADC_ISR_ADRDY; /* (2) */
 80035d8:	4b12      	ldr	r3, [pc, #72]	; (8003624 <adc_ready+0x6c>)
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	4b11      	ldr	r3, [pc, #68]	; (8003624 <adc_ready+0x6c>)
 80035de:	2101      	movs	r1, #1
 80035e0:	430a      	orrs	r2, r1
 80035e2:	601a      	str	r2, [r3, #0]
	}
	ADC1->CR |= ADC_CR_ADEN; /* (3) */
 80035e4:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <adc_ready+0x6c>)
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	4b0e      	ldr	r3, [pc, #56]	; (8003624 <adc_ready+0x6c>)
 80035ea:	2101      	movs	r1, #1
 80035ec:	430a      	orrs	r2, r1
 80035ee:	609a      	str	r2, [r3, #8]
	while ((ADC1->ISR & ADC_ISR_ADRDY) == 0) /* (4) */
 80035f0:	e00e      	b.n	8003610 <adc_ready+0x58>
	{
		ADC_Delay(1);
 80035f2:	2001      	movs	r0, #1
 80035f4:	f7ff fa5e 	bl	8002ab4 <HAL_Delay>
		i--;
 80035f8:	210e      	movs	r1, #14
 80035fa:	187b      	adds	r3, r7, r1
 80035fc:	881a      	ldrh	r2, [r3, #0]
 80035fe:	187b      	adds	r3, r7, r1
 8003600:	3a01      	subs	r2, #1
 8003602:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8003604:	187b      	adds	r3, r7, r1
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <adc_ready+0x58>
			return BML_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e005      	b.n	800361c <adc_ready+0x64>
	while ((ADC1->ISR & ADC_ISR_ADRDY) == 0) /* (4) */
 8003610:	4b04      	ldr	r3, [pc, #16]	; (8003624 <adc_ready+0x6c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2201      	movs	r2, #1
 8003616:	4013      	ands	r3, r2
 8003618:	d0eb      	beq.n	80035f2 <adc_ready+0x3a>
		}
		/* For robust implementation, add here time-out management */
	}
	return BML_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	0018      	movs	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	b004      	add	sp, #16
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40012400 	.word	0x40012400

08003628 <adc_clk_config>:
BML_StatusTypeDef adc_clk_config(uint16_t timeout) {
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	0002      	movs	r2, r0
 8003630:	1dbb      	adds	r3, r7, #6
 8003632:	801a      	strh	r2, [r3, #0]
	uint16_t i = timeout;
 8003634:	230e      	movs	r3, #14
 8003636:	18fb      	adds	r3, r7, r3
 8003638:	1dba      	adds	r2, r7, #6
 800363a:	8812      	ldrh	r2, [r2, #0]
 800363c:	801a      	strh	r2, [r3, #0]
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN; /* (1) */
 800363e:	4b13      	ldr	r3, [pc, #76]	; (800368c <adc_clk_config+0x64>)
 8003640:	699a      	ldr	r2, [r3, #24]
 8003642:	4b12      	ldr	r3, [pc, #72]	; (800368c <adc_clk_config+0x64>)
 8003644:	2180      	movs	r1, #128	; 0x80
 8003646:	0089      	lsls	r1, r1, #2
 8003648:	430a      	orrs	r2, r1
 800364a:	619a      	str	r2, [r3, #24]
	RCC->CR2 |= RCC_CR2_HSI14ON; /* (2) */
 800364c:	4b0f      	ldr	r3, [pc, #60]	; (800368c <adc_clk_config+0x64>)
 800364e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003650:	4b0e      	ldr	r3, [pc, #56]	; (800368c <adc_clk_config+0x64>)
 8003652:	2101      	movs	r1, #1
 8003654:	430a      	orrs	r2, r1
 8003656:	635a      	str	r2, [r3, #52]	; 0x34
	while ((RCC->CR2 & RCC_CR2_HSI14RDY) == 0) /* (3) */
 8003658:	e00e      	b.n	8003678 <adc_clk_config+0x50>
	{
		ADC_Delay(1);
 800365a:	2001      	movs	r0, #1
 800365c:	f7ff fa2a 	bl	8002ab4 <HAL_Delay>
		i--;
 8003660:	210e      	movs	r1, #14
 8003662:	187b      	adds	r3, r7, r1
 8003664:	881a      	ldrh	r2, [r3, #0]
 8003666:	187b      	adds	r3, r7, r1
 8003668:	3a01      	subs	r2, #1
 800366a:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 800366c:	187b      	adds	r3, r7, r1
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <adc_clk_config+0x50>
			return BML_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e005      	b.n	8003684 <adc_clk_config+0x5c>
	while ((RCC->CR2 & RCC_CR2_HSI14RDY) == 0) /* (3) */
 8003678:	4b04      	ldr	r3, [pc, #16]	; (800368c <adc_clk_config+0x64>)
 800367a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800367c:	2202      	movs	r2, #2
 800367e:	4013      	ands	r3, r2
 8003680:	d0eb      	beq.n	800365a <adc_clk_config+0x32>
		}
		/* For robust implementation, add here time-out management */
	}
	return BML_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	0018      	movs	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	b004      	add	sp, #16
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40021000 	.word	0x40021000

08003690 <adc_sample_time>:
void adc_sample_time(uint8_t sample_time) {
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	0002      	movs	r2, r0
 8003698:	1dfb      	adds	r3, r7, #7
 800369a:	701a      	strb	r2, [r3, #0]
	ADC1->SMPR |= sample_time;
 800369c:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <adc_sample_time+0x24>)
 800369e:	6959      	ldr	r1, [r3, #20]
 80036a0:	1dfb      	adds	r3, r7, #7
 80036a2:	781a      	ldrb	r2, [r3, #0]
 80036a4:	4b03      	ldr	r3, [pc, #12]	; (80036b4 <adc_sample_time+0x24>)
 80036a6:	430a      	orrs	r2, r1
 80036a8:	615a      	str	r2, [r3, #20]
}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	46bd      	mov	sp, r7
 80036ae:	b002      	add	sp, #8
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	40012400 	.word	0x40012400

080036b8 <adc_en>:
BML_StatusTypeDef adc_en(uint16_t timeout) {
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	0002      	movs	r2, r0
 80036c0:	1dbb      	adds	r3, r7, #6
 80036c2:	801a      	strh	r2, [r3, #0]
	if (adc_clk_config(timeout) == BML_OK && adc_calib(timeout) == BML_OK
 80036c4:	1dbb      	adds	r3, r7, #6
 80036c6:	881b      	ldrh	r3, [r3, #0]
 80036c8:	0018      	movs	r0, r3
 80036ca:	f7ff ffad 	bl	8003628 <adc_clk_config>
 80036ce:	1e03      	subs	r3, r0, #0
 80036d0:	d10f      	bne.n	80036f2 <adc_en+0x3a>
 80036d2:	1dbb      	adds	r3, r7, #6
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	0018      	movs	r0, r3
 80036d8:	f7ff ff16 	bl	8003508 <adc_calib>
 80036dc:	1e03      	subs	r3, r0, #0
 80036de:	d108      	bne.n	80036f2 <adc_en+0x3a>
			&& adc_ready(timeout) == BML_OK) {
 80036e0:	1dbb      	adds	r3, r7, #6
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	0018      	movs	r0, r3
 80036e6:	f7ff ff67 	bl	80035b8 <adc_ready>
 80036ea:	1e03      	subs	r3, r0, #0
 80036ec:	d101      	bne.n	80036f2 <adc_en+0x3a>
		return BML_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	e000      	b.n	80036f4 <adc_en+0x3c>
	}
	return BML_ERROR;
 80036f2:	2301      	movs	r3, #1
}
 80036f4:	0018      	movs	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b002      	add	sp, #8
 80036fa:	bd80      	pop	{r7, pc}

080036fc <adc_read>:
BML_StatusTypeDef adc_read(uint16_t *arr, uint8_t arr_len, uint16_t timeout) {
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	0008      	movs	r0, r1
 8003706:	0011      	movs	r1, r2
 8003708:	1cfb      	adds	r3, r7, #3
 800370a:	1c02      	adds	r2, r0, #0
 800370c:	701a      	strb	r2, [r3, #0]
 800370e:	003b      	movs	r3, r7
 8003710:	1c0a      	adds	r2, r1, #0
 8003712:	801a      	strh	r2, [r3, #0]
	uint16_t i = timeout;
 8003714:	230a      	movs	r3, #10
 8003716:	18fb      	adds	r3, r7, r3
 8003718:	003a      	movs	r2, r7
 800371a:	8812      	ldrh	r2, [r2, #0]
 800371c:	801a      	strh	r2, [r3, #0]

	ADC1->CR |= ADC_CR_ADSTART;
 800371e:	4b15      	ldr	r3, [pc, #84]	; (8003774 <adc_read+0x78>)
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	4b14      	ldr	r3, [pc, #80]	; (8003774 <adc_read+0x78>)
 8003724:	2104      	movs	r1, #4
 8003726:	430a      	orrs	r2, r1
 8003728:	609a      	str	r2, [r3, #8]

	for (int i = 0; i < arr_len; i++) {
 800372a:	2300      	movs	r3, #0
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	e010      	b.n	8003752 <adc_read+0x56>
		while ((ADC1->ISR & ADC_ISR_EOC) == LOW) {
 8003730:	46c0      	nop			; (mov r8, r8)
 8003732:	4b10      	ldr	r3, [pc, #64]	; (8003774 <adc_read+0x78>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2204      	movs	r2, #4
 8003738:	4013      	ands	r3, r2
 800373a:	d0fa      	beq.n	8003732 <adc_read+0x36>
//			i--;
//			if (i <= 0) {
//				return BML_TIMEOUT;
//			}
		}
		*(arr + i) = ADC1->DR;
 800373c:	4b0d      	ldr	r3, [pc, #52]	; (8003774 <adc_read+0x78>)
 800373e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	18d3      	adds	r3, r2, r3
 8003748:	b28a      	uxth	r2, r1
 800374a:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < arr_len; i++) {
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	3301      	adds	r3, #1
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	1cfb      	adds	r3, r7, #3
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	429a      	cmp	r2, r3
 800375a:	dbe9      	blt.n	8003730 <adc_read+0x34>
//		i = timeout;
	}
	ADC1->CR |= ADC_CR_ADSTP;
 800375c:	4b05      	ldr	r3, [pc, #20]	; (8003774 <adc_read+0x78>)
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	4b04      	ldr	r3, [pc, #16]	; (8003774 <adc_read+0x78>)
 8003762:	2110      	movs	r1, #16
 8003764:	430a      	orrs	r2, r1
 8003766:	609a      	str	r2, [r3, #8]
	return BML_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	0018      	movs	r0, r3
 800376c:	46bd      	mov	sp, r7
 800376e:	b004      	add	sp, #16
 8003770:	bd80      	pop	{r7, pc}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	40012400 	.word	0x40012400

08003778 <adc_chsel>:
			return BML_TIMEOUT;
		}
		/* For robust implementation, add here time-out management */
	}
}
void adc_chsel(GPIO_TypeDef *port, uint16_t pin) {
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	000a      	movs	r2, r1
 8003782:	1cbb      	adds	r3, r7, #2
 8003784:	801a      	strh	r2, [r3, #0]

	if (port == GPIOA) {
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	2390      	movs	r3, #144	; 0x90
 800378a:	05db      	lsls	r3, r3, #23
 800378c:	429a      	cmp	r2, r3
 800378e:	d141      	bne.n	8003814 <adc_chsel+0x9c>
		switch (pin) {
 8003790:	1cbb      	adds	r3, r7, #2
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	2b07      	cmp	r3, #7
 8003796:	d900      	bls.n	800379a <adc_chsel+0x22>
 8003798:	e094      	b.n	80038c4 <adc_chsel+0x14c>
 800379a:	009a      	lsls	r2, r3, #2
 800379c:	4b4e      	ldr	r3, [pc, #312]	; (80038d8 <adc_chsel+0x160>)
 800379e:	18d3      	adds	r3, r2, r3
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	469f      	mov	pc, r3
		case 0:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL0;
 80037a4:	4b4d      	ldr	r3, [pc, #308]	; (80038dc <adc_chsel+0x164>)
 80037a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037a8:	4b4c      	ldr	r3, [pc, #304]	; (80038dc <adc_chsel+0x164>)
 80037aa:	2101      	movs	r1, #1
 80037ac:	430a      	orrs	r2, r1
 80037ae:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80037b0:	e08d      	b.n	80038ce <adc_chsel+0x156>
		case 1:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL1;
 80037b2:	4b4a      	ldr	r3, [pc, #296]	; (80038dc <adc_chsel+0x164>)
 80037b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037b6:	4b49      	ldr	r3, [pc, #292]	; (80038dc <adc_chsel+0x164>)
 80037b8:	2102      	movs	r1, #2
 80037ba:	430a      	orrs	r2, r1
 80037bc:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80037be:	e086      	b.n	80038ce <adc_chsel+0x156>
		case 2:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL2;
 80037c0:	4b46      	ldr	r3, [pc, #280]	; (80038dc <adc_chsel+0x164>)
 80037c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037c4:	4b45      	ldr	r3, [pc, #276]	; (80038dc <adc_chsel+0x164>)
 80037c6:	2104      	movs	r1, #4
 80037c8:	430a      	orrs	r2, r1
 80037ca:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80037cc:	e07f      	b.n	80038ce <adc_chsel+0x156>
		case 3:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL3;
 80037ce:	4b43      	ldr	r3, [pc, #268]	; (80038dc <adc_chsel+0x164>)
 80037d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037d2:	4b42      	ldr	r3, [pc, #264]	; (80038dc <adc_chsel+0x164>)
 80037d4:	2108      	movs	r1, #8
 80037d6:	430a      	orrs	r2, r1
 80037d8:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80037da:	e078      	b.n	80038ce <adc_chsel+0x156>
		case 4:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL4;
 80037dc:	4b3f      	ldr	r3, [pc, #252]	; (80038dc <adc_chsel+0x164>)
 80037de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037e0:	4b3e      	ldr	r3, [pc, #248]	; (80038dc <adc_chsel+0x164>)
 80037e2:	2110      	movs	r1, #16
 80037e4:	430a      	orrs	r2, r1
 80037e6:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80037e8:	e071      	b.n	80038ce <adc_chsel+0x156>
		case 5:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL5;
 80037ea:	4b3c      	ldr	r3, [pc, #240]	; (80038dc <adc_chsel+0x164>)
 80037ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037ee:	4b3b      	ldr	r3, [pc, #236]	; (80038dc <adc_chsel+0x164>)
 80037f0:	2120      	movs	r1, #32
 80037f2:	430a      	orrs	r2, r1
 80037f4:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80037f6:	e06a      	b.n	80038ce <adc_chsel+0x156>
		case 6:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL6;
 80037f8:	4b38      	ldr	r3, [pc, #224]	; (80038dc <adc_chsel+0x164>)
 80037fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037fc:	4b37      	ldr	r3, [pc, #220]	; (80038dc <adc_chsel+0x164>)
 80037fe:	2140      	movs	r1, #64	; 0x40
 8003800:	430a      	orrs	r2, r1
 8003802:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003804:	e063      	b.n	80038ce <adc_chsel+0x156>
		case 7:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL7;
 8003806:	4b35      	ldr	r3, [pc, #212]	; (80038dc <adc_chsel+0x164>)
 8003808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800380a:	4b34      	ldr	r3, [pc, #208]	; (80038dc <adc_chsel+0x164>)
 800380c:	2180      	movs	r1, #128	; 0x80
 800380e:	430a      	orrs	r2, r1
 8003810:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003812:	e05c      	b.n	80038ce <adc_chsel+0x156>
		default:
			break;
		}
	} else if (port == GPIOB) {
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a32      	ldr	r2, [pc, #200]	; (80038e0 <adc_chsel+0x168>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d116      	bne.n	800384a <adc_chsel+0xd2>
		switch (pin) {
 800381c:	1cbb      	adds	r3, r7, #2
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <adc_chsel+0xb2>
 8003824:	2b01      	cmp	r3, #1
 8003826:	d008      	beq.n	800383a <adc_chsel+0xc2>
			break;
		case 1:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL9;
			break;
		default:
			break;
 8003828:	e051      	b.n	80038ce <adc_chsel+0x156>
			ADC1->CHSELR |= ADC_CHSELR_CHSEL8;
 800382a:	4b2c      	ldr	r3, [pc, #176]	; (80038dc <adc_chsel+0x164>)
 800382c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800382e:	4b2b      	ldr	r3, [pc, #172]	; (80038dc <adc_chsel+0x164>)
 8003830:	2180      	movs	r1, #128	; 0x80
 8003832:	0049      	lsls	r1, r1, #1
 8003834:	430a      	orrs	r2, r1
 8003836:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003838:	e049      	b.n	80038ce <adc_chsel+0x156>
			ADC1->CHSELR |= ADC_CHSELR_CHSEL9;
 800383a:	4b28      	ldr	r3, [pc, #160]	; (80038dc <adc_chsel+0x164>)
 800383c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800383e:	4b27      	ldr	r3, [pc, #156]	; (80038dc <adc_chsel+0x164>)
 8003840:	2180      	movs	r1, #128	; 0x80
 8003842:	0089      	lsls	r1, r1, #2
 8003844:	430a      	orrs	r2, r1
 8003846:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003848:	e041      	b.n	80038ce <adc_chsel+0x156>
		}
	} else if (port == GPIOC) {
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a25      	ldr	r2, [pc, #148]	; (80038e4 <adc_chsel+0x16c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d13a      	bne.n	80038c8 <adc_chsel+0x150>
		switch (pin) {
 8003852:	1cbb      	adds	r3, r7, #2
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	2b05      	cmp	r3, #5
 8003858:	d838      	bhi.n	80038cc <adc_chsel+0x154>
 800385a:	009a      	lsls	r2, r3, #2
 800385c:	4b22      	ldr	r3, [pc, #136]	; (80038e8 <adc_chsel+0x170>)
 800385e:	18d3      	adds	r3, r2, r3
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	469f      	mov	pc, r3
		case 0:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL10;
 8003864:	4b1d      	ldr	r3, [pc, #116]	; (80038dc <adc_chsel+0x164>)
 8003866:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003868:	4b1c      	ldr	r3, [pc, #112]	; (80038dc <adc_chsel+0x164>)
 800386a:	2180      	movs	r1, #128	; 0x80
 800386c:	00c9      	lsls	r1, r1, #3
 800386e:	430a      	orrs	r2, r1
 8003870:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003872:	e02c      	b.n	80038ce <adc_chsel+0x156>
		case 1:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL11;
 8003874:	4b19      	ldr	r3, [pc, #100]	; (80038dc <adc_chsel+0x164>)
 8003876:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003878:	4b18      	ldr	r3, [pc, #96]	; (80038dc <adc_chsel+0x164>)
 800387a:	2180      	movs	r1, #128	; 0x80
 800387c:	0109      	lsls	r1, r1, #4
 800387e:	430a      	orrs	r2, r1
 8003880:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003882:	e024      	b.n	80038ce <adc_chsel+0x156>
		case 2:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL12;
 8003884:	4b15      	ldr	r3, [pc, #84]	; (80038dc <adc_chsel+0x164>)
 8003886:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003888:	4b14      	ldr	r3, [pc, #80]	; (80038dc <adc_chsel+0x164>)
 800388a:	2180      	movs	r1, #128	; 0x80
 800388c:	0149      	lsls	r1, r1, #5
 800388e:	430a      	orrs	r2, r1
 8003890:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003892:	e01c      	b.n	80038ce <adc_chsel+0x156>
		case 3:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL13;
 8003894:	4b11      	ldr	r3, [pc, #68]	; (80038dc <adc_chsel+0x164>)
 8003896:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003898:	4b10      	ldr	r3, [pc, #64]	; (80038dc <adc_chsel+0x164>)
 800389a:	2180      	movs	r1, #128	; 0x80
 800389c:	0189      	lsls	r1, r1, #6
 800389e:	430a      	orrs	r2, r1
 80038a0:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80038a2:	e014      	b.n	80038ce <adc_chsel+0x156>
		case 4:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL14;
 80038a4:	4b0d      	ldr	r3, [pc, #52]	; (80038dc <adc_chsel+0x164>)
 80038a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038a8:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <adc_chsel+0x164>)
 80038aa:	2180      	movs	r1, #128	; 0x80
 80038ac:	01c9      	lsls	r1, r1, #7
 80038ae:	430a      	orrs	r2, r1
 80038b0:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80038b2:	e00c      	b.n	80038ce <adc_chsel+0x156>
		case 5:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL15;
 80038b4:	4b09      	ldr	r3, [pc, #36]	; (80038dc <adc_chsel+0x164>)
 80038b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038b8:	4b08      	ldr	r3, [pc, #32]	; (80038dc <adc_chsel+0x164>)
 80038ba:	2180      	movs	r1, #128	; 0x80
 80038bc:	0209      	lsls	r1, r1, #8
 80038be:	430a      	orrs	r2, r1
 80038c0:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80038c2:	e004      	b.n	80038ce <adc_chsel+0x156>
			break;
 80038c4:	46c0      	nop			; (mov r8, r8)
 80038c6:	e002      	b.n	80038ce <adc_chsel+0x156>
		default:
			break;
		}
	}
 80038c8:	46c0      	nop			; (mov r8, r8)
 80038ca:	e000      	b.n	80038ce <adc_chsel+0x156>
			break;
 80038cc:	46c0      	nop			; (mov r8, r8)
}
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	46bd      	mov	sp, r7
 80038d2:	b002      	add	sp, #8
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	46c0      	nop			; (mov r8, r8)
 80038d8:	08008b40 	.word	0x08008b40
 80038dc:	40012400 	.word	0x40012400
 80038e0:	48000400 	.word	0x48000400
 80038e4:	48000800 	.word	0x48000800
 80038e8:	08008b60 	.word	0x08008b60

080038ec <adc_config>:
void adc_config(uint8_t sample_time, uint8_t CONT, uint8_t SCANDIR,
		uint8_t AUTOFF, uint8_t WAIT, uint8_t DISCEN, uint8_t OVRMOD) {
 80038ec:	b5b0      	push	{r4, r5, r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	0005      	movs	r5, r0
 80038f4:	000c      	movs	r4, r1
 80038f6:	0010      	movs	r0, r2
 80038f8:	0019      	movs	r1, r3
 80038fa:	1dfb      	adds	r3, r7, #7
 80038fc:	1c2a      	adds	r2, r5, #0
 80038fe:	701a      	strb	r2, [r3, #0]
 8003900:	1dbb      	adds	r3, r7, #6
 8003902:	1c22      	adds	r2, r4, #0
 8003904:	701a      	strb	r2, [r3, #0]
 8003906:	1d7b      	adds	r3, r7, #5
 8003908:	1c02      	adds	r2, r0, #0
 800390a:	701a      	strb	r2, [r3, #0]
 800390c:	1d3b      	adds	r3, r7, #4
 800390e:	1c0a      	adds	r2, r1, #0
 8003910:	701a      	strb	r2, [r3, #0]
	adc_sample_time(sample_time);
 8003912:	1dfb      	adds	r3, r7, #7
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	0018      	movs	r0, r3
 8003918:	f7ff feba 	bl	8003690 <adc_sample_time>
	if (DISCEN && !CONT) {
 800391c:	231c      	movs	r3, #28
 800391e:	18fb      	adds	r3, r7, r3
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <adc_config+0x50>
 8003926:	1dbb      	adds	r3, r7, #6
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <adc_config+0x50>
		ADC1->CFGR1 |= ADC_CFGR1_DISCEN;
 800392e:	4b24      	ldr	r3, [pc, #144]	; (80039c0 <adc_config+0xd4>)
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	4b23      	ldr	r3, [pc, #140]	; (80039c0 <adc_config+0xd4>)
 8003934:	2180      	movs	r1, #128	; 0x80
 8003936:	0249      	lsls	r1, r1, #9
 8003938:	430a      	orrs	r2, r1
 800393a:	60da      	str	r2, [r3, #12]
	}
	if (AUTOFF) {
 800393c:	1d3b      	adds	r3, r7, #4
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d006      	beq.n	8003952 <adc_config+0x66>
		ADC1->CFGR1 |= ADC_CFGR1_AUTOFF;
 8003944:	4b1e      	ldr	r3, [pc, #120]	; (80039c0 <adc_config+0xd4>)
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	4b1d      	ldr	r3, [pc, #116]	; (80039c0 <adc_config+0xd4>)
 800394a:	2180      	movs	r1, #128	; 0x80
 800394c:	0209      	lsls	r1, r1, #8
 800394e:	430a      	orrs	r2, r1
 8003950:	60da      	str	r2, [r3, #12]
	}
	if (WAIT) {
 8003952:	2318      	movs	r3, #24
 8003954:	18fb      	adds	r3, r7, r3
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d006      	beq.n	800396a <adc_config+0x7e>
		ADC1->CFGR1 |= ADC_CFGR1_WAIT;
 800395c:	4b18      	ldr	r3, [pc, #96]	; (80039c0 <adc_config+0xd4>)
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	4b17      	ldr	r3, [pc, #92]	; (80039c0 <adc_config+0xd4>)
 8003962:	2180      	movs	r1, #128	; 0x80
 8003964:	01c9      	lsls	r1, r1, #7
 8003966:	430a      	orrs	r2, r1
 8003968:	60da      	str	r2, [r3, #12]
	}
	if (CONT && !DISCEN) {
 800396a:	1dbb      	adds	r3, r7, #6
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00b      	beq.n	800398a <adc_config+0x9e>
 8003972:	231c      	movs	r3, #28
 8003974:	18fb      	adds	r3, r7, r3
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d106      	bne.n	800398a <adc_config+0x9e>
		ADC1->CFGR1 |= ADC_CFGR1_CONT;
 800397c:	4b10      	ldr	r3, [pc, #64]	; (80039c0 <adc_config+0xd4>)
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	4b0f      	ldr	r3, [pc, #60]	; (80039c0 <adc_config+0xd4>)
 8003982:	2180      	movs	r1, #128	; 0x80
 8003984:	0189      	lsls	r1, r1, #6
 8003986:	430a      	orrs	r2, r1
 8003988:	60da      	str	r2, [r3, #12]
	}
	if (OVRMOD) {
 800398a:	2320      	movs	r3, #32
 800398c:	18fb      	adds	r3, r7, r3
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d006      	beq.n	80039a2 <adc_config+0xb6>
		ADC1->CFGR1 |= ADC_CFGR1_OVRMOD;
 8003994:	4b0a      	ldr	r3, [pc, #40]	; (80039c0 <adc_config+0xd4>)
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <adc_config+0xd4>)
 800399a:	2180      	movs	r1, #128	; 0x80
 800399c:	0149      	lsls	r1, r1, #5
 800399e:	430a      	orrs	r2, r1
 80039a0:	60da      	str	r2, [r3, #12]
	}
	if (SCANDIR) {
 80039a2:	1d7b      	adds	r3, r7, #5
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d005      	beq.n	80039b6 <adc_config+0xca>
		ADC1->CFGR1 |= ADC_CFGR1_SCANDIR;
 80039aa:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <adc_config+0xd4>)
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	4b04      	ldr	r3, [pc, #16]	; (80039c0 <adc_config+0xd4>)
 80039b0:	2104      	movs	r1, #4
 80039b2:	430a      	orrs	r2, r1
 80039b4:	60da      	str	r2, [r3, #12]
	}
}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	46bd      	mov	sp, r7
 80039ba:	b002      	add	sp, #8
 80039bc:	bdb0      	pop	{r4, r5, r7, pc}
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	40012400 	.word	0x40012400

080039c4 <__NVIC_EnableIRQ>:
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	0002      	movs	r2, r0
 80039cc:	1dfb      	adds	r3, r7, #7
 80039ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80039d0:	1dfb      	adds	r3, r7, #7
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b7f      	cmp	r3, #127	; 0x7f
 80039d6:	d809      	bhi.n	80039ec <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039d8:	1dfb      	adds	r3, r7, #7
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	001a      	movs	r2, r3
 80039de:	231f      	movs	r3, #31
 80039e0:	401a      	ands	r2, r3
 80039e2:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <__NVIC_EnableIRQ+0x30>)
 80039e4:	2101      	movs	r1, #1
 80039e6:	4091      	lsls	r1, r2
 80039e8:	000a      	movs	r2, r1
 80039ea:	601a      	str	r2, [r3, #0]
}
 80039ec:	46c0      	nop			; (mov r8, r8)
 80039ee:	46bd      	mov	sp, r7
 80039f0:	b002      	add	sp, #8
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	e000e100 	.word	0xe000e100

080039f8 <map>:
		(0x07) };



uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min,
		uint16_t out_max) {
 80039f8:	b5b0      	push	{r4, r5, r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	0005      	movs	r5, r0
 8003a00:	000c      	movs	r4, r1
 8003a02:	0010      	movs	r0, r2
 8003a04:	0019      	movs	r1, r3
 8003a06:	1dbb      	adds	r3, r7, #6
 8003a08:	1c2a      	adds	r2, r5, #0
 8003a0a:	801a      	strh	r2, [r3, #0]
 8003a0c:	1d3b      	adds	r3, r7, #4
 8003a0e:	1c22      	adds	r2, r4, #0
 8003a10:	801a      	strh	r2, [r3, #0]
 8003a12:	1cbb      	adds	r3, r7, #2
 8003a14:	1c02      	adds	r2, r0, #0
 8003a16:	801a      	strh	r2, [r3, #0]
 8003a18:	003b      	movs	r3, r7
 8003a1a:	1c0a      	adds	r2, r1, #0
 8003a1c:	801a      	strh	r2, [r3, #0]
	return (((x - in_min) * (out_max - out_min)) / ((in_max - in_min) + out_min));
 8003a1e:	1dbb      	adds	r3, r7, #6
 8003a20:	881a      	ldrh	r2, [r3, #0]
 8003a22:	1d3b      	adds	r3, r7, #4
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	1ad2      	subs	r2, r2, r3
 8003a28:	2318      	movs	r3, #24
 8003a2a:	18fb      	adds	r3, r7, r3
 8003a2c:	8819      	ldrh	r1, [r3, #0]
 8003a2e:	003b      	movs	r3, r7
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	1acb      	subs	r3, r1, r3
 8003a34:	4353      	muls	r3, r2
 8003a36:	0018      	movs	r0, r3
 8003a38:	1cbb      	adds	r3, r7, #2
 8003a3a:	881a      	ldrh	r2, [r3, #0]
 8003a3c:	1d3b      	adds	r3, r7, #4
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	1ad2      	subs	r2, r2, r3
 8003a42:	003b      	movs	r3, r7
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	18d3      	adds	r3, r2, r3
 8003a48:	0019      	movs	r1, r3
 8003a4a:	f7fc fc03 	bl	8000254 <__divsi3>
 8003a4e:	0003      	movs	r3, r0
 8003a50:	b29b      	uxth	r3, r3
}
 8003a52:	0018      	movs	r0, r3
 8003a54:	46bd      	mov	sp, r7
 8003a56:	b002      	add	sp, #8
 8003a58:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003a5c <gpio_clk_en>:

/**********************Enable clock Function*************************************/
void gpio_clk_en(GPIO_TypeDef *port) {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
	if (port == GPIOA) {
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	2390      	movs	r3, #144	; 0x90
 8003a68:	05db      	lsls	r3, r3, #23
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d107      	bne.n	8003a7e <gpio_clk_en+0x22>
		GPIOA_CLK_EN;
 8003a6e:	4b1b      	ldr	r3, [pc, #108]	; (8003adc <gpio_clk_en+0x80>)
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	4b1a      	ldr	r3, [pc, #104]	; (8003adc <gpio_clk_en+0x80>)
 8003a74:	2180      	movs	r1, #128	; 0x80
 8003a76:	0289      	lsls	r1, r1, #10
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	615a      	str	r2, [r3, #20]
	} else if (port == GPIOD) {
		GPIOD_CLK_EN;
	} else {
		GPIOF_CLK_EN;
	}
}
 8003a7c:	e02a      	b.n	8003ad4 <gpio_clk_en+0x78>
	} else if (port == GPIOB) {
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a17      	ldr	r2, [pc, #92]	; (8003ae0 <gpio_clk_en+0x84>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d107      	bne.n	8003a96 <gpio_clk_en+0x3a>
		GPIOB_CLK_EN;
 8003a86:	4b15      	ldr	r3, [pc, #84]	; (8003adc <gpio_clk_en+0x80>)
 8003a88:	695a      	ldr	r2, [r3, #20]
 8003a8a:	4b14      	ldr	r3, [pc, #80]	; (8003adc <gpio_clk_en+0x80>)
 8003a8c:	2180      	movs	r1, #128	; 0x80
 8003a8e:	02c9      	lsls	r1, r1, #11
 8003a90:	430a      	orrs	r2, r1
 8003a92:	615a      	str	r2, [r3, #20]
}
 8003a94:	e01e      	b.n	8003ad4 <gpio_clk_en+0x78>
	} else if (port == GPIOC) {
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a12      	ldr	r2, [pc, #72]	; (8003ae4 <gpio_clk_en+0x88>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d107      	bne.n	8003aae <gpio_clk_en+0x52>
		GPIOC_CLK_EN;
 8003a9e:	4b0f      	ldr	r3, [pc, #60]	; (8003adc <gpio_clk_en+0x80>)
 8003aa0:	695a      	ldr	r2, [r3, #20]
 8003aa2:	4b0e      	ldr	r3, [pc, #56]	; (8003adc <gpio_clk_en+0x80>)
 8003aa4:	2180      	movs	r1, #128	; 0x80
 8003aa6:	0309      	lsls	r1, r1, #12
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	615a      	str	r2, [r3, #20]
}
 8003aac:	e012      	b.n	8003ad4 <gpio_clk_en+0x78>
	} else if (port == GPIOD) {
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a0d      	ldr	r2, [pc, #52]	; (8003ae8 <gpio_clk_en+0x8c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d107      	bne.n	8003ac6 <gpio_clk_en+0x6a>
		GPIOD_CLK_EN;
 8003ab6:	4b09      	ldr	r3, [pc, #36]	; (8003adc <gpio_clk_en+0x80>)
 8003ab8:	695a      	ldr	r2, [r3, #20]
 8003aba:	4b08      	ldr	r3, [pc, #32]	; (8003adc <gpio_clk_en+0x80>)
 8003abc:	2180      	movs	r1, #128	; 0x80
 8003abe:	0349      	lsls	r1, r1, #13
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	615a      	str	r2, [r3, #20]
}
 8003ac4:	e006      	b.n	8003ad4 <gpio_clk_en+0x78>
		GPIOF_CLK_EN;
 8003ac6:	4b05      	ldr	r3, [pc, #20]	; (8003adc <gpio_clk_en+0x80>)
 8003ac8:	695a      	ldr	r2, [r3, #20]
 8003aca:	4b04      	ldr	r3, [pc, #16]	; (8003adc <gpio_clk_en+0x80>)
 8003acc:	2180      	movs	r1, #128	; 0x80
 8003ace:	03c9      	lsls	r1, r1, #15
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	615a      	str	r2, [r3, #20]
}
 8003ad4:	46c0      	nop			; (mov r8, r8)
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b002      	add	sp, #8
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	48000400 	.word	0x48000400
 8003ae4:	48000800 	.word	0x48000800
 8003ae8:	48000c00 	.word	0x48000c00

08003aec <gpio_config>:
/**********************************************************************************/

/********************GPIO Configuration Functions**********************************/
void gpio_config(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode,
		uint32_t pinSpeed, uint32_t pinPUPD, uint32_t PHPL_OD) {
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	603b      	str	r3, [r7, #0]

	if (pinMode == OUTPUT_MODE) {
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d11c      	bne.n	8003b3a <gpio_config+0x4e>
		gpio_clk_en(port);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	0018      	movs	r0, r3
 8003b04:	f7ff ffaa 	bl	8003a5c <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	68b9      	ldr	r1, [r7, #8]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	0018      	movs	r0, r3
 8003b10:	f000 f858 	bl	8003bc4 <gpio_moder>
		gpio_speed(port, pinNumber, pinSpeed);
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	68b9      	ldr	r1, [r7, #8]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f000 f86a 	bl	8003bf4 <gpio_speed>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	68b9      	ldr	r1, [r7, #8]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	0018      	movs	r0, r3
 8003b28:	f000 f87c 	bl	8003c24 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 8003b2c:	69fa      	ldr	r2, [r7, #28]
 8003b2e:	68b9      	ldr	r1, [r7, #8]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	0018      	movs	r0, r3
 8003b34:	f000 f88e 	bl	8003c54 <gpio_PHPL_OD>
	} else if (pinMode == ANALOG_MODE) {
		gpio_clk_en(port);
		gpio_moder(port, pinNumber, pinMode);
		adc_chsel(port, pinNumber);
	}
}
 8003b38:	e040      	b.n	8003bbc <gpio_config+0xd0>
	} else if (pinMode == INPUT_MODE) {
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d110      	bne.n	8003b62 <gpio_config+0x76>
		gpio_clk_en(port);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	0018      	movs	r0, r3
 8003b44:	f7ff ff8a 	bl	8003a5c <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	68b9      	ldr	r1, [r7, #8]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f000 f838 	bl	8003bc4 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	68b9      	ldr	r1, [r7, #8]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f000 f862 	bl	8003c24 <gpio_PUPD>
}
 8003b60:	e02c      	b.n	8003bbc <gpio_config+0xd0>
	} else if (pinMode == ALT_MODE) {
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d116      	bne.n	8003b96 <gpio_config+0xaa>
		gpio_clk_en(port);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f7ff ff76 	bl	8003a5c <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	68b9      	ldr	r1, [r7, #8]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	0018      	movs	r0, r3
 8003b78:	f000 f824 	bl	8003bc4 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	68b9      	ldr	r1, [r7, #8]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	0018      	movs	r0, r3
 8003b84:	f000 f84e 	bl	8003c24 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 8003b88:	69fa      	ldr	r2, [r7, #28]
 8003b8a:	68b9      	ldr	r1, [r7, #8]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f000 f860 	bl	8003c54 <gpio_PHPL_OD>
}
 8003b94:	e012      	b.n	8003bbc <gpio_config+0xd0>
	} else if (pinMode == ANALOG_MODE) {
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d10f      	bne.n	8003bbc <gpio_config+0xd0>
		gpio_clk_en(port);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f7ff ff5c 	bl	8003a5c <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	68b9      	ldr	r1, [r7, #8]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	0018      	movs	r0, r3
 8003bac:	f000 f80a 	bl	8003bc4 <gpio_moder>
		adc_chsel(port, pinNumber);
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	0011      	movs	r1, r2
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f7ff fdde 	bl	8003778 <adc_chsel>
}
 8003bbc:	46c0      	nop			; (mov r8, r8)
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	b004      	add	sp, #16
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <gpio_moder>:

void gpio_moder(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode) {	// Config the mode
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
	port->MODER |= (pinMode << (PINPOS_2B[pinNumber]));	// IN/OP/Alternate/ANALOG
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <gpio_moder+0x2c>)
 8003bd6:	68b9      	ldr	r1, [r7, #8]
 8003bd8:	0089      	lsls	r1, r1, #2
 8003bda:	58cb      	ldr	r3, [r1, r3]
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	4099      	lsls	r1, r3
 8003be0:	000b      	movs	r3, r1
 8003be2:	431a      	orrs	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	601a      	str	r2, [r3, #0]
}
 8003be8:	46c0      	nop			; (mov r8, r8)
 8003bea:	46bd      	mov	sp, r7
 8003bec:	b004      	add	sp, #16
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	2000000c 	.word	0x2000000c

08003bf4 <gpio_speed>:

void gpio_speed(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinSpeed) {// Config the speed
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
	port->OSPEEDR |= (pinSpeed << PINPOS_2B[pinNumber]);		// LOW/MED/HIGH
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <gpio_speed+0x2c>)
 8003c06:	68b9      	ldr	r1, [r7, #8]
 8003c08:	0089      	lsls	r1, r1, #2
 8003c0a:	58cb      	ldr	r3, [r1, r3]
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	4099      	lsls	r1, r3
 8003c10:	000b      	movs	r3, r1
 8003c12:	431a      	orrs	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	609a      	str	r2, [r3, #8]
}
 8003c18:	46c0      	nop			; (mov r8, r8)
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	b004      	add	sp, #16
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	2000000c 	.word	0x2000000c

08003c24 <gpio_PUPD>:

void gpio_PUPD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinPUPD) {// ENABLE/DISABLE
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
	port->PUPDR |= (pinPUPD << PINPOS_2B[pinNumber]);		// PULL-UP/PULL-DOWN
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <gpio_PUPD+0x2c>)
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	0089      	lsls	r1, r1, #2
 8003c3a:	58cb      	ldr	r3, [r1, r3]
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	4099      	lsls	r1, r3
 8003c40:	000b      	movs	r3, r1
 8003c42:	431a      	orrs	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	60da      	str	r2, [r3, #12]
}
 8003c48:	46c0      	nop			; (mov r8, r8)
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	b004      	add	sp, #16
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	2000000c 	.word	0x2000000c

08003c54 <gpio_PHPL_OD>:
void gpio_PHPL_OD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t PHPL_OD) {// ENABLE/DISABLE
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
	port->OTYPER |= (PHPL_OD << pinNumber);	// PUSH-PULL/OPEN DRAIN
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	4099      	lsls	r1, r3
 8003c6a:	000b      	movs	r3, r1
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	605a      	str	r2, [r3, #4]
}
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	46bd      	mov	sp, r7
 8003c76:	b004      	add	sp, #16
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <gpio_altfn>:

void gpio_altfn(GPIO_TypeDef *port, uint32_t pinNumber,
		uint32_t alternate_function) {
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	60f8      	str	r0, [r7, #12]
 8003c82:	60b9      	str	r1, [r7, #8]
 8003c84:	607a      	str	r2, [r7, #4]
	if (pinNumber < 8) {
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b07      	cmp	r3, #7
 8003c8a:	d80a      	bhi.n	8003ca2 <gpio_altfn+0x28>
		port->AFR[0] |= (alternate_function << (4 * pinNumber));
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a1a      	ldr	r2, [r3, #32]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	4099      	lsls	r1, r3
 8003c98:	000b      	movs	r3, r1
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	621a      	str	r2, [r3, #32]
	} else {
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
	}
}
 8003ca0:	e00a      	b.n	8003cb8 <gpio_altfn+0x3e>
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	3b08      	subs	r3, #8
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	4099      	lsls	r1, r3
 8003cb0:	000b      	movs	r3, r1
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003cb8:	46c0      	nop			; (mov r8, r8)
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	b004      	add	sp, #16
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <gpio_write>:

/************************************************************************************/

/************************GPIO OPERATION FUNCTION*************************************/
void gpio_write(GPIO_TypeDef *port, uint32_t pinNumber, uint8_t state) {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	1dfb      	adds	r3, r7, #7
 8003ccc:	701a      	strb	r2, [r3, #0]
	if (state) {
 8003cce:	1dfb      	adds	r3, r7, #7
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d007      	beq.n	8003ce6 <gpio_write+0x26>
		port->BSRR = (1 << pinNumber);
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	0013      	movs	r3, r2
 8003cde:	001a      	movs	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	619a      	str	r2, [r3, #24]
	} else {
		port->BSRR = (1 << (pinNumber + 16));
	}
}
 8003ce4:	e007      	b.n	8003cf6 <gpio_write+0x36>
		port->BSRR = (1 << (pinNumber + 16));
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	3310      	adds	r3, #16
 8003cea:	2201      	movs	r2, #1
 8003cec:	409a      	lsls	r2, r3
 8003cee:	0013      	movs	r3, r2
 8003cf0:	001a      	movs	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	619a      	str	r2, [r3, #24]
}
 8003cf6:	46c0      	nop			; (mov r8, r8)
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b004      	add	sp, #16
 8003cfc:	bd80      	pop	{r7, pc}
	...

08003d00 <gpio_IT_config>:
	return flag;
}
/**************************************************************************************/

/*******************************INTERRUPT CONFIGURATION*********************************/
void gpio_IT_config(GPIO_TypeDef *port, uint32_t pinNumber, uint8_t edge) {
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	1dfb      	adds	r3, r7, #7
 8003d0c:	701a      	strb	r2, [r3, #0]
	SYSCFG_CLK_EN;
 8003d0e:	4bc8      	ldr	r3, [pc, #800]	; (8004030 <gpio_IT_config+0x330>)
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	4bc7      	ldr	r3, [pc, #796]	; (8004030 <gpio_IT_config+0x330>)
 8003d14:	2101      	movs	r1, #1
 8003d16:	430a      	orrs	r2, r1
 8003d18:	619a      	str	r2, [r3, #24]
	if (port == GPIOA) {
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	2390      	movs	r3, #144	; 0x90
 8003d1e:	05db      	lsls	r3, r3, #23
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d149      	bne.n	8003db8 <gpio_IT_config+0xb8>
		switch (pinNumber) {
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b0f      	cmp	r3, #15
 8003d28:	d900      	bls.n	8003d2c <gpio_IT_config+0x2c>
 8003d2a:	e147      	b.n	8003fbc <gpio_IT_config+0x2bc>
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	009a      	lsls	r2, r3, #2
 8003d30:	4bc0      	ldr	r3, [pc, #768]	; (8004034 <gpio_IT_config+0x334>)
 8003d32:	18d3      	adds	r3, r2, r3
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	469f      	mov	pc, r3
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 8003d38:	4bbf      	ldr	r3, [pc, #764]	; (8004038 <gpio_IT_config+0x338>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	609a      	str	r2, [r3, #8]
			break;
 8003d3e:	e13d      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PA;
 8003d40:	4bbd      	ldr	r3, [pc, #756]	; (8004038 <gpio_IT_config+0x338>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	609a      	str	r2, [r3, #8]
			break;
 8003d46:	e139      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PA;
 8003d48:	4bbb      	ldr	r3, [pc, #748]	; (8004038 <gpio_IT_config+0x338>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	609a      	str	r2, [r3, #8]
			break;
 8003d4e:	e135      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PA;
 8003d50:	4bb9      	ldr	r3, [pc, #740]	; (8004038 <gpio_IT_config+0x338>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	609a      	str	r2, [r3, #8]
			break;
 8003d56:	e131      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PA;
 8003d58:	4bb7      	ldr	r3, [pc, #732]	; (8004038 <gpio_IT_config+0x338>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	60da      	str	r2, [r3, #12]
			break;
 8003d5e:	e12d      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PA;
 8003d60:	4bb5      	ldr	r3, [pc, #724]	; (8004038 <gpio_IT_config+0x338>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	60da      	str	r2, [r3, #12]
			break;
 8003d66:	e129      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PA;
 8003d68:	4bb3      	ldr	r3, [pc, #716]	; (8004038 <gpio_IT_config+0x338>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	60da      	str	r2, [r3, #12]
			break;
 8003d6e:	e125      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PA;
 8003d70:	4bb1      	ldr	r3, [pc, #708]	; (8004038 <gpio_IT_config+0x338>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	60da      	str	r2, [r3, #12]
			break;
 8003d76:	e121      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PA;
 8003d78:	4baf      	ldr	r3, [pc, #700]	; (8004038 <gpio_IT_config+0x338>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	611a      	str	r2, [r3, #16]
			break;
 8003d7e:	e11d      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PA;
 8003d80:	4bad      	ldr	r3, [pc, #692]	; (8004038 <gpio_IT_config+0x338>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	611a      	str	r2, [r3, #16]
			break;
 8003d86:	e119      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PA;
 8003d88:	4bab      	ldr	r3, [pc, #684]	; (8004038 <gpio_IT_config+0x338>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	611a      	str	r2, [r3, #16]
			break;
 8003d8e:	e115      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PA;
 8003d90:	4ba9      	ldr	r3, [pc, #676]	; (8004038 <gpio_IT_config+0x338>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	611a      	str	r2, [r3, #16]
			break;
 8003d96:	e111      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PA;
 8003d98:	4ba7      	ldr	r3, [pc, #668]	; (8004038 <gpio_IT_config+0x338>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	615a      	str	r2, [r3, #20]
			break;
 8003d9e:	e10d      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PA;
 8003da0:	4ba5      	ldr	r3, [pc, #660]	; (8004038 <gpio_IT_config+0x338>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	615a      	str	r2, [r3, #20]
			break;
 8003da6:	e109      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PA;
 8003da8:	4ba3      	ldr	r3, [pc, #652]	; (8004038 <gpio_IT_config+0x338>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	615a      	str	r2, [r3, #20]
			break;
 8003dae:	e105      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PA;
 8003db0:	4ba1      	ldr	r3, [pc, #644]	; (8004038 <gpio_IT_config+0x338>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	615a      	str	r2, [r3, #20]
			break;
 8003db6:	e101      	b.n	8003fbc <gpio_IT_config+0x2bc>
		}	// end of Port A
	} else if (port == GPIOB) {
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4aa0      	ldr	r2, [pc, #640]	; (800403c <gpio_IT_config+0x33c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d151      	bne.n	8003e64 <gpio_IT_config+0x164>
		switch (pinNumber) {
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b0f      	cmp	r3, #15
 8003dc4:	d900      	bls.n	8003dc8 <gpio_IT_config+0xc8>
 8003dc6:	e0f9      	b.n	8003fbc <gpio_IT_config+0x2bc>
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	009a      	lsls	r2, r3, #2
 8003dcc:	4b9c      	ldr	r3, [pc, #624]	; (8004040 <gpio_IT_config+0x340>)
 8003dce:	18d3      	adds	r3, r2, r3
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	469f      	mov	pc, r3
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PB;
 8003dd4:	4b98      	ldr	r3, [pc, #608]	; (8004038 <gpio_IT_config+0x338>)
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	609a      	str	r2, [r3, #8]
			break;
 8003dda:	e0ef      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PB;
 8003ddc:	4b96      	ldr	r3, [pc, #600]	; (8004038 <gpio_IT_config+0x338>)
 8003dde:	2210      	movs	r2, #16
 8003de0:	609a      	str	r2, [r3, #8]
			break;
 8003de2:	e0eb      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PB;
 8003de4:	4b94      	ldr	r3, [pc, #592]	; (8004038 <gpio_IT_config+0x338>)
 8003de6:	2280      	movs	r2, #128	; 0x80
 8003de8:	0052      	lsls	r2, r2, #1
 8003dea:	609a      	str	r2, [r3, #8]
			break;
 8003dec:	e0e6      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PB;
 8003dee:	4b92      	ldr	r3, [pc, #584]	; (8004038 <gpio_IT_config+0x338>)
 8003df0:	2280      	movs	r2, #128	; 0x80
 8003df2:	0152      	lsls	r2, r2, #5
 8003df4:	609a      	str	r2, [r3, #8]
			break;
 8003df6:	e0e1      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PB;
 8003df8:	4b8f      	ldr	r3, [pc, #572]	; (8004038 <gpio_IT_config+0x338>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	60da      	str	r2, [r3, #12]
			break;
 8003dfe:	e0dd      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PB;
 8003e00:	4b8d      	ldr	r3, [pc, #564]	; (8004038 <gpio_IT_config+0x338>)
 8003e02:	2210      	movs	r2, #16
 8003e04:	60da      	str	r2, [r3, #12]
			break;
 8003e06:	e0d9      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PB;
 8003e08:	4b8b      	ldr	r3, [pc, #556]	; (8004038 <gpio_IT_config+0x338>)
 8003e0a:	2280      	movs	r2, #128	; 0x80
 8003e0c:	0052      	lsls	r2, r2, #1
 8003e0e:	60da      	str	r2, [r3, #12]
			break;
 8003e10:	e0d4      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PB;
 8003e12:	4b89      	ldr	r3, [pc, #548]	; (8004038 <gpio_IT_config+0x338>)
 8003e14:	2280      	movs	r2, #128	; 0x80
 8003e16:	0152      	lsls	r2, r2, #5
 8003e18:	60da      	str	r2, [r3, #12]
			break;
 8003e1a:	e0cf      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PB;
 8003e1c:	4b86      	ldr	r3, [pc, #536]	; (8004038 <gpio_IT_config+0x338>)
 8003e1e:	2201      	movs	r2, #1
 8003e20:	611a      	str	r2, [r3, #16]
			break;
 8003e22:	e0cb      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PB;
 8003e24:	4b84      	ldr	r3, [pc, #528]	; (8004038 <gpio_IT_config+0x338>)
 8003e26:	2210      	movs	r2, #16
 8003e28:	611a      	str	r2, [r3, #16]
			break;
 8003e2a:	e0c7      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PB;
 8003e2c:	4b82      	ldr	r3, [pc, #520]	; (8004038 <gpio_IT_config+0x338>)
 8003e2e:	2280      	movs	r2, #128	; 0x80
 8003e30:	0052      	lsls	r2, r2, #1
 8003e32:	611a      	str	r2, [r3, #16]
			break;
 8003e34:	e0c2      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PB;
 8003e36:	4b80      	ldr	r3, [pc, #512]	; (8004038 <gpio_IT_config+0x338>)
 8003e38:	2280      	movs	r2, #128	; 0x80
 8003e3a:	0152      	lsls	r2, r2, #5
 8003e3c:	611a      	str	r2, [r3, #16]
			break;
 8003e3e:	e0bd      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PB;
 8003e40:	4b7d      	ldr	r3, [pc, #500]	; (8004038 <gpio_IT_config+0x338>)
 8003e42:	2201      	movs	r2, #1
 8003e44:	615a      	str	r2, [r3, #20]
			break;
 8003e46:	e0b9      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PB;
 8003e48:	4b7b      	ldr	r3, [pc, #492]	; (8004038 <gpio_IT_config+0x338>)
 8003e4a:	2210      	movs	r2, #16
 8003e4c:	615a      	str	r2, [r3, #20]
			break;
 8003e4e:	e0b5      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PB;
 8003e50:	4b79      	ldr	r3, [pc, #484]	; (8004038 <gpio_IT_config+0x338>)
 8003e52:	2280      	movs	r2, #128	; 0x80
 8003e54:	0052      	lsls	r2, r2, #1
 8003e56:	615a      	str	r2, [r3, #20]
			break;
 8003e58:	e0b0      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PB;
 8003e5a:	4b77      	ldr	r3, [pc, #476]	; (8004038 <gpio_IT_config+0x338>)
 8003e5c:	2280      	movs	r2, #128	; 0x80
 8003e5e:	0152      	lsls	r2, r2, #5
 8003e60:	615a      	str	r2, [r3, #20]
			break;
 8003e62:	e0ab      	b.n	8003fbc <gpio_IT_config+0x2bc>
		}	// end of Port B
	} else if (port == GPIOC) {
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4a77      	ldr	r2, [pc, #476]	; (8004044 <gpio_IT_config+0x344>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d151      	bne.n	8003f10 <gpio_IT_config+0x210>
		switch (pinNumber) {
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b0f      	cmp	r3, #15
 8003e70:	d900      	bls.n	8003e74 <gpio_IT_config+0x174>
 8003e72:	e0a3      	b.n	8003fbc <gpio_IT_config+0x2bc>
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	009a      	lsls	r2, r3, #2
 8003e78:	4b73      	ldr	r3, [pc, #460]	; (8004048 <gpio_IT_config+0x348>)
 8003e7a:	18d3      	adds	r3, r2, r3
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	469f      	mov	pc, r3
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PC;
 8003e80:	4b6d      	ldr	r3, [pc, #436]	; (8004038 <gpio_IT_config+0x338>)
 8003e82:	2202      	movs	r2, #2
 8003e84:	609a      	str	r2, [r3, #8]
			break;
 8003e86:	e099      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PC;
 8003e88:	4b6b      	ldr	r3, [pc, #428]	; (8004038 <gpio_IT_config+0x338>)
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	609a      	str	r2, [r3, #8]
			break;
 8003e8e:	e095      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PC;
 8003e90:	4b69      	ldr	r3, [pc, #420]	; (8004038 <gpio_IT_config+0x338>)
 8003e92:	2280      	movs	r2, #128	; 0x80
 8003e94:	0092      	lsls	r2, r2, #2
 8003e96:	609a      	str	r2, [r3, #8]
			break;
 8003e98:	e090      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PC;
 8003e9a:	4b67      	ldr	r3, [pc, #412]	; (8004038 <gpio_IT_config+0x338>)
 8003e9c:	2280      	movs	r2, #128	; 0x80
 8003e9e:	0192      	lsls	r2, r2, #6
 8003ea0:	609a      	str	r2, [r3, #8]
			break;
 8003ea2:	e08b      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PC;
 8003ea4:	4b64      	ldr	r3, [pc, #400]	; (8004038 <gpio_IT_config+0x338>)
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	60da      	str	r2, [r3, #12]
			break;
 8003eaa:	e087      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PC;
 8003eac:	4b62      	ldr	r3, [pc, #392]	; (8004038 <gpio_IT_config+0x338>)
 8003eae:	2220      	movs	r2, #32
 8003eb0:	60da      	str	r2, [r3, #12]
			break;
 8003eb2:	e083      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PC;
 8003eb4:	4b60      	ldr	r3, [pc, #384]	; (8004038 <gpio_IT_config+0x338>)
 8003eb6:	2280      	movs	r2, #128	; 0x80
 8003eb8:	0092      	lsls	r2, r2, #2
 8003eba:	60da      	str	r2, [r3, #12]
			break;
 8003ebc:	e07e      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PC;
 8003ebe:	4b5e      	ldr	r3, [pc, #376]	; (8004038 <gpio_IT_config+0x338>)
 8003ec0:	2280      	movs	r2, #128	; 0x80
 8003ec2:	0192      	lsls	r2, r2, #6
 8003ec4:	60da      	str	r2, [r3, #12]
			break;
 8003ec6:	e079      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PC;
 8003ec8:	4b5b      	ldr	r3, [pc, #364]	; (8004038 <gpio_IT_config+0x338>)
 8003eca:	2202      	movs	r2, #2
 8003ecc:	611a      	str	r2, [r3, #16]
			break;
 8003ece:	e075      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PC;
 8003ed0:	4b59      	ldr	r3, [pc, #356]	; (8004038 <gpio_IT_config+0x338>)
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	611a      	str	r2, [r3, #16]
			break;
 8003ed6:	e071      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PC;
 8003ed8:	4b57      	ldr	r3, [pc, #348]	; (8004038 <gpio_IT_config+0x338>)
 8003eda:	2280      	movs	r2, #128	; 0x80
 8003edc:	0092      	lsls	r2, r2, #2
 8003ede:	611a      	str	r2, [r3, #16]
			break;
 8003ee0:	e06c      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PC;
 8003ee2:	4b55      	ldr	r3, [pc, #340]	; (8004038 <gpio_IT_config+0x338>)
 8003ee4:	2280      	movs	r2, #128	; 0x80
 8003ee6:	0192      	lsls	r2, r2, #6
 8003ee8:	611a      	str	r2, [r3, #16]
			break;
 8003eea:	e067      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PC;
 8003eec:	4b52      	ldr	r3, [pc, #328]	; (8004038 <gpio_IT_config+0x338>)
 8003eee:	2202      	movs	r2, #2
 8003ef0:	615a      	str	r2, [r3, #20]
			break;
 8003ef2:	e063      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PC;
 8003ef4:	4b50      	ldr	r3, [pc, #320]	; (8004038 <gpio_IT_config+0x338>)
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	615a      	str	r2, [r3, #20]
			break;
 8003efa:	e05f      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PC;
 8003efc:	4b4e      	ldr	r3, [pc, #312]	; (8004038 <gpio_IT_config+0x338>)
 8003efe:	2280      	movs	r2, #128	; 0x80
 8003f00:	0092      	lsls	r2, r2, #2
 8003f02:	615a      	str	r2, [r3, #20]
			break;
 8003f04:	e05a      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PC;
 8003f06:	4b4c      	ldr	r3, [pc, #304]	; (8004038 <gpio_IT_config+0x338>)
 8003f08:	2280      	movs	r2, #128	; 0x80
 8003f0a:	0192      	lsls	r2, r2, #6
 8003f0c:	615a      	str	r2, [r3, #20]
			break;
 8003f0e:	e055      	b.n	8003fbc <gpio_IT_config+0x2bc>
		}	// end of Port C
	} else if (port == GPIOD) {
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4a4e      	ldr	r2, [pc, #312]	; (800404c <gpio_IT_config+0x34c>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d150      	bne.n	8003fba <gpio_IT_config+0x2ba>
		switch (pinNumber) {
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2b0f      	cmp	r3, #15
 8003f1c:	d84e      	bhi.n	8003fbc <gpio_IT_config+0x2bc>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	009a      	lsls	r2, r3, #2
 8003f22:	4b4b      	ldr	r3, [pc, #300]	; (8004050 <gpio_IT_config+0x350>)
 8003f24:	18d3      	adds	r3, r2, r3
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	469f      	mov	pc, r3
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PD;
 8003f2a:	4b43      	ldr	r3, [pc, #268]	; (8004038 <gpio_IT_config+0x338>)
 8003f2c:	2203      	movs	r2, #3
 8003f2e:	609a      	str	r2, [r3, #8]
			break;
 8003f30:	e044      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PD;
 8003f32:	4b41      	ldr	r3, [pc, #260]	; (8004038 <gpio_IT_config+0x338>)
 8003f34:	2230      	movs	r2, #48	; 0x30
 8003f36:	609a      	str	r2, [r3, #8]
			break;
 8003f38:	e040      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PD;
 8003f3a:	4b3f      	ldr	r3, [pc, #252]	; (8004038 <gpio_IT_config+0x338>)
 8003f3c:	22c0      	movs	r2, #192	; 0xc0
 8003f3e:	0092      	lsls	r2, r2, #2
 8003f40:	609a      	str	r2, [r3, #8]
			break;
 8003f42:	e03b      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PD;
 8003f44:	4b3c      	ldr	r3, [pc, #240]	; (8004038 <gpio_IT_config+0x338>)
 8003f46:	22c0      	movs	r2, #192	; 0xc0
 8003f48:	0192      	lsls	r2, r2, #6
 8003f4a:	609a      	str	r2, [r3, #8]
			break;
 8003f4c:	e036      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PD;
 8003f4e:	4b3a      	ldr	r3, [pc, #232]	; (8004038 <gpio_IT_config+0x338>)
 8003f50:	2203      	movs	r2, #3
 8003f52:	60da      	str	r2, [r3, #12]
			break;
 8003f54:	e032      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PD;
 8003f56:	4b38      	ldr	r3, [pc, #224]	; (8004038 <gpio_IT_config+0x338>)
 8003f58:	2230      	movs	r2, #48	; 0x30
 8003f5a:	60da      	str	r2, [r3, #12]
			break;
 8003f5c:	e02e      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PD;
 8003f5e:	4b36      	ldr	r3, [pc, #216]	; (8004038 <gpio_IT_config+0x338>)
 8003f60:	22c0      	movs	r2, #192	; 0xc0
 8003f62:	0092      	lsls	r2, r2, #2
 8003f64:	60da      	str	r2, [r3, #12]
			break;
 8003f66:	e029      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PD;
 8003f68:	4b33      	ldr	r3, [pc, #204]	; (8004038 <gpio_IT_config+0x338>)
 8003f6a:	22c0      	movs	r2, #192	; 0xc0
 8003f6c:	0192      	lsls	r2, r2, #6
 8003f6e:	60da      	str	r2, [r3, #12]
			break;
 8003f70:	e024      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PD;
 8003f72:	4b31      	ldr	r3, [pc, #196]	; (8004038 <gpio_IT_config+0x338>)
 8003f74:	2203      	movs	r2, #3
 8003f76:	611a      	str	r2, [r3, #16]
			break;
 8003f78:	e020      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PD;
 8003f7a:	4b2f      	ldr	r3, [pc, #188]	; (8004038 <gpio_IT_config+0x338>)
 8003f7c:	2230      	movs	r2, #48	; 0x30
 8003f7e:	611a      	str	r2, [r3, #16]
			break;
 8003f80:	e01c      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PD;
 8003f82:	4b2d      	ldr	r3, [pc, #180]	; (8004038 <gpio_IT_config+0x338>)
 8003f84:	22c0      	movs	r2, #192	; 0xc0
 8003f86:	0092      	lsls	r2, r2, #2
 8003f88:	611a      	str	r2, [r3, #16]
			break;
 8003f8a:	e017      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PD;
 8003f8c:	4b2a      	ldr	r3, [pc, #168]	; (8004038 <gpio_IT_config+0x338>)
 8003f8e:	22c0      	movs	r2, #192	; 0xc0
 8003f90:	0192      	lsls	r2, r2, #6
 8003f92:	611a      	str	r2, [r3, #16]
			break;
 8003f94:	e012      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PD;
 8003f96:	4b28      	ldr	r3, [pc, #160]	; (8004038 <gpio_IT_config+0x338>)
 8003f98:	2203      	movs	r2, #3
 8003f9a:	615a      	str	r2, [r3, #20]
			break;
 8003f9c:	e00e      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PD;
 8003f9e:	4b26      	ldr	r3, [pc, #152]	; (8004038 <gpio_IT_config+0x338>)
 8003fa0:	2230      	movs	r2, #48	; 0x30
 8003fa2:	615a      	str	r2, [r3, #20]
			break;
 8003fa4:	e00a      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PD;
 8003fa6:	4b24      	ldr	r3, [pc, #144]	; (8004038 <gpio_IT_config+0x338>)
 8003fa8:	22c0      	movs	r2, #192	; 0xc0
 8003faa:	0092      	lsls	r2, r2, #2
 8003fac:	615a      	str	r2, [r3, #20]
			break;
 8003fae:	e005      	b.n	8003fbc <gpio_IT_config+0x2bc>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PD;
 8003fb0:	4b21      	ldr	r3, [pc, #132]	; (8004038 <gpio_IT_config+0x338>)
 8003fb2:	22c0      	movs	r2, #192	; 0xc0
 8003fb4:	0192      	lsls	r2, r2, #6
 8003fb6:	615a      	str	r2, [r3, #20]
			break;
 8003fb8:	e000      	b.n	8003fbc <gpio_IT_config+0x2bc>
		}	// end of Port D
	}
 8003fba:	46c0      	nop			; (mov r8, r8)

	if (edge == RISING_EDGE) {
 8003fbc:	1dfb      	adds	r3, r7, #7
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10a      	bne.n	8003fda <gpio_IT_config+0x2da>
		EXTI->RTSR |= 1 << pinNumber;
 8003fc4:	4b23      	ldr	r3, [pc, #140]	; (8004054 <gpio_IT_config+0x354>)
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	2101      	movs	r1, #1
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	4099      	lsls	r1, r3
 8003fce:	000b      	movs	r3, r1
 8003fd0:	0019      	movs	r1, r3
 8003fd2:	4b20      	ldr	r3, [pc, #128]	; (8004054 <gpio_IT_config+0x354>)
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	609a      	str	r2, [r3, #8]
		EXTI->FTSR |= 1 << pinNumber;
	} else if (edge == RISING_FALLING_EDGE) {
		EXTI->RTSR |= 1 << pinNumber;
		EXTI->FTSR |= 1 << pinNumber;
	}
}
 8003fd8:	e026      	b.n	8004028 <gpio_IT_config+0x328>
	} else if (edge == FALLING_EDGE) {
 8003fda:	1dfb      	adds	r3, r7, #7
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d10a      	bne.n	8003ff8 <gpio_IT_config+0x2f8>
		EXTI->FTSR |= 1 << pinNumber;
 8003fe2:	4b1c      	ldr	r3, [pc, #112]	; (8004054 <gpio_IT_config+0x354>)
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4099      	lsls	r1, r3
 8003fec:	000b      	movs	r3, r1
 8003fee:	0019      	movs	r1, r3
 8003ff0:	4b18      	ldr	r3, [pc, #96]	; (8004054 <gpio_IT_config+0x354>)
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	60da      	str	r2, [r3, #12]
}
 8003ff6:	e017      	b.n	8004028 <gpio_IT_config+0x328>
	} else if (edge == RISING_FALLING_EDGE) {
 8003ff8:	1dfb      	adds	r3, r7, #7
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d113      	bne.n	8004028 <gpio_IT_config+0x328>
		EXTI->RTSR |= 1 << pinNumber;
 8004000:	4b14      	ldr	r3, [pc, #80]	; (8004054 <gpio_IT_config+0x354>)
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	2101      	movs	r1, #1
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	4099      	lsls	r1, r3
 800400a:	000b      	movs	r3, r1
 800400c:	0019      	movs	r1, r3
 800400e:	4b11      	ldr	r3, [pc, #68]	; (8004054 <gpio_IT_config+0x354>)
 8004010:	430a      	orrs	r2, r1
 8004012:	609a      	str	r2, [r3, #8]
		EXTI->FTSR |= 1 << pinNumber;
 8004014:	4b0f      	ldr	r3, [pc, #60]	; (8004054 <gpio_IT_config+0x354>)
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	2101      	movs	r1, #1
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	4099      	lsls	r1, r3
 800401e:	000b      	movs	r3, r1
 8004020:	0019      	movs	r1, r3
 8004022:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <gpio_IT_config+0x354>)
 8004024:	430a      	orrs	r2, r1
 8004026:	60da      	str	r2, [r3, #12]
}
 8004028:	46c0      	nop			; (mov r8, r8)
 800402a:	46bd      	mov	sp, r7
 800402c:	b004      	add	sp, #16
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40021000 	.word	0x40021000
 8004034:	08008b78 	.word	0x08008b78
 8004038:	40010000 	.word	0x40010000
 800403c:	48000400 	.word	0x48000400
 8004040:	08008bb8 	.word	0x08008bb8
 8004044:	48000800 	.word	0x48000800
 8004048:	08008bf8 	.word	0x08008bf8
 800404c:	48000c00 	.word	0x48000c00
 8004050:	08008c38 	.word	0x08008c38
 8004054:	40010400 	.word	0x40010400

08004058 <gpio_IT_EN>:

void gpio_IT_EN(uint8_t pinNumber, IRQn_Type irqNumber) {//Interrupt Enable Function
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	0002      	movs	r2, r0
 8004060:	1dfb      	adds	r3, r7, #7
 8004062:	701a      	strb	r2, [r3, #0]
 8004064:	1dbb      	adds	r3, r7, #6
 8004066:	1c0a      	adds	r2, r1, #0
 8004068:	701a      	strb	r2, [r3, #0]
	EXTI->IMR |= 1 << pinNumber;	//enable interrupt in EXTI
 800406a:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <gpio_IT_EN+0x3c>)
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	1dfb      	adds	r3, r7, #7
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	2101      	movs	r1, #1
 8004074:	4099      	lsls	r1, r3
 8004076:	000b      	movs	r3, r1
 8004078:	0019      	movs	r1, r3
 800407a:	4b06      	ldr	r3, [pc, #24]	; (8004094 <gpio_IT_EN+0x3c>)
 800407c:	430a      	orrs	r2, r1
 800407e:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(irqNumber);		//enable interrupt in NVIC
 8004080:	1dbb      	adds	r3, r7, #6
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	b25b      	sxtb	r3, r3
 8004086:	0018      	movs	r0, r3
 8004088:	f7ff fc9c 	bl	80039c4 <__NVIC_EnableIRQ>
}
 800408c:	46c0      	nop			; (mov r8, r8)
 800408e:	46bd      	mov	sp, r7
 8004090:	b002      	add	sp, #8
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40010400 	.word	0x40010400

08004098 <gpio_IT_CHK>:

void gpio_IT_SW(uint8_t pinNumber) {			//Interrupt Software generate
	EXTI->SWIER |= 1 << pinNumber;				//TODO: Not Done for now
}

uint8_t gpio_IT_CHK(uint8_t pinNumber) {			//Interrupt check function
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	0002      	movs	r2, r0
 80040a0:	1dfb      	adds	r3, r7, #7
 80040a2:	701a      	strb	r2, [r3, #0]
	if ((EXTI->PR) & (1 << pinNumber)) {				//Check pending register
 80040a4:	4b07      	ldr	r3, [pc, #28]	; (80040c4 <gpio_IT_CHK+0x2c>)
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	1dfa      	adds	r2, r7, #7
 80040aa:	7812      	ldrb	r2, [r2, #0]
 80040ac:	2101      	movs	r1, #1
 80040ae:	4091      	lsls	r1, r2
 80040b0:	000a      	movs	r2, r1
 80040b2:	4013      	ands	r3, r2
 80040b4:	d001      	beq.n	80040ba <gpio_IT_CHK+0x22>
		return 1;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <gpio_IT_CHK+0x24>
	} else {
		return 0;
 80040ba:	2300      	movs	r3, #0
	}
}
 80040bc:	0018      	movs	r0, r3
 80040be:	46bd      	mov	sp, r7
 80040c0:	b002      	add	sp, #8
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40010400 	.word	0x40010400

080040c8 <gpio_IT_CLR>:

void gpio_IT_CLR(uint8_t pinNumber) {				//Interrupt clear function
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	0002      	movs	r2, r0
 80040d0:	1dfb      	adds	r3, r7, #7
 80040d2:	701a      	strb	r2, [r3, #0]
	EXTI->PR = 1 << pinNumber;		//clear pending register
 80040d4:	1dfb      	adds	r3, r7, #7
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2201      	movs	r2, #1
 80040da:	409a      	lsls	r2, r3
 80040dc:	4b02      	ldr	r3, [pc, #8]	; (80040e8 <gpio_IT_CLR+0x20>)
 80040de:	615a      	str	r2, [r3, #20]
}
 80040e0:	46c0      	nop			; (mov r8, r8)
 80040e2:	46bd      	mov	sp, r7
 80040e4:	b002      	add	sp, #8
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40010400 	.word	0x40010400

080040ec <I2C_EN>:
 *  Created on: Oct 23, 2022
 *      Author: hp
 */
#include "i2c.h"

void I2C_EN(I2C_TypeDef *i2c) {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
	i2c->CR1 |= I2C_CR1_PE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2201      	movs	r2, #1
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	601a      	str	r2, [r3, #0]
}
 8004100:	46c0      	nop			; (mov r8, r8)
 8004102:	46bd      	mov	sp, r7
 8004104:	b002      	add	sp, #8
 8004106:	bd80      	pop	{r7, pc}

08004108 <I2C_DI>:

void I2C_DI(I2C_TypeDef *i2c) {
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
	i2c->CR1 &= ~I2C_CR1_PE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2201      	movs	r2, #1
 8004116:	4393      	bics	r3, r2
 8004118:	001a      	movs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	601a      	str	r2, [r3, #0]
}
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	46bd      	mov	sp, r7
 8004122:	b002      	add	sp, #8
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <I2C_INIT>:

void I2C_INIT(I2C_TypeDef *i2c, uint32_t timing) {
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
	if (i2c == I2C1) {
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a11      	ldr	r2, [pc, #68]	; (800417c <I2C_INIT+0x54>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d107      	bne.n	800414a <I2C_INIT+0x22>
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800413a:	4b11      	ldr	r3, [pc, #68]	; (8004180 <I2C_INIT+0x58>)
 800413c:	69da      	ldr	r2, [r3, #28]
 800413e:	4b10      	ldr	r3, [pc, #64]	; (8004180 <I2C_INIT+0x58>)
 8004140:	2180      	movs	r1, #128	; 0x80
 8004142:	0389      	lsls	r1, r1, #14
 8004144:	430a      	orrs	r2, r1
 8004146:	61da      	str	r2, [r3, #28]
 8004148:	e00a      	b.n	8004160 <I2C_INIT+0x38>
	} else if (i2c == I2C2) {
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a0d      	ldr	r2, [pc, #52]	; (8004184 <I2C_INIT+0x5c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d106      	bne.n	8004160 <I2C_INIT+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8004152:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <I2C_INIT+0x58>)
 8004154:	69da      	ldr	r2, [r3, #28]
 8004156:	4b0a      	ldr	r3, [pc, #40]	; (8004180 <I2C_INIT+0x58>)
 8004158:	2180      	movs	r1, #128	; 0x80
 800415a:	03c9      	lsls	r1, r1, #15
 800415c:	430a      	orrs	r2, r1
 800415e:	61da      	str	r2, [r3, #28]
	}
	i2c->CR1 = 0; /* software reset I2C1 */
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
	i2c->TIMINGR = timing; /* 100 KHz, peripheral clock is 8/48 MHz */
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	611a      	str	r2, [r3, #16]
	I2C_EN(i2c);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	0018      	movs	r0, r3
 8004170:	f7ff ffbc 	bl	80040ec <I2C_EN>
}
 8004174:	46c0      	nop			; (mov r8, r8)
 8004176:	46bd      	mov	sp, r7
 8004178:	b002      	add	sp, #8
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40005400 	.word	0x40005400
 8004180:	40021000 	.word	0x40021000
 8004184:	40005800 	.word	0x40005800

08004188 <I2C_CR2>:
	} else if (i2c == I2C2) {
		RCC->APB1ENR &= ~RCC_APB1ENR_I2C2EN;
	}
}

void I2C_CR2(I2C_TypeDef *i2c, uint32_t val) {
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
	i2c->CR2 = val;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	605a      	str	r2, [r3, #4]
}
 8004198:	46c0      	nop			; (mov r8, r8)
 800419a:	46bd      	mov	sp, r7
 800419c:	b002      	add	sp, #8
 800419e:	bd80      	pop	{r7, pc}

080041a0 <I2C_DeviceReady>:

BML_StatusTypeDef I2C_DeviceReady(I2C_TypeDef *i2c, uint8_t saddr,
		uint16_t timeout) {
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	0008      	movs	r0, r1
 80041aa:	0011      	movs	r1, r2
 80041ac:	1cfb      	adds	r3, r7, #3
 80041ae:	1c02      	adds	r2, r0, #0
 80041b0:	701a      	strb	r2, [r3, #0]
 80041b2:	003b      	movs	r3, r7
 80041b4:	1c0a      	adds	r2, r1, #0
 80041b6:	801a      	strh	r2, [r3, #0]
	uint16_t i = timeout;
 80041b8:	230e      	movs	r3, #14
 80041ba:	18fb      	adds	r3, r7, r3
 80041bc:	003a      	movs	r2, r7
 80041be:	8812      	ldrh	r2, [r2, #0]
 80041c0:	801a      	strh	r2, [r3, #0]
	uint8_t flag = 0;
 80041c2:	230d      	movs	r3, #13
 80041c4:	18fb      	adds	r3, r7, r3
 80041c6:	2200      	movs	r2, #0
 80041c8:	701a      	strb	r2, [r3, #0]
	while (i2c->ISR & I2C_ISR_BUSY) {/* wait until bus not busy */
 80041ca:	e00e      	b.n	80041ea <I2C_DeviceReady+0x4a>
		I2C_Delay(1);
 80041cc:	2001      	movs	r0, #1
 80041ce:	f7fe fc71 	bl	8002ab4 <HAL_Delay>
		i--;
 80041d2:	210e      	movs	r1, #14
 80041d4:	187b      	adds	r3, r7, r1
 80041d6:	881a      	ldrh	r2, [r3, #0]
 80041d8:	187b      	adds	r3, r7, r1
 80041da:	3a01      	subs	r2, #1
 80041dc:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 80041de:	187b      	adds	r3, r7, r1
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <I2C_DeviceReady+0x4a>
			return BML_BUSY;
 80041e6:	2302      	movs	r3, #2
 80041e8:	e035      	b.n	8004256 <I2C_DeviceReady+0xb6>
	while (i2c->ISR & I2C_ISR_BUSY) {/* wait until bus not busy */
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699a      	ldr	r2, [r3, #24]
 80041ee:	2380      	movs	r3, #128	; 0x80
 80041f0:	021b      	lsls	r3, r3, #8
 80041f2:	4013      	ands	r3, r2
 80041f4:	d1ea      	bne.n	80041cc <I2C_DeviceReady+0x2c>
		}
	}
	I2C_CR2(i2c, I2C_CR2_START | (saddr << 1));
 80041f6:	1cfb      	adds	r3, r7, #3
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	001a      	movs	r2, r3
 80041fe:	2380      	movs	r3, #128	; 0x80
 8004200:	019b      	lsls	r3, r3, #6
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	0011      	movs	r1, r2
 8004208:	0018      	movs	r0, r3
 800420a:	f7ff ffbd 	bl	8004188 <I2C_CR2>

	I2C_Delay(1);
 800420e:	2001      	movs	r0, #1
 8004210:	f7fe fc50 	bl	8002ab4 <HAL_Delay>

	if (!(i2c->ISR & I2C_ISR_NACKF)) {
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	2210      	movs	r2, #16
 800421a:	4013      	ands	r3, r2
 800421c:	d104      	bne.n	8004228 <I2C_DeviceReady+0x88>
		flag = 1;
 800421e:	230d      	movs	r3, #13
 8004220:	18fb      	adds	r3, r7, r3
 8004222:	2201      	movs	r2, #1
 8004224:	701a      	strb	r2, [r3, #0]
 8004226:	e003      	b.n	8004230 <I2C_DeviceReady+0x90>
	} else {
		flag = 0;
 8004228:	230d      	movs	r3, #13
 800422a:	18fb      	adds	r3, r7, r3
 800422c:	2200      	movs	r2, #0
 800422e:	701a      	strb	r2, [r3, #0]
	}

	i2c->CR2 = 0;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	605a      	str	r2, [r3, #4]
	I2C_DI(i2c);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	0018      	movs	r0, r3
 800423a:	f7ff ff65 	bl	8004108 <I2C_DI>
	I2C_EN(i2c);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	0018      	movs	r0, r3
 8004242:	f7ff ff53 	bl	80040ec <I2C_EN>
	if (flag == LOW) {
 8004246:	230d      	movs	r3, #13
 8004248:	18fb      	adds	r3, r7, r3
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <I2C_DeviceReady+0xb4>
		return BML_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e000      	b.n	8004256 <I2C_DeviceReady+0xb6>
	}
	return BML_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	0018      	movs	r0, r3
 8004258:	46bd      	mov	sp, r7
 800425a:	b004      	add	sp, #16
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <I2C_MasterMultiRead>:

	return BML_OK;
}

BML_StatusTypeDef I2C_MasterMultiRead(I2C_TypeDef *i2c, uint8_t saddr,
		uint8_t maddr, uint32_t n, uint8_t *data, uint16_t timeout) {
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	0008      	movs	r0, r1
 800426a:	0011      	movs	r1, r2
 800426c:	607b      	str	r3, [r7, #4]
 800426e:	230b      	movs	r3, #11
 8004270:	18fb      	adds	r3, r7, r3
 8004272:	1c02      	adds	r2, r0, #0
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	230a      	movs	r3, #10
 8004278:	18fb      	adds	r3, r7, r3
 800427a:	1c0a      	adds	r2, r1, #0
 800427c:	701a      	strb	r2, [r3, #0]
	uint16_t i = timeout;
 800427e:	2316      	movs	r3, #22
 8004280:	18fb      	adds	r3, r7, r3
 8004282:	2224      	movs	r2, #36	; 0x24
 8004284:	18ba      	adds	r2, r7, r2
 8004286:	8812      	ldrh	r2, [r2, #0]
 8004288:	801a      	strh	r2, [r3, #0]
	while (i2c->ISR & I2C_ISR_BUSY) {
 800428a:	e00e      	b.n	80042aa <I2C_MasterMultiRead+0x4a>
		I2C_Delay(1);
 800428c:	2001      	movs	r0, #1
 800428e:	f7fe fc11 	bl	8002ab4 <HAL_Delay>
		i--;
 8004292:	2116      	movs	r1, #22
 8004294:	187b      	adds	r3, r7, r1
 8004296:	881a      	ldrh	r2, [r3, #0]
 8004298:	187b      	adds	r3, r7, r1
 800429a:	3a01      	subs	r2, #1
 800429c:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 800429e:	187b      	adds	r3, r7, r1
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <I2C_MasterMultiRead+0x4a>
			return BML_BUSY;
 80042a6:	2302      	movs	r3, #2
 80042a8:	e0ac      	b.n	8004404 <I2C_MasterMultiRead+0x1a4>
	while (i2c->ISR & I2C_ISR_BUSY) {
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	699a      	ldr	r2, [r3, #24]
 80042ae:	2380      	movs	r3, #128	; 0x80
 80042b0:	021b      	lsls	r3, r3, #8
 80042b2:	4013      	ands	r3, r2
 80042b4:	d1ea      	bne.n	800428c <I2C_MasterMultiRead+0x2c>
		}
	} /* wait until bus not busy */
	i = timeout;
 80042b6:	2316      	movs	r3, #22
 80042b8:	18fb      	adds	r3, r7, r3
 80042ba:	2224      	movs	r2, #36	; 0x24
 80042bc:	18ba      	adds	r2, r7, r2
 80042be:	8812      	ldrh	r2, [r2, #0]
 80042c0:	801a      	strh	r2, [r3, #0]

	I2C_CR2(i2c, I2C_CR2_START | (1 << 16) | (saddr << 1));/* generate start and send slave address */
 80042c2:	230b      	movs	r3, #11
 80042c4:	18fb      	adds	r3, r7, r3
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	001a      	movs	r2, r3
 80042cc:	2390      	movs	r3, #144	; 0x90
 80042ce:	025b      	lsls	r3, r3, #9
 80042d0:	431a      	orrs	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	0011      	movs	r1, r2
 80042d6:	0018      	movs	r0, r3
 80042d8:	f7ff ff56 	bl	8004188 <I2C_CR2>

	while (!(i2c->ISR & I2C_ISR_TXIS)) {
 80042dc:	e00e      	b.n	80042fc <I2C_MasterMultiRead+0x9c>
		I2C_Delay(1);
 80042de:	2001      	movs	r0, #1
 80042e0:	f7fe fbe8 	bl	8002ab4 <HAL_Delay>
		i--;
 80042e4:	2116      	movs	r1, #22
 80042e6:	187b      	adds	r3, r7, r1
 80042e8:	881a      	ldrh	r2, [r3, #0]
 80042ea:	187b      	adds	r3, r7, r1
 80042ec:	3a01      	subs	r2, #1
 80042ee:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 80042f0:	187b      	adds	r3, r7, r1
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <I2C_MasterMultiRead+0x9c>
			return BML_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e083      	b.n	8004404 <I2C_MasterMultiRead+0x1a4>
	while (!(i2c->ISR & I2C_ISR_TXIS)) {
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	2202      	movs	r2, #2
 8004302:	4013      	ands	r3, r2
 8004304:	d0eb      	beq.n	80042de <I2C_MasterMultiRead+0x7e>
		}
	}/* wait until transmitter is ready */

	i = timeout;
 8004306:	2316      	movs	r3, #22
 8004308:	18fb      	adds	r3, r7, r3
 800430a:	2224      	movs	r2, #36	; 0x24
 800430c:	18ba      	adds	r2, r7, r2
 800430e:	8812      	ldrh	r2, [r2, #0]
 8004310:	801a      	strh	r2, [r3, #0]

	i2c->TXDR = maddr; /* send memory address */
 8004312:	230a      	movs	r3, #10
 8004314:	18fb      	adds	r3, r7, r3
 8004316:	781a      	ldrb	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(i2c->ISR & I2C_ISR_TC)) {
 800431c:	e00e      	b.n	800433c <I2C_MasterMultiRead+0xdc>
		I2C_Delay(1);
 800431e:	2001      	movs	r0, #1
 8004320:	f7fe fbc8 	bl	8002ab4 <HAL_Delay>
		i--;
 8004324:	2116      	movs	r1, #22
 8004326:	187b      	adds	r3, r7, r1
 8004328:	881a      	ldrh	r2, [r3, #0]
 800432a:	187b      	adds	r3, r7, r1
 800432c:	3a01      	subs	r2, #1
 800432e:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8004330:	187b      	adds	r3, r7, r1
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <I2C_MasterMultiRead+0xdc>
			return BML_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e063      	b.n	8004404 <I2C_MasterMultiRead+0x1a4>
	while (!(i2c->ISR & I2C_ISR_TC)) {
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	2240      	movs	r2, #64	; 0x40
 8004342:	4013      	ands	r3, r2
 8004344:	d0eb      	beq.n	800431e <I2C_MasterMultiRead+0xbe>

	/* generate restart, send slave address, repeat read n bytes, set for auto end */

	I2C_CR2(i2c,
			I2C_CR2_START | I2C_CR2_RD_WRN | I2C_CR2_AUTOEND
					| ((n & 0xFF) << 16) | (saddr << 1));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	041a      	lsls	r2, r3, #16
 800434a:	23ff      	movs	r3, #255	; 0xff
 800434c:	041b      	lsls	r3, r3, #16
 800434e:	4013      	ands	r3, r2
 8004350:	220b      	movs	r2, #11
 8004352:	18ba      	adds	r2, r7, r2
 8004354:	7812      	ldrb	r2, [r2, #0]
 8004356:	0052      	lsls	r2, r2, #1
 8004358:	4313      	orrs	r3, r2
	I2C_CR2(i2c,
 800435a:	4a2c      	ldr	r2, [pc, #176]	; (800440c <I2C_MasterMultiRead+0x1ac>)
 800435c:	431a      	orrs	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	0011      	movs	r1, r2
 8004362:	0018      	movs	r0, r3
 8004364:	f7ff ff10 	bl	8004188 <I2C_CR2>

	for (; n > 0; n--) {
 8004368:	e023      	b.n	80043b2 <I2C_MasterMultiRead+0x152>
		while (!(i2c->ISR & I2C_ISR_RXNE)) {
			I2C_Delay(1);
 800436a:	2001      	movs	r0, #1
 800436c:	f7fe fba2 	bl	8002ab4 <HAL_Delay>
			i--;
 8004370:	2116      	movs	r1, #22
 8004372:	187b      	adds	r3, r7, r1
 8004374:	881a      	ldrh	r2, [r3, #0]
 8004376:	187b      	adds	r3, r7, r1
 8004378:	3a01      	subs	r2, #1
 800437a:	801a      	strh	r2, [r3, #0]
			if (i <= 0) {
 800437c:	187b      	adds	r3, r7, r1
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <I2C_MasterMultiRead+0x128>
				return BML_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e03d      	b.n	8004404 <I2C_MasterMultiRead+0x1a4>
		while (!(i2c->ISR & I2C_ISR_RXNE)) {
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	2204      	movs	r2, #4
 800438e:	4013      	ands	r3, r2
 8004390:	d0eb      	beq.n	800436a <I2C_MasterMultiRead+0x10a>
			}
		} /* Wait until RXNE flag is set */
		i = timeout;
 8004392:	2316      	movs	r3, #22
 8004394:	18fb      	adds	r3, r7, r3
 8004396:	2224      	movs	r2, #36	; 0x24
 8004398:	18ba      	adds	r2, r7, r2
 800439a:	8812      	ldrh	r2, [r2, #0]
 800439c:	801a      	strh	r2, [r3, #0]
		*data++ = i2c->RXDR; /* Read data from DR */
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	1c5a      	adds	r2, r3, #1
 80043a6:	623a      	str	r2, [r7, #32]
 80043a8:	b2ca      	uxtb	r2, r1
 80043aa:	701a      	strb	r2, [r3, #0]
	for (; n > 0; n--) {
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	607b      	str	r3, [r7, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1e7      	bne.n	8004388 <I2C_MasterMultiRead+0x128>
	}

	while (!(i2c->ISR & I2C_ISR_STOPF)) {
 80043b8:	e00e      	b.n	80043d8 <I2C_MasterMultiRead+0x178>
		I2C_Delay(1);
 80043ba:	2001      	movs	r0, #1
 80043bc:	f7fe fb7a 	bl	8002ab4 <HAL_Delay>
		i--;
 80043c0:	2116      	movs	r1, #22
 80043c2:	187b      	adds	r3, r7, r1
 80043c4:	881a      	ldrh	r2, [r3, #0]
 80043c6:	187b      	adds	r3, r7, r1
 80043c8:	3a01      	subs	r2, #1
 80043ca:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 80043cc:	187b      	adds	r3, r7, r1
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <I2C_MasterMultiRead+0x178>
			return BML_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e015      	b.n	8004404 <I2C_MasterMultiRead+0x1a4>
	while (!(i2c->ISR & I2C_ISR_STOPF)) {
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	2220      	movs	r2, #32
 80043de:	4013      	ands	r3, r2
 80043e0:	d0eb      	beq.n	80043ba <I2C_MasterMultiRead+0x15a>
		}
	} /* wait until stop flag is set */
	i = timeout;
 80043e2:	2316      	movs	r3, #22
 80043e4:	18fb      	adds	r3, r7, r3
 80043e6:	2224      	movs	r2, #36	; 0x24
 80043e8:	18ba      	adds	r2, r7, r2
 80043ea:	8812      	ldrh	r2, [r2, #0]
 80043ec:	801a      	strh	r2, [r3, #0]
	i2c->ICR = I2C_ISR_STOPF; /* clear stop flag */
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2220      	movs	r2, #32
 80043f2:	61da      	str	r2, [r3, #28]
	I2C_CR2(i2c, I2C_CR2_AUTOEND);
 80043f4:	2380      	movs	r3, #128	; 0x80
 80043f6:	049a      	lsls	r2, r3, #18
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	0011      	movs	r1, r2
 80043fc:	0018      	movs	r0, r3
 80043fe:	f7ff fec3 	bl	8004188 <I2C_CR2>

	return BML_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	0018      	movs	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	b006      	add	sp, #24
 800440a:	bd80      	pop	{r7, pc}
 800440c:	02002400 	.word	0x02002400

08004410 <RCC_CONFIG_48MHZ>:
 *      Author: hp
 */
#include "rcc.h"

//*****************************| RCC CLOCK FUNCTION |****************************//
BML_StatusTypeDef RCC_CONFIG_48MHZ() {
 8004410:	b590      	push	{r4, r7, lr}
 8004412:	b091      	sub	sp, #68	; 0x44
 8004414:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004416:	2410      	movs	r4, #16
 8004418:	193b      	adds	r3, r7, r4
 800441a:	0018      	movs	r0, r3
 800441c:	2330      	movs	r3, #48	; 0x30
 800441e:	001a      	movs	r2, r3
 8004420:	2100      	movs	r1, #0
 8004422:	f001 fab9 	bl	8005998 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004426:	003b      	movs	r3, r7
 8004428:	0018      	movs	r0, r3
 800442a:	2310      	movs	r3, #16
 800442c:	001a      	movs	r2, r3
 800442e:	2100      	movs	r1, #0
 8004430:	f001 fab2 	bl	8005998 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004434:	0021      	movs	r1, r4
 8004436:	187b      	adds	r3, r7, r1
 8004438:	2202      	movs	r2, #2
 800443a:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800443c:	187b      	adds	r3, r7, r1
 800443e:	2201      	movs	r2, #1
 8004440:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004442:	187b      	adds	r3, r7, r1
 8004444:	2210      	movs	r2, #16
 8004446:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004448:	187b      	adds	r3, r7, r1
 800444a:	2202      	movs	r2, #2
 800444c:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800444e:	187b      	adds	r3, r7, r1
 8004450:	2280      	movs	r2, #128	; 0x80
 8004452:	0212      	lsls	r2, r2, #8
 8004454:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8004456:	187b      	adds	r3, r7, r1
 8004458:	2280      	movs	r2, #128	; 0x80
 800445a:	0352      	lsls	r2, r2, #13
 800445c:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800445e:	187b      	adds	r3, r7, r1
 8004460:	2200      	movs	r2, #0
 8004462:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != BML_OK) {
 8004464:	187b      	adds	r3, r7, r1
 8004466:	0018      	movs	r0, r3
 8004468:	f7fe fbfc 	bl	8002c64 <HAL_RCC_OscConfig>
 800446c:	1e03      	subs	r3, r0, #0
 800446e:	d001      	beq.n	8004474 <RCC_CONFIG_48MHZ+0x64>
		return BML_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e014      	b.n	800449e <RCC_CONFIG_48MHZ+0x8e>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004474:	003b      	movs	r3, r7
 8004476:	2207      	movs	r2, #7
 8004478:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800447a:	003b      	movs	r3, r7
 800447c:	2202      	movs	r2, #2
 800447e:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004480:	003b      	movs	r3, r7
 8004482:	2200      	movs	r2, #0
 8004484:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004486:	003b      	movs	r3, r7
 8004488:	2200      	movs	r2, #0
 800448a:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800448c:	003b      	movs	r3, r7
 800448e:	2101      	movs	r1, #1
 8004490:	0018      	movs	r0, r3
 8004492:	f7fe ff05 	bl	80032a0 <HAL_RCC_ClockConfig>
 8004496:	1e03      	subs	r3, r0, #0
 8004498:	d001      	beq.n	800449e <RCC_CONFIG_48MHZ+0x8e>
		return BML_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e7ff      	b.n	800449e <RCC_CONFIG_48MHZ+0x8e>
	}
}
 800449e:	0018      	movs	r0, r3
 80044a0:	46bd      	mov	sp, r7
 80044a2:	b011      	add	sp, #68	; 0x44
 80044a4:	bd90      	pop	{r4, r7, pc}
	...

080044a8 <TIM6_IRQHandler>:
	return ticks;
}
void ticks_reset() {
	ticks = 0;
}
void TIM6_IRQHandler(void) {		// Timer Interrupt helping in delay
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
	ticks++;
 80044ac:	4b07      	ldr	r3, [pc, #28]	; (80044cc <TIM6_IRQHandler+0x24>)
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	3301      	adds	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	4b05      	ldr	r3, [pc, #20]	; (80044cc <TIM6_IRQHandler+0x24>)
 80044b6:	801a      	strh	r2, [r3, #0]
	TIM6->SR &= ~TIM_SR_UIF;
 80044b8:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <TIM6_IRQHandler+0x28>)
 80044ba:	691a      	ldr	r2, [r3, #16]
 80044bc:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <TIM6_IRQHandler+0x28>)
 80044be:	2101      	movs	r1, #1
 80044c0:	438a      	bics	r2, r1
 80044c2:	611a      	str	r2, [r3, #16]
}
 80044c4:	46c0      	nop			; (mov r8, r8)
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	46c0      	nop			; (mov r8, r8)
 80044cc:	20000310 	.word	0x20000310
 80044d0:	40001000 	.word	0x40001000

080044d4 <__NVIC_EnableIRQ>:
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	0002      	movs	r2, r0
 80044dc:	1dfb      	adds	r3, r7, #7
 80044de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80044e0:	1dfb      	adds	r3, r7, #7
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b7f      	cmp	r3, #127	; 0x7f
 80044e6:	d809      	bhi.n	80044fc <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044e8:	1dfb      	adds	r3, r7, #7
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	001a      	movs	r2, r3
 80044ee:	231f      	movs	r3, #31
 80044f0:	401a      	ands	r2, r3
 80044f2:	4b04      	ldr	r3, [pc, #16]	; (8004504 <__NVIC_EnableIRQ+0x30>)
 80044f4:	2101      	movs	r1, #1
 80044f6:	4091      	lsls	r1, r2
 80044f8:	000a      	movs	r2, r1
 80044fa:	601a      	str	r2, [r3, #0]
}
 80044fc:	46c0      	nop			; (mov r8, r8)
 80044fe:	46bd      	mov	sp, r7
 8004500:	b002      	add	sp, #8
 8004502:	bd80      	pop	{r7, pc}
 8004504:	e000e100 	.word	0xe000e100

08004508 <USART_INIT>:
 */
#include "uart.h"

void USART_INIT(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber,
		uint32_t bd_rate) {
 8004508:	b590      	push	{r4, r7, lr}
 800450a:	b087      	sub	sp, #28
 800450c:	af02      	add	r7, sp, #8
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
 8004514:	603b      	str	r3, [r7, #0]

	USART_CLK_EN(usart);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	0018      	movs	r0, r3
 800451a:	f000 f86f 	bl	80045fc <USART_CLK_EN>

	USART_PIN_CONFIG(usart, tx_port, rx_port, tx_pinNumber, rx_pinNumber);
 800451e:	683c      	ldr	r4, [r7, #0]
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	68b9      	ldr	r1, [r7, #8]
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	0023      	movs	r3, r4
 800452c:	f000 f8a8 	bl	8004680 <USART_PIN_CONFIG>

	USART_BDR_SEL(usart, bd_rate);
 8004530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	0011      	movs	r1, r2
 8004536:	0018      	movs	r0, r3
 8004538:	f000 f9b6 	bl	80048a8 <USART_BDR_SEL>

	usart->CR1 |= USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	220d      	movs	r2, #13
 8004542:	431a      	orrs	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	601a      	str	r2, [r3, #0]

}
 8004548:	46c0      	nop			; (mov r8, r8)
 800454a:	46bd      	mov	sp, r7
 800454c:	b005      	add	sp, #20
 800454e:	bd90      	pop	{r4, r7, pc}

08004550 <USART_IT_EN>:

void USART_IT_EN(USART_TypeDef *usart, uint8_t TX_IT, uint8_t RX_IT,
		uint8_t IDLE_IT) {
 8004550:	b590      	push	{r4, r7, lr}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	000c      	movs	r4, r1
 800455a:	0010      	movs	r0, r2
 800455c:	0019      	movs	r1, r3
 800455e:	1cfb      	adds	r3, r7, #3
 8004560:	1c22      	adds	r2, r4, #0
 8004562:	701a      	strb	r2, [r3, #0]
 8004564:	1cbb      	adds	r3, r7, #2
 8004566:	1c02      	adds	r2, r0, #0
 8004568:	701a      	strb	r2, [r3, #0]
 800456a:	1c7b      	adds	r3, r7, #1
 800456c:	1c0a      	adds	r2, r1, #0
 800456e:	701a      	strb	r2, [r3, #0]
	if (usart == USART1) {
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a1e      	ldr	r2, [pc, #120]	; (80045ec <USART_IT_EN+0x9c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d103      	bne.n	8004580 <USART_IT_EN+0x30>
		NVIC_EnableIRQ(USART1_IRQn);
 8004578:	201b      	movs	r0, #27
 800457a:	f7ff ffab 	bl	80044d4 <__NVIC_EnableIRQ>
 800457e:	e012      	b.n	80045a6 <USART_IT_EN+0x56>
	} else if (usart == USART2) {
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a1b      	ldr	r2, [pc, #108]	; (80045f0 <USART_IT_EN+0xa0>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d103      	bne.n	8004590 <USART_IT_EN+0x40>
		NVIC_EnableIRQ(USART2_IRQn);
 8004588:	201c      	movs	r0, #28
 800458a:	f7ff ffa3 	bl	80044d4 <__NVIC_EnableIRQ>
 800458e:	e00a      	b.n	80045a6 <USART_IT_EN+0x56>
	} else if (usart == USART3 || usart == USART4) {
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a18      	ldr	r2, [pc, #96]	; (80045f4 <USART_IT_EN+0xa4>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d003      	beq.n	80045a0 <USART_IT_EN+0x50>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a17      	ldr	r2, [pc, #92]	; (80045f8 <USART_IT_EN+0xa8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d102      	bne.n	80045a6 <USART_IT_EN+0x56>
		NVIC_EnableIRQ(USART3_4_IRQn);
 80045a0:	201d      	movs	r0, #29
 80045a2:	f7ff ff97 	bl	80044d4 <__NVIC_EnableIRQ>
	}

	if (TX_IT) {
 80045a6:	1cfb      	adds	r3, r7, #3
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d005      	beq.n	80045ba <USART_IT_EN+0x6a>
		usart->CR1 |= USART_CR1_TXEIE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2280      	movs	r2, #128	; 0x80
 80045b4:	431a      	orrs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	601a      	str	r2, [r3, #0]
	}
	if (RX_IT) {
 80045ba:	1cbb      	adds	r3, r7, #2
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d005      	beq.n	80045ce <USART_IT_EN+0x7e>
		usart->CR1 |= USART_CR1_RXNEIE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2220      	movs	r2, #32
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	601a      	str	r2, [r3, #0]
	}
	if (IDLE_IT) {
 80045ce:	1c7b      	adds	r3, r7, #1
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d005      	beq.n	80045e2 <USART_IT_EN+0x92>
		usart->CR1 |= USART_CR1_IDLEIE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2210      	movs	r2, #16
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	601a      	str	r2, [r3, #0]
	}
}
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	46bd      	mov	sp, r7
 80045e6:	b003      	add	sp, #12
 80045e8:	bd90      	pop	{r4, r7, pc}
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	40013800 	.word	0x40013800
 80045f0:	40004400 	.word	0x40004400
 80045f4:	40004800 	.word	0x40004800
 80045f8:	40004c00 	.word	0x40004c00

080045fc <USART_CLK_EN>:
// Initialize UART pins, Baudrate
void USART_CLK_EN(USART_TypeDef *usart) {
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
	if (usart == USART1) {
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a19      	ldr	r2, [pc, #100]	; (800466c <USART_CLK_EN+0x70>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d107      	bne.n	800461c <USART_CLK_EN+0x20>
		USART1_CLK_EN;
 800460c:	4b18      	ldr	r3, [pc, #96]	; (8004670 <USART_CLK_EN+0x74>)
 800460e:	69da      	ldr	r2, [r3, #28]
 8004610:	4b17      	ldr	r3, [pc, #92]	; (8004670 <USART_CLK_EN+0x74>)
 8004612:	2180      	movs	r1, #128	; 0x80
 8004614:	01c9      	lsls	r1, r1, #7
 8004616:	430a      	orrs	r2, r1
 8004618:	61da      	str	r2, [r3, #28]
	} else if (usart == USART3) {
		USART3_CLK_EN;
	} else if (usart == USART4) {
		USART4_CLK_EN;
	}
}
 800461a:	e022      	b.n	8004662 <USART_CLK_EN+0x66>
	} else if (usart == USART2) {
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a15      	ldr	r2, [pc, #84]	; (8004674 <USART_CLK_EN+0x78>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d107      	bne.n	8004634 <USART_CLK_EN+0x38>
		USART2_CLK_EN;
 8004624:	4b12      	ldr	r3, [pc, #72]	; (8004670 <USART_CLK_EN+0x74>)
 8004626:	69da      	ldr	r2, [r3, #28]
 8004628:	4b11      	ldr	r3, [pc, #68]	; (8004670 <USART_CLK_EN+0x74>)
 800462a:	2180      	movs	r1, #128	; 0x80
 800462c:	0289      	lsls	r1, r1, #10
 800462e:	430a      	orrs	r2, r1
 8004630:	61da      	str	r2, [r3, #28]
}
 8004632:	e016      	b.n	8004662 <USART_CLK_EN+0x66>
	} else if (usart == USART3) {
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a10      	ldr	r2, [pc, #64]	; (8004678 <USART_CLK_EN+0x7c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d107      	bne.n	800464c <USART_CLK_EN+0x50>
		USART3_CLK_EN;
 800463c:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <USART_CLK_EN+0x74>)
 800463e:	69da      	ldr	r2, [r3, #28]
 8004640:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <USART_CLK_EN+0x74>)
 8004642:	2180      	movs	r1, #128	; 0x80
 8004644:	02c9      	lsls	r1, r1, #11
 8004646:	430a      	orrs	r2, r1
 8004648:	61da      	str	r2, [r3, #28]
}
 800464a:	e00a      	b.n	8004662 <USART_CLK_EN+0x66>
	} else if (usart == USART4) {
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a0b      	ldr	r2, [pc, #44]	; (800467c <USART_CLK_EN+0x80>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d106      	bne.n	8004662 <USART_CLK_EN+0x66>
		USART4_CLK_EN;
 8004654:	4b06      	ldr	r3, [pc, #24]	; (8004670 <USART_CLK_EN+0x74>)
 8004656:	69da      	ldr	r2, [r3, #28]
 8004658:	4b05      	ldr	r3, [pc, #20]	; (8004670 <USART_CLK_EN+0x74>)
 800465a:	2180      	movs	r1, #128	; 0x80
 800465c:	0309      	lsls	r1, r1, #12
 800465e:	430a      	orrs	r2, r1
 8004660:	61da      	str	r2, [r3, #28]
}
 8004662:	46c0      	nop			; (mov r8, r8)
 8004664:	46bd      	mov	sp, r7
 8004666:	b002      	add	sp, #8
 8004668:	bd80      	pop	{r7, pc}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	40013800 	.word	0x40013800
 8004670:	40021000 	.word	0x40021000
 8004674:	40004400 	.word	0x40004400
 8004678:	40004800 	.word	0x40004800
 800467c:	40004c00 	.word	0x40004c00

08004680 <USART_PIN_CONFIG>:

void USART_PIN_CONFIG(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber) {
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af02      	add	r7, sp, #8
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
 800468c:	603b      	str	r3, [r7, #0]

	gpio_config(tx_port, tx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 800468e:	6839      	ldr	r1, [r7, #0]
 8004690:	68b8      	ldr	r0, [r7, #8]
 8004692:	2300      	movs	r3, #0
 8004694:	9301      	str	r3, [sp, #4]
 8004696:	2300      	movs	r3, #0
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	2302      	movs	r3, #2
 800469c:	2202      	movs	r2, #2
 800469e:	f7ff fa25 	bl	8003aec <gpio_config>
	gpio_config(rx_port, rx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 80046a2:	69b9      	ldr	r1, [r7, #24]
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	2300      	movs	r3, #0
 80046a8:	9301      	str	r3, [sp, #4]
 80046aa:	2300      	movs	r3, #0
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	2302      	movs	r3, #2
 80046b0:	2202      	movs	r2, #2
 80046b2:	f7ff fa1b 	bl	8003aec <gpio_config>

	if (usart == USART1) {
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4a75      	ldr	r2, [pc, #468]	; (8004890 <USART_PIN_CONFIG+0x210>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d13a      	bne.n	8004734 <USART_PIN_CONFIG+0xb4>
		// TX
		if (tx_port == PORTA && tx_pinNumber == 9) {
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	2390      	movs	r3, #144	; 0x90
 80046c2:	05db      	lsls	r3, r3, #23
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d109      	bne.n	80046dc <USART_PIN_CONFIG+0x5c>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	2b09      	cmp	r3, #9
 80046cc:	d106      	bne.n	80046dc <USART_PIN_CONFIG+0x5c>
			gpio_altfn(tx_port, tx_pinNumber, USART1_TX_PA9);
 80046ce:	6839      	ldr	r1, [r7, #0]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2201      	movs	r2, #1
 80046d4:	0018      	movs	r0, r3
 80046d6:	f7ff fad0 	bl	8003c7a <gpio_altfn>
 80046da:	e00c      	b.n	80046f6 <USART_PIN_CONFIG+0x76>
		} else if (tx_port == PORTB && tx_pinNumber == 6) {
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	4a6d      	ldr	r2, [pc, #436]	; (8004894 <USART_PIN_CONFIG+0x214>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d108      	bne.n	80046f6 <USART_PIN_CONFIG+0x76>
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2b06      	cmp	r3, #6
 80046e8:	d105      	bne.n	80046f6 <USART_PIN_CONFIG+0x76>
			gpio_altfn(tx_port, tx_pinNumber, USART1_TX_PB6);
 80046ea:	6839      	ldr	r1, [r7, #0]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2200      	movs	r2, #0
 80046f0:	0018      	movs	r0, r3
 80046f2:	f7ff fac2 	bl	8003c7a <gpio_altfn>
		}

		// RX
		if (rx_port == PORTA && rx_pinNumber == 10) {
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	2390      	movs	r3, #144	; 0x90
 80046fa:	05db      	lsls	r3, r3, #23
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d109      	bne.n	8004714 <USART_PIN_CONFIG+0x94>
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	2b0a      	cmp	r3, #10
 8004704:	d106      	bne.n	8004714 <USART_PIN_CONFIG+0x94>
			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PA10);
 8004706:	69b9      	ldr	r1, [r7, #24]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	0018      	movs	r0, r3
 800470e:	f7ff fab4 	bl	8003c7a <gpio_altfn>
 8004712:	e0b8      	b.n	8004886 <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTB && rx_pinNumber == 7) {
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a5f      	ldr	r2, [pc, #380]	; (8004894 <USART_PIN_CONFIG+0x214>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d000      	beq.n	800471e <USART_PIN_CONFIG+0x9e>
 800471c:	e0b3      	b.n	8004886 <USART_PIN_CONFIG+0x206>
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	2b07      	cmp	r3, #7
 8004722:	d000      	beq.n	8004726 <USART_PIN_CONFIG+0xa6>
 8004724:	e0af      	b.n	8004886 <USART_PIN_CONFIG+0x206>
			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PB7);
 8004726:	69b9      	ldr	r1, [r7, #24]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	0018      	movs	r0, r3
 800472e:	f7ff faa4 	bl	8003c7a <gpio_altfn>
		}
	} else if (usart == USART4) {
		gpio_altfn(tx_port, tx_pinNumber, USART4_TX_PA0);
		gpio_altfn(rx_port, rx_pinNumber, USART4_RX_PA1);
	}
}
 8004732:	e0a8      	b.n	8004886 <USART_PIN_CONFIG+0x206>
	} else if (usart == USART2) {
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4a58      	ldr	r2, [pc, #352]	; (8004898 <USART_PIN_CONFIG+0x218>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d13c      	bne.n	80047b6 <USART_PIN_CONFIG+0x136>
		if (tx_port == PORTA && tx_pinNumber == 2) {
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	2390      	movs	r3, #144	; 0x90
 8004740:	05db      	lsls	r3, r3, #23
 8004742:	429a      	cmp	r2, r3
 8004744:	d109      	bne.n	800475a <USART_PIN_CONFIG+0xda>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b02      	cmp	r3, #2
 800474a:	d106      	bne.n	800475a <USART_PIN_CONFIG+0xda>
			gpio_altfn(tx_port, tx_pinNumber, USART2_TX_PA2);
 800474c:	6839      	ldr	r1, [r7, #0]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2201      	movs	r2, #1
 8004752:	0018      	movs	r0, r3
 8004754:	f7ff fa91 	bl	8003c7a <gpio_altfn>
 8004758:	e00d      	b.n	8004776 <USART_PIN_CONFIG+0xf6>
		} else if (tx_port == PORTA && tx_pinNumber == 14) {
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	2390      	movs	r3, #144	; 0x90
 800475e:	05db      	lsls	r3, r3, #23
 8004760:	429a      	cmp	r2, r3
 8004762:	d108      	bne.n	8004776 <USART_PIN_CONFIG+0xf6>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b0e      	cmp	r3, #14
 8004768:	d105      	bne.n	8004776 <USART_PIN_CONFIG+0xf6>
			gpio_altfn(tx_port, tx_pinNumber, USART2_TX_PA14);
 800476a:	6839      	ldr	r1, [r7, #0]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2201      	movs	r2, #1
 8004770:	0018      	movs	r0, r3
 8004772:	f7ff fa82 	bl	8003c7a <gpio_altfn>
		if (rx_port == PORTA && rx_pinNumber == 3) {
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	2390      	movs	r3, #144	; 0x90
 800477a:	05db      	lsls	r3, r3, #23
 800477c:	429a      	cmp	r2, r3
 800477e:	d109      	bne.n	8004794 <USART_PIN_CONFIG+0x114>
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	2b03      	cmp	r3, #3
 8004784:	d106      	bne.n	8004794 <USART_PIN_CONFIG+0x114>
			gpio_altfn(rx_port, rx_pinNumber, USART2_RX_PA3);
 8004786:	69b9      	ldr	r1, [r7, #24]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	0018      	movs	r0, r3
 800478e:	f7ff fa74 	bl	8003c7a <gpio_altfn>
 8004792:	e078      	b.n	8004886 <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTA && rx_pinNumber == 15) {
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	2390      	movs	r3, #144	; 0x90
 8004798:	05db      	lsls	r3, r3, #23
 800479a:	429a      	cmp	r2, r3
 800479c:	d000      	beq.n	80047a0 <USART_PIN_CONFIG+0x120>
 800479e:	e072      	b.n	8004886 <USART_PIN_CONFIG+0x206>
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	2b0f      	cmp	r3, #15
 80047a4:	d000      	beq.n	80047a8 <USART_PIN_CONFIG+0x128>
 80047a6:	e06e      	b.n	8004886 <USART_PIN_CONFIG+0x206>
			gpio_altfn(rx_port, rx_pinNumber, USART2_RX_PA15);
 80047a8:	69b9      	ldr	r1, [r7, #24]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	0018      	movs	r0, r3
 80047b0:	f7ff fa63 	bl	8003c7a <gpio_altfn>
}
 80047b4:	e067      	b.n	8004886 <USART_PIN_CONFIG+0x206>
	} else if (usart == USART3) {
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4a38      	ldr	r2, [pc, #224]	; (800489c <USART_PIN_CONFIG+0x21c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d152      	bne.n	8004864 <USART_PIN_CONFIG+0x1e4>
		if (tx_port == PORTC && tx_pinNumber == 4) {
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	4a37      	ldr	r2, [pc, #220]	; (80048a0 <USART_PIN_CONFIG+0x220>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d109      	bne.n	80047da <USART_PIN_CONFIG+0x15a>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d106      	bne.n	80047da <USART_PIN_CONFIG+0x15a>
			gpio_altfn(tx_port, tx_pinNumber, USART3_TX_PC4);
 80047cc:	6839      	ldr	r1, [r7, #0]
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2201      	movs	r2, #1
 80047d2:	0018      	movs	r0, r3
 80047d4:	f7ff fa51 	bl	8003c7a <gpio_altfn>
 80047d8:	e01a      	b.n	8004810 <USART_PIN_CONFIG+0x190>
		} else if (tx_port == PORTB && tx_pinNumber == 10) {
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	4a2d      	ldr	r2, [pc, #180]	; (8004894 <USART_PIN_CONFIG+0x214>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d109      	bne.n	80047f6 <USART_PIN_CONFIG+0x176>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b0a      	cmp	r3, #10
 80047e6:	d106      	bne.n	80047f6 <USART_PIN_CONFIG+0x176>
			gpio_altfn(tx_port, tx_pinNumber, USART3_TX_PB10);
 80047e8:	6839      	ldr	r1, [r7, #0]
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2204      	movs	r2, #4
 80047ee:	0018      	movs	r0, r3
 80047f0:	f7ff fa43 	bl	8003c7a <gpio_altfn>
 80047f4:	e00c      	b.n	8004810 <USART_PIN_CONFIG+0x190>
		} else if (tx_port == PORTC && tx_pinNumber == 10) {
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	4a29      	ldr	r2, [pc, #164]	; (80048a0 <USART_PIN_CONFIG+0x220>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d108      	bne.n	8004810 <USART_PIN_CONFIG+0x190>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b0a      	cmp	r3, #10
 8004802:	d105      	bne.n	8004810 <USART_PIN_CONFIG+0x190>
			gpio_altfn(tx_port, tx_pinNumber, USART3_TX_PC10);
 8004804:	6839      	ldr	r1, [r7, #0]
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2201      	movs	r2, #1
 800480a:	0018      	movs	r0, r3
 800480c:	f7ff fa35 	bl	8003c7a <gpio_altfn>
		if (rx_port == PORTC && rx_pinNumber == 5) {
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a23      	ldr	r2, [pc, #140]	; (80048a0 <USART_PIN_CONFIG+0x220>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d109      	bne.n	800482c <USART_PIN_CONFIG+0x1ac>
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	2b05      	cmp	r3, #5
 800481c:	d106      	bne.n	800482c <USART_PIN_CONFIG+0x1ac>
			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PC5);
 800481e:	69b9      	ldr	r1, [r7, #24]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	0018      	movs	r0, r3
 8004826:	f7ff fa28 	bl	8003c7a <gpio_altfn>
 800482a:	e02c      	b.n	8004886 <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTC && rx_pinNumber == 11) {
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a1c      	ldr	r2, [pc, #112]	; (80048a0 <USART_PIN_CONFIG+0x220>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d109      	bne.n	8004848 <USART_PIN_CONFIG+0x1c8>
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	2b0b      	cmp	r3, #11
 8004838:	d106      	bne.n	8004848 <USART_PIN_CONFIG+0x1c8>
			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PC11);
 800483a:	69b9      	ldr	r1, [r7, #24]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	0018      	movs	r0, r3
 8004842:	f7ff fa1a 	bl	8003c7a <gpio_altfn>
 8004846:	e01e      	b.n	8004886 <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTB && rx_pinNumber == 11) {
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a12      	ldr	r2, [pc, #72]	; (8004894 <USART_PIN_CONFIG+0x214>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d11a      	bne.n	8004886 <USART_PIN_CONFIG+0x206>
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	2b0b      	cmp	r3, #11
 8004854:	d117      	bne.n	8004886 <USART_PIN_CONFIG+0x206>
			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PB11);
 8004856:	69b9      	ldr	r1, [r7, #24]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2204      	movs	r2, #4
 800485c:	0018      	movs	r0, r3
 800485e:	f7ff fa0c 	bl	8003c7a <gpio_altfn>
}
 8004862:	e010      	b.n	8004886 <USART_PIN_CONFIG+0x206>
	} else if (usart == USART4) {
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4a0f      	ldr	r2, [pc, #60]	; (80048a4 <USART_PIN_CONFIG+0x224>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d10c      	bne.n	8004886 <USART_PIN_CONFIG+0x206>
		gpio_altfn(tx_port, tx_pinNumber, USART4_TX_PA0);
 800486c:	6839      	ldr	r1, [r7, #0]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2204      	movs	r2, #4
 8004872:	0018      	movs	r0, r3
 8004874:	f7ff fa01 	bl	8003c7a <gpio_altfn>
		gpio_altfn(rx_port, rx_pinNumber, USART4_RX_PA1);
 8004878:	69b9      	ldr	r1, [r7, #24]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2204      	movs	r2, #4
 800487e:	0018      	movs	r0, r3
 8004880:	f7ff f9fb 	bl	8003c7a <gpio_altfn>
}
 8004884:	e7ff      	b.n	8004886 <USART_PIN_CONFIG+0x206>
 8004886:	46c0      	nop			; (mov r8, r8)
 8004888:	46bd      	mov	sp, r7
 800488a:	b004      	add	sp, #16
 800488c:	bd80      	pop	{r7, pc}
 800488e:	46c0      	nop			; (mov r8, r8)
 8004890:	40013800 	.word	0x40013800
 8004894:	48000400 	.word	0x48000400
 8004898:	40004400 	.word	0x40004400
 800489c:	40004800 	.word	0x40004800
 80048a0:	48000800 	.word	0x48000800
 80048a4:	40004c00 	.word	0x40004c00

080048a8 <USART_BDR_SEL>:

void USART_BDR_SEL(USART_TypeDef *usart, uint32_t bd_rate) {
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]

//==============================================================//
// clkPer / (baudR x 16) = 48MHz / (9600 x 16) = 312.5 = 1388   //
//==============================================================//
	uint32_t baud = (uint32_t) (SystemCoreClock / bd_rate);
 80048b2:	4b09      	ldr	r3, [pc, #36]	; (80048d8 <USART_BDR_SEL+0x30>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6839      	ldr	r1, [r7, #0]
 80048b8:	0018      	movs	r0, r3
 80048ba:	f7fb fc41 	bl	8000140 <__udivsi3>
 80048be:	0003      	movs	r3, r0
 80048c0:	60fb      	str	r3, [r7, #12]
	usart->BRR |= baud;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	431a      	orrs	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	60da      	str	r2, [r3, #12]
}
 80048ce:	46c0      	nop			; (mov r8, r8)
 80048d0:	46bd      	mov	sp, r7
 80048d2:	b004      	add	sp, #16
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	46c0      	nop			; (mov r8, r8)
 80048d8:	20000000 	.word	0x20000000

080048dc <USART_WRITE>:

/* Write a character to USART1 */
BML_StatusTypeDef USART_WRITE(USART_TypeDef *usart, uint8_t *ch, uint32_t len, uint16_t timeout) {
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	001a      	movs	r2, r3
 80048ea:	1cbb      	adds	r3, r7, #2
 80048ec:	801a      	strh	r2, [r3, #0]
	uint16_t i = timeout;
 80048ee:	2314      	movs	r3, #20
 80048f0:	18fb      	adds	r3, r7, r3
 80048f2:	1cba      	adds	r2, r7, #2
 80048f4:	8812      	ldrh	r2, [r2, #0]
 80048f6:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < len; i++) {
 80048f8:	2317      	movs	r3, #23
 80048fa:	18fb      	adds	r3, r7, r3
 80048fc:	2200      	movs	r2, #0
 80048fe:	701a      	strb	r2, [r3, #0]
 8004900:	e01c      	b.n	800493c <USART_WRITE+0x60>
		if (len == 1) {
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d104      	bne.n	8004912 <USART_WRITE+0x36>
			usart->TDR = ch;
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	b29a      	uxth	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	851a      	strh	r2, [r3, #40]	; 0x28
 8004910:	e008      	b.n	8004924 <USART_WRITE+0x48>
		} else {
			usart->TDR = ch[i];
 8004912:	2317      	movs	r3, #23
 8004914:	18fb      	adds	r3, r7, r3
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	18d3      	adds	r3, r2, r3
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	b29a      	uxth	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	851a      	strh	r2, [r3, #40]	; 0x28
		}
		while (!(usart->ISR & USART_ISR_TXE)){
 8004924:	46c0      	nop			; (mov r8, r8)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	2280      	movs	r2, #128	; 0x80
 800492c:	4013      	ands	r3, r2
 800492e:	d0fa      	beq.n	8004926 <USART_WRITE+0x4a>
	for (uint8_t i = 0; i < len; i++) {
 8004930:	2117      	movs	r1, #23
 8004932:	187b      	adds	r3, r7, r1
 8004934:	781a      	ldrb	r2, [r3, #0]
 8004936:	187b      	adds	r3, r7, r1
 8004938:	3201      	adds	r2, #1
 800493a:	701a      	strb	r2, [r3, #0]
 800493c:	2317      	movs	r3, #23
 800493e:	18fb      	adds	r3, r7, r3
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	429a      	cmp	r2, r3
 8004946:	d8dc      	bhi.n	8004902 <USART_WRITE+0x26>
//			if(i <= 0){
//				return BML_TIMEOUT;
//			}
		}
	}
	return BML_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	0018      	movs	r0, r3
 800494c:	46bd      	mov	sp, r7
 800494e:	b006      	add	sp, #24
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <print>:
	return chr;
}

//******************************* UART SERIAL PRINTING ***************************************//

void print(const char *fmt, ...) {
 8004954:	b40f      	push	{r0, r1, r2, r3}
 8004956:	b580      	push	{r7, lr}
 8004958:	b082      	sub	sp, #8
 800495a:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 800495c:	2314      	movs	r3, #20
 800495e:	18fb      	adds	r3, r7, r3
 8004960:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	2180      	movs	r1, #128	; 0x80
 8004968:	0049      	lsls	r1, r1, #1
 800496a:	480c      	ldr	r0, [pc, #48]	; (800499c <print+0x48>)
 800496c:	f001 fcbe 	bl	80062ec <vsniprintf>
	va_end(args);

	uint16_t len = strlen(buffer);
 8004970:	4b0a      	ldr	r3, [pc, #40]	; (800499c <print+0x48>)
 8004972:	0018      	movs	r0, r3
 8004974:	f7fb fbc8 	bl	8000108 <strlen>
 8004978:	0002      	movs	r2, r0
 800497a:	1dbb      	adds	r3, r7, #6
 800497c:	801a      	strh	r2, [r3, #0]
	USART_WRITE(UART_TYPE, buffer, len, 1000);
 800497e:	1dbb      	adds	r3, r7, #6
 8004980:	881a      	ldrh	r2, [r3, #0]
 8004982:	23fa      	movs	r3, #250	; 0xfa
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4905      	ldr	r1, [pc, #20]	; (800499c <print+0x48>)
 8004988:	4805      	ldr	r0, [pc, #20]	; (80049a0 <print+0x4c>)
 800498a:	f7ff ffa7 	bl	80048dc <USART_WRITE>

}
 800498e:	46c0      	nop			; (mov r8, r8)
 8004990:	46bd      	mov	sp, r7
 8004992:	b002      	add	sp, #8
 8004994:	bc80      	pop	{r7}
 8004996:	bc08      	pop	{r3}
 8004998:	b004      	add	sp, #16
 800499a:	4718      	bx	r3
 800499c:	20000314 	.word	0x20000314
 80049a0:	40004400 	.word	0x40004400

080049a4 <uart_print_config>:

void uart_print_config(uint32_t baudRate) {
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af02      	add	r7, sp, #8
 80049aa:	6078      	str	r0, [r7, #4]
	USART_INIT(UART_TYPE, UART_TX_PORT, UART_RX_PORT, UART_TX_PIN, UART_RX_PIN, baudRate);
 80049ac:	2390      	movs	r3, #144	; 0x90
 80049ae:	05da      	lsls	r2, r3, #23
 80049b0:	2390      	movs	r3, #144	; 0x90
 80049b2:	05d9      	lsls	r1, r3, #23
 80049b4:	4805      	ldr	r0, [pc, #20]	; (80049cc <uart_print_config+0x28>)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	9301      	str	r3, [sp, #4]
 80049ba:	2303      	movs	r3, #3
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	2302      	movs	r3, #2
 80049c0:	f7ff fda2 	bl	8004508 <USART_INIT>
}
 80049c4:	46c0      	nop			; (mov r8, r8)
 80049c6:	46bd      	mov	sp, r7
 80049c8:	b002      	add	sp, #8
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40004400 	.word	0x40004400

080049d0 <mlx90614_read16>:
		}
	}
	return crc;
}
//###################################################################################################
BML_StatusTypeDef mlx90614_read16(uint8_t address, int16_t *data) {
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af02      	add	r7, sp, #8
 80049d6:	0002      	movs	r2, r0
 80049d8:	6039      	str	r1, [r7, #0]
 80049da:	1dfb      	adds	r3, r7, #7
 80049dc:	701a      	strb	r2, [r3, #0]
//	if (HAL_I2C_Mem_Read(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, address,
//			I2C_MEMADD_SIZE_8BIT, d, 3, 100) != HAL_OK) {
//		return false;
//	}

	if (I2C_MasterMultiRead(_MLX90614_I2C, _MLX90614_I2C_ADDRESS, address, 3, d,
 80049de:	1dfb      	adds	r3, r7, #7
 80049e0:	781a      	ldrb	r2, [r3, #0]
 80049e2:	480f      	ldr	r0, [pc, #60]	; (8004a20 <mlx90614_read16+0x50>)
 80049e4:	2364      	movs	r3, #100	; 0x64
 80049e6:	9301      	str	r3, [sp, #4]
 80049e8:	230c      	movs	r3, #12
 80049ea:	18fb      	adds	r3, r7, r3
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	2303      	movs	r3, #3
 80049f0:	215a      	movs	r1, #90	; 0x5a
 80049f2:	f7ff fc35 	bl	8004260 <I2C_MasterMultiRead>
 80049f6:	1e03      	subs	r3, r0, #0
 80049f8:	d001      	beq.n	80049fe <mlx90614_read16+0x2e>
			100) != BML_OK) {
		return BML_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e00c      	b.n	8004a18 <mlx90614_read16+0x48>
	}

	*data = d[0] | (d[1] << 8);
 80049fe:	210c      	movs	r1, #12
 8004a00:	187b      	adds	r3, r7, r1
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	b21a      	sxth	r2, r3
 8004a06:	187b      	adds	r3, r7, r1
 8004a08:	785b      	ldrb	r3, [r3, #1]
 8004a0a:	021b      	lsls	r3, r3, #8
 8004a0c:	b21b      	sxth	r3, r3
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	b21a      	sxth	r2, r3
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	801a      	strh	r2, [r3, #0]
	return BML_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	0018      	movs	r0, r3
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	b004      	add	sp, #16
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40005400 	.word	0x40005400

08004a24 <mlx90614_init>:
		}
	}
	return retTemp;
}
//###################################################################################################
BML_StatusTypeDef mlx90614_init(void) {
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
	memset(&mlx90614, 0, sizeof(mlx90614));
 8004a28:	4b20      	ldr	r3, [pc, #128]	; (8004aac <mlx90614_init+0x88>)
 8004a2a:	2234      	movs	r2, #52	; 0x34
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	0018      	movs	r0, r3
 8004a30:	f000 ffb2 	bl	8005998 <memset>
	mlx90614.unit = MLX90614_UNIT_C;
 8004a34:	4b1d      	ldr	r3, [pc, #116]	; (8004aac <mlx90614_init+0x88>)
 8004a36:	2202      	movs	r2, #2
 8004a38:	701a      	strb	r2, [r3, #0]

	I2C_INIT(_MLX90614_I2C, _MLX90614_I2C_SPEED);
 8004a3a:	4a1d      	ldr	r2, [pc, #116]	; (8004ab0 <mlx90614_init+0x8c>)
 8004a3c:	4b1d      	ldr	r3, [pc, #116]	; (8004ab4 <mlx90614_init+0x90>)
 8004a3e:	0011      	movs	r1, r2
 8004a40:	0018      	movs	r0, r3
 8004a42:	f7ff fb71 	bl	8004128 <I2C_INIT>

//	if (HAL_I2C_IsDeviceReady(&_MLX90614_I2C, _MLX90614_I2C_ADDRESS, 1, 100)
//			!= HAL_OK)
//		return BML_ERROR;
	if(I2C_DeviceReady(_MLX90614_I2C, _MLX90614_I2C_ADDRESS, 100) != BML_OK){
 8004a46:	4b1b      	ldr	r3, [pc, #108]	; (8004ab4 <mlx90614_init+0x90>)
 8004a48:	2264      	movs	r2, #100	; 0x64
 8004a4a:	215a      	movs	r1, #90	; 0x5a
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	f7ff fba7 	bl	80041a0 <I2C_DeviceReady>
 8004a52:	1e03      	subs	r3, r0, #0
 8004a54:	d001      	beq.n	8004a5a <mlx90614_init+0x36>
		return BML_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e025      	b.n	8004aa6 <mlx90614_init+0x82>
	}
	mlx90614_read16(MLX90614_REGISTER_CONFIG, (int16_t*) &mlx90614.configReg);
 8004a5a:	4b17      	ldr	r3, [pc, #92]	; (8004ab8 <mlx90614_init+0x94>)
 8004a5c:	0019      	movs	r1, r3
 8004a5e:	2025      	movs	r0, #37	; 0x25
 8004a60:	f7ff ffb6 	bl	80049d0 <mlx90614_read16>
	if (mlx90614_readID(NULL) == BML_ERROR)
 8004a64:	2000      	movs	r0, #0
 8004a66:	f000 f839 	bl	8004adc <mlx90614_readID>
 8004a6a:	0003      	movs	r3, r0
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d101      	bne.n	8004a74 <mlx90614_init+0x50>
		return BML_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e018      	b.n	8004aa6 <mlx90614_init+0x82>
	if (mlx90614_getEmissivity(NULL) == BML_ERROR)
 8004a74:	2000      	movs	r0, #0
 8004a76:	f000 f86d 	bl	8004b54 <mlx90614_getEmissivity>
 8004a7a:	0003      	movs	r3, r0
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d101      	bne.n	8004a84 <mlx90614_init+0x60>
		return BML_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e010      	b.n	8004aa6 <mlx90614_init+0x82>
	if (mlx90614_getMax(NULL) == BML_ERROR)
 8004a84:	2000      	movs	r0, #0
 8004a86:	f000 f8a1 	bl	8004bcc <mlx90614_getMax>
 8004a8a:	0003      	movs	r3, r0
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d101      	bne.n	8004a94 <mlx90614_init+0x70>
		return BML_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e008      	b.n	8004aa6 <mlx90614_init+0x82>
	if (mlx90614_getMin(NULL) == BML_ERROR)
 8004a94:	2000      	movs	r0, #0
 8004a96:	f000 f8bb 	bl	8004c10 <mlx90614_getMin>
 8004a9a:	0003      	movs	r3, r0
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <mlx90614_init+0x80>
		return BML_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e000      	b.n	8004aa6 <mlx90614_init+0x82>

	return BML_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	20000414 	.word	0x20000414
 8004ab0:	2000090e 	.word	0x2000090e
 8004ab4:	40005400 	.word	0x40005400
 8004ab8:	20000444 	.word	0x20000444

08004abc <mlx90614_setUnit>:
//###################################################################################################
void mlx90614_setUnit(MLX90614_UNIT_t MLX90614_UNIT_) {
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	0002      	movs	r2, r0
 8004ac4:	1dfb      	adds	r3, r7, #7
 8004ac6:	701a      	strb	r2, [r3, #0]
	mlx90614.unit = MLX90614_UNIT_;
 8004ac8:	4b03      	ldr	r3, [pc, #12]	; (8004ad8 <mlx90614_setUnit+0x1c>)
 8004aca:	1dfa      	adds	r2, r7, #7
 8004acc:	7812      	ldrb	r2, [r2, #0]
 8004ace:	701a      	strb	r2, [r3, #0]
}
 8004ad0:	46c0      	nop			; (mov r8, r8)
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	b002      	add	sp, #8
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	20000414 	.word	0x20000414

08004adc <mlx90614_readID>:
//###################################################################################################
BML_StatusTypeDef mlx90614_readID(int16_t *id) {
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++) {
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	e02a      	b.n	8004b40 <mlx90614_readID+0x64>
		int16_t temp = 0;
 8004aea:	210a      	movs	r1, #10
 8004aec:	187b      	adds	r3, r7, r1
 8004aee:	2200      	movs	r2, #0
 8004af0:	801a      	strh	r2, [r3, #0]
		if (mlx90614_read16(MLX90614_REGISTER_ID0 + i, &temp) == BML_ERROR)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	333c      	adds	r3, #60	; 0x3c
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	187a      	adds	r2, r7, r1
 8004afc:	0011      	movs	r1, r2
 8004afe:	0018      	movs	r0, r3
 8004b00:	f7ff ff66 	bl	80049d0 <mlx90614_read16>
 8004b04:	0003      	movs	r3, r0
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d101      	bne.n	8004b0e <mlx90614_readID+0x32>
			return BML_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e01c      	b.n	8004b48 <mlx90614_readID+0x6c>
		if (id != NULL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d008      	beq.n	8004b26 <mlx90614_readID+0x4a>
			id[i] = (uint16_t) temp;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	18d3      	adds	r3, r2, r3
 8004b1c:	220a      	movs	r2, #10
 8004b1e:	18ba      	adds	r2, r7, r2
 8004b20:	2100      	movs	r1, #0
 8004b22:	5e52      	ldrsh	r2, [r2, r1]
 8004b24:	801a      	strh	r2, [r3, #0]
		mlx90614.id[i] = (uint16_t) temp;
 8004b26:	230a      	movs	r3, #10
 8004b28:	18fb      	adds	r3, r7, r3
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	5e9b      	ldrsh	r3, [r3, r2]
 8004b2e:	b299      	uxth	r1, r3
 8004b30:	4b07      	ldr	r3, [pc, #28]	; (8004b50 <mlx90614_readID+0x74>)
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	3214      	adds	r2, #20
 8004b36:	0052      	lsls	r2, r2, #1
 8004b38:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < 4; i++) {
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2b03      	cmp	r3, #3
 8004b44:	ddd1      	ble.n	8004aea <mlx90614_readID+0xe>
	}
	return BML_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	0018      	movs	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	b004      	add	sp, #16
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	20000414 	.word	0x20000414

08004b54 <mlx90614_getEmissivity>:
//###################################################################################################
BML_StatusTypeDef mlx90614_getEmissivity(float *emissivity) {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
	if (mlx90614_read16(MLX90614_REGISTER_KE, &mlx90614.rawEmissivity) == BML_OK) {
 8004b5c:	4b18      	ldr	r3, [pc, #96]	; (8004bc0 <mlx90614_getEmissivity+0x6c>)
 8004b5e:	0019      	movs	r1, r3
 8004b60:	2024      	movs	r0, #36	; 0x24
 8004b62:	f7ff ff35 	bl	80049d0 <mlx90614_read16>
 8004b66:	1e03      	subs	r3, r0, #0
 8004b68:	d124      	bne.n	8004bb4 <mlx90614_getEmissivity+0x60>
		mlx90614.emissivity = (((float) ((uint16_t) mlx90614.rawEmissivity))
 8004b6a:	4b16      	ldr	r3, [pc, #88]	; (8004bc4 <mlx90614_getEmissivity+0x70>)
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	5e9b      	ldrsh	r3, [r3, r2]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	0018      	movs	r0, r3
 8004b74:	f7fb fdfe 	bl	8000774 <__aeabi_ui2f>
 8004b78:	1c03      	adds	r3, r0, #0
				/ 65535.0f);
 8004b7a:	4913      	ldr	r1, [pc, #76]	; (8004bc8 <mlx90614_getEmissivity+0x74>)
 8004b7c:	1c18      	adds	r0, r3, #0
 8004b7e:	f7fb fc93 	bl	80004a8 <__aeabi_fdiv>
 8004b82:	1c03      	adds	r3, r0, #0
 8004b84:	1c1a      	adds	r2, r3, #0
		mlx90614.emissivity = (((float) ((uint16_t) mlx90614.rawEmissivity))
 8004b86:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <mlx90614_getEmissivity+0x70>)
 8004b88:	611a      	str	r2, [r3, #16]
		if (emissivity != NULL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00f      	beq.n	8004bb0 <mlx90614_getEmissivity+0x5c>
			*emissivity = (((float) ((uint16_t) mlx90614.rawEmissivity))
 8004b90:	4b0c      	ldr	r3, [pc, #48]	; (8004bc4 <mlx90614_getEmissivity+0x70>)
 8004b92:	2202      	movs	r2, #2
 8004b94:	5e9b      	ldrsh	r3, [r3, r2]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	0018      	movs	r0, r3
 8004b9a:	f7fb fdeb 	bl	8000774 <__aeabi_ui2f>
 8004b9e:	1c03      	adds	r3, r0, #0
					/ 65535.0f);
 8004ba0:	4909      	ldr	r1, [pc, #36]	; (8004bc8 <mlx90614_getEmissivity+0x74>)
 8004ba2:	1c18      	adds	r0, r3, #0
 8004ba4:	f7fb fc80 	bl	80004a8 <__aeabi_fdiv>
 8004ba8:	1c03      	adds	r3, r0, #0
 8004baa:	1c1a      	adds	r2, r3, #0
			*emissivity = (((float) ((uint16_t) mlx90614.rawEmissivity))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	601a      	str	r2, [r3, #0]
		return BML_OK;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	e000      	b.n	8004bb6 <mlx90614_getEmissivity+0x62>
	}
	return BML_ERROR;
 8004bb4:	2301      	movs	r3, #1
}
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	b002      	add	sp, #8
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	46c0      	nop			; (mov r8, r8)
 8004bc0:	20000416 	.word	0x20000416
 8004bc4:	20000414 	.word	0x20000414
 8004bc8:	477fff00 	.word	0x477fff00

08004bcc <mlx90614_getMax>:
BML_StatusTypeDef mlx90614_setMin(float minTemp) {
	mlx90614.rawMin = mlx90614_calcRawTemp(minTemp);
	return mlx90614_write16(MLX90614_REGISTER_TOMIN, mlx90614.rawMin);
}
//###################################################################################################
BML_StatusTypeDef mlx90614_getMax(float *maxTemp) {
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
	if (mlx90614_read16(MLX90614_REGISTER_TOMAX, &mlx90614.rawMax) == BML_OK) {
 8004bd4:	4b0c      	ldr	r3, [pc, #48]	; (8004c08 <mlx90614_getMax+0x3c>)
 8004bd6:	0019      	movs	r1, r3
 8004bd8:	2020      	movs	r0, #32
 8004bda:	f7ff fef9 	bl	80049d0 <mlx90614_read16>
 8004bde:	1e03      	subs	r3, r0, #0
 8004be0:	d10d      	bne.n	8004bfe <mlx90614_getMax+0x32>
		if (maxTemp != NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d008      	beq.n	8004bfa <mlx90614_getMax+0x2e>
			*maxTemp = mlx90614.rawMax;
 8004be8:	4b08      	ldr	r3, [pc, #32]	; (8004c0c <mlx90614_getMax+0x40>)
 8004bea:	220a      	movs	r2, #10
 8004bec:	5e9b      	ldrsh	r3, [r3, r2]
 8004bee:	0018      	movs	r0, r3
 8004bf0:	f7fb fd72 	bl	80006d8 <__aeabi_i2f>
 8004bf4:	1c02      	adds	r2, r0, #0
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	601a      	str	r2, [r3, #0]
		return BML_OK;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	e000      	b.n	8004c00 <mlx90614_getMax+0x34>
	}
	return BML_ERROR;
 8004bfe:	2301      	movs	r3, #1
}
 8004c00:	0018      	movs	r0, r3
 8004c02:	46bd      	mov	sp, r7
 8004c04:	b002      	add	sp, #8
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	2000041e 	.word	0x2000041e
 8004c0c:	20000414 	.word	0x20000414

08004c10 <mlx90614_getMin>:
//###################################################################################################
BML_StatusTypeDef mlx90614_getMin(float *minTemp) {
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
	if (mlx90614_read16(MLX90614_REGISTER_TOMIN, &mlx90614.rawMin) == BML_OK) {
 8004c18:	4b0c      	ldr	r3, [pc, #48]	; (8004c4c <mlx90614_getMin+0x3c>)
 8004c1a:	0019      	movs	r1, r3
 8004c1c:	2021      	movs	r0, #33	; 0x21
 8004c1e:	f7ff fed7 	bl	80049d0 <mlx90614_read16>
 8004c22:	1e03      	subs	r3, r0, #0
 8004c24:	d10d      	bne.n	8004c42 <mlx90614_getMin+0x32>
		if (minTemp != NULL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d008      	beq.n	8004c3e <mlx90614_getMin+0x2e>
			*minTemp = mlx90614.rawMin;
 8004c2c:	4b08      	ldr	r3, [pc, #32]	; (8004c50 <mlx90614_getMin+0x40>)
 8004c2e:	220c      	movs	r2, #12
 8004c30:	5e9b      	ldrsh	r3, [r3, r2]
 8004c32:	0018      	movs	r0, r3
 8004c34:	f7fb fd50 	bl	80006d8 <__aeabi_i2f>
 8004c38:	1c02      	adds	r2, r0, #0
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	601a      	str	r2, [r3, #0]
		return BML_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	e000      	b.n	8004c44 <mlx90614_getMin+0x34>
	}
	return BML_ERROR;
 8004c42:	2301      	movs	r3, #1
}
 8004c44:	0018      	movs	r0, r3
 8004c46:	46bd      	mov	sp, r7
 8004c48:	b002      	add	sp, #8
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	20000420 	.word	0x20000420
 8004c50:	20000414 	.word	0x20000414

08004c54 <delay>:
		//-----FRAME RATE SETTING-------//
		0x0060, 0xA700, 0x0061, 0x0001, 0x0090, 0x0033, //RTNI setting
		//-------DISPLAY ON------//
		0x0007, 0x0133, };

void delay(unsigned int t) {
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
	for (; t > 0; t--) {
 8004c5c:	e003      	b.n	8004c66 <delay+0x12>
		__asm("nop");
 8004c5e:	46c0      	nop			; (mov r8, r8)
	for (; t > 0; t--) {
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	3b01      	subs	r3, #1
 8004c64:	607b      	str	r3, [r7, #4]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1f8      	bne.n	8004c5e <delay+0xa>
	}
}
 8004c6c:	46c0      	nop			; (mov r8, r8)
 8004c6e:	46c0      	nop			; (mov r8, r8)
 8004c70:	46bd      	mov	sp, r7
 8004c72:	b002      	add	sp, #8
 8004c74:	bd80      	pop	{r7, pc}
	...

08004c78 <GPIO_Init>:
 * 
 * \param 
 * 
 * \return void
 */
static void GPIO_Init(void) {
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b08a      	sub	sp, #40	; 0x28
 8004c7c:	af02      	add	r7, sp, #8
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__GPIOC_CLK_ENABLE()
 8004c7e:	4b5b      	ldr	r3, [pc, #364]	; (8004dec <GPIO_Init+0x174>)
 8004c80:	695a      	ldr	r2, [r3, #20]
 8004c82:	4b5a      	ldr	r3, [pc, #360]	; (8004dec <GPIO_Init+0x174>)
 8004c84:	2180      	movs	r1, #128	; 0x80
 8004c86:	0309      	lsls	r1, r1, #12
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	615a      	str	r2, [r3, #20]
 8004c8c:	4b57      	ldr	r3, [pc, #348]	; (8004dec <GPIO_Init+0x174>)
 8004c8e:	695a      	ldr	r2, [r3, #20]
 8004c90:	2380      	movs	r3, #128	; 0x80
 8004c92:	031b      	lsls	r3, r3, #12
 8004c94:	4013      	ands	r3, r2
 8004c96:	60bb      	str	r3, [r7, #8]
 8004c98:	68bb      	ldr	r3, [r7, #8]
	;
	__GPIOA_CLK_ENABLE()
 8004c9a:	4b54      	ldr	r3, [pc, #336]	; (8004dec <GPIO_Init+0x174>)
 8004c9c:	695a      	ldr	r2, [r3, #20]
 8004c9e:	4b53      	ldr	r3, [pc, #332]	; (8004dec <GPIO_Init+0x174>)
 8004ca0:	2180      	movs	r1, #128	; 0x80
 8004ca2:	0289      	lsls	r1, r1, #10
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	615a      	str	r2, [r3, #20]
 8004ca8:	4b50      	ldr	r3, [pc, #320]	; (8004dec <GPIO_Init+0x174>)
 8004caa:	695a      	ldr	r2, [r3, #20]
 8004cac:	2380      	movs	r3, #128	; 0x80
 8004cae:	029b      	lsls	r3, r3, #10
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	607b      	str	r3, [r7, #4]
 8004cb4:	687b      	ldr	r3, [r7, #4]
	;
	__GPIOB_CLK_ENABLE()
 8004cb6:	4b4d      	ldr	r3, [pc, #308]	; (8004dec <GPIO_Init+0x174>)
 8004cb8:	695a      	ldr	r2, [r3, #20]
 8004cba:	4b4c      	ldr	r3, [pc, #304]	; (8004dec <GPIO_Init+0x174>)
 8004cbc:	2180      	movs	r1, #128	; 0x80
 8004cbe:	02c9      	lsls	r1, r1, #11
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	615a      	str	r2, [r3, #20]
 8004cc4:	4b49      	ldr	r3, [pc, #292]	; (8004dec <GPIO_Init+0x174>)
 8004cc6:	695a      	ldr	r2, [r3, #20]
 8004cc8:	2380      	movs	r3, #128	; 0x80
 8004cca:	02db      	lsls	r3, r3, #11
 8004ccc:	4013      	ands	r3, r2
 8004cce:	603b      	str	r3, [r7, #0]
 8004cd0:	683b      	ldr	r3, [r7, #0]
	;

//	/*Configure GPIO pins : PC1 PC7 */
	gpio_config(PORTC, 1, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8004cd2:	4847      	ldr	r0, [pc, #284]	; (8004df0 <GPIO_Init+0x178>)
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	9301      	str	r3, [sp, #4]
 8004cd8:	2300      	movs	r3, #0
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	2302      	movs	r3, #2
 8004cde:	2201      	movs	r2, #1
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	f7fe ff03 	bl	8003aec <gpio_config>
	gpio_config(PORTC, 7, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8004ce6:	4842      	ldr	r0, [pc, #264]	; (8004df0 <GPIO_Init+0x178>)
 8004ce8:	2300      	movs	r3, #0
 8004cea:	9301      	str	r3, [sp, #4]
 8004cec:	2300      	movs	r3, #0
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	2107      	movs	r1, #7
 8004cf6:	f7fe fef9 	bl	8003aec <gpio_config>

//	/*Configure GPIO pins : PA0 PA1 PA4 PA8 PA9 PA10 */
	gpio_config(PORTA, 0, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8004cfa:	2390      	movs	r3, #144	; 0x90
 8004cfc:	05d8      	lsls	r0, r3, #23
 8004cfe:	2300      	movs	r3, #0
 8004d00:	9301      	str	r3, [sp, #4]
 8004d02:	2300      	movs	r3, #0
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	2302      	movs	r3, #2
 8004d08:	2201      	movs	r2, #1
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	f7fe feee 	bl	8003aec <gpio_config>
	gpio_config(PORTA, 1, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8004d10:	2390      	movs	r3, #144	; 0x90
 8004d12:	05d8      	lsls	r0, r3, #23
 8004d14:	2300      	movs	r3, #0
 8004d16:	9301      	str	r3, [sp, #4]
 8004d18:	2300      	movs	r3, #0
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	2201      	movs	r2, #1
 8004d20:	2101      	movs	r1, #1
 8004d22:	f7fe fee3 	bl	8003aec <gpio_config>
	gpio_config(PORTA, 4, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8004d26:	2390      	movs	r3, #144	; 0x90
 8004d28:	05d8      	lsls	r0, r3, #23
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	9301      	str	r3, [sp, #4]
 8004d2e:	2300      	movs	r3, #0
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	2302      	movs	r3, #2
 8004d34:	2201      	movs	r2, #1
 8004d36:	2104      	movs	r1, #4
 8004d38:	f7fe fed8 	bl	8003aec <gpio_config>
	gpio_config(PORTA, 8, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8004d3c:	2390      	movs	r3, #144	; 0x90
 8004d3e:	05d8      	lsls	r0, r3, #23
 8004d40:	2300      	movs	r3, #0
 8004d42:	9301      	str	r3, [sp, #4]
 8004d44:	2300      	movs	r3, #0
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	2302      	movs	r3, #2
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	2108      	movs	r1, #8
 8004d4e:	f7fe fecd 	bl	8003aec <gpio_config>
	gpio_config(PORTA, 9, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8004d52:	2390      	movs	r3, #144	; 0x90
 8004d54:	05d8      	lsls	r0, r3, #23
 8004d56:	2300      	movs	r3, #0
 8004d58:	9301      	str	r3, [sp, #4]
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	2302      	movs	r3, #2
 8004d60:	2201      	movs	r2, #1
 8004d62:	2109      	movs	r1, #9
 8004d64:	f7fe fec2 	bl	8003aec <gpio_config>
	gpio_config(PORTA, 10, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8004d68:	2390      	movs	r3, #144	; 0x90
 8004d6a:	05d8      	lsls	r0, r3, #23
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	9301      	str	r3, [sp, #4]
 8004d70:	2300      	movs	r3, #0
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	2302      	movs	r3, #2
 8004d76:	2201      	movs	r2, #1
 8004d78:	210a      	movs	r1, #10
 8004d7a:	f7fe feb7 	bl	8003aec <gpio_config>

//	/*Configure GPIO pins : PB0 PB3 PB4 PB5 PB10 */
	gpio_config(PORTB, 0, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8004d7e:	481d      	ldr	r0, [pc, #116]	; (8004df4 <GPIO_Init+0x17c>)
 8004d80:	2300      	movs	r3, #0
 8004d82:	9301      	str	r3, [sp, #4]
 8004d84:	2300      	movs	r3, #0
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	2302      	movs	r3, #2
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	f7fe fead 	bl	8003aec <gpio_config>
	gpio_config(PORTB, 3, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8004d92:	4818      	ldr	r0, [pc, #96]	; (8004df4 <GPIO_Init+0x17c>)
 8004d94:	2300      	movs	r3, #0
 8004d96:	9301      	str	r3, [sp, #4]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	2201      	movs	r2, #1
 8004da0:	2103      	movs	r1, #3
 8004da2:	f7fe fea3 	bl	8003aec <gpio_config>
	gpio_config(PORTB, 4, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8004da6:	4813      	ldr	r0, [pc, #76]	; (8004df4 <GPIO_Init+0x17c>)
 8004da8:	2300      	movs	r3, #0
 8004daa:	9301      	str	r3, [sp, #4]
 8004dac:	2300      	movs	r3, #0
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	2302      	movs	r3, #2
 8004db2:	2201      	movs	r2, #1
 8004db4:	2104      	movs	r1, #4
 8004db6:	f7fe fe99 	bl	8003aec <gpio_config>
	gpio_config(PORTB, 5, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8004dba:	480e      	ldr	r0, [pc, #56]	; (8004df4 <GPIO_Init+0x17c>)
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	9301      	str	r3, [sp, #4]
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	2105      	movs	r1, #5
 8004dca:	f7fe fe8f 	bl	8003aec <gpio_config>
	gpio_config(PORTB, 10, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8004dce:	4809      	ldr	r0, [pc, #36]	; (8004df4 <GPIO_Init+0x17c>)
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	9301      	str	r3, [sp, #4]
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	9300      	str	r3, [sp, #0]
 8004dd8:	2302      	movs	r3, #2
 8004dda:	2201      	movs	r2, #1
 8004ddc:	210a      	movs	r1, #10
 8004dde:	f7fe fe85 	bl	8003aec <gpio_config>
//	gpio_config(PORTB, 10, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTB, 13, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTB, 14, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTB, 15, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTB, 1, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
}
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	46bd      	mov	sp, r7
 8004de6:	b008      	add	sp, #32
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	46c0      	nop			; (mov r8, r8)
 8004dec:	40021000 	.word	0x40021000
 8004df0:	48000800 	.word	0x48000800
 8004df4:	48000400 	.word	0x48000400

08004df8 <LCD_Begin>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Begin(void) {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
	m_width = TFTWIDTH;
 8004dfe:	4b4c      	ldr	r3, [pc, #304]	; (8004f30 <LCD_Begin+0x138>)
 8004e00:	22f0      	movs	r2, #240	; 0xf0
 8004e02:	801a      	strh	r2, [r3, #0]
	m_height = TFTHEIGHT;
 8004e04:	4b4b      	ldr	r3, [pc, #300]	; (8004f34 <LCD_Begin+0x13c>)
 8004e06:	22a0      	movs	r2, #160	; 0xa0
 8004e08:	0052      	lsls	r2, r2, #1
 8004e0a:	801a      	strh	r2, [r3, #0]
	m_rotation = 0;
 8004e0c:	4b4a      	ldr	r3, [pc, #296]	; (8004f38 <LCD_Begin+0x140>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	701a      	strb	r2, [r3, #0]
	m_cursor_y = m_cursor_x = 0;
 8004e12:	4b4a      	ldr	r3, [pc, #296]	; (8004f3c <LCD_Begin+0x144>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	801a      	strh	r2, [r3, #0]
 8004e18:	4b48      	ldr	r3, [pc, #288]	; (8004f3c <LCD_Begin+0x144>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	5e9a      	ldrsh	r2, [r3, r2]
 8004e1e:	4b48      	ldr	r3, [pc, #288]	; (8004f40 <LCD_Begin+0x148>)
 8004e20:	801a      	strh	r2, [r3, #0]
	m_textsize = 4;
 8004e22:	4b48      	ldr	r3, [pc, #288]	; (8004f44 <LCD_Begin+0x14c>)
 8004e24:	2204      	movs	r2, #4
 8004e26:	701a      	strb	r2, [r3, #0]
	m_textcolor = m_textbgcolor = 0xFFFF;
 8004e28:	4b47      	ldr	r3, [pc, #284]	; (8004f48 <LCD_Begin+0x150>)
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	4252      	negs	r2, r2
 8004e2e:	801a      	strh	r2, [r3, #0]
 8004e30:	4b45      	ldr	r3, [pc, #276]	; (8004f48 <LCD_Begin+0x150>)
 8004e32:	881a      	ldrh	r2, [r3, #0]
 8004e34:	4b45      	ldr	r3, [pc, #276]	; (8004f4c <LCD_Begin+0x154>)
 8004e36:	801a      	strh	r2, [r3, #0]
	m_wrap = 1;
 8004e38:	4b45      	ldr	r3, [pc, #276]	; (8004f50 <LCD_Begin+0x158>)
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	701a      	strb	r2, [r3, #0]

	uint8_t i = 0;
 8004e3e:	1dfb      	adds	r3, r7, #7
 8004e40:	2200      	movs	r2, #0
 8004e42:	701a      	strb	r2, [r3, #0]
	uint16_t a, d;

	GPIO_Init();
 8004e44:	f7ff ff18 	bl	8004c78 <GPIO_Init>

	LCD_Reset();
 8004e48:	f000 fac0 	bl	80053cc <LCD_Reset>

	LCD_CS_LOW();
 8004e4c:	4b41      	ldr	r3, [pc, #260]	; (8004f54 <LCD_Begin+0x15c>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	2100      	movs	r1, #0
 8004e52:	0018      	movs	r0, r3
 8004e54:	f7fe ff34 	bl	8003cc0 <gpio_write>

	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 8004e58:	e055      	b.n	8004f06 <LCD_Begin+0x10e>
		a = ST7781_regValues[i++];
 8004e5a:	1dfb      	adds	r3, r7, #7
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	1dfa      	adds	r2, r7, #7
 8004e60:	1c59      	adds	r1, r3, #1
 8004e62:	7011      	strb	r1, [r2, #0]
 8004e64:	0019      	movs	r1, r3
 8004e66:	1d3b      	adds	r3, r7, #4
 8004e68:	4a3b      	ldr	r2, [pc, #236]	; (8004f58 <LCD_Begin+0x160>)
 8004e6a:	0049      	lsls	r1, r1, #1
 8004e6c:	5a8a      	ldrh	r2, [r1, r2]
 8004e6e:	801a      	strh	r2, [r3, #0]
		d = ST7781_regValues[i++];
 8004e70:	1dfb      	adds	r3, r7, #7
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	1dfa      	adds	r2, r7, #7
 8004e76:	1c59      	adds	r1, r3, #1
 8004e78:	7011      	strb	r1, [r2, #0]
 8004e7a:	0019      	movs	r1, r3
 8004e7c:	1cbb      	adds	r3, r7, #2
 8004e7e:	4a36      	ldr	r2, [pc, #216]	; (8004f58 <LCD_Begin+0x160>)
 8004e80:	0049      	lsls	r1, r1, #1
 8004e82:	5a8a      	ldrh	r2, [r1, r2]
 8004e84:	801a      	strh	r2, [r3, #0]
		if (a == TFTLCD_DELAY) {
 8004e86:	1d3b      	adds	r3, r7, #4
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	2bff      	cmp	r3, #255	; 0xff
 8004e8c:	d105      	bne.n	8004e9a <LCD_Begin+0xa2>
			delay(d);
 8004e8e:	1cbb      	adds	r3, r7, #2
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	0018      	movs	r0, r3
 8004e94:	f7ff fede 	bl	8004c54 <delay>
 8004e98:	e035      	b.n	8004f06 <LCD_Begin+0x10e>
		} else {
			LCD_WriteRegister16(a, d);
 8004e9a:	1d3b      	adds	r3, r7, #4
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	0a1b      	lsrs	r3, r3, #8
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	1c7b      	adds	r3, r7, #1
 8004ea4:	701a      	strb	r2, [r3, #0]
 8004ea6:	003b      	movs	r3, r7
 8004ea8:	1d3a      	adds	r2, r7, #4
 8004eaa:	8812      	ldrh	r2, [r2, #0]
 8004eac:	701a      	strb	r2, [r3, #0]
 8004eae:	2390      	movs	r3, #144	; 0x90
 8004eb0:	05db      	lsls	r3, r3, #23
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	2104      	movs	r1, #4
 8004eb6:	0018      	movs	r0, r3
 8004eb8:	f7fe ff02 	bl	8003cc0 <gpio_write>
 8004ebc:	1c7b      	adds	r3, r7, #1
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	f000 fcc5 	bl	8005850 <LCD_Write8>
 8004ec6:	003b      	movs	r3, r7
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	0018      	movs	r0, r3
 8004ecc:	f000 fcc0 	bl	8005850 <LCD_Write8>
 8004ed0:	1cbb      	adds	r3, r7, #2
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	0a1b      	lsrs	r3, r3, #8
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	1c7b      	adds	r3, r7, #1
 8004eda:	701a      	strb	r2, [r3, #0]
 8004edc:	003b      	movs	r3, r7
 8004ede:	1cba      	adds	r2, r7, #2
 8004ee0:	8812      	ldrh	r2, [r2, #0]
 8004ee2:	701a      	strb	r2, [r3, #0]
 8004ee4:	2390      	movs	r3, #144	; 0x90
 8004ee6:	05db      	lsls	r3, r3, #23
 8004ee8:	2201      	movs	r2, #1
 8004eea:	2104      	movs	r1, #4
 8004eec:	0018      	movs	r0, r3
 8004eee:	f7fe fee7 	bl	8003cc0 <gpio_write>
 8004ef2:	1c7b      	adds	r3, r7, #1
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	f000 fcaa 	bl	8005850 <LCD_Write8>
 8004efc:	003b      	movs	r3, r7
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	0018      	movs	r0, r3
 8004f02:	f000 fca5 	bl	8005850 <LCD_Write8>
	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 8004f06:	1dfb      	adds	r3, r7, #7
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	2b83      	cmp	r3, #131	; 0x83
 8004f0c:	d9a5      	bls.n	8004e5a <LCD_Begin+0x62>
		}
	}

	LCD_SetRotation(m_rotation);
 8004f0e:	4b0a      	ldr	r3, [pc, #40]	; (8004f38 <LCD_Begin+0x140>)
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	0018      	movs	r0, r3
 8004f14:	f000 fad6 	bl	80054c4 <LCD_SetRotation>
	LCD_SetAddrWindow(0, 0, TFTWIDTH - 1, TFTHEIGHT - 1);
 8004f18:	2340      	movs	r3, #64	; 0x40
 8004f1a:	33ff      	adds	r3, #255	; 0xff
 8004f1c:	22ef      	movs	r2, #239	; 0xef
 8004f1e:	2100      	movs	r1, #0
 8004f20:	2000      	movs	r0, #0
 8004f22:	f000 fb03 	bl	800552c <LCD_SetAddrWindow>
}
 8004f26:	46c0      	nop			; (mov r8, r8)
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	b002      	add	sp, #8
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	46c0      	nop			; (mov r8, r8)
 8004f30:	20000448 	.word	0x20000448
 8004f34:	2000044a 	.word	0x2000044a
 8004f38:	20000455 	.word	0x20000455
 8004f3c:	2000044c 	.word	0x2000044c
 8004f40:	2000044e 	.word	0x2000044e
 8004f44:	20000454 	.word	0x20000454
 8004f48:	20000452 	.word	0x20000452
 8004f4c:	20000450 	.word	0x20000450
 8004f50:	20000456 	.word	0x20000456
 8004f54:	48000400 	.word	0x48000400
 8004f58:	08008c78 	.word	0x08008c78

08004f5c <LCD_DrawFastHLine>:
 * \param length	Length of the line
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawFastHLine(int16_t x, int16_t y, int16_t length, uint16_t color) {
 8004f5c:	b5b0      	push	{r4, r5, r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	0005      	movs	r5, r0
 8004f64:	000c      	movs	r4, r1
 8004f66:	0010      	movs	r0, r2
 8004f68:	0019      	movs	r1, r3
 8004f6a:	1dbb      	adds	r3, r7, #6
 8004f6c:	1c2a      	adds	r2, r5, #0
 8004f6e:	801a      	strh	r2, [r3, #0]
 8004f70:	1d3b      	adds	r3, r7, #4
 8004f72:	1c22      	adds	r2, r4, #0
 8004f74:	801a      	strh	r2, [r3, #0]
 8004f76:	1cbb      	adds	r3, r7, #2
 8004f78:	1c02      	adds	r2, r0, #0
 8004f7a:	801a      	strh	r2, [r3, #0]
 8004f7c:	003b      	movs	r3, r7
 8004f7e:	1c0a      	adds	r2, r1, #0
 8004f80:	801a      	strh	r2, [r3, #0]
	int16_t x2;

	// Initial off-screen clipping
	if ((length <= 0) || (y < 0) || (y >= m_height) || (x >= m_width) || ((x2 =
 8004f82:	1cbb      	adds	r3, r7, #2
 8004f84:	2200      	movs	r2, #0
 8004f86:	5e9b      	ldrsh	r3, [r3, r2]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	dc00      	bgt.n	8004f8e <LCD_DrawFastHLine+0x32>
 8004f8c:	e075      	b.n	800507a <LCD_DrawFastHLine+0x11e>
 8004f8e:	1d3b      	adds	r3, r7, #4
 8004f90:	2200      	movs	r2, #0
 8004f92:	5e9b      	ldrsh	r3, [r3, r2]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	da00      	bge.n	8004f9a <LCD_DrawFastHLine+0x3e>
 8004f98:	e06f      	b.n	800507a <LCD_DrawFastHLine+0x11e>
 8004f9a:	4b3a      	ldr	r3, [pc, #232]	; (8005084 <LCD_DrawFastHLine+0x128>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	5e9b      	ldrsh	r3, [r3, r2]
 8004fa0:	1d3a      	adds	r2, r7, #4
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	5e52      	ldrsh	r2, [r2, r1]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	da67      	bge.n	800507a <LCD_DrawFastHLine+0x11e>
 8004faa:	4b37      	ldr	r3, [pc, #220]	; (8005088 <LCD_DrawFastHLine+0x12c>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	5e9b      	ldrsh	r3, [r3, r2]
 8004fb0:	1dba      	adds	r2, r7, #6
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	5e52      	ldrsh	r2, [r2, r1]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	da5f      	bge.n	800507a <LCD_DrawFastHLine+0x11e>
			(x + length - 1)) < 0))
 8004fba:	1dbb      	adds	r3, r7, #6
 8004fbc:	881a      	ldrh	r2, [r3, #0]
 8004fbe:	1cbb      	adds	r3, r7, #2
 8004fc0:	881b      	ldrh	r3, [r3, #0]
 8004fc2:	18d3      	adds	r3, r2, r3
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29a      	uxth	r2, r3
	if ((length <= 0) || (y < 0) || (y >= m_height) || (x >= m_width) || ((x2 =
 8004fca:	210e      	movs	r1, #14
 8004fcc:	187b      	adds	r3, r7, r1
 8004fce:	801a      	strh	r2, [r3, #0]
 8004fd0:	187b      	adds	r3, r7, r1
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	5e9b      	ldrsh	r3, [r3, r2]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	db4f      	blt.n	800507a <LCD_DrawFastHLine+0x11e>
		return;

	if (x < 0) { // Clip left
 8004fda:	1dbb      	adds	r3, r7, #6
 8004fdc:	2200      	movs	r2, #0
 8004fde:	5e9b      	ldrsh	r3, [r3, r2]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	da0a      	bge.n	8004ffa <LCD_DrawFastHLine+0x9e>
		length += x;
 8004fe4:	1cbb      	adds	r3, r7, #2
 8004fe6:	881a      	ldrh	r2, [r3, #0]
 8004fe8:	1dbb      	adds	r3, r7, #6
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	18d3      	adds	r3, r2, r3
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	1cbb      	adds	r3, r7, #2
 8004ff2:	801a      	strh	r2, [r3, #0]
		x = 0;
 8004ff4:	1dbb      	adds	r3, r7, #6
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	801a      	strh	r2, [r3, #0]
	}

	if (x2 >= m_width) { // Clip right
 8004ffa:	4b23      	ldr	r3, [pc, #140]	; (8005088 <LCD_DrawFastHLine+0x12c>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	5e9b      	ldrsh	r3, [r3, r2]
 8005000:	210e      	movs	r1, #14
 8005002:	187a      	adds	r2, r7, r1
 8005004:	2000      	movs	r0, #0
 8005006:	5e12      	ldrsh	r2, [r2, r0]
 8005008:	429a      	cmp	r2, r3
 800500a:	db11      	blt.n	8005030 <LCD_DrawFastHLine+0xd4>
		x2 = m_width - 1;
 800500c:	4b1e      	ldr	r3, [pc, #120]	; (8005088 <LCD_DrawFastHLine+0x12c>)
 800500e:	2200      	movs	r2, #0
 8005010:	5e9b      	ldrsh	r3, [r3, r2]
 8005012:	b29b      	uxth	r3, r3
 8005014:	3b01      	subs	r3, #1
 8005016:	b29a      	uxth	r2, r3
 8005018:	187b      	adds	r3, r7, r1
 800501a:	801a      	strh	r2, [r3, #0]
		length = x2 - x + 1;
 800501c:	187b      	adds	r3, r7, r1
 800501e:	881a      	ldrh	r2, [r3, #0]
 8005020:	1dbb      	adds	r3, r7, #6
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	b29b      	uxth	r3, r3
 8005028:	3301      	adds	r3, #1
 800502a:	b29a      	uxth	r2, r3
 800502c:	1cbb      	adds	r3, r7, #2
 800502e:	801a      	strh	r2, [r3, #0]
	}

	LCD_SetAddrWindow(x, y, x2, y);
 8005030:	1dbb      	adds	r3, r7, #6
 8005032:	2000      	movs	r0, #0
 8005034:	5e18      	ldrsh	r0, [r3, r0]
 8005036:	1d3b      	adds	r3, r7, #4
 8005038:	2100      	movs	r1, #0
 800503a:	5e59      	ldrsh	r1, [r3, r1]
 800503c:	230e      	movs	r3, #14
 800503e:	18fb      	adds	r3, r7, r3
 8005040:	2200      	movs	r2, #0
 8005042:	5e9a      	ldrsh	r2, [r3, r2]
 8005044:	1d3b      	adds	r3, r7, #4
 8005046:	2400      	movs	r4, #0
 8005048:	5f1b      	ldrsh	r3, [r3, r4]
 800504a:	f000 fa6f 	bl	800552c <LCD_SetAddrWindow>
	LCD_Flood(color, length);
 800504e:	1cbb      	adds	r3, r7, #2
 8005050:	2200      	movs	r2, #0
 8005052:	5e9a      	ldrsh	r2, [r3, r2]
 8005054:	003b      	movs	r3, r7
 8005056:	881b      	ldrh	r3, [r3, #0]
 8005058:	0011      	movs	r1, r2
 800505a:	0018      	movs	r0, r3
 800505c:	f000 f816 	bl	800508c <LCD_Flood>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 8005060:	4b09      	ldr	r3, [pc, #36]	; (8005088 <LCD_DrawFastHLine+0x12c>)
 8005062:	2200      	movs	r2, #0
 8005064:	5e9b      	ldrsh	r3, [r3, r2]
 8005066:	1e5a      	subs	r2, r3, #1
 8005068:	4b06      	ldr	r3, [pc, #24]	; (8005084 <LCD_DrawFastHLine+0x128>)
 800506a:	2100      	movs	r1, #0
 800506c:	5e5b      	ldrsh	r3, [r3, r1]
 800506e:	3b01      	subs	r3, #1
 8005070:	2100      	movs	r1, #0
 8005072:	2000      	movs	r0, #0
 8005074:	f000 fa5a 	bl	800552c <LCD_SetAddrWindow>
 8005078:	e000      	b.n	800507c <LCD_DrawFastHLine+0x120>
		return;
 800507a:	46c0      	nop			; (mov r8, r8)

}
 800507c:	46bd      	mov	sp, r7
 800507e:	b004      	add	sp, #16
 8005080:	bdb0      	pop	{r4, r5, r7, pc}
 8005082:	46c0      	nop			; (mov r8, r8)
 8005084:	2000044a 	.word	0x2000044a
 8005088:	20000448 	.word	0x20000448

0800508c <LCD_Flood>:
 * \param color	Color
 * \param len	Length
 * 
 * \return void
 */
void LCD_Flood(uint16_t color, uint32_t len) {
 800508c:	b5b0      	push	{r4, r5, r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	0002      	movs	r2, r0
 8005094:	6039      	str	r1, [r7, #0]
 8005096:	1dbb      	adds	r3, r7, #6
 8005098:	801a      	strh	r2, [r3, #0]
	uint16_t blocks;
	uint8_t i, hi = color >> 8, lo = color;
 800509a:	1dbb      	adds	r3, r7, #6
 800509c:	881b      	ldrh	r3, [r3, #0]
 800509e:	0a1b      	lsrs	r3, r3, #8
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	240c      	movs	r4, #12
 80050a4:	193b      	adds	r3, r7, r4
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	250b      	movs	r5, #11
 80050aa:	197b      	adds	r3, r7, r5
 80050ac:	1dba      	adds	r2, r7, #6
 80050ae:	8812      	ldrh	r2, [r2, #0]
 80050b0:	701a      	strb	r2, [r3, #0]

	LCD_CS_LOW();
 80050b2:	4bc5      	ldr	r3, [pc, #788]	; (80053c8 <LCD_Flood+0x33c>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	2100      	movs	r1, #0
 80050b8:	0018      	movs	r0, r3
 80050ba:	f7fe fe01 	bl	8003cc0 <gpio_write>
	LCD_CD_LOW();
 80050be:	2390      	movs	r3, #144	; 0x90
 80050c0:	05db      	lsls	r3, r3, #23
 80050c2:	2200      	movs	r2, #0
 80050c4:	2104      	movs	r1, #4
 80050c6:	0018      	movs	r0, r3
 80050c8:	f7fe fdfa 	bl	8003cc0 <gpio_write>
	LCD_Write8(0x00); // High byte of GRAM register...
 80050cc:	2000      	movs	r0, #0
 80050ce:	f000 fbbf 	bl	8005850 <LCD_Write8>
	LCD_Write8(0x22); // Write data to GRAM
 80050d2:	2022      	movs	r0, #34	; 0x22
 80050d4:	f000 fbbc 	bl	8005850 <LCD_Write8>

	// Write first pixel normally, decrement counter by 1
	LCD_CD_HIGH();
 80050d8:	2390      	movs	r3, #144	; 0x90
 80050da:	05db      	lsls	r3, r3, #23
 80050dc:	2201      	movs	r2, #1
 80050de:	2104      	movs	r1, #4
 80050e0:	0018      	movs	r0, r3
 80050e2:	f7fe fded 	bl	8003cc0 <gpio_write>
	LCD_Write8(hi);
 80050e6:	193b      	adds	r3, r7, r4
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	0018      	movs	r0, r3
 80050ec:	f000 fbb0 	bl	8005850 <LCD_Write8>
	LCD_Write8(lo);
 80050f0:	197b      	adds	r3, r7, r5
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	0018      	movs	r0, r3
 80050f6:	f000 fbab 	bl	8005850 <LCD_Write8>
	len--;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	3b01      	subs	r3, #1
 80050fe:	603b      	str	r3, [r7, #0]

	blocks = (uint16_t) (len / 64); // 64 pixels/block
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	099a      	lsrs	r2, r3, #6
 8005104:	230e      	movs	r3, #14
 8005106:	18fb      	adds	r3, r7, r3
 8005108:	801a      	strh	r2, [r3, #0]
	if (hi == lo) {
 800510a:	193a      	adds	r2, r7, r4
 800510c:	197b      	adds	r3, r7, r5
 800510e:	7812      	ldrb	r2, [r2, #0]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d000      	beq.n	8005118 <LCD_Flood+0x8c>
 8005116:	e129      	b.n	800536c <LCD_Flood+0x2e0>
		// High and low bytes are identical.  Leave prior data
		// on the port(s) and just toggle the write strobe.
		while (blocks--) {
 8005118:	e0ae      	b.n	8005278 <LCD_Flood+0x1ec>
			i = 16; // 64 pixels/block / 4 pixels/pass
 800511a:	230d      	movs	r3, #13
 800511c:	18fb      	adds	r3, r7, r3
 800511e:	2210      	movs	r2, #16
 8005120:	701a      	strb	r2, [r3, #0]
			do {
				LCD_WR_STROBE();
 8005122:	2390      	movs	r3, #144	; 0x90
 8005124:	05db      	lsls	r3, r3, #23
 8005126:	2200      	movs	r2, #0
 8005128:	2101      	movs	r1, #1
 800512a:	0018      	movs	r0, r3
 800512c:	f7fe fdc8 	bl	8003cc0 <gpio_write>
 8005130:	2001      	movs	r0, #1
 8005132:	f7ff fd8f 	bl	8004c54 <delay>
 8005136:	2390      	movs	r3, #144	; 0x90
 8005138:	05db      	lsls	r3, r3, #23
 800513a:	2201      	movs	r2, #1
 800513c:	2101      	movs	r1, #1
 800513e:	0018      	movs	r0, r3
 8005140:	f7fe fdbe 	bl	8003cc0 <gpio_write>
 8005144:	2001      	movs	r0, #1
 8005146:	f7ff fd85 	bl	8004c54 <delay>
				LCD_WR_STROBE();
 800514a:	2390      	movs	r3, #144	; 0x90
 800514c:	05db      	lsls	r3, r3, #23
 800514e:	2200      	movs	r2, #0
 8005150:	2101      	movs	r1, #1
 8005152:	0018      	movs	r0, r3
 8005154:	f7fe fdb4 	bl	8003cc0 <gpio_write>
 8005158:	2001      	movs	r0, #1
 800515a:	f7ff fd7b 	bl	8004c54 <delay>
 800515e:	2390      	movs	r3, #144	; 0x90
 8005160:	05db      	lsls	r3, r3, #23
 8005162:	2201      	movs	r2, #1
 8005164:	2101      	movs	r1, #1
 8005166:	0018      	movs	r0, r3
 8005168:	f7fe fdaa 	bl	8003cc0 <gpio_write>
 800516c:	2001      	movs	r0, #1
 800516e:	f7ff fd71 	bl	8004c54 <delay>
				LCD_WR_STROBE();
 8005172:	2390      	movs	r3, #144	; 0x90
 8005174:	05db      	lsls	r3, r3, #23
 8005176:	2200      	movs	r2, #0
 8005178:	2101      	movs	r1, #1
 800517a:	0018      	movs	r0, r3
 800517c:	f7fe fda0 	bl	8003cc0 <gpio_write>
 8005180:	2001      	movs	r0, #1
 8005182:	f7ff fd67 	bl	8004c54 <delay>
 8005186:	2390      	movs	r3, #144	; 0x90
 8005188:	05db      	lsls	r3, r3, #23
 800518a:	2201      	movs	r2, #1
 800518c:	2101      	movs	r1, #1
 800518e:	0018      	movs	r0, r3
 8005190:	f7fe fd96 	bl	8003cc0 <gpio_write>
 8005194:	2001      	movs	r0, #1
 8005196:	f7ff fd5d 	bl	8004c54 <delay>
				LCD_WR_STROBE(); // 2 bytes/pixel
 800519a:	2390      	movs	r3, #144	; 0x90
 800519c:	05db      	lsls	r3, r3, #23
 800519e:	2200      	movs	r2, #0
 80051a0:	2101      	movs	r1, #1
 80051a2:	0018      	movs	r0, r3
 80051a4:	f7fe fd8c 	bl	8003cc0 <gpio_write>
 80051a8:	2001      	movs	r0, #1
 80051aa:	f7ff fd53 	bl	8004c54 <delay>
 80051ae:	2390      	movs	r3, #144	; 0x90
 80051b0:	05db      	lsls	r3, r3, #23
 80051b2:	2201      	movs	r2, #1
 80051b4:	2101      	movs	r1, #1
 80051b6:	0018      	movs	r0, r3
 80051b8:	f7fe fd82 	bl	8003cc0 <gpio_write>
 80051bc:	2001      	movs	r0, #1
 80051be:	f7ff fd49 	bl	8004c54 <delay>
				LCD_WR_STROBE();
 80051c2:	2390      	movs	r3, #144	; 0x90
 80051c4:	05db      	lsls	r3, r3, #23
 80051c6:	2200      	movs	r2, #0
 80051c8:	2101      	movs	r1, #1
 80051ca:	0018      	movs	r0, r3
 80051cc:	f7fe fd78 	bl	8003cc0 <gpio_write>
 80051d0:	2001      	movs	r0, #1
 80051d2:	f7ff fd3f 	bl	8004c54 <delay>
 80051d6:	2390      	movs	r3, #144	; 0x90
 80051d8:	05db      	lsls	r3, r3, #23
 80051da:	2201      	movs	r2, #1
 80051dc:	2101      	movs	r1, #1
 80051de:	0018      	movs	r0, r3
 80051e0:	f7fe fd6e 	bl	8003cc0 <gpio_write>
 80051e4:	2001      	movs	r0, #1
 80051e6:	f7ff fd35 	bl	8004c54 <delay>
				LCD_WR_STROBE();
 80051ea:	2390      	movs	r3, #144	; 0x90
 80051ec:	05db      	lsls	r3, r3, #23
 80051ee:	2200      	movs	r2, #0
 80051f0:	2101      	movs	r1, #1
 80051f2:	0018      	movs	r0, r3
 80051f4:	f7fe fd64 	bl	8003cc0 <gpio_write>
 80051f8:	2001      	movs	r0, #1
 80051fa:	f7ff fd2b 	bl	8004c54 <delay>
 80051fe:	2390      	movs	r3, #144	; 0x90
 8005200:	05db      	lsls	r3, r3, #23
 8005202:	2201      	movs	r2, #1
 8005204:	2101      	movs	r1, #1
 8005206:	0018      	movs	r0, r3
 8005208:	f7fe fd5a 	bl	8003cc0 <gpio_write>
 800520c:	2001      	movs	r0, #1
 800520e:	f7ff fd21 	bl	8004c54 <delay>
				LCD_WR_STROBE();
 8005212:	2390      	movs	r3, #144	; 0x90
 8005214:	05db      	lsls	r3, r3, #23
 8005216:	2200      	movs	r2, #0
 8005218:	2101      	movs	r1, #1
 800521a:	0018      	movs	r0, r3
 800521c:	f7fe fd50 	bl	8003cc0 <gpio_write>
 8005220:	2001      	movs	r0, #1
 8005222:	f7ff fd17 	bl	8004c54 <delay>
 8005226:	2390      	movs	r3, #144	; 0x90
 8005228:	05db      	lsls	r3, r3, #23
 800522a:	2201      	movs	r2, #1
 800522c:	2101      	movs	r1, #1
 800522e:	0018      	movs	r0, r3
 8005230:	f7fe fd46 	bl	8003cc0 <gpio_write>
 8005234:	2001      	movs	r0, #1
 8005236:	f7ff fd0d 	bl	8004c54 <delay>
				LCD_WR_STROBE(); // x 4 pixels
 800523a:	2390      	movs	r3, #144	; 0x90
 800523c:	05db      	lsls	r3, r3, #23
 800523e:	2200      	movs	r2, #0
 8005240:	2101      	movs	r1, #1
 8005242:	0018      	movs	r0, r3
 8005244:	f7fe fd3c 	bl	8003cc0 <gpio_write>
 8005248:	2001      	movs	r0, #1
 800524a:	f7ff fd03 	bl	8004c54 <delay>
 800524e:	2390      	movs	r3, #144	; 0x90
 8005250:	05db      	lsls	r3, r3, #23
 8005252:	2201      	movs	r2, #1
 8005254:	2101      	movs	r1, #1
 8005256:	0018      	movs	r0, r3
 8005258:	f7fe fd32 	bl	8003cc0 <gpio_write>
 800525c:	2001      	movs	r0, #1
 800525e:	f7ff fcf9 	bl	8004c54 <delay>
			} while (--i);
 8005262:	210d      	movs	r1, #13
 8005264:	187b      	adds	r3, r7, r1
 8005266:	187a      	adds	r2, r7, r1
 8005268:	7812      	ldrb	r2, [r2, #0]
 800526a:	3a01      	subs	r2, #1
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	187b      	adds	r3, r7, r1
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d000      	beq.n	8005278 <LCD_Flood+0x1ec>
 8005276:	e754      	b.n	8005122 <LCD_Flood+0x96>
		while (blocks--) {
 8005278:	220e      	movs	r2, #14
 800527a:	18bb      	adds	r3, r7, r2
 800527c:	881b      	ldrh	r3, [r3, #0]
 800527e:	18ba      	adds	r2, r7, r2
 8005280:	1e59      	subs	r1, r3, #1
 8005282:	8011      	strh	r1, [r2, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d000      	beq.n	800528a <LCD_Flood+0x1fe>
 8005288:	e747      	b.n	800511a <LCD_Flood+0x8e>
		}
		// Fill any remaining pixels (1 to 64)
		for (i = (uint8_t) len & 63; i--;) {
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	b2da      	uxtb	r2, r3
 800528e:	230d      	movs	r3, #13
 8005290:	18fb      	adds	r3, r7, r3
 8005292:	213f      	movs	r1, #63	; 0x3f
 8005294:	400a      	ands	r2, r1
 8005296:	701a      	strb	r2, [r3, #0]
 8005298:	e027      	b.n	80052ea <LCD_Flood+0x25e>
			LCD_WR_STROBE();
 800529a:	2390      	movs	r3, #144	; 0x90
 800529c:	05db      	lsls	r3, r3, #23
 800529e:	2200      	movs	r2, #0
 80052a0:	2101      	movs	r1, #1
 80052a2:	0018      	movs	r0, r3
 80052a4:	f7fe fd0c 	bl	8003cc0 <gpio_write>
 80052a8:	2001      	movs	r0, #1
 80052aa:	f7ff fcd3 	bl	8004c54 <delay>
 80052ae:	2390      	movs	r3, #144	; 0x90
 80052b0:	05db      	lsls	r3, r3, #23
 80052b2:	2201      	movs	r2, #1
 80052b4:	2101      	movs	r1, #1
 80052b6:	0018      	movs	r0, r3
 80052b8:	f7fe fd02 	bl	8003cc0 <gpio_write>
 80052bc:	2001      	movs	r0, #1
 80052be:	f7ff fcc9 	bl	8004c54 <delay>
			LCD_WR_STROBE();
 80052c2:	2390      	movs	r3, #144	; 0x90
 80052c4:	05db      	lsls	r3, r3, #23
 80052c6:	2200      	movs	r2, #0
 80052c8:	2101      	movs	r1, #1
 80052ca:	0018      	movs	r0, r3
 80052cc:	f7fe fcf8 	bl	8003cc0 <gpio_write>
 80052d0:	2001      	movs	r0, #1
 80052d2:	f7ff fcbf 	bl	8004c54 <delay>
 80052d6:	2390      	movs	r3, #144	; 0x90
 80052d8:	05db      	lsls	r3, r3, #23
 80052da:	2201      	movs	r2, #1
 80052dc:	2101      	movs	r1, #1
 80052de:	0018      	movs	r0, r3
 80052e0:	f7fe fcee 	bl	8003cc0 <gpio_write>
 80052e4:	2001      	movs	r0, #1
 80052e6:	f7ff fcb5 	bl	8004c54 <delay>
		for (i = (uint8_t) len & 63; i--;) {
 80052ea:	220d      	movs	r2, #13
 80052ec:	18bb      	adds	r3, r7, r2
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	18ba      	adds	r2, r7, r2
 80052f2:	1e59      	subs	r1, r3, #1
 80052f4:	7011      	strb	r1, [r2, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1cf      	bne.n	800529a <LCD_Flood+0x20e>
 80052fa:	e05b      	b.n	80053b4 <LCD_Flood+0x328>
		}
	} else {
		while (blocks--) {
			i = 16; // 64 pixels/block / 4 pixels/pass
 80052fc:	230d      	movs	r3, #13
 80052fe:	18fb      	adds	r3, r7, r3
 8005300:	2210      	movs	r2, #16
 8005302:	701a      	strb	r2, [r3, #0]
			do {
				LCD_Write8(hi);
 8005304:	240c      	movs	r4, #12
 8005306:	193b      	adds	r3, r7, r4
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	0018      	movs	r0, r3
 800530c:	f000 faa0 	bl	8005850 <LCD_Write8>
				LCD_Write8(lo);
 8005310:	250b      	movs	r5, #11
 8005312:	197b      	adds	r3, r7, r5
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	0018      	movs	r0, r3
 8005318:	f000 fa9a 	bl	8005850 <LCD_Write8>
				LCD_Write8(hi);
 800531c:	193b      	adds	r3, r7, r4
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	0018      	movs	r0, r3
 8005322:	f000 fa95 	bl	8005850 <LCD_Write8>
				LCD_Write8(lo);
 8005326:	197b      	adds	r3, r7, r5
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	0018      	movs	r0, r3
 800532c:	f000 fa90 	bl	8005850 <LCD_Write8>
				LCD_Write8(hi);
 8005330:	193b      	adds	r3, r7, r4
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	0018      	movs	r0, r3
 8005336:	f000 fa8b 	bl	8005850 <LCD_Write8>
				LCD_Write8(lo);
 800533a:	197b      	adds	r3, r7, r5
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	0018      	movs	r0, r3
 8005340:	f000 fa86 	bl	8005850 <LCD_Write8>
				LCD_Write8(hi);
 8005344:	193b      	adds	r3, r7, r4
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	0018      	movs	r0, r3
 800534a:	f000 fa81 	bl	8005850 <LCD_Write8>
				LCD_Write8(lo);
 800534e:	197b      	adds	r3, r7, r5
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	0018      	movs	r0, r3
 8005354:	f000 fa7c 	bl	8005850 <LCD_Write8>
			} while (--i);
 8005358:	210d      	movs	r1, #13
 800535a:	187b      	adds	r3, r7, r1
 800535c:	187a      	adds	r2, r7, r1
 800535e:	7812      	ldrb	r2, [r2, #0]
 8005360:	3a01      	subs	r2, #1
 8005362:	701a      	strb	r2, [r3, #0]
 8005364:	187b      	adds	r3, r7, r1
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1cb      	bne.n	8005304 <LCD_Flood+0x278>
		while (blocks--) {
 800536c:	220e      	movs	r2, #14
 800536e:	18bb      	adds	r3, r7, r2
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	18ba      	adds	r2, r7, r2
 8005374:	1e59      	subs	r1, r3, #1
 8005376:	8011      	strh	r1, [r2, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1bf      	bne.n	80052fc <LCD_Flood+0x270>
		}
		for (i = (uint8_t) len & 63; i--;) {
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	b2da      	uxtb	r2, r3
 8005380:	230d      	movs	r3, #13
 8005382:	18fb      	adds	r3, r7, r3
 8005384:	213f      	movs	r1, #63	; 0x3f
 8005386:	400a      	ands	r2, r1
 8005388:	701a      	strb	r2, [r3, #0]
 800538a:	e00b      	b.n	80053a4 <LCD_Flood+0x318>
			LCD_Write8(hi);
 800538c:	230c      	movs	r3, #12
 800538e:	18fb      	adds	r3, r7, r3
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	0018      	movs	r0, r3
 8005394:	f000 fa5c 	bl	8005850 <LCD_Write8>
			LCD_Write8(lo);
 8005398:	230b      	movs	r3, #11
 800539a:	18fb      	adds	r3, r7, r3
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	0018      	movs	r0, r3
 80053a0:	f000 fa56 	bl	8005850 <LCD_Write8>
		for (i = (uint8_t) len & 63; i--;) {
 80053a4:	220d      	movs	r2, #13
 80053a6:	18bb      	adds	r3, r7, r2
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	18ba      	adds	r2, r7, r2
 80053ac:	1e59      	subs	r1, r3, #1
 80053ae:	7011      	strb	r1, [r2, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1eb      	bne.n	800538c <LCD_Flood+0x300>
		}
	}
	LCD_CS_HIGH();
 80053b4:	4b04      	ldr	r3, [pc, #16]	; (80053c8 <LCD_Flood+0x33c>)
 80053b6:	2201      	movs	r2, #1
 80053b8:	2100      	movs	r1, #0
 80053ba:	0018      	movs	r0, r3
 80053bc:	f7fe fc80 	bl	8003cc0 <gpio_write>
}
 80053c0:	46c0      	nop			; (mov r8, r8)
 80053c2:	46bd      	mov	sp, r7
 80053c4:	b004      	add	sp, #16
 80053c6:	bdb0      	pop	{r4, r5, r7, pc}
 80053c8:	48000400 	.word	0x48000400

080053cc <LCD_Reset>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Reset(void) {
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
	LCD_CS_HIGH();
 80053d2:	4b2f      	ldr	r3, [pc, #188]	; (8005490 <LCD_Reset+0xc4>)
 80053d4:	2201      	movs	r2, #1
 80053d6:	2100      	movs	r1, #0
 80053d8:	0018      	movs	r0, r3
 80053da:	f7fe fc71 	bl	8003cc0 <gpio_write>
	LCD_WR_HIGH();
 80053de:	2390      	movs	r3, #144	; 0x90
 80053e0:	05db      	lsls	r3, r3, #23
 80053e2:	2201      	movs	r2, #1
 80053e4:	2101      	movs	r1, #1
 80053e6:	0018      	movs	r0, r3
 80053e8:	f7fe fc6a 	bl	8003cc0 <gpio_write>
	LCD_RD_HIGH();
 80053ec:	2390      	movs	r3, #144	; 0x90
 80053ee:	05db      	lsls	r3, r3, #23
 80053f0:	2201      	movs	r2, #1
 80053f2:	2100      	movs	r1, #0
 80053f4:	0018      	movs	r0, r3
 80053f6:	f7fe fc63 	bl	8003cc0 <gpio_write>

	LCD_RST_LOW();
 80053fa:	4b26      	ldr	r3, [pc, #152]	; (8005494 <LCD_Reset+0xc8>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	2101      	movs	r1, #1
 8005400:	0018      	movs	r0, r3
 8005402:	f7fe fc5d 	bl	8003cc0 <gpio_write>
	delay(100);
 8005406:	2064      	movs	r0, #100	; 0x64
 8005408:	f7ff fc24 	bl	8004c54 <delay>
	LCD_RST_HIGH();
 800540c:	4b21      	ldr	r3, [pc, #132]	; (8005494 <LCD_Reset+0xc8>)
 800540e:	2201      	movs	r2, #1
 8005410:	2101      	movs	r1, #1
 8005412:	0018      	movs	r0, r3
 8005414:	f7fe fc54 	bl	8003cc0 <gpio_write>

	// Data transfer sync
	LCD_CS_LOW();
 8005418:	4b1d      	ldr	r3, [pc, #116]	; (8005490 <LCD_Reset+0xc4>)
 800541a:	2200      	movs	r2, #0
 800541c:	2100      	movs	r1, #0
 800541e:	0018      	movs	r0, r3
 8005420:	f7fe fc4e 	bl	8003cc0 <gpio_write>

	LCD_CD_LOW();
 8005424:	2390      	movs	r3, #144	; 0x90
 8005426:	05db      	lsls	r3, r3, #23
 8005428:	2200      	movs	r2, #0
 800542a:	2104      	movs	r1, #4
 800542c:	0018      	movs	r0, r3
 800542e:	f7fe fc47 	bl	8003cc0 <gpio_write>
	LCD_Write8(0x00);
 8005432:	2000      	movs	r0, #0
 8005434:	f000 fa0c 	bl	8005850 <LCD_Write8>
	for (uint8_t i = 0; i < 3; i++)
 8005438:	1dfb      	adds	r3, r7, #7
 800543a:	2200      	movs	r2, #0
 800543c:	701a      	strb	r2, [r3, #0]
 800543e:	e018      	b.n	8005472 <LCD_Reset+0xa6>
		LCD_WR_STROBE(); // Three extra 0x00s
 8005440:	2390      	movs	r3, #144	; 0x90
 8005442:	05db      	lsls	r3, r3, #23
 8005444:	2200      	movs	r2, #0
 8005446:	2101      	movs	r1, #1
 8005448:	0018      	movs	r0, r3
 800544a:	f7fe fc39 	bl	8003cc0 <gpio_write>
 800544e:	2001      	movs	r0, #1
 8005450:	f7ff fc00 	bl	8004c54 <delay>
 8005454:	2390      	movs	r3, #144	; 0x90
 8005456:	05db      	lsls	r3, r3, #23
 8005458:	2201      	movs	r2, #1
 800545a:	2101      	movs	r1, #1
 800545c:	0018      	movs	r0, r3
 800545e:	f7fe fc2f 	bl	8003cc0 <gpio_write>
 8005462:	2001      	movs	r0, #1
 8005464:	f7ff fbf6 	bl	8004c54 <delay>
	for (uint8_t i = 0; i < 3; i++)
 8005468:	1dfb      	adds	r3, r7, #7
 800546a:	781a      	ldrb	r2, [r3, #0]
 800546c:	1dfb      	adds	r3, r7, #7
 800546e:	3201      	adds	r2, #1
 8005470:	701a      	strb	r2, [r3, #0]
 8005472:	1dfb      	adds	r3, r7, #7
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	2b02      	cmp	r3, #2
 8005478:	d9e2      	bls.n	8005440 <LCD_Reset+0x74>
	LCD_CS_HIGH();
 800547a:	4b05      	ldr	r3, [pc, #20]	; (8005490 <LCD_Reset+0xc4>)
 800547c:	2201      	movs	r2, #1
 800547e:	2100      	movs	r1, #0
 8005480:	0018      	movs	r0, r3
 8005482:	f7fe fc1d 	bl	8003cc0 <gpio_write>
}
 8005486:	46c0      	nop			; (mov r8, r8)
 8005488:	46bd      	mov	sp, r7
 800548a:	b002      	add	sp, #8
 800548c:	bd80      	pop	{r7, pc}
 800548e:	46c0      	nop			; (mov r8, r8)
 8005490:	48000400 	.word	0x48000400
 8005494:	48000800 	.word	0x48000800

08005498 <LCD_SetTextSize>:
 * 
 * \param s	Size
 * 
 * \return void
 */
void LCD_SetTextSize(uint8_t s) {
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	0002      	movs	r2, r0
 80054a0:	1dfb      	adds	r3, r7, #7
 80054a2:	701a      	strb	r2, [r3, #0]
	m_textsize = (s > 0) ? s : 1;
 80054a4:	1dfb      	adds	r3, r7, #7
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d002      	beq.n	80054b2 <LCD_SetTextSize+0x1a>
 80054ac:	1dfb      	adds	r3, r7, #7
 80054ae:	781a      	ldrb	r2, [r3, #0]
 80054b0:	e000      	b.n	80054b4 <LCD_SetTextSize+0x1c>
 80054b2:	2201      	movs	r2, #1
 80054b4:	4b02      	ldr	r3, [pc, #8]	; (80054c0 <LCD_SetTextSize+0x28>)
 80054b6:	701a      	strb	r2, [r3, #0]
}
 80054b8:	46c0      	nop			; (mov r8, r8)
 80054ba:	46bd      	mov	sp, r7
 80054bc:	b002      	add	sp, #8
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	20000454 	.word	0x20000454

080054c4 <LCD_SetRotation>:
 * 
 * \param x	rotation
 * 
 * \return void
 */
void LCD_SetRotation(uint8_t x) {
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	0002      	movs	r2, r0
 80054cc:	1dfb      	adds	r3, r7, #7
 80054ce:	701a      	strb	r2, [r3, #0]
	m_rotation = (x & 3);
 80054d0:	1dfb      	adds	r3, r7, #7
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	2203      	movs	r2, #3
 80054d6:	4013      	ands	r3, r2
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	4b11      	ldr	r3, [pc, #68]	; (8005520 <LCD_SetRotation+0x5c>)
 80054dc:	701a      	strb	r2, [r3, #0]
	switch (m_rotation) {
 80054de:	4b10      	ldr	r3, [pc, #64]	; (8005520 <LCD_SetRotation+0x5c>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b03      	cmp	r3, #3
 80054e4:	d010      	beq.n	8005508 <LCD_SetRotation+0x44>
 80054e6:	dc17      	bgt.n	8005518 <LCD_SetRotation+0x54>
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d005      	beq.n	80054f8 <LCD_SetRotation+0x34>
 80054ec:	dc14      	bgt.n	8005518 <LCD_SetRotation+0x54>
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <LCD_SetRotation+0x34>
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d008      	beq.n	8005508 <LCD_SetRotation+0x44>
	case 3:
		m_width = TFTHEIGHT;
		m_height = TFTWIDTH;
		break;
	}
}
 80054f6:	e00f      	b.n	8005518 <LCD_SetRotation+0x54>
		m_width = TFTWIDTH;
 80054f8:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <LCD_SetRotation+0x60>)
 80054fa:	22f0      	movs	r2, #240	; 0xf0
 80054fc:	801a      	strh	r2, [r3, #0]
		m_height = TFTHEIGHT;
 80054fe:	4b0a      	ldr	r3, [pc, #40]	; (8005528 <LCD_SetRotation+0x64>)
 8005500:	22a0      	movs	r2, #160	; 0xa0
 8005502:	0052      	lsls	r2, r2, #1
 8005504:	801a      	strh	r2, [r3, #0]
		break;
 8005506:	e007      	b.n	8005518 <LCD_SetRotation+0x54>
		m_width = TFTHEIGHT;
 8005508:	4b06      	ldr	r3, [pc, #24]	; (8005524 <LCD_SetRotation+0x60>)
 800550a:	22a0      	movs	r2, #160	; 0xa0
 800550c:	0052      	lsls	r2, r2, #1
 800550e:	801a      	strh	r2, [r3, #0]
		m_height = TFTWIDTH;
 8005510:	4b05      	ldr	r3, [pc, #20]	; (8005528 <LCD_SetRotation+0x64>)
 8005512:	22f0      	movs	r2, #240	; 0xf0
 8005514:	801a      	strh	r2, [r3, #0]
		break;
 8005516:	46c0      	nop			; (mov r8, r8)
}
 8005518:	46c0      	nop			; (mov r8, r8)
 800551a:	46bd      	mov	sp, r7
 800551c:	b002      	add	sp, #8
 800551e:	bd80      	pop	{r7, pc}
 8005520:	20000455 	.word	0x20000455
 8005524:	20000448 	.word	0x20000448
 8005528:	2000044a 	.word	0x2000044a

0800552c <LCD_SetAddrWindow>:
 * \param x2
 * \param y2
 * 
 * \return void
 */
void LCD_SetAddrWindow(int x1, int y1, int x2, int y2) {
 800552c:	b5b0      	push	{r4, r5, r7, lr}
 800552e:	b08a      	sub	sp, #40	; 0x28
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
 8005538:	603b      	str	r3, [r7, #0]

	LCD_CS_LOW();
 800553a:	4bc3      	ldr	r3, [pc, #780]	; (8005848 <LCD_SetAddrWindow+0x31c>)
 800553c:	2200      	movs	r2, #0
 800553e:	2100      	movs	r1, #0
 8005540:	0018      	movs	r0, r3
 8005542:	f7fe fbbd 	bl	8003cc0 <gpio_write>
	// set to the top-left corner -- although fill operations can be
	// done in any direction, the current screen rotation is applied
	// because some users find it disconcerting when a fill does not
	// occur top-to-bottom.
	int x, y, t;
	switch (m_rotation) {
 8005546:	4bc1      	ldr	r3, [pc, #772]	; (800584c <LCD_SetAddrWindow+0x320>)
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	2b03      	cmp	r3, #3
 800554c:	d037      	beq.n	80055be <LCD_SetAddrWindow+0x92>
 800554e:	dc03      	bgt.n	8005558 <LCD_SetAddrWindow+0x2c>
 8005550:	2b01      	cmp	r3, #1
 8005552:	d006      	beq.n	8005562 <LCD_SetAddrWindow+0x36>
 8005554:	2b02      	cmp	r3, #2
 8005556:	d017      	beq.n	8005588 <LCD_SetAddrWindow+0x5c>
	default:
		x = x1;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	627b      	str	r3, [r7, #36]	; 0x24
		y = y1;
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	623b      	str	r3, [r7, #32]
		break;
 8005560:	e042      	b.n	80055e8 <LCD_SetAddrWindow+0xbc>
	case 1:
		t = y1;
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	61fb      	str	r3, [r7, #28]
		y1 = x1;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	60bb      	str	r3, [r7, #8]
		x1 = TFTWIDTH - 1 - y2;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	22ef      	movs	r2, #239	; 0xef
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	60fb      	str	r3, [r7, #12]
		y2 = x2;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	603b      	str	r3, [r7, #0]
		x2 = TFTWIDTH - 1 - t;
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	22ef      	movs	r2, #239	; 0xef
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	607b      	str	r3, [r7, #4]
		x = x2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
		y = y1;
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	623b      	str	r3, [r7, #32]
		break;
 8005586:	e02f      	b.n	80055e8 <LCD_SetAddrWindow+0xbc>
	case 2:
		t = x1;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	61fb      	str	r3, [r7, #28]
		x1 = TFTWIDTH - 1 - x2;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	22ef      	movs	r2, #239	; 0xef
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	60fb      	str	r3, [r7, #12]
		x2 = TFTWIDTH - 1 - t;
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	22ef      	movs	r2, #239	; 0xef
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	607b      	str	r3, [r7, #4]
		t = y1;
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	61fb      	str	r3, [r7, #28]
		y1 = TFTHEIGHT - 1 - y2;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	2240      	movs	r2, #64	; 0x40
 80055a4:	32ff      	adds	r2, #255	; 0xff
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	60bb      	str	r3, [r7, #8]
		y2 = TFTHEIGHT - 1 - t;
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	2240      	movs	r2, #64	; 0x40
 80055ae:	32ff      	adds	r2, #255	; 0xff
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	603b      	str	r3, [r7, #0]
		x = x2;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	627b      	str	r3, [r7, #36]	; 0x24
		y = y2;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	623b      	str	r3, [r7, #32]
		break;
 80055bc:	e014      	b.n	80055e8 <LCD_SetAddrWindow+0xbc>
	case 3:
		t = x1;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	61fb      	str	r3, [r7, #28]
		x1 = y1;
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	60fb      	str	r3, [r7, #12]
		y1 = TFTHEIGHT - 1 - x2;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2240      	movs	r2, #64	; 0x40
 80055ca:	32ff      	adds	r2, #255	; 0xff
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	60bb      	str	r3, [r7, #8]
		x2 = y2;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	607b      	str	r3, [r7, #4]
		y2 = TFTHEIGHT - 1 - t;
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	2240      	movs	r2, #64	; 0x40
 80055d8:	32ff      	adds	r2, #255	; 0xff
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	603b      	str	r3, [r7, #0]
		x = x1;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	627b      	str	r3, [r7, #36]	; 0x24
		y = y2;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	623b      	str	r3, [r7, #32]
		break;
 80055e6:	46c0      	nop			; (mov r8, r8)
	}

	LCD_WriteRegister16(0x0050, x1); // Set address window
 80055e8:	241b      	movs	r4, #27
 80055ea:	193b      	adds	r3, r7, r4
 80055ec:	2200      	movs	r2, #0
 80055ee:	701a      	strb	r2, [r3, #0]
 80055f0:	251a      	movs	r5, #26
 80055f2:	197b      	adds	r3, r7, r5
 80055f4:	2250      	movs	r2, #80	; 0x50
 80055f6:	701a      	strb	r2, [r3, #0]
 80055f8:	2390      	movs	r3, #144	; 0x90
 80055fa:	05db      	lsls	r3, r3, #23
 80055fc:	2200      	movs	r2, #0
 80055fe:	2104      	movs	r1, #4
 8005600:	0018      	movs	r0, r3
 8005602:	f7fe fb5d 	bl	8003cc0 <gpio_write>
 8005606:	193b      	adds	r3, r7, r4
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	0018      	movs	r0, r3
 800560c:	f000 f920 	bl	8005850 <LCD_Write8>
 8005610:	197b      	adds	r3, r7, r5
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	0018      	movs	r0, r3
 8005616:	f000 f91b 	bl	8005850 <LCD_Write8>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	121a      	asrs	r2, r3, #8
 800561e:	193b      	adds	r3, r7, r4
 8005620:	701a      	strb	r2, [r3, #0]
 8005622:	197b      	adds	r3, r7, r5
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	701a      	strb	r2, [r3, #0]
 8005628:	2390      	movs	r3, #144	; 0x90
 800562a:	05db      	lsls	r3, r3, #23
 800562c:	2201      	movs	r2, #1
 800562e:	2104      	movs	r1, #4
 8005630:	0018      	movs	r0, r3
 8005632:	f7fe fb45 	bl	8003cc0 <gpio_write>
 8005636:	193b      	adds	r3, r7, r4
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	0018      	movs	r0, r3
 800563c:	f000 f908 	bl	8005850 <LCD_Write8>
 8005640:	197b      	adds	r3, r7, r5
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	0018      	movs	r0, r3
 8005646:	f000 f903 	bl	8005850 <LCD_Write8>
	LCD_WriteRegister16(0x0051, x2);
 800564a:	2419      	movs	r4, #25
 800564c:	193b      	adds	r3, r7, r4
 800564e:	2200      	movs	r2, #0
 8005650:	701a      	strb	r2, [r3, #0]
 8005652:	2518      	movs	r5, #24
 8005654:	197b      	adds	r3, r7, r5
 8005656:	2251      	movs	r2, #81	; 0x51
 8005658:	701a      	strb	r2, [r3, #0]
 800565a:	2390      	movs	r3, #144	; 0x90
 800565c:	05db      	lsls	r3, r3, #23
 800565e:	2200      	movs	r2, #0
 8005660:	2104      	movs	r1, #4
 8005662:	0018      	movs	r0, r3
 8005664:	f7fe fb2c 	bl	8003cc0 <gpio_write>
 8005668:	193b      	adds	r3, r7, r4
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	0018      	movs	r0, r3
 800566e:	f000 f8ef 	bl	8005850 <LCD_Write8>
 8005672:	197b      	adds	r3, r7, r5
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	0018      	movs	r0, r3
 8005678:	f000 f8ea 	bl	8005850 <LCD_Write8>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	121a      	asrs	r2, r3, #8
 8005680:	193b      	adds	r3, r7, r4
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	197b      	adds	r3, r7, r5
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	701a      	strb	r2, [r3, #0]
 800568a:	2390      	movs	r3, #144	; 0x90
 800568c:	05db      	lsls	r3, r3, #23
 800568e:	2201      	movs	r2, #1
 8005690:	2104      	movs	r1, #4
 8005692:	0018      	movs	r0, r3
 8005694:	f7fe fb14 	bl	8003cc0 <gpio_write>
 8005698:	193b      	adds	r3, r7, r4
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	0018      	movs	r0, r3
 800569e:	f000 f8d7 	bl	8005850 <LCD_Write8>
 80056a2:	197b      	adds	r3, r7, r5
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	0018      	movs	r0, r3
 80056a8:	f000 f8d2 	bl	8005850 <LCD_Write8>
	LCD_WriteRegister16(0x0052, y1);
 80056ac:	2417      	movs	r4, #23
 80056ae:	193b      	adds	r3, r7, r4
 80056b0:	2200      	movs	r2, #0
 80056b2:	701a      	strb	r2, [r3, #0]
 80056b4:	2516      	movs	r5, #22
 80056b6:	197b      	adds	r3, r7, r5
 80056b8:	2252      	movs	r2, #82	; 0x52
 80056ba:	701a      	strb	r2, [r3, #0]
 80056bc:	2390      	movs	r3, #144	; 0x90
 80056be:	05db      	lsls	r3, r3, #23
 80056c0:	2200      	movs	r2, #0
 80056c2:	2104      	movs	r1, #4
 80056c4:	0018      	movs	r0, r3
 80056c6:	f7fe fafb 	bl	8003cc0 <gpio_write>
 80056ca:	193b      	adds	r3, r7, r4
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	0018      	movs	r0, r3
 80056d0:	f000 f8be 	bl	8005850 <LCD_Write8>
 80056d4:	197b      	adds	r3, r7, r5
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	0018      	movs	r0, r3
 80056da:	f000 f8b9 	bl	8005850 <LCD_Write8>
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	121a      	asrs	r2, r3, #8
 80056e2:	193b      	adds	r3, r7, r4
 80056e4:	701a      	strb	r2, [r3, #0]
 80056e6:	197b      	adds	r3, r7, r5
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	701a      	strb	r2, [r3, #0]
 80056ec:	2390      	movs	r3, #144	; 0x90
 80056ee:	05db      	lsls	r3, r3, #23
 80056f0:	2201      	movs	r2, #1
 80056f2:	2104      	movs	r1, #4
 80056f4:	0018      	movs	r0, r3
 80056f6:	f7fe fae3 	bl	8003cc0 <gpio_write>
 80056fa:	193b      	adds	r3, r7, r4
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	0018      	movs	r0, r3
 8005700:	f000 f8a6 	bl	8005850 <LCD_Write8>
 8005704:	197b      	adds	r3, r7, r5
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	0018      	movs	r0, r3
 800570a:	f000 f8a1 	bl	8005850 <LCD_Write8>
	LCD_WriteRegister16(0x0053, y2);
 800570e:	2415      	movs	r4, #21
 8005710:	193b      	adds	r3, r7, r4
 8005712:	2200      	movs	r2, #0
 8005714:	701a      	strb	r2, [r3, #0]
 8005716:	2514      	movs	r5, #20
 8005718:	197b      	adds	r3, r7, r5
 800571a:	2253      	movs	r2, #83	; 0x53
 800571c:	701a      	strb	r2, [r3, #0]
 800571e:	2390      	movs	r3, #144	; 0x90
 8005720:	05db      	lsls	r3, r3, #23
 8005722:	2200      	movs	r2, #0
 8005724:	2104      	movs	r1, #4
 8005726:	0018      	movs	r0, r3
 8005728:	f7fe faca 	bl	8003cc0 <gpio_write>
 800572c:	193b      	adds	r3, r7, r4
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	0018      	movs	r0, r3
 8005732:	f000 f88d 	bl	8005850 <LCD_Write8>
 8005736:	197b      	adds	r3, r7, r5
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	0018      	movs	r0, r3
 800573c:	f000 f888 	bl	8005850 <LCD_Write8>
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	121a      	asrs	r2, r3, #8
 8005744:	193b      	adds	r3, r7, r4
 8005746:	701a      	strb	r2, [r3, #0]
 8005748:	197b      	adds	r3, r7, r5
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	701a      	strb	r2, [r3, #0]
 800574e:	2390      	movs	r3, #144	; 0x90
 8005750:	05db      	lsls	r3, r3, #23
 8005752:	2201      	movs	r2, #1
 8005754:	2104      	movs	r1, #4
 8005756:	0018      	movs	r0, r3
 8005758:	f7fe fab2 	bl	8003cc0 <gpio_write>
 800575c:	193b      	adds	r3, r7, r4
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	0018      	movs	r0, r3
 8005762:	f000 f875 	bl	8005850 <LCD_Write8>
 8005766:	197b      	adds	r3, r7, r5
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	0018      	movs	r0, r3
 800576c:	f000 f870 	bl	8005850 <LCD_Write8>
	LCD_WriteRegister16(0x0020, x); // Set address counter to top left
 8005770:	2413      	movs	r4, #19
 8005772:	193b      	adds	r3, r7, r4
 8005774:	2200      	movs	r2, #0
 8005776:	701a      	strb	r2, [r3, #0]
 8005778:	2512      	movs	r5, #18
 800577a:	197b      	adds	r3, r7, r5
 800577c:	2220      	movs	r2, #32
 800577e:	701a      	strb	r2, [r3, #0]
 8005780:	2390      	movs	r3, #144	; 0x90
 8005782:	05db      	lsls	r3, r3, #23
 8005784:	2200      	movs	r2, #0
 8005786:	2104      	movs	r1, #4
 8005788:	0018      	movs	r0, r3
 800578a:	f7fe fa99 	bl	8003cc0 <gpio_write>
 800578e:	193b      	adds	r3, r7, r4
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	0018      	movs	r0, r3
 8005794:	f000 f85c 	bl	8005850 <LCD_Write8>
 8005798:	197b      	adds	r3, r7, r5
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	0018      	movs	r0, r3
 800579e:	f000 f857 	bl	8005850 <LCD_Write8>
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	121a      	asrs	r2, r3, #8
 80057a6:	193b      	adds	r3, r7, r4
 80057a8:	701a      	strb	r2, [r3, #0]
 80057aa:	197b      	adds	r3, r7, r5
 80057ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ae:	701a      	strb	r2, [r3, #0]
 80057b0:	2390      	movs	r3, #144	; 0x90
 80057b2:	05db      	lsls	r3, r3, #23
 80057b4:	2201      	movs	r2, #1
 80057b6:	2104      	movs	r1, #4
 80057b8:	0018      	movs	r0, r3
 80057ba:	f7fe fa81 	bl	8003cc0 <gpio_write>
 80057be:	193b      	adds	r3, r7, r4
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	0018      	movs	r0, r3
 80057c4:	f000 f844 	bl	8005850 <LCD_Write8>
 80057c8:	197b      	adds	r3, r7, r5
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	0018      	movs	r0, r3
 80057ce:	f000 f83f 	bl	8005850 <LCD_Write8>
	LCD_WriteRegister16(0x0021, y);
 80057d2:	2411      	movs	r4, #17
 80057d4:	193b      	adds	r3, r7, r4
 80057d6:	2200      	movs	r2, #0
 80057d8:	701a      	strb	r2, [r3, #0]
 80057da:	2510      	movs	r5, #16
 80057dc:	197b      	adds	r3, r7, r5
 80057de:	2221      	movs	r2, #33	; 0x21
 80057e0:	701a      	strb	r2, [r3, #0]
 80057e2:	2390      	movs	r3, #144	; 0x90
 80057e4:	05db      	lsls	r3, r3, #23
 80057e6:	2200      	movs	r2, #0
 80057e8:	2104      	movs	r1, #4
 80057ea:	0018      	movs	r0, r3
 80057ec:	f7fe fa68 	bl	8003cc0 <gpio_write>
 80057f0:	193b      	adds	r3, r7, r4
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	0018      	movs	r0, r3
 80057f6:	f000 f82b 	bl	8005850 <LCD_Write8>
 80057fa:	197b      	adds	r3, r7, r5
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	0018      	movs	r0, r3
 8005800:	f000 f826 	bl	8005850 <LCD_Write8>
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	121a      	asrs	r2, r3, #8
 8005808:	193b      	adds	r3, r7, r4
 800580a:	701a      	strb	r2, [r3, #0]
 800580c:	197b      	adds	r3, r7, r5
 800580e:	6a3a      	ldr	r2, [r7, #32]
 8005810:	701a      	strb	r2, [r3, #0]
 8005812:	2390      	movs	r3, #144	; 0x90
 8005814:	05db      	lsls	r3, r3, #23
 8005816:	2201      	movs	r2, #1
 8005818:	2104      	movs	r1, #4
 800581a:	0018      	movs	r0, r3
 800581c:	f7fe fa50 	bl	8003cc0 <gpio_write>
 8005820:	193b      	adds	r3, r7, r4
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	0018      	movs	r0, r3
 8005826:	f000 f813 	bl	8005850 <LCD_Write8>
 800582a:	197b      	adds	r3, r7, r5
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	0018      	movs	r0, r3
 8005830:	f000 f80e 	bl	8005850 <LCD_Write8>

	LCD_CS_HIGH();
 8005834:	4b04      	ldr	r3, [pc, #16]	; (8005848 <LCD_SetAddrWindow+0x31c>)
 8005836:	2201      	movs	r2, #1
 8005838:	2100      	movs	r1, #0
 800583a:	0018      	movs	r0, r3
 800583c:	f7fe fa40 	bl	8003cc0 <gpio_write>
}
 8005840:	46c0      	nop			; (mov r8, r8)
 8005842:	46bd      	mov	sp, r7
 8005844:	b00a      	add	sp, #40	; 0x28
 8005846:	bdb0      	pop	{r4, r5, r7, pc}
 8005848:	48000400 	.word	0x48000400
 800584c:	20000455 	.word	0x20000455

08005850 <LCD_Write8>:
 * 
 * \param data	8-Bit Data
 * 
 * \return void
 */
static inline void LCD_Write8(uint8_t data) {
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	0002      	movs	r2, r0
 8005858:	1dfb      	adds	r3, r7, #7
 800585a:	701a      	strb	r2, [r3, #0]
	// GPIOB, GPIO_PIN_5  -> BIT 4 -> 0x10
	// GPIOB, GPIO_PIN_4  -> BIT 5 -> 0x20
	// GPIOB, GPIO_PIN_10 -> BIT 6 -> 0x40
	// GPIOA, GPIO_PIN_8  -> BIT 7 -> 0x80

	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 800585c:	2390      	movs	r3, #144	; 0x90
 800585e:	05db      	lsls	r3, r3, #23
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	4a33      	ldr	r2, [pc, #204]	; (8005930 <LCD_Write8+0xe0>)
 8005864:	401a      	ands	r2, r3
 8005866:	1dfb      	adds	r3, r7, #7
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	025b      	lsls	r3, r3, #9
 800586c:	0019      	movs	r1, r3
 800586e:	2380      	movs	r3, #128	; 0x80
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	400b      	ands	r3, r1
 8005874:	431a      	orrs	r2, r3
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 8005876:	1dfb      	adds	r3, r7, #7
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	021b      	lsls	r3, r3, #8
 800587c:	0019      	movs	r1, r3
 800587e:	2380      	movs	r3, #128	; 0x80
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	400b      	ands	r3, r1
 8005884:	431a      	orrs	r2, r3
 8005886:	0011      	movs	r1, r2
 8005888:	1dfb      	adds	r3, r7, #7
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	005b      	lsls	r3, r3, #1
 800588e:	001a      	movs	r2, r3
 8005890:	2380      	movs	r3, #128	; 0x80
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	401a      	ands	r2, r3
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 8005896:	2390      	movs	r3, #144	; 0x90
 8005898:	05db      	lsls	r3, r3, #23
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 800589a:	430a      	orrs	r2, r1
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 800589c:	615a      	str	r2, [r3, #20]
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 800589e:	4b25      	ldr	r3, [pc, #148]	; (8005934 <LCD_Write8+0xe4>)
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	4a25      	ldr	r2, [pc, #148]	; (8005938 <LCD_Write8+0xe8>)
 80058a4:	401a      	ands	r2, r3
 80058a6:	1dfb      	adds	r3, r7, #7
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2108      	movs	r1, #8
 80058ac:	400b      	ands	r3, r1
 80058ae:	431a      	orrs	r2, r3
 80058b0:	1dfb      	adds	r3, r7, #7
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	0019      	movs	r1, r3
 80058b8:	2320      	movs	r3, #32
 80058ba:	400b      	ands	r3, r1
 80058bc:	431a      	orrs	r2, r3
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 80058be:	1dfb      	adds	r3, r7, #7
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	105b      	asrs	r3, r3, #1
 80058c4:	0019      	movs	r1, r3
 80058c6:	2310      	movs	r3, #16
 80058c8:	400b      	ands	r3, r1
 80058ca:	431a      	orrs	r2, r3
 80058cc:	0011      	movs	r1, r2
 80058ce:	1dfb      	adds	r3, r7, #7
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	011b      	lsls	r3, r3, #4
 80058d4:	001a      	movs	r2, r3
 80058d6:	2380      	movs	r3, #128	; 0x80
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	401a      	ands	r2, r3
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 80058dc:	4b15      	ldr	r3, [pc, #84]	; (8005934 <LCD_Write8+0xe4>)
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 80058de:	430a      	orrs	r2, r1
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 80058e0:	615a      	str	r2, [r3, #20]
	GPIOC->ODR = (GPIOC->ODR & 0xFF7F) | ((data & 0x02) << 6);
 80058e2:	4b16      	ldr	r3, [pc, #88]	; (800593c <LCD_Write8+0xec>)
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	4a16      	ldr	r2, [pc, #88]	; (8005940 <LCD_Write8+0xf0>)
 80058e8:	4013      	ands	r3, r2
 80058ea:	0019      	movs	r1, r3
 80058ec:	1dfb      	adds	r3, r7, #7
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	019b      	lsls	r3, r3, #6
 80058f2:	001a      	movs	r2, r3
 80058f4:	2380      	movs	r3, #128	; 0x80
 80058f6:	401a      	ands	r2, r3
 80058f8:	4b10      	ldr	r3, [pc, #64]	; (800593c <LCD_Write8+0xec>)
 80058fa:	430a      	orrs	r2, r1
 80058fc:	615a      	str	r2, [r3, #20]
//	GPIOB->ODR = (GPIOB->ODR & 0x1BC5) | ((data & 0x01) << 3)
//			| ((data & 0x02) << 4) | ((data & 0x04) << 2) | ((data & 0x08) << 7)
//			| ((data & 0x10) << 9) | ((data & 0x20) << 9) | ((data & 0x40) << 9)
//			| ((data & 0x80) >> 6);

	LCD_WR_STROBE();
 80058fe:	2390      	movs	r3, #144	; 0x90
 8005900:	05db      	lsls	r3, r3, #23
 8005902:	2200      	movs	r2, #0
 8005904:	2101      	movs	r1, #1
 8005906:	0018      	movs	r0, r3
 8005908:	f7fe f9da 	bl	8003cc0 <gpio_write>
 800590c:	2001      	movs	r0, #1
 800590e:	f7ff f9a1 	bl	8004c54 <delay>
 8005912:	2390      	movs	r3, #144	; 0x90
 8005914:	05db      	lsls	r3, r3, #23
 8005916:	2201      	movs	r2, #1
 8005918:	2101      	movs	r1, #1
 800591a:	0018      	movs	r0, r3
 800591c:	f7fe f9d0 	bl	8003cc0 <gpio_write>
 8005920:	2001      	movs	r0, #1
 8005922:	f7ff f997 	bl	8004c54 <delay>
}
 8005926:	46c0      	nop			; (mov r8, r8)
 8005928:	46bd      	mov	sp, r7
 800592a:	b002      	add	sp, #8
 800592c:	bd80      	pop	{r7, pc}
 800592e:	46c0      	nop			; (mov r8, r8)
 8005930:	0000f8ff 	.word	0x0000f8ff
 8005934:	48000400 	.word	0x48000400
 8005938:	0000fbc7 	.word	0x0000fbc7
 800593c:	48000800 	.word	0x48000800
 8005940:	0000ff7f 	.word	0x0000ff7f

08005944 <__errno>:
 8005944:	4b01      	ldr	r3, [pc, #4]	; (800594c <__errno+0x8>)
 8005946:	6818      	ldr	r0, [r3, #0]
 8005948:	4770      	bx	lr
 800594a:	46c0      	nop			; (mov r8, r8)
 800594c:	2000004c 	.word	0x2000004c

08005950 <__libc_init_array>:
 8005950:	b570      	push	{r4, r5, r6, lr}
 8005952:	2600      	movs	r6, #0
 8005954:	4d0c      	ldr	r5, [pc, #48]	; (8005988 <__libc_init_array+0x38>)
 8005956:	4c0d      	ldr	r4, [pc, #52]	; (800598c <__libc_init_array+0x3c>)
 8005958:	1b64      	subs	r4, r4, r5
 800595a:	10a4      	asrs	r4, r4, #2
 800595c:	42a6      	cmp	r6, r4
 800595e:	d109      	bne.n	8005974 <__libc_init_array+0x24>
 8005960:	2600      	movs	r6, #0
 8005962:	f002 ffdb 	bl	800891c <_init>
 8005966:	4d0a      	ldr	r5, [pc, #40]	; (8005990 <__libc_init_array+0x40>)
 8005968:	4c0a      	ldr	r4, [pc, #40]	; (8005994 <__libc_init_array+0x44>)
 800596a:	1b64      	subs	r4, r4, r5
 800596c:	10a4      	asrs	r4, r4, #2
 800596e:	42a6      	cmp	r6, r4
 8005970:	d105      	bne.n	800597e <__libc_init_array+0x2e>
 8005972:	bd70      	pop	{r4, r5, r6, pc}
 8005974:	00b3      	lsls	r3, r6, #2
 8005976:	58eb      	ldr	r3, [r5, r3]
 8005978:	4798      	blx	r3
 800597a:	3601      	adds	r6, #1
 800597c:	e7ee      	b.n	800595c <__libc_init_array+0xc>
 800597e:	00b3      	lsls	r3, r6, #2
 8005980:	58eb      	ldr	r3, [r5, r3]
 8005982:	4798      	blx	r3
 8005984:	3601      	adds	r6, #1
 8005986:	e7f2      	b.n	800596e <__libc_init_array+0x1e>
 8005988:	0800915c 	.word	0x0800915c
 800598c:	0800915c 	.word	0x0800915c
 8005990:	0800915c 	.word	0x0800915c
 8005994:	08009160 	.word	0x08009160

08005998 <memset>:
 8005998:	0003      	movs	r3, r0
 800599a:	1882      	adds	r2, r0, r2
 800599c:	4293      	cmp	r3, r2
 800599e:	d100      	bne.n	80059a2 <memset+0xa>
 80059a0:	4770      	bx	lr
 80059a2:	7019      	strb	r1, [r3, #0]
 80059a4:	3301      	adds	r3, #1
 80059a6:	e7f9      	b.n	800599c <memset+0x4>

080059a8 <__cvt>:
 80059a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059aa:	001e      	movs	r6, r3
 80059ac:	2300      	movs	r3, #0
 80059ae:	0014      	movs	r4, r2
 80059b0:	b08b      	sub	sp, #44	; 0x2c
 80059b2:	429e      	cmp	r6, r3
 80059b4:	da04      	bge.n	80059c0 <__cvt+0x18>
 80059b6:	2180      	movs	r1, #128	; 0x80
 80059b8:	0609      	lsls	r1, r1, #24
 80059ba:	1873      	adds	r3, r6, r1
 80059bc:	001e      	movs	r6, r3
 80059be:	232d      	movs	r3, #45	; 0x2d
 80059c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80059c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80059c4:	7013      	strb	r3, [r2, #0]
 80059c6:	2320      	movs	r3, #32
 80059c8:	2203      	movs	r2, #3
 80059ca:	439f      	bics	r7, r3
 80059cc:	2f46      	cmp	r7, #70	; 0x46
 80059ce:	d007      	beq.n	80059e0 <__cvt+0x38>
 80059d0:	003b      	movs	r3, r7
 80059d2:	3b45      	subs	r3, #69	; 0x45
 80059d4:	4259      	negs	r1, r3
 80059d6:	414b      	adcs	r3, r1
 80059d8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80059da:	3a01      	subs	r2, #1
 80059dc:	18cb      	adds	r3, r1, r3
 80059de:	9310      	str	r3, [sp, #64]	; 0x40
 80059e0:	ab09      	add	r3, sp, #36	; 0x24
 80059e2:	9304      	str	r3, [sp, #16]
 80059e4:	ab08      	add	r3, sp, #32
 80059e6:	9303      	str	r3, [sp, #12]
 80059e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80059ea:	9200      	str	r2, [sp, #0]
 80059ec:	9302      	str	r3, [sp, #8]
 80059ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80059f0:	0022      	movs	r2, r4
 80059f2:	9301      	str	r3, [sp, #4]
 80059f4:	0033      	movs	r3, r6
 80059f6:	f000 fd11 	bl	800641c <_dtoa_r>
 80059fa:	0005      	movs	r5, r0
 80059fc:	2f47      	cmp	r7, #71	; 0x47
 80059fe:	d102      	bne.n	8005a06 <__cvt+0x5e>
 8005a00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a02:	07db      	lsls	r3, r3, #31
 8005a04:	d528      	bpl.n	8005a58 <__cvt+0xb0>
 8005a06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a08:	18eb      	adds	r3, r5, r3
 8005a0a:	9307      	str	r3, [sp, #28]
 8005a0c:	2f46      	cmp	r7, #70	; 0x46
 8005a0e:	d114      	bne.n	8005a3a <__cvt+0x92>
 8005a10:	782b      	ldrb	r3, [r5, #0]
 8005a12:	2b30      	cmp	r3, #48	; 0x30
 8005a14:	d10c      	bne.n	8005a30 <__cvt+0x88>
 8005a16:	2200      	movs	r2, #0
 8005a18:	2300      	movs	r3, #0
 8005a1a:	0020      	movs	r0, r4
 8005a1c:	0031      	movs	r1, r6
 8005a1e:	f7fa fd15 	bl	800044c <__aeabi_dcmpeq>
 8005a22:	2800      	cmp	r0, #0
 8005a24:	d104      	bne.n	8005a30 <__cvt+0x88>
 8005a26:	2301      	movs	r3, #1
 8005a28:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a2a:	1a9b      	subs	r3, r3, r2
 8005a2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005a2e:	6013      	str	r3, [r2, #0]
 8005a30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005a32:	9a07      	ldr	r2, [sp, #28]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	18d3      	adds	r3, r2, r3
 8005a38:	9307      	str	r3, [sp, #28]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	0020      	movs	r0, r4
 8005a40:	0031      	movs	r1, r6
 8005a42:	f7fa fd03 	bl	800044c <__aeabi_dcmpeq>
 8005a46:	2800      	cmp	r0, #0
 8005a48:	d001      	beq.n	8005a4e <__cvt+0xa6>
 8005a4a:	9b07      	ldr	r3, [sp, #28]
 8005a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a4e:	2230      	movs	r2, #48	; 0x30
 8005a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a52:	9907      	ldr	r1, [sp, #28]
 8005a54:	428b      	cmp	r3, r1
 8005a56:	d306      	bcc.n	8005a66 <__cvt+0xbe>
 8005a58:	0028      	movs	r0, r5
 8005a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a5c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005a5e:	1b5b      	subs	r3, r3, r5
 8005a60:	6013      	str	r3, [r2, #0]
 8005a62:	b00b      	add	sp, #44	; 0x2c
 8005a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a66:	1c59      	adds	r1, r3, #1
 8005a68:	9109      	str	r1, [sp, #36]	; 0x24
 8005a6a:	701a      	strb	r2, [r3, #0]
 8005a6c:	e7f0      	b.n	8005a50 <__cvt+0xa8>

08005a6e <__exponent>:
 8005a6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a70:	1c83      	adds	r3, r0, #2
 8005a72:	b087      	sub	sp, #28
 8005a74:	9303      	str	r3, [sp, #12]
 8005a76:	0005      	movs	r5, r0
 8005a78:	000c      	movs	r4, r1
 8005a7a:	232b      	movs	r3, #43	; 0x2b
 8005a7c:	7002      	strb	r2, [r0, #0]
 8005a7e:	2900      	cmp	r1, #0
 8005a80:	da01      	bge.n	8005a86 <__exponent+0x18>
 8005a82:	424c      	negs	r4, r1
 8005a84:	3302      	adds	r3, #2
 8005a86:	706b      	strb	r3, [r5, #1]
 8005a88:	2c09      	cmp	r4, #9
 8005a8a:	dd31      	ble.n	8005af0 <__exponent+0x82>
 8005a8c:	270a      	movs	r7, #10
 8005a8e:	ab04      	add	r3, sp, #16
 8005a90:	1dde      	adds	r6, r3, #7
 8005a92:	0020      	movs	r0, r4
 8005a94:	0039      	movs	r1, r7
 8005a96:	9601      	str	r6, [sp, #4]
 8005a98:	f7fa fcc2 	bl	8000420 <__aeabi_idivmod>
 8005a9c:	3e01      	subs	r6, #1
 8005a9e:	3130      	adds	r1, #48	; 0x30
 8005aa0:	0020      	movs	r0, r4
 8005aa2:	7031      	strb	r1, [r6, #0]
 8005aa4:	0039      	movs	r1, r7
 8005aa6:	9402      	str	r4, [sp, #8]
 8005aa8:	f7fa fbd4 	bl	8000254 <__divsi3>
 8005aac:	9b02      	ldr	r3, [sp, #8]
 8005aae:	0004      	movs	r4, r0
 8005ab0:	2b63      	cmp	r3, #99	; 0x63
 8005ab2:	dcee      	bgt.n	8005a92 <__exponent+0x24>
 8005ab4:	9b01      	ldr	r3, [sp, #4]
 8005ab6:	3430      	adds	r4, #48	; 0x30
 8005ab8:	1e9a      	subs	r2, r3, #2
 8005aba:	0013      	movs	r3, r2
 8005abc:	9903      	ldr	r1, [sp, #12]
 8005abe:	7014      	strb	r4, [r2, #0]
 8005ac0:	a804      	add	r0, sp, #16
 8005ac2:	3007      	adds	r0, #7
 8005ac4:	4298      	cmp	r0, r3
 8005ac6:	d80e      	bhi.n	8005ae6 <__exponent+0x78>
 8005ac8:	ab04      	add	r3, sp, #16
 8005aca:	3307      	adds	r3, #7
 8005acc:	2000      	movs	r0, #0
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d804      	bhi.n	8005adc <__exponent+0x6e>
 8005ad2:	ab04      	add	r3, sp, #16
 8005ad4:	3009      	adds	r0, #9
 8005ad6:	18c0      	adds	r0, r0, r3
 8005ad8:	9b01      	ldr	r3, [sp, #4]
 8005ada:	1ac0      	subs	r0, r0, r3
 8005adc:	9b03      	ldr	r3, [sp, #12]
 8005ade:	1818      	adds	r0, r3, r0
 8005ae0:	1b40      	subs	r0, r0, r5
 8005ae2:	b007      	add	sp, #28
 8005ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ae6:	7818      	ldrb	r0, [r3, #0]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	7008      	strb	r0, [r1, #0]
 8005aec:	3101      	adds	r1, #1
 8005aee:	e7e7      	b.n	8005ac0 <__exponent+0x52>
 8005af0:	2330      	movs	r3, #48	; 0x30
 8005af2:	18e4      	adds	r4, r4, r3
 8005af4:	70ab      	strb	r3, [r5, #2]
 8005af6:	1d28      	adds	r0, r5, #4
 8005af8:	70ec      	strb	r4, [r5, #3]
 8005afa:	e7f1      	b.n	8005ae0 <__exponent+0x72>

08005afc <_printf_float>:
 8005afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005afe:	b095      	sub	sp, #84	; 0x54
 8005b00:	000c      	movs	r4, r1
 8005b02:	9209      	str	r2, [sp, #36]	; 0x24
 8005b04:	001e      	movs	r6, r3
 8005b06:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005b08:	0007      	movs	r7, r0
 8005b0a:	f001 faa1 	bl	8007050 <_localeconv_r>
 8005b0e:	6803      	ldr	r3, [r0, #0]
 8005b10:	0018      	movs	r0, r3
 8005b12:	930c      	str	r3, [sp, #48]	; 0x30
 8005b14:	f7fa faf8 	bl	8000108 <strlen>
 8005b18:	2300      	movs	r3, #0
 8005b1a:	9312      	str	r3, [sp, #72]	; 0x48
 8005b1c:	7e23      	ldrb	r3, [r4, #24]
 8005b1e:	2207      	movs	r2, #7
 8005b20:	930a      	str	r3, [sp, #40]	; 0x28
 8005b22:	6823      	ldr	r3, [r4, #0]
 8005b24:	900e      	str	r0, [sp, #56]	; 0x38
 8005b26:	930d      	str	r3, [sp, #52]	; 0x34
 8005b28:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b2a:	682b      	ldr	r3, [r5, #0]
 8005b2c:	05c9      	lsls	r1, r1, #23
 8005b2e:	d547      	bpl.n	8005bc0 <_printf_float+0xc4>
 8005b30:	189b      	adds	r3, r3, r2
 8005b32:	4393      	bics	r3, r2
 8005b34:	001a      	movs	r2, r3
 8005b36:	3208      	adds	r2, #8
 8005b38:	602a      	str	r2, [r5, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	64a2      	str	r2, [r4, #72]	; 0x48
 8005b40:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005b42:	2201      	movs	r2, #1
 8005b44:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005b46:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005b48:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b4a:	006b      	lsls	r3, r5, #1
 8005b4c:	085b      	lsrs	r3, r3, #1
 8005b4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b50:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005b52:	4ba7      	ldr	r3, [pc, #668]	; (8005df0 <_printf_float+0x2f4>)
 8005b54:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005b56:	4252      	negs	r2, r2
 8005b58:	f7fc fb8a 	bl	8002270 <__aeabi_dcmpun>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	d131      	bne.n	8005bc4 <_printf_float+0xc8>
 8005b60:	2201      	movs	r2, #1
 8005b62:	4ba3      	ldr	r3, [pc, #652]	; (8005df0 <_printf_float+0x2f4>)
 8005b64:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005b66:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005b68:	4252      	negs	r2, r2
 8005b6a:	f7fa fc7f 	bl	800046c <__aeabi_dcmple>
 8005b6e:	2800      	cmp	r0, #0
 8005b70:	d128      	bne.n	8005bc4 <_printf_float+0xc8>
 8005b72:	2200      	movs	r2, #0
 8005b74:	2300      	movs	r3, #0
 8005b76:	0029      	movs	r1, r5
 8005b78:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005b7a:	f7fa fc6d 	bl	8000458 <__aeabi_dcmplt>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d003      	beq.n	8005b8a <_printf_float+0x8e>
 8005b82:	0023      	movs	r3, r4
 8005b84:	222d      	movs	r2, #45	; 0x2d
 8005b86:	3343      	adds	r3, #67	; 0x43
 8005b88:	701a      	strb	r2, [r3, #0]
 8005b8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b8c:	4d99      	ldr	r5, [pc, #612]	; (8005df4 <_printf_float+0x2f8>)
 8005b8e:	2b47      	cmp	r3, #71	; 0x47
 8005b90:	d900      	bls.n	8005b94 <_printf_float+0x98>
 8005b92:	4d99      	ldr	r5, [pc, #612]	; (8005df8 <_printf_float+0x2fc>)
 8005b94:	2303      	movs	r3, #3
 8005b96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b98:	6123      	str	r3, [r4, #16]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	439a      	bics	r2, r3
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	6022      	str	r2, [r4, #0]
 8005ba2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ba6:	0021      	movs	r1, r4
 8005ba8:	0038      	movs	r0, r7
 8005baa:	9600      	str	r6, [sp, #0]
 8005bac:	aa13      	add	r2, sp, #76	; 0x4c
 8005bae:	f000 f9e7 	bl	8005f80 <_printf_common>
 8005bb2:	1c43      	adds	r3, r0, #1
 8005bb4:	d000      	beq.n	8005bb8 <_printf_float+0xbc>
 8005bb6:	e0a2      	b.n	8005cfe <_printf_float+0x202>
 8005bb8:	2001      	movs	r0, #1
 8005bba:	4240      	negs	r0, r0
 8005bbc:	b015      	add	sp, #84	; 0x54
 8005bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bc0:	3307      	adds	r3, #7
 8005bc2:	e7b6      	b.n	8005b32 <_printf_float+0x36>
 8005bc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005bc6:	002b      	movs	r3, r5
 8005bc8:	0010      	movs	r0, r2
 8005bca:	0029      	movs	r1, r5
 8005bcc:	f7fc fb50 	bl	8002270 <__aeabi_dcmpun>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	d00b      	beq.n	8005bec <_printf_float+0xf0>
 8005bd4:	2d00      	cmp	r5, #0
 8005bd6:	da03      	bge.n	8005be0 <_printf_float+0xe4>
 8005bd8:	0023      	movs	r3, r4
 8005bda:	222d      	movs	r2, #45	; 0x2d
 8005bdc:	3343      	adds	r3, #67	; 0x43
 8005bde:	701a      	strb	r2, [r3, #0]
 8005be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005be2:	4d86      	ldr	r5, [pc, #536]	; (8005dfc <_printf_float+0x300>)
 8005be4:	2b47      	cmp	r3, #71	; 0x47
 8005be6:	d9d5      	bls.n	8005b94 <_printf_float+0x98>
 8005be8:	4d85      	ldr	r5, [pc, #532]	; (8005e00 <_printf_float+0x304>)
 8005bea:	e7d3      	b.n	8005b94 <_printf_float+0x98>
 8005bec:	2220      	movs	r2, #32
 8005bee:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005bf0:	6863      	ldr	r3, [r4, #4]
 8005bf2:	4391      	bics	r1, r2
 8005bf4:	910f      	str	r1, [sp, #60]	; 0x3c
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	d149      	bne.n	8005c8e <_printf_float+0x192>
 8005bfa:	3307      	adds	r3, #7
 8005bfc:	6063      	str	r3, [r4, #4]
 8005bfe:	2380      	movs	r3, #128	; 0x80
 8005c00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c02:	00db      	lsls	r3, r3, #3
 8005c04:	4313      	orrs	r3, r2
 8005c06:	2200      	movs	r2, #0
 8005c08:	9206      	str	r2, [sp, #24]
 8005c0a:	aa12      	add	r2, sp, #72	; 0x48
 8005c0c:	9205      	str	r2, [sp, #20]
 8005c0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c10:	a908      	add	r1, sp, #32
 8005c12:	9204      	str	r2, [sp, #16]
 8005c14:	aa11      	add	r2, sp, #68	; 0x44
 8005c16:	9203      	str	r2, [sp, #12]
 8005c18:	2223      	movs	r2, #35	; 0x23
 8005c1a:	6023      	str	r3, [r4, #0]
 8005c1c:	9301      	str	r3, [sp, #4]
 8005c1e:	6863      	ldr	r3, [r4, #4]
 8005c20:	1852      	adds	r2, r2, r1
 8005c22:	9202      	str	r2, [sp, #8]
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	0038      	movs	r0, r7
 8005c28:	002b      	movs	r3, r5
 8005c2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c2c:	f7ff febc 	bl	80059a8 <__cvt>
 8005c30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c32:	0005      	movs	r5, r0
 8005c34:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005c36:	2b47      	cmp	r3, #71	; 0x47
 8005c38:	d108      	bne.n	8005c4c <_printf_float+0x150>
 8005c3a:	1ccb      	adds	r3, r1, #3
 8005c3c:	db02      	blt.n	8005c44 <_printf_float+0x148>
 8005c3e:	6863      	ldr	r3, [r4, #4]
 8005c40:	4299      	cmp	r1, r3
 8005c42:	dd48      	ble.n	8005cd6 <_printf_float+0x1da>
 8005c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c46:	3b02      	subs	r3, #2
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	930a      	str	r3, [sp, #40]	; 0x28
 8005c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c4e:	2b65      	cmp	r3, #101	; 0x65
 8005c50:	d824      	bhi.n	8005c9c <_printf_float+0x1a0>
 8005c52:	0020      	movs	r0, r4
 8005c54:	001a      	movs	r2, r3
 8005c56:	3901      	subs	r1, #1
 8005c58:	3050      	adds	r0, #80	; 0x50
 8005c5a:	9111      	str	r1, [sp, #68]	; 0x44
 8005c5c:	f7ff ff07 	bl	8005a6e <__exponent>
 8005c60:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c62:	900b      	str	r0, [sp, #44]	; 0x2c
 8005c64:	1813      	adds	r3, r2, r0
 8005c66:	6123      	str	r3, [r4, #16]
 8005c68:	2a01      	cmp	r2, #1
 8005c6a:	dc02      	bgt.n	8005c72 <_printf_float+0x176>
 8005c6c:	6822      	ldr	r2, [r4, #0]
 8005c6e:	07d2      	lsls	r2, r2, #31
 8005c70:	d501      	bpl.n	8005c76 <_printf_float+0x17a>
 8005c72:	3301      	adds	r3, #1
 8005c74:	6123      	str	r3, [r4, #16]
 8005c76:	2323      	movs	r3, #35	; 0x23
 8005c78:	aa08      	add	r2, sp, #32
 8005c7a:	189b      	adds	r3, r3, r2
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d100      	bne.n	8005c84 <_printf_float+0x188>
 8005c82:	e78f      	b.n	8005ba4 <_printf_float+0xa8>
 8005c84:	0023      	movs	r3, r4
 8005c86:	222d      	movs	r2, #45	; 0x2d
 8005c88:	3343      	adds	r3, #67	; 0x43
 8005c8a:	701a      	strb	r2, [r3, #0]
 8005c8c:	e78a      	b.n	8005ba4 <_printf_float+0xa8>
 8005c8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c90:	2a47      	cmp	r2, #71	; 0x47
 8005c92:	d1b4      	bne.n	8005bfe <_printf_float+0x102>
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1b2      	bne.n	8005bfe <_printf_float+0x102>
 8005c98:	3301      	adds	r3, #1
 8005c9a:	e7af      	b.n	8005bfc <_printf_float+0x100>
 8005c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c9e:	2b66      	cmp	r3, #102	; 0x66
 8005ca0:	d11b      	bne.n	8005cda <_printf_float+0x1de>
 8005ca2:	6863      	ldr	r3, [r4, #4]
 8005ca4:	2900      	cmp	r1, #0
 8005ca6:	dd0d      	ble.n	8005cc4 <_printf_float+0x1c8>
 8005ca8:	6121      	str	r1, [r4, #16]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d102      	bne.n	8005cb4 <_printf_float+0x1b8>
 8005cae:	6822      	ldr	r2, [r4, #0]
 8005cb0:	07d2      	lsls	r2, r2, #31
 8005cb2:	d502      	bpl.n	8005cba <_printf_float+0x1be>
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	1859      	adds	r1, r3, r1
 8005cb8:	6121      	str	r1, [r4, #16]
 8005cba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005cbc:	65a3      	str	r3, [r4, #88]	; 0x58
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cc2:	e7d8      	b.n	8005c76 <_printf_float+0x17a>
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d103      	bne.n	8005cd0 <_printf_float+0x1d4>
 8005cc8:	2201      	movs	r2, #1
 8005cca:	6821      	ldr	r1, [r4, #0]
 8005ccc:	4211      	tst	r1, r2
 8005cce:	d000      	beq.n	8005cd2 <_printf_float+0x1d6>
 8005cd0:	1c9a      	adds	r2, r3, #2
 8005cd2:	6122      	str	r2, [r4, #16]
 8005cd4:	e7f1      	b.n	8005cba <_printf_float+0x1be>
 8005cd6:	2367      	movs	r3, #103	; 0x67
 8005cd8:	930a      	str	r3, [sp, #40]	; 0x28
 8005cda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005cdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	db06      	blt.n	8005cf0 <_printf_float+0x1f4>
 8005ce2:	6822      	ldr	r2, [r4, #0]
 8005ce4:	6123      	str	r3, [r4, #16]
 8005ce6:	07d2      	lsls	r2, r2, #31
 8005ce8:	d5e7      	bpl.n	8005cba <_printf_float+0x1be>
 8005cea:	3301      	adds	r3, #1
 8005cec:	6123      	str	r3, [r4, #16]
 8005cee:	e7e4      	b.n	8005cba <_printf_float+0x1be>
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	dc01      	bgt.n	8005cfa <_printf_float+0x1fe>
 8005cf6:	1849      	adds	r1, r1, r1
 8005cf8:	1ac9      	subs	r1, r1, r3
 8005cfa:	1852      	adds	r2, r2, r1
 8005cfc:	e7e9      	b.n	8005cd2 <_printf_float+0x1d6>
 8005cfe:	6822      	ldr	r2, [r4, #0]
 8005d00:	0553      	lsls	r3, r2, #21
 8005d02:	d407      	bmi.n	8005d14 <_printf_float+0x218>
 8005d04:	6923      	ldr	r3, [r4, #16]
 8005d06:	002a      	movs	r2, r5
 8005d08:	0038      	movs	r0, r7
 8005d0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d0c:	47b0      	blx	r6
 8005d0e:	1c43      	adds	r3, r0, #1
 8005d10:	d128      	bne.n	8005d64 <_printf_float+0x268>
 8005d12:	e751      	b.n	8005bb8 <_printf_float+0xbc>
 8005d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d16:	2b65      	cmp	r3, #101	; 0x65
 8005d18:	d800      	bhi.n	8005d1c <_printf_float+0x220>
 8005d1a:	e0e1      	b.n	8005ee0 <_printf_float+0x3e4>
 8005d1c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005d1e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005d20:	2200      	movs	r2, #0
 8005d22:	2300      	movs	r3, #0
 8005d24:	f7fa fb92 	bl	800044c <__aeabi_dcmpeq>
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	d031      	beq.n	8005d90 <_printf_float+0x294>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	0038      	movs	r0, r7
 8005d30:	4a34      	ldr	r2, [pc, #208]	; (8005e04 <_printf_float+0x308>)
 8005d32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d34:	47b0      	blx	r6
 8005d36:	1c43      	adds	r3, r0, #1
 8005d38:	d100      	bne.n	8005d3c <_printf_float+0x240>
 8005d3a:	e73d      	b.n	8005bb8 <_printf_float+0xbc>
 8005d3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d40:	4293      	cmp	r3, r2
 8005d42:	db02      	blt.n	8005d4a <_printf_float+0x24e>
 8005d44:	6823      	ldr	r3, [r4, #0]
 8005d46:	07db      	lsls	r3, r3, #31
 8005d48:	d50c      	bpl.n	8005d64 <_printf_float+0x268>
 8005d4a:	0038      	movs	r0, r7
 8005d4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d52:	47b0      	blx	r6
 8005d54:	2500      	movs	r5, #0
 8005d56:	1c43      	adds	r3, r0, #1
 8005d58:	d100      	bne.n	8005d5c <_printf_float+0x260>
 8005d5a:	e72d      	b.n	8005bb8 <_printf_float+0xbc>
 8005d5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	42ab      	cmp	r3, r5
 8005d62:	dc0a      	bgt.n	8005d7a <_printf_float+0x27e>
 8005d64:	6823      	ldr	r3, [r4, #0]
 8005d66:	079b      	lsls	r3, r3, #30
 8005d68:	d500      	bpl.n	8005d6c <_printf_float+0x270>
 8005d6a:	e106      	b.n	8005f7a <_printf_float+0x47e>
 8005d6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005d6e:	68e0      	ldr	r0, [r4, #12]
 8005d70:	4298      	cmp	r0, r3
 8005d72:	db00      	blt.n	8005d76 <_printf_float+0x27a>
 8005d74:	e722      	b.n	8005bbc <_printf_float+0xc0>
 8005d76:	0018      	movs	r0, r3
 8005d78:	e720      	b.n	8005bbc <_printf_float+0xc0>
 8005d7a:	0022      	movs	r2, r4
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	0038      	movs	r0, r7
 8005d80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d82:	321a      	adds	r2, #26
 8005d84:	47b0      	blx	r6
 8005d86:	1c43      	adds	r3, r0, #1
 8005d88:	d100      	bne.n	8005d8c <_printf_float+0x290>
 8005d8a:	e715      	b.n	8005bb8 <_printf_float+0xbc>
 8005d8c:	3501      	adds	r5, #1
 8005d8e:	e7e5      	b.n	8005d5c <_printf_float+0x260>
 8005d90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	dc38      	bgt.n	8005e08 <_printf_float+0x30c>
 8005d96:	2301      	movs	r3, #1
 8005d98:	0038      	movs	r0, r7
 8005d9a:	4a1a      	ldr	r2, [pc, #104]	; (8005e04 <_printf_float+0x308>)
 8005d9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d9e:	47b0      	blx	r6
 8005da0:	1c43      	adds	r3, r0, #1
 8005da2:	d100      	bne.n	8005da6 <_printf_float+0x2aa>
 8005da4:	e708      	b.n	8005bb8 <_printf_float+0xbc>
 8005da6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005da8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005daa:	4313      	orrs	r3, r2
 8005dac:	d102      	bne.n	8005db4 <_printf_float+0x2b8>
 8005dae:	6823      	ldr	r3, [r4, #0]
 8005db0:	07db      	lsls	r3, r3, #31
 8005db2:	d5d7      	bpl.n	8005d64 <_printf_float+0x268>
 8005db4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005db6:	0038      	movs	r0, r7
 8005db8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005dba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005dbc:	47b0      	blx	r6
 8005dbe:	1c43      	adds	r3, r0, #1
 8005dc0:	d100      	bne.n	8005dc4 <_printf_float+0x2c8>
 8005dc2:	e6f9      	b.n	8005bb8 <_printf_float+0xbc>
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	930a      	str	r3, [sp, #40]	; 0x28
 8005dc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005dca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dcc:	425b      	negs	r3, r3
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	dc01      	bgt.n	8005dd6 <_printf_float+0x2da>
 8005dd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005dd4:	e797      	b.n	8005d06 <_printf_float+0x20a>
 8005dd6:	0022      	movs	r2, r4
 8005dd8:	2301      	movs	r3, #1
 8005dda:	0038      	movs	r0, r7
 8005ddc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005dde:	321a      	adds	r2, #26
 8005de0:	47b0      	blx	r6
 8005de2:	1c43      	adds	r3, r0, #1
 8005de4:	d100      	bne.n	8005de8 <_printf_float+0x2ec>
 8005de6:	e6e7      	b.n	8005bb8 <_printf_float+0xbc>
 8005de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dea:	3301      	adds	r3, #1
 8005dec:	e7eb      	b.n	8005dc6 <_printf_float+0x2ca>
 8005dee:	46c0      	nop			; (mov r8, r8)
 8005df0:	7fefffff 	.word	0x7fefffff
 8005df4:	08008d84 	.word	0x08008d84
 8005df8:	08008d88 	.word	0x08008d88
 8005dfc:	08008d8c 	.word	0x08008d8c
 8005e00:	08008d90 	.word	0x08008d90
 8005e04:	08008d94 	.word	0x08008d94
 8005e08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e0c:	920a      	str	r2, [sp, #40]	; 0x28
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	dd00      	ble.n	8005e14 <_printf_float+0x318>
 8005e12:	930a      	str	r3, [sp, #40]	; 0x28
 8005e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	dc3c      	bgt.n	8005e94 <_printf_float+0x398>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	930d      	str	r3, [sp, #52]	; 0x34
 8005e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e20:	43db      	mvns	r3, r3
 8005e22:	17db      	asrs	r3, r3, #31
 8005e24:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e2e:	4013      	ands	r3, r2
 8005e30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e36:	4293      	cmp	r3, r2
 8005e38:	dc34      	bgt.n	8005ea4 <_printf_float+0x3a8>
 8005e3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	db3d      	blt.n	8005ebe <_printf_float+0x3c2>
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	07db      	lsls	r3, r3, #31
 8005e46:	d43a      	bmi.n	8005ebe <_printf_float+0x3c2>
 8005e48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e4c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	1a52      	subs	r2, r2, r1
 8005e52:	920a      	str	r2, [sp, #40]	; 0x28
 8005e54:	429a      	cmp	r2, r3
 8005e56:	dd00      	ble.n	8005e5a <_printf_float+0x35e>
 8005e58:	930a      	str	r3, [sp, #40]	; 0x28
 8005e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	dc36      	bgt.n	8005ece <_printf_float+0x3d2>
 8005e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e62:	2500      	movs	r5, #0
 8005e64:	43db      	mvns	r3, r3
 8005e66:	17db      	asrs	r3, r3, #31
 8005e68:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005e6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e70:	1a9b      	subs	r3, r3, r2
 8005e72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e74:	400a      	ands	r2, r1
 8005e76:	1a9b      	subs	r3, r3, r2
 8005e78:	42ab      	cmp	r3, r5
 8005e7a:	dc00      	bgt.n	8005e7e <_printf_float+0x382>
 8005e7c:	e772      	b.n	8005d64 <_printf_float+0x268>
 8005e7e:	0022      	movs	r2, r4
 8005e80:	2301      	movs	r3, #1
 8005e82:	0038      	movs	r0, r7
 8005e84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e86:	321a      	adds	r2, #26
 8005e88:	47b0      	blx	r6
 8005e8a:	1c43      	adds	r3, r0, #1
 8005e8c:	d100      	bne.n	8005e90 <_printf_float+0x394>
 8005e8e:	e693      	b.n	8005bb8 <_printf_float+0xbc>
 8005e90:	3501      	adds	r5, #1
 8005e92:	e7ea      	b.n	8005e6a <_printf_float+0x36e>
 8005e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e96:	002a      	movs	r2, r5
 8005e98:	0038      	movs	r0, r7
 8005e9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e9c:	47b0      	blx	r6
 8005e9e:	1c43      	adds	r3, r0, #1
 8005ea0:	d1bb      	bne.n	8005e1a <_printf_float+0x31e>
 8005ea2:	e689      	b.n	8005bb8 <_printf_float+0xbc>
 8005ea4:	0022      	movs	r2, r4
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	0038      	movs	r0, r7
 8005eaa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005eac:	321a      	adds	r2, #26
 8005eae:	47b0      	blx	r6
 8005eb0:	1c43      	adds	r3, r0, #1
 8005eb2:	d100      	bne.n	8005eb6 <_printf_float+0x3ba>
 8005eb4:	e680      	b.n	8005bb8 <_printf_float+0xbc>
 8005eb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005eb8:	3301      	adds	r3, #1
 8005eba:	930d      	str	r3, [sp, #52]	; 0x34
 8005ebc:	e7b3      	b.n	8005e26 <_printf_float+0x32a>
 8005ebe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ec0:	0038      	movs	r0, r7
 8005ec2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ec4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ec6:	47b0      	blx	r6
 8005ec8:	1c43      	adds	r3, r0, #1
 8005eca:	d1bd      	bne.n	8005e48 <_printf_float+0x34c>
 8005ecc:	e674      	b.n	8005bb8 <_printf_float+0xbc>
 8005ece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ed0:	0038      	movs	r0, r7
 8005ed2:	18ea      	adds	r2, r5, r3
 8005ed4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ed8:	47b0      	blx	r6
 8005eda:	1c43      	adds	r3, r0, #1
 8005edc:	d1c0      	bne.n	8005e60 <_printf_float+0x364>
 8005ede:	e66b      	b.n	8005bb8 <_printf_float+0xbc>
 8005ee0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	dc02      	bgt.n	8005eec <_printf_float+0x3f0>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	421a      	tst	r2, r3
 8005eea:	d034      	beq.n	8005f56 <_printf_float+0x45a>
 8005eec:	2301      	movs	r3, #1
 8005eee:	002a      	movs	r2, r5
 8005ef0:	0038      	movs	r0, r7
 8005ef2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ef4:	47b0      	blx	r6
 8005ef6:	1c43      	adds	r3, r0, #1
 8005ef8:	d100      	bne.n	8005efc <_printf_float+0x400>
 8005efa:	e65d      	b.n	8005bb8 <_printf_float+0xbc>
 8005efc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005efe:	0038      	movs	r0, r7
 8005f00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f04:	47b0      	blx	r6
 8005f06:	1c43      	adds	r3, r0, #1
 8005f08:	d100      	bne.n	8005f0c <_printf_float+0x410>
 8005f0a:	e655      	b.n	8005bb8 <_printf_float+0xbc>
 8005f0c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005f0e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005f10:	2200      	movs	r2, #0
 8005f12:	2300      	movs	r3, #0
 8005f14:	f7fa fa9a 	bl	800044c <__aeabi_dcmpeq>
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	d11a      	bne.n	8005f52 <_printf_float+0x456>
 8005f1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f1e:	1c6a      	adds	r2, r5, #1
 8005f20:	3b01      	subs	r3, #1
 8005f22:	0038      	movs	r0, r7
 8005f24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f26:	47b0      	blx	r6
 8005f28:	1c43      	adds	r3, r0, #1
 8005f2a:	d10e      	bne.n	8005f4a <_printf_float+0x44e>
 8005f2c:	e644      	b.n	8005bb8 <_printf_float+0xbc>
 8005f2e:	0022      	movs	r2, r4
 8005f30:	2301      	movs	r3, #1
 8005f32:	0038      	movs	r0, r7
 8005f34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f36:	321a      	adds	r2, #26
 8005f38:	47b0      	blx	r6
 8005f3a:	1c43      	adds	r3, r0, #1
 8005f3c:	d100      	bne.n	8005f40 <_printf_float+0x444>
 8005f3e:	e63b      	b.n	8005bb8 <_printf_float+0xbc>
 8005f40:	3501      	adds	r5, #1
 8005f42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f44:	3b01      	subs	r3, #1
 8005f46:	42ab      	cmp	r3, r5
 8005f48:	dcf1      	bgt.n	8005f2e <_printf_float+0x432>
 8005f4a:	0022      	movs	r2, r4
 8005f4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f4e:	3250      	adds	r2, #80	; 0x50
 8005f50:	e6da      	b.n	8005d08 <_printf_float+0x20c>
 8005f52:	2500      	movs	r5, #0
 8005f54:	e7f5      	b.n	8005f42 <_printf_float+0x446>
 8005f56:	002a      	movs	r2, r5
 8005f58:	e7e3      	b.n	8005f22 <_printf_float+0x426>
 8005f5a:	0022      	movs	r2, r4
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	0038      	movs	r0, r7
 8005f60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f62:	3219      	adds	r2, #25
 8005f64:	47b0      	blx	r6
 8005f66:	1c43      	adds	r3, r0, #1
 8005f68:	d100      	bne.n	8005f6c <_printf_float+0x470>
 8005f6a:	e625      	b.n	8005bb8 <_printf_float+0xbc>
 8005f6c:	3501      	adds	r5, #1
 8005f6e:	68e3      	ldr	r3, [r4, #12]
 8005f70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005f72:	1a9b      	subs	r3, r3, r2
 8005f74:	42ab      	cmp	r3, r5
 8005f76:	dcf0      	bgt.n	8005f5a <_printf_float+0x45e>
 8005f78:	e6f8      	b.n	8005d6c <_printf_float+0x270>
 8005f7a:	2500      	movs	r5, #0
 8005f7c:	e7f7      	b.n	8005f6e <_printf_float+0x472>
 8005f7e:	46c0      	nop			; (mov r8, r8)

08005f80 <_printf_common>:
 8005f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f82:	0015      	movs	r5, r2
 8005f84:	9301      	str	r3, [sp, #4]
 8005f86:	688a      	ldr	r2, [r1, #8]
 8005f88:	690b      	ldr	r3, [r1, #16]
 8005f8a:	000c      	movs	r4, r1
 8005f8c:	9000      	str	r0, [sp, #0]
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	da00      	bge.n	8005f94 <_printf_common+0x14>
 8005f92:	0013      	movs	r3, r2
 8005f94:	0022      	movs	r2, r4
 8005f96:	602b      	str	r3, [r5, #0]
 8005f98:	3243      	adds	r2, #67	; 0x43
 8005f9a:	7812      	ldrb	r2, [r2, #0]
 8005f9c:	2a00      	cmp	r2, #0
 8005f9e:	d001      	beq.n	8005fa4 <_printf_common+0x24>
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	602b      	str	r3, [r5, #0]
 8005fa4:	6823      	ldr	r3, [r4, #0]
 8005fa6:	069b      	lsls	r3, r3, #26
 8005fa8:	d502      	bpl.n	8005fb0 <_printf_common+0x30>
 8005faa:	682b      	ldr	r3, [r5, #0]
 8005fac:	3302      	adds	r3, #2
 8005fae:	602b      	str	r3, [r5, #0]
 8005fb0:	6822      	ldr	r2, [r4, #0]
 8005fb2:	2306      	movs	r3, #6
 8005fb4:	0017      	movs	r7, r2
 8005fb6:	401f      	ands	r7, r3
 8005fb8:	421a      	tst	r2, r3
 8005fba:	d027      	beq.n	800600c <_printf_common+0x8c>
 8005fbc:	0023      	movs	r3, r4
 8005fbe:	3343      	adds	r3, #67	; 0x43
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	1e5a      	subs	r2, r3, #1
 8005fc4:	4193      	sbcs	r3, r2
 8005fc6:	6822      	ldr	r2, [r4, #0]
 8005fc8:	0692      	lsls	r2, r2, #26
 8005fca:	d430      	bmi.n	800602e <_printf_common+0xae>
 8005fcc:	0022      	movs	r2, r4
 8005fce:	9901      	ldr	r1, [sp, #4]
 8005fd0:	9800      	ldr	r0, [sp, #0]
 8005fd2:	9e08      	ldr	r6, [sp, #32]
 8005fd4:	3243      	adds	r2, #67	; 0x43
 8005fd6:	47b0      	blx	r6
 8005fd8:	1c43      	adds	r3, r0, #1
 8005fda:	d025      	beq.n	8006028 <_printf_common+0xa8>
 8005fdc:	2306      	movs	r3, #6
 8005fde:	6820      	ldr	r0, [r4, #0]
 8005fe0:	682a      	ldr	r2, [r5, #0]
 8005fe2:	68e1      	ldr	r1, [r4, #12]
 8005fe4:	2500      	movs	r5, #0
 8005fe6:	4003      	ands	r3, r0
 8005fe8:	2b04      	cmp	r3, #4
 8005fea:	d103      	bne.n	8005ff4 <_printf_common+0x74>
 8005fec:	1a8d      	subs	r5, r1, r2
 8005fee:	43eb      	mvns	r3, r5
 8005ff0:	17db      	asrs	r3, r3, #31
 8005ff2:	401d      	ands	r5, r3
 8005ff4:	68a3      	ldr	r3, [r4, #8]
 8005ff6:	6922      	ldr	r2, [r4, #16]
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	dd01      	ble.n	8006000 <_printf_common+0x80>
 8005ffc:	1a9b      	subs	r3, r3, r2
 8005ffe:	18ed      	adds	r5, r5, r3
 8006000:	2700      	movs	r7, #0
 8006002:	42bd      	cmp	r5, r7
 8006004:	d120      	bne.n	8006048 <_printf_common+0xc8>
 8006006:	2000      	movs	r0, #0
 8006008:	e010      	b.n	800602c <_printf_common+0xac>
 800600a:	3701      	adds	r7, #1
 800600c:	68e3      	ldr	r3, [r4, #12]
 800600e:	682a      	ldr	r2, [r5, #0]
 8006010:	1a9b      	subs	r3, r3, r2
 8006012:	42bb      	cmp	r3, r7
 8006014:	ddd2      	ble.n	8005fbc <_printf_common+0x3c>
 8006016:	0022      	movs	r2, r4
 8006018:	2301      	movs	r3, #1
 800601a:	9901      	ldr	r1, [sp, #4]
 800601c:	9800      	ldr	r0, [sp, #0]
 800601e:	9e08      	ldr	r6, [sp, #32]
 8006020:	3219      	adds	r2, #25
 8006022:	47b0      	blx	r6
 8006024:	1c43      	adds	r3, r0, #1
 8006026:	d1f0      	bne.n	800600a <_printf_common+0x8a>
 8006028:	2001      	movs	r0, #1
 800602a:	4240      	negs	r0, r0
 800602c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800602e:	2030      	movs	r0, #48	; 0x30
 8006030:	18e1      	adds	r1, r4, r3
 8006032:	3143      	adds	r1, #67	; 0x43
 8006034:	7008      	strb	r0, [r1, #0]
 8006036:	0021      	movs	r1, r4
 8006038:	1c5a      	adds	r2, r3, #1
 800603a:	3145      	adds	r1, #69	; 0x45
 800603c:	7809      	ldrb	r1, [r1, #0]
 800603e:	18a2      	adds	r2, r4, r2
 8006040:	3243      	adds	r2, #67	; 0x43
 8006042:	3302      	adds	r3, #2
 8006044:	7011      	strb	r1, [r2, #0]
 8006046:	e7c1      	b.n	8005fcc <_printf_common+0x4c>
 8006048:	0022      	movs	r2, r4
 800604a:	2301      	movs	r3, #1
 800604c:	9901      	ldr	r1, [sp, #4]
 800604e:	9800      	ldr	r0, [sp, #0]
 8006050:	9e08      	ldr	r6, [sp, #32]
 8006052:	321a      	adds	r2, #26
 8006054:	47b0      	blx	r6
 8006056:	1c43      	adds	r3, r0, #1
 8006058:	d0e6      	beq.n	8006028 <_printf_common+0xa8>
 800605a:	3701      	adds	r7, #1
 800605c:	e7d1      	b.n	8006002 <_printf_common+0x82>
	...

08006060 <_printf_i>:
 8006060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006062:	b08b      	sub	sp, #44	; 0x2c
 8006064:	9206      	str	r2, [sp, #24]
 8006066:	000a      	movs	r2, r1
 8006068:	3243      	adds	r2, #67	; 0x43
 800606a:	9307      	str	r3, [sp, #28]
 800606c:	9005      	str	r0, [sp, #20]
 800606e:	9204      	str	r2, [sp, #16]
 8006070:	7e0a      	ldrb	r2, [r1, #24]
 8006072:	000c      	movs	r4, r1
 8006074:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006076:	2a78      	cmp	r2, #120	; 0x78
 8006078:	d807      	bhi.n	800608a <_printf_i+0x2a>
 800607a:	2a62      	cmp	r2, #98	; 0x62
 800607c:	d809      	bhi.n	8006092 <_printf_i+0x32>
 800607e:	2a00      	cmp	r2, #0
 8006080:	d100      	bne.n	8006084 <_printf_i+0x24>
 8006082:	e0c1      	b.n	8006208 <_printf_i+0x1a8>
 8006084:	2a58      	cmp	r2, #88	; 0x58
 8006086:	d100      	bne.n	800608a <_printf_i+0x2a>
 8006088:	e08c      	b.n	80061a4 <_printf_i+0x144>
 800608a:	0026      	movs	r6, r4
 800608c:	3642      	adds	r6, #66	; 0x42
 800608e:	7032      	strb	r2, [r6, #0]
 8006090:	e022      	b.n	80060d8 <_printf_i+0x78>
 8006092:	0010      	movs	r0, r2
 8006094:	3863      	subs	r0, #99	; 0x63
 8006096:	2815      	cmp	r0, #21
 8006098:	d8f7      	bhi.n	800608a <_printf_i+0x2a>
 800609a:	f7fa f847 	bl	800012c <__gnu_thumb1_case_shi>
 800609e:	0016      	.short	0x0016
 80060a0:	fff6001f 	.word	0xfff6001f
 80060a4:	fff6fff6 	.word	0xfff6fff6
 80060a8:	001ffff6 	.word	0x001ffff6
 80060ac:	fff6fff6 	.word	0xfff6fff6
 80060b0:	fff6fff6 	.word	0xfff6fff6
 80060b4:	003600a8 	.word	0x003600a8
 80060b8:	fff6009a 	.word	0xfff6009a
 80060bc:	00b9fff6 	.word	0x00b9fff6
 80060c0:	0036fff6 	.word	0x0036fff6
 80060c4:	fff6fff6 	.word	0xfff6fff6
 80060c8:	009e      	.short	0x009e
 80060ca:	0026      	movs	r6, r4
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	3642      	adds	r6, #66	; 0x42
 80060d0:	1d11      	adds	r1, r2, #4
 80060d2:	6019      	str	r1, [r3, #0]
 80060d4:	6813      	ldr	r3, [r2, #0]
 80060d6:	7033      	strb	r3, [r6, #0]
 80060d8:	2301      	movs	r3, #1
 80060da:	e0a7      	b.n	800622c <_printf_i+0x1cc>
 80060dc:	6808      	ldr	r0, [r1, #0]
 80060de:	6819      	ldr	r1, [r3, #0]
 80060e0:	1d0a      	adds	r2, r1, #4
 80060e2:	0605      	lsls	r5, r0, #24
 80060e4:	d50b      	bpl.n	80060fe <_printf_i+0x9e>
 80060e6:	680d      	ldr	r5, [r1, #0]
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	2d00      	cmp	r5, #0
 80060ec:	da03      	bge.n	80060f6 <_printf_i+0x96>
 80060ee:	232d      	movs	r3, #45	; 0x2d
 80060f0:	9a04      	ldr	r2, [sp, #16]
 80060f2:	426d      	negs	r5, r5
 80060f4:	7013      	strb	r3, [r2, #0]
 80060f6:	4b61      	ldr	r3, [pc, #388]	; (800627c <_printf_i+0x21c>)
 80060f8:	270a      	movs	r7, #10
 80060fa:	9303      	str	r3, [sp, #12]
 80060fc:	e01b      	b.n	8006136 <_printf_i+0xd6>
 80060fe:	680d      	ldr	r5, [r1, #0]
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	0641      	lsls	r1, r0, #25
 8006104:	d5f1      	bpl.n	80060ea <_printf_i+0x8a>
 8006106:	b22d      	sxth	r5, r5
 8006108:	e7ef      	b.n	80060ea <_printf_i+0x8a>
 800610a:	680d      	ldr	r5, [r1, #0]
 800610c:	6819      	ldr	r1, [r3, #0]
 800610e:	1d08      	adds	r0, r1, #4
 8006110:	6018      	str	r0, [r3, #0]
 8006112:	062e      	lsls	r6, r5, #24
 8006114:	d501      	bpl.n	800611a <_printf_i+0xba>
 8006116:	680d      	ldr	r5, [r1, #0]
 8006118:	e003      	b.n	8006122 <_printf_i+0xc2>
 800611a:	066d      	lsls	r5, r5, #25
 800611c:	d5fb      	bpl.n	8006116 <_printf_i+0xb6>
 800611e:	680d      	ldr	r5, [r1, #0]
 8006120:	b2ad      	uxth	r5, r5
 8006122:	4b56      	ldr	r3, [pc, #344]	; (800627c <_printf_i+0x21c>)
 8006124:	2708      	movs	r7, #8
 8006126:	9303      	str	r3, [sp, #12]
 8006128:	2a6f      	cmp	r2, #111	; 0x6f
 800612a:	d000      	beq.n	800612e <_printf_i+0xce>
 800612c:	3702      	adds	r7, #2
 800612e:	0023      	movs	r3, r4
 8006130:	2200      	movs	r2, #0
 8006132:	3343      	adds	r3, #67	; 0x43
 8006134:	701a      	strb	r2, [r3, #0]
 8006136:	6863      	ldr	r3, [r4, #4]
 8006138:	60a3      	str	r3, [r4, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	db03      	blt.n	8006146 <_printf_i+0xe6>
 800613e:	2204      	movs	r2, #4
 8006140:	6821      	ldr	r1, [r4, #0]
 8006142:	4391      	bics	r1, r2
 8006144:	6021      	str	r1, [r4, #0]
 8006146:	2d00      	cmp	r5, #0
 8006148:	d102      	bne.n	8006150 <_printf_i+0xf0>
 800614a:	9e04      	ldr	r6, [sp, #16]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00c      	beq.n	800616a <_printf_i+0x10a>
 8006150:	9e04      	ldr	r6, [sp, #16]
 8006152:	0028      	movs	r0, r5
 8006154:	0039      	movs	r1, r7
 8006156:	f7fa f879 	bl	800024c <__aeabi_uidivmod>
 800615a:	9b03      	ldr	r3, [sp, #12]
 800615c:	3e01      	subs	r6, #1
 800615e:	5c5b      	ldrb	r3, [r3, r1]
 8006160:	7033      	strb	r3, [r6, #0]
 8006162:	002b      	movs	r3, r5
 8006164:	0005      	movs	r5, r0
 8006166:	429f      	cmp	r7, r3
 8006168:	d9f3      	bls.n	8006152 <_printf_i+0xf2>
 800616a:	2f08      	cmp	r7, #8
 800616c:	d109      	bne.n	8006182 <_printf_i+0x122>
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	07db      	lsls	r3, r3, #31
 8006172:	d506      	bpl.n	8006182 <_printf_i+0x122>
 8006174:	6863      	ldr	r3, [r4, #4]
 8006176:	6922      	ldr	r2, [r4, #16]
 8006178:	4293      	cmp	r3, r2
 800617a:	dc02      	bgt.n	8006182 <_printf_i+0x122>
 800617c:	2330      	movs	r3, #48	; 0x30
 800617e:	3e01      	subs	r6, #1
 8006180:	7033      	strb	r3, [r6, #0]
 8006182:	9b04      	ldr	r3, [sp, #16]
 8006184:	1b9b      	subs	r3, r3, r6
 8006186:	6123      	str	r3, [r4, #16]
 8006188:	9b07      	ldr	r3, [sp, #28]
 800618a:	0021      	movs	r1, r4
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	9805      	ldr	r0, [sp, #20]
 8006190:	9b06      	ldr	r3, [sp, #24]
 8006192:	aa09      	add	r2, sp, #36	; 0x24
 8006194:	f7ff fef4 	bl	8005f80 <_printf_common>
 8006198:	1c43      	adds	r3, r0, #1
 800619a:	d14c      	bne.n	8006236 <_printf_i+0x1d6>
 800619c:	2001      	movs	r0, #1
 800619e:	4240      	negs	r0, r0
 80061a0:	b00b      	add	sp, #44	; 0x2c
 80061a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061a4:	3145      	adds	r1, #69	; 0x45
 80061a6:	700a      	strb	r2, [r1, #0]
 80061a8:	4a34      	ldr	r2, [pc, #208]	; (800627c <_printf_i+0x21c>)
 80061aa:	9203      	str	r2, [sp, #12]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	6821      	ldr	r1, [r4, #0]
 80061b0:	ca20      	ldmia	r2!, {r5}
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	0608      	lsls	r0, r1, #24
 80061b6:	d516      	bpl.n	80061e6 <_printf_i+0x186>
 80061b8:	07cb      	lsls	r3, r1, #31
 80061ba:	d502      	bpl.n	80061c2 <_printf_i+0x162>
 80061bc:	2320      	movs	r3, #32
 80061be:	4319      	orrs	r1, r3
 80061c0:	6021      	str	r1, [r4, #0]
 80061c2:	2710      	movs	r7, #16
 80061c4:	2d00      	cmp	r5, #0
 80061c6:	d1b2      	bne.n	800612e <_printf_i+0xce>
 80061c8:	2320      	movs	r3, #32
 80061ca:	6822      	ldr	r2, [r4, #0]
 80061cc:	439a      	bics	r2, r3
 80061ce:	6022      	str	r2, [r4, #0]
 80061d0:	e7ad      	b.n	800612e <_printf_i+0xce>
 80061d2:	2220      	movs	r2, #32
 80061d4:	6809      	ldr	r1, [r1, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	6022      	str	r2, [r4, #0]
 80061da:	0022      	movs	r2, r4
 80061dc:	2178      	movs	r1, #120	; 0x78
 80061de:	3245      	adds	r2, #69	; 0x45
 80061e0:	7011      	strb	r1, [r2, #0]
 80061e2:	4a27      	ldr	r2, [pc, #156]	; (8006280 <_printf_i+0x220>)
 80061e4:	e7e1      	b.n	80061aa <_printf_i+0x14a>
 80061e6:	0648      	lsls	r0, r1, #25
 80061e8:	d5e6      	bpl.n	80061b8 <_printf_i+0x158>
 80061ea:	b2ad      	uxth	r5, r5
 80061ec:	e7e4      	b.n	80061b8 <_printf_i+0x158>
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	680d      	ldr	r5, [r1, #0]
 80061f2:	1d10      	adds	r0, r2, #4
 80061f4:	6949      	ldr	r1, [r1, #20]
 80061f6:	6018      	str	r0, [r3, #0]
 80061f8:	6813      	ldr	r3, [r2, #0]
 80061fa:	062e      	lsls	r6, r5, #24
 80061fc:	d501      	bpl.n	8006202 <_printf_i+0x1a2>
 80061fe:	6019      	str	r1, [r3, #0]
 8006200:	e002      	b.n	8006208 <_printf_i+0x1a8>
 8006202:	066d      	lsls	r5, r5, #25
 8006204:	d5fb      	bpl.n	80061fe <_printf_i+0x19e>
 8006206:	8019      	strh	r1, [r3, #0]
 8006208:	2300      	movs	r3, #0
 800620a:	9e04      	ldr	r6, [sp, #16]
 800620c:	6123      	str	r3, [r4, #16]
 800620e:	e7bb      	b.n	8006188 <_printf_i+0x128>
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	1d11      	adds	r1, r2, #4
 8006214:	6019      	str	r1, [r3, #0]
 8006216:	6816      	ldr	r6, [r2, #0]
 8006218:	2100      	movs	r1, #0
 800621a:	0030      	movs	r0, r6
 800621c:	6862      	ldr	r2, [r4, #4]
 800621e:	f000 ff37 	bl	8007090 <memchr>
 8006222:	2800      	cmp	r0, #0
 8006224:	d001      	beq.n	800622a <_printf_i+0x1ca>
 8006226:	1b80      	subs	r0, r0, r6
 8006228:	6060      	str	r0, [r4, #4]
 800622a:	6863      	ldr	r3, [r4, #4]
 800622c:	6123      	str	r3, [r4, #16]
 800622e:	2300      	movs	r3, #0
 8006230:	9a04      	ldr	r2, [sp, #16]
 8006232:	7013      	strb	r3, [r2, #0]
 8006234:	e7a8      	b.n	8006188 <_printf_i+0x128>
 8006236:	6923      	ldr	r3, [r4, #16]
 8006238:	0032      	movs	r2, r6
 800623a:	9906      	ldr	r1, [sp, #24]
 800623c:	9805      	ldr	r0, [sp, #20]
 800623e:	9d07      	ldr	r5, [sp, #28]
 8006240:	47a8      	blx	r5
 8006242:	1c43      	adds	r3, r0, #1
 8006244:	d0aa      	beq.n	800619c <_printf_i+0x13c>
 8006246:	6823      	ldr	r3, [r4, #0]
 8006248:	079b      	lsls	r3, r3, #30
 800624a:	d415      	bmi.n	8006278 <_printf_i+0x218>
 800624c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800624e:	68e0      	ldr	r0, [r4, #12]
 8006250:	4298      	cmp	r0, r3
 8006252:	daa5      	bge.n	80061a0 <_printf_i+0x140>
 8006254:	0018      	movs	r0, r3
 8006256:	e7a3      	b.n	80061a0 <_printf_i+0x140>
 8006258:	0022      	movs	r2, r4
 800625a:	2301      	movs	r3, #1
 800625c:	9906      	ldr	r1, [sp, #24]
 800625e:	9805      	ldr	r0, [sp, #20]
 8006260:	9e07      	ldr	r6, [sp, #28]
 8006262:	3219      	adds	r2, #25
 8006264:	47b0      	blx	r6
 8006266:	1c43      	adds	r3, r0, #1
 8006268:	d098      	beq.n	800619c <_printf_i+0x13c>
 800626a:	3501      	adds	r5, #1
 800626c:	68e3      	ldr	r3, [r4, #12]
 800626e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006270:	1a9b      	subs	r3, r3, r2
 8006272:	42ab      	cmp	r3, r5
 8006274:	dcf0      	bgt.n	8006258 <_printf_i+0x1f8>
 8006276:	e7e9      	b.n	800624c <_printf_i+0x1ec>
 8006278:	2500      	movs	r5, #0
 800627a:	e7f7      	b.n	800626c <_printf_i+0x20c>
 800627c:	08008d96 	.word	0x08008d96
 8006280:	08008da7 	.word	0x08008da7

08006284 <strcpy>:
 8006284:	0003      	movs	r3, r0
 8006286:	780a      	ldrb	r2, [r1, #0]
 8006288:	3101      	adds	r1, #1
 800628a:	701a      	strb	r2, [r3, #0]
 800628c:	3301      	adds	r3, #1
 800628e:	2a00      	cmp	r2, #0
 8006290:	d1f9      	bne.n	8006286 <strcpy+0x2>
 8006292:	4770      	bx	lr

08006294 <_vsniprintf_r>:
 8006294:	b530      	push	{r4, r5, lr}
 8006296:	0014      	movs	r4, r2
 8006298:	0005      	movs	r5, r0
 800629a:	001a      	movs	r2, r3
 800629c:	b09b      	sub	sp, #108	; 0x6c
 800629e:	2c00      	cmp	r4, #0
 80062a0:	da05      	bge.n	80062ae <_vsniprintf_r+0x1a>
 80062a2:	238b      	movs	r3, #139	; 0x8b
 80062a4:	6003      	str	r3, [r0, #0]
 80062a6:	2001      	movs	r0, #1
 80062a8:	4240      	negs	r0, r0
 80062aa:	b01b      	add	sp, #108	; 0x6c
 80062ac:	bd30      	pop	{r4, r5, pc}
 80062ae:	2382      	movs	r3, #130	; 0x82
 80062b0:	4668      	mov	r0, sp
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	8183      	strh	r3, [r0, #12]
 80062b6:	2300      	movs	r3, #0
 80062b8:	9100      	str	r1, [sp, #0]
 80062ba:	9104      	str	r1, [sp, #16]
 80062bc:	429c      	cmp	r4, r3
 80062be:	d000      	beq.n	80062c2 <_vsniprintf_r+0x2e>
 80062c0:	1e63      	subs	r3, r4, #1
 80062c2:	9302      	str	r3, [sp, #8]
 80062c4:	9305      	str	r3, [sp, #20]
 80062c6:	2301      	movs	r3, #1
 80062c8:	4669      	mov	r1, sp
 80062ca:	425b      	negs	r3, r3
 80062cc:	81cb      	strh	r3, [r1, #14]
 80062ce:	0028      	movs	r0, r5
 80062d0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80062d2:	f001 fbfd 	bl	8007ad0 <_svfiprintf_r>
 80062d6:	1c43      	adds	r3, r0, #1
 80062d8:	da01      	bge.n	80062de <_vsniprintf_r+0x4a>
 80062da:	238b      	movs	r3, #139	; 0x8b
 80062dc:	602b      	str	r3, [r5, #0]
 80062de:	2c00      	cmp	r4, #0
 80062e0:	d0e3      	beq.n	80062aa <_vsniprintf_r+0x16>
 80062e2:	2300      	movs	r3, #0
 80062e4:	9a00      	ldr	r2, [sp, #0]
 80062e6:	7013      	strb	r3, [r2, #0]
 80062e8:	e7df      	b.n	80062aa <_vsniprintf_r+0x16>
	...

080062ec <vsniprintf>:
 80062ec:	b507      	push	{r0, r1, r2, lr}
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	0013      	movs	r3, r2
 80062f2:	000a      	movs	r2, r1
 80062f4:	0001      	movs	r1, r0
 80062f6:	4802      	ldr	r0, [pc, #8]	; (8006300 <vsniprintf+0x14>)
 80062f8:	6800      	ldr	r0, [r0, #0]
 80062fa:	f7ff ffcb 	bl	8006294 <_vsniprintf_r>
 80062fe:	bd0e      	pop	{r1, r2, r3, pc}
 8006300:	2000004c 	.word	0x2000004c

08006304 <quorem>:
 8006304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006306:	0006      	movs	r6, r0
 8006308:	690b      	ldr	r3, [r1, #16]
 800630a:	6932      	ldr	r2, [r6, #16]
 800630c:	b087      	sub	sp, #28
 800630e:	2000      	movs	r0, #0
 8006310:	9103      	str	r1, [sp, #12]
 8006312:	429a      	cmp	r2, r3
 8006314:	db65      	blt.n	80063e2 <quorem+0xde>
 8006316:	3b01      	subs	r3, #1
 8006318:	009c      	lsls	r4, r3, #2
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	000b      	movs	r3, r1
 800631e:	3314      	adds	r3, #20
 8006320:	9305      	str	r3, [sp, #20]
 8006322:	191b      	adds	r3, r3, r4
 8006324:	9304      	str	r3, [sp, #16]
 8006326:	0033      	movs	r3, r6
 8006328:	3314      	adds	r3, #20
 800632a:	9302      	str	r3, [sp, #8]
 800632c:	191c      	adds	r4, r3, r4
 800632e:	9b04      	ldr	r3, [sp, #16]
 8006330:	6827      	ldr	r7, [r4, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	0038      	movs	r0, r7
 8006336:	1c5d      	adds	r5, r3, #1
 8006338:	0029      	movs	r1, r5
 800633a:	9301      	str	r3, [sp, #4]
 800633c:	f7f9 ff00 	bl	8000140 <__udivsi3>
 8006340:	9001      	str	r0, [sp, #4]
 8006342:	42af      	cmp	r7, r5
 8006344:	d324      	bcc.n	8006390 <quorem+0x8c>
 8006346:	2500      	movs	r5, #0
 8006348:	46ac      	mov	ip, r5
 800634a:	9802      	ldr	r0, [sp, #8]
 800634c:	9f05      	ldr	r7, [sp, #20]
 800634e:	cf08      	ldmia	r7!, {r3}
 8006350:	9a01      	ldr	r2, [sp, #4]
 8006352:	b299      	uxth	r1, r3
 8006354:	4351      	muls	r1, r2
 8006356:	0c1b      	lsrs	r3, r3, #16
 8006358:	4353      	muls	r3, r2
 800635a:	1949      	adds	r1, r1, r5
 800635c:	0c0a      	lsrs	r2, r1, #16
 800635e:	189b      	adds	r3, r3, r2
 8006360:	6802      	ldr	r2, [r0, #0]
 8006362:	b289      	uxth	r1, r1
 8006364:	b292      	uxth	r2, r2
 8006366:	4462      	add	r2, ip
 8006368:	1a52      	subs	r2, r2, r1
 800636a:	6801      	ldr	r1, [r0, #0]
 800636c:	0c1d      	lsrs	r5, r3, #16
 800636e:	0c09      	lsrs	r1, r1, #16
 8006370:	b29b      	uxth	r3, r3
 8006372:	1acb      	subs	r3, r1, r3
 8006374:	1411      	asrs	r1, r2, #16
 8006376:	185b      	adds	r3, r3, r1
 8006378:	1419      	asrs	r1, r3, #16
 800637a:	b292      	uxth	r2, r2
 800637c:	041b      	lsls	r3, r3, #16
 800637e:	431a      	orrs	r2, r3
 8006380:	9b04      	ldr	r3, [sp, #16]
 8006382:	468c      	mov	ip, r1
 8006384:	c004      	stmia	r0!, {r2}
 8006386:	42bb      	cmp	r3, r7
 8006388:	d2e1      	bcs.n	800634e <quorem+0x4a>
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d030      	beq.n	80063f2 <quorem+0xee>
 8006390:	0030      	movs	r0, r6
 8006392:	9903      	ldr	r1, [sp, #12]
 8006394:	f001 f914 	bl	80075c0 <__mcmp>
 8006398:	2800      	cmp	r0, #0
 800639a:	db21      	blt.n	80063e0 <quorem+0xdc>
 800639c:	0030      	movs	r0, r6
 800639e:	2400      	movs	r4, #0
 80063a0:	9b01      	ldr	r3, [sp, #4]
 80063a2:	9903      	ldr	r1, [sp, #12]
 80063a4:	3301      	adds	r3, #1
 80063a6:	9301      	str	r3, [sp, #4]
 80063a8:	3014      	adds	r0, #20
 80063aa:	3114      	adds	r1, #20
 80063ac:	6803      	ldr	r3, [r0, #0]
 80063ae:	c920      	ldmia	r1!, {r5}
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	1914      	adds	r4, r2, r4
 80063b4:	b2aa      	uxth	r2, r5
 80063b6:	1aa2      	subs	r2, r4, r2
 80063b8:	0c1b      	lsrs	r3, r3, #16
 80063ba:	0c2d      	lsrs	r5, r5, #16
 80063bc:	1414      	asrs	r4, r2, #16
 80063be:	1b5b      	subs	r3, r3, r5
 80063c0:	191b      	adds	r3, r3, r4
 80063c2:	141c      	asrs	r4, r3, #16
 80063c4:	b292      	uxth	r2, r2
 80063c6:	041b      	lsls	r3, r3, #16
 80063c8:	4313      	orrs	r3, r2
 80063ca:	c008      	stmia	r0!, {r3}
 80063cc:	9b04      	ldr	r3, [sp, #16]
 80063ce:	428b      	cmp	r3, r1
 80063d0:	d2ec      	bcs.n	80063ac <quorem+0xa8>
 80063d2:	9b00      	ldr	r3, [sp, #0]
 80063d4:	9a02      	ldr	r2, [sp, #8]
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	18d3      	adds	r3, r2, r3
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	2a00      	cmp	r2, #0
 80063de:	d015      	beq.n	800640c <quorem+0x108>
 80063e0:	9801      	ldr	r0, [sp, #4]
 80063e2:	b007      	add	sp, #28
 80063e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d106      	bne.n	80063fa <quorem+0xf6>
 80063ec:	9b00      	ldr	r3, [sp, #0]
 80063ee:	3b01      	subs	r3, #1
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	9b02      	ldr	r3, [sp, #8]
 80063f4:	3c04      	subs	r4, #4
 80063f6:	42a3      	cmp	r3, r4
 80063f8:	d3f5      	bcc.n	80063e6 <quorem+0xe2>
 80063fa:	9b00      	ldr	r3, [sp, #0]
 80063fc:	6133      	str	r3, [r6, #16]
 80063fe:	e7c7      	b.n	8006390 <quorem+0x8c>
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	2a00      	cmp	r2, #0
 8006404:	d106      	bne.n	8006414 <quorem+0x110>
 8006406:	9a00      	ldr	r2, [sp, #0]
 8006408:	3a01      	subs	r2, #1
 800640a:	9200      	str	r2, [sp, #0]
 800640c:	9a02      	ldr	r2, [sp, #8]
 800640e:	3b04      	subs	r3, #4
 8006410:	429a      	cmp	r2, r3
 8006412:	d3f5      	bcc.n	8006400 <quorem+0xfc>
 8006414:	9b00      	ldr	r3, [sp, #0]
 8006416:	6133      	str	r3, [r6, #16]
 8006418:	e7e2      	b.n	80063e0 <quorem+0xdc>
	...

0800641c <_dtoa_r>:
 800641c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800641e:	b09d      	sub	sp, #116	; 0x74
 8006420:	9202      	str	r2, [sp, #8]
 8006422:	9303      	str	r3, [sp, #12]
 8006424:	9b02      	ldr	r3, [sp, #8]
 8006426:	9c03      	ldr	r4, [sp, #12]
 8006428:	9308      	str	r3, [sp, #32]
 800642a:	9409      	str	r4, [sp, #36]	; 0x24
 800642c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800642e:	0007      	movs	r7, r0
 8006430:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8006432:	2c00      	cmp	r4, #0
 8006434:	d10e      	bne.n	8006454 <_dtoa_r+0x38>
 8006436:	2010      	movs	r0, #16
 8006438:	f000 fe0e 	bl	8007058 <malloc>
 800643c:	1e02      	subs	r2, r0, #0
 800643e:	6278      	str	r0, [r7, #36]	; 0x24
 8006440:	d104      	bne.n	800644c <_dtoa_r+0x30>
 8006442:	21ea      	movs	r1, #234	; 0xea
 8006444:	4bc7      	ldr	r3, [pc, #796]	; (8006764 <_dtoa_r+0x348>)
 8006446:	48c8      	ldr	r0, [pc, #800]	; (8006768 <_dtoa_r+0x34c>)
 8006448:	f001 fc62 	bl	8007d10 <__assert_func>
 800644c:	6044      	str	r4, [r0, #4]
 800644e:	6084      	str	r4, [r0, #8]
 8006450:	6004      	str	r4, [r0, #0]
 8006452:	60c4      	str	r4, [r0, #12]
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	6819      	ldr	r1, [r3, #0]
 8006458:	2900      	cmp	r1, #0
 800645a:	d00a      	beq.n	8006472 <_dtoa_r+0x56>
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	2301      	movs	r3, #1
 8006460:	4093      	lsls	r3, r2
 8006462:	604a      	str	r2, [r1, #4]
 8006464:	608b      	str	r3, [r1, #8]
 8006466:	0038      	movs	r0, r7
 8006468:	f000 fe6a 	bl	8007140 <_Bfree>
 800646c:	2200      	movs	r2, #0
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	9b03      	ldr	r3, [sp, #12]
 8006474:	2b00      	cmp	r3, #0
 8006476:	da20      	bge.n	80064ba <_dtoa_r+0x9e>
 8006478:	2301      	movs	r3, #1
 800647a:	602b      	str	r3, [r5, #0]
 800647c:	9b03      	ldr	r3, [sp, #12]
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	085b      	lsrs	r3, r3, #1
 8006482:	9309      	str	r3, [sp, #36]	; 0x24
 8006484:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006486:	4bb9      	ldr	r3, [pc, #740]	; (800676c <_dtoa_r+0x350>)
 8006488:	4ab8      	ldr	r2, [pc, #736]	; (800676c <_dtoa_r+0x350>)
 800648a:	402b      	ands	r3, r5
 800648c:	4293      	cmp	r3, r2
 800648e:	d117      	bne.n	80064c0 <_dtoa_r+0xa4>
 8006490:	4bb7      	ldr	r3, [pc, #732]	; (8006770 <_dtoa_r+0x354>)
 8006492:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006494:	0328      	lsls	r0, r5, #12
 8006496:	6013      	str	r3, [r2, #0]
 8006498:	9b02      	ldr	r3, [sp, #8]
 800649a:	0b00      	lsrs	r0, r0, #12
 800649c:	4318      	orrs	r0, r3
 800649e:	d101      	bne.n	80064a4 <_dtoa_r+0x88>
 80064a0:	f000 fdbf 	bl	8007022 <_dtoa_r+0xc06>
 80064a4:	48b3      	ldr	r0, [pc, #716]	; (8006774 <_dtoa_r+0x358>)
 80064a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80064a8:	9006      	str	r0, [sp, #24]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d002      	beq.n	80064b4 <_dtoa_r+0x98>
 80064ae:	4bb2      	ldr	r3, [pc, #712]	; (8006778 <_dtoa_r+0x35c>)
 80064b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80064b2:	6013      	str	r3, [r2, #0]
 80064b4:	9806      	ldr	r0, [sp, #24]
 80064b6:	b01d      	add	sp, #116	; 0x74
 80064b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064ba:	2300      	movs	r3, #0
 80064bc:	602b      	str	r3, [r5, #0]
 80064be:	e7e1      	b.n	8006484 <_dtoa_r+0x68>
 80064c0:	9b08      	ldr	r3, [sp, #32]
 80064c2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80064c4:	9312      	str	r3, [sp, #72]	; 0x48
 80064c6:	9413      	str	r4, [sp, #76]	; 0x4c
 80064c8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80064ca:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80064cc:	2200      	movs	r2, #0
 80064ce:	2300      	movs	r3, #0
 80064d0:	f7f9 ffbc 	bl	800044c <__aeabi_dcmpeq>
 80064d4:	1e04      	subs	r4, r0, #0
 80064d6:	d009      	beq.n	80064ec <_dtoa_r+0xd0>
 80064d8:	2301      	movs	r3, #1
 80064da:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80064dc:	6013      	str	r3, [r2, #0]
 80064de:	4ba7      	ldr	r3, [pc, #668]	; (800677c <_dtoa_r+0x360>)
 80064e0:	9306      	str	r3, [sp, #24]
 80064e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d0e5      	beq.n	80064b4 <_dtoa_r+0x98>
 80064e8:	4ba5      	ldr	r3, [pc, #660]	; (8006780 <_dtoa_r+0x364>)
 80064ea:	e7e1      	b.n	80064b0 <_dtoa_r+0x94>
 80064ec:	ab1a      	add	r3, sp, #104	; 0x68
 80064ee:	9301      	str	r3, [sp, #4]
 80064f0:	ab1b      	add	r3, sp, #108	; 0x6c
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	0038      	movs	r0, r7
 80064f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80064fa:	f001 f915 	bl	8007728 <__d2b>
 80064fe:	006e      	lsls	r6, r5, #1
 8006500:	9005      	str	r0, [sp, #20]
 8006502:	0d76      	lsrs	r6, r6, #21
 8006504:	d100      	bne.n	8006508 <_dtoa_r+0xec>
 8006506:	e07c      	b.n	8006602 <_dtoa_r+0x1e6>
 8006508:	9812      	ldr	r0, [sp, #72]	; 0x48
 800650a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800650c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800650e:	4a9d      	ldr	r2, [pc, #628]	; (8006784 <_dtoa_r+0x368>)
 8006510:	031b      	lsls	r3, r3, #12
 8006512:	0b1b      	lsrs	r3, r3, #12
 8006514:	431a      	orrs	r2, r3
 8006516:	0011      	movs	r1, r2
 8006518:	4b9b      	ldr	r3, [pc, #620]	; (8006788 <_dtoa_r+0x36c>)
 800651a:	9418      	str	r4, [sp, #96]	; 0x60
 800651c:	18f6      	adds	r6, r6, r3
 800651e:	2200      	movs	r2, #0
 8006520:	4b9a      	ldr	r3, [pc, #616]	; (800678c <_dtoa_r+0x370>)
 8006522:	f7fb fb13 	bl	8001b4c <__aeabi_dsub>
 8006526:	4a9a      	ldr	r2, [pc, #616]	; (8006790 <_dtoa_r+0x374>)
 8006528:	4b9a      	ldr	r3, [pc, #616]	; (8006794 <_dtoa_r+0x378>)
 800652a:	f7fb f8a3 	bl	8001674 <__aeabi_dmul>
 800652e:	4a9a      	ldr	r2, [pc, #616]	; (8006798 <_dtoa_r+0x37c>)
 8006530:	4b9a      	ldr	r3, [pc, #616]	; (800679c <_dtoa_r+0x380>)
 8006532:	f7fa f961 	bl	80007f8 <__aeabi_dadd>
 8006536:	0004      	movs	r4, r0
 8006538:	0030      	movs	r0, r6
 800653a:	000d      	movs	r5, r1
 800653c:	f7fb feec 	bl	8002318 <__aeabi_i2d>
 8006540:	4a97      	ldr	r2, [pc, #604]	; (80067a0 <_dtoa_r+0x384>)
 8006542:	4b98      	ldr	r3, [pc, #608]	; (80067a4 <_dtoa_r+0x388>)
 8006544:	f7fb f896 	bl	8001674 <__aeabi_dmul>
 8006548:	0002      	movs	r2, r0
 800654a:	000b      	movs	r3, r1
 800654c:	0020      	movs	r0, r4
 800654e:	0029      	movs	r1, r5
 8006550:	f7fa f952 	bl	80007f8 <__aeabi_dadd>
 8006554:	0004      	movs	r4, r0
 8006556:	000d      	movs	r5, r1
 8006558:	f7fb fea8 	bl	80022ac <__aeabi_d2iz>
 800655c:	2200      	movs	r2, #0
 800655e:	9002      	str	r0, [sp, #8]
 8006560:	2300      	movs	r3, #0
 8006562:	0020      	movs	r0, r4
 8006564:	0029      	movs	r1, r5
 8006566:	f7f9 ff77 	bl	8000458 <__aeabi_dcmplt>
 800656a:	2800      	cmp	r0, #0
 800656c:	d00b      	beq.n	8006586 <_dtoa_r+0x16a>
 800656e:	9802      	ldr	r0, [sp, #8]
 8006570:	f7fb fed2 	bl	8002318 <__aeabi_i2d>
 8006574:	002b      	movs	r3, r5
 8006576:	0022      	movs	r2, r4
 8006578:	f7f9 ff68 	bl	800044c <__aeabi_dcmpeq>
 800657c:	4243      	negs	r3, r0
 800657e:	4158      	adcs	r0, r3
 8006580:	9b02      	ldr	r3, [sp, #8]
 8006582:	1a1b      	subs	r3, r3, r0
 8006584:	9302      	str	r3, [sp, #8]
 8006586:	2301      	movs	r3, #1
 8006588:	9316      	str	r3, [sp, #88]	; 0x58
 800658a:	9b02      	ldr	r3, [sp, #8]
 800658c:	2b16      	cmp	r3, #22
 800658e:	d80f      	bhi.n	80065b0 <_dtoa_r+0x194>
 8006590:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006592:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006594:	00da      	lsls	r2, r3, #3
 8006596:	4b84      	ldr	r3, [pc, #528]	; (80067a8 <_dtoa_r+0x38c>)
 8006598:	189b      	adds	r3, r3, r2
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f7f9 ff5b 	bl	8000458 <__aeabi_dcmplt>
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d049      	beq.n	800663a <_dtoa_r+0x21e>
 80065a6:	9b02      	ldr	r3, [sp, #8]
 80065a8:	3b01      	subs	r3, #1
 80065aa:	9302      	str	r3, [sp, #8]
 80065ac:	2300      	movs	r3, #0
 80065ae:	9316      	str	r3, [sp, #88]	; 0x58
 80065b0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80065b2:	1b9e      	subs	r6, r3, r6
 80065b4:	2300      	movs	r3, #0
 80065b6:	930a      	str	r3, [sp, #40]	; 0x28
 80065b8:	0033      	movs	r3, r6
 80065ba:	3b01      	subs	r3, #1
 80065bc:	930d      	str	r3, [sp, #52]	; 0x34
 80065be:	d504      	bpl.n	80065ca <_dtoa_r+0x1ae>
 80065c0:	2301      	movs	r3, #1
 80065c2:	1b9b      	subs	r3, r3, r6
 80065c4:	930a      	str	r3, [sp, #40]	; 0x28
 80065c6:	2300      	movs	r3, #0
 80065c8:	930d      	str	r3, [sp, #52]	; 0x34
 80065ca:	9b02      	ldr	r3, [sp, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	db36      	blt.n	800663e <_dtoa_r+0x222>
 80065d0:	9a02      	ldr	r2, [sp, #8]
 80065d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065d4:	4694      	mov	ip, r2
 80065d6:	4463      	add	r3, ip
 80065d8:	930d      	str	r3, [sp, #52]	; 0x34
 80065da:	2300      	movs	r3, #0
 80065dc:	9215      	str	r2, [sp, #84]	; 0x54
 80065de:	930e      	str	r3, [sp, #56]	; 0x38
 80065e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065e2:	2401      	movs	r4, #1
 80065e4:	2b09      	cmp	r3, #9
 80065e6:	d864      	bhi.n	80066b2 <_dtoa_r+0x296>
 80065e8:	2b05      	cmp	r3, #5
 80065ea:	dd02      	ble.n	80065f2 <_dtoa_r+0x1d6>
 80065ec:	2400      	movs	r4, #0
 80065ee:	3b04      	subs	r3, #4
 80065f0:	9322      	str	r3, [sp, #136]	; 0x88
 80065f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065f4:	1e98      	subs	r0, r3, #2
 80065f6:	2803      	cmp	r0, #3
 80065f8:	d864      	bhi.n	80066c4 <_dtoa_r+0x2a8>
 80065fa:	f7f9 fd8d 	bl	8000118 <__gnu_thumb1_case_uqi>
 80065fe:	3829      	.short	0x3829
 8006600:	5836      	.short	0x5836
 8006602:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006604:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006606:	189e      	adds	r6, r3, r2
 8006608:	4b68      	ldr	r3, [pc, #416]	; (80067ac <_dtoa_r+0x390>)
 800660a:	18f2      	adds	r2, r6, r3
 800660c:	2a20      	cmp	r2, #32
 800660e:	dd0f      	ble.n	8006630 <_dtoa_r+0x214>
 8006610:	2340      	movs	r3, #64	; 0x40
 8006612:	1a9b      	subs	r3, r3, r2
 8006614:	409d      	lsls	r5, r3
 8006616:	4b66      	ldr	r3, [pc, #408]	; (80067b0 <_dtoa_r+0x394>)
 8006618:	9802      	ldr	r0, [sp, #8]
 800661a:	18f3      	adds	r3, r6, r3
 800661c:	40d8      	lsrs	r0, r3
 800661e:	4328      	orrs	r0, r5
 8006620:	f7fb feaa 	bl	8002378 <__aeabi_ui2d>
 8006624:	2301      	movs	r3, #1
 8006626:	4c63      	ldr	r4, [pc, #396]	; (80067b4 <_dtoa_r+0x398>)
 8006628:	3e01      	subs	r6, #1
 800662a:	1909      	adds	r1, r1, r4
 800662c:	9318      	str	r3, [sp, #96]	; 0x60
 800662e:	e776      	b.n	800651e <_dtoa_r+0x102>
 8006630:	2320      	movs	r3, #32
 8006632:	9802      	ldr	r0, [sp, #8]
 8006634:	1a9b      	subs	r3, r3, r2
 8006636:	4098      	lsls	r0, r3
 8006638:	e7f2      	b.n	8006620 <_dtoa_r+0x204>
 800663a:	9016      	str	r0, [sp, #88]	; 0x58
 800663c:	e7b8      	b.n	80065b0 <_dtoa_r+0x194>
 800663e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006640:	9a02      	ldr	r2, [sp, #8]
 8006642:	1a9b      	subs	r3, r3, r2
 8006644:	930a      	str	r3, [sp, #40]	; 0x28
 8006646:	4253      	negs	r3, r2
 8006648:	930e      	str	r3, [sp, #56]	; 0x38
 800664a:	2300      	movs	r3, #0
 800664c:	9315      	str	r3, [sp, #84]	; 0x54
 800664e:	e7c7      	b.n	80065e0 <_dtoa_r+0x1c4>
 8006650:	2300      	movs	r3, #0
 8006652:	930f      	str	r3, [sp, #60]	; 0x3c
 8006654:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006656:	930c      	str	r3, [sp, #48]	; 0x30
 8006658:	9307      	str	r3, [sp, #28]
 800665a:	2b00      	cmp	r3, #0
 800665c:	dc13      	bgt.n	8006686 <_dtoa_r+0x26a>
 800665e:	2301      	movs	r3, #1
 8006660:	001a      	movs	r2, r3
 8006662:	930c      	str	r3, [sp, #48]	; 0x30
 8006664:	9307      	str	r3, [sp, #28]
 8006666:	9223      	str	r2, [sp, #140]	; 0x8c
 8006668:	e00d      	b.n	8006686 <_dtoa_r+0x26a>
 800666a:	2301      	movs	r3, #1
 800666c:	e7f1      	b.n	8006652 <_dtoa_r+0x236>
 800666e:	2300      	movs	r3, #0
 8006670:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8006672:	930f      	str	r3, [sp, #60]	; 0x3c
 8006674:	4694      	mov	ip, r2
 8006676:	9b02      	ldr	r3, [sp, #8]
 8006678:	4463      	add	r3, ip
 800667a:	930c      	str	r3, [sp, #48]	; 0x30
 800667c:	3301      	adds	r3, #1
 800667e:	9307      	str	r3, [sp, #28]
 8006680:	2b00      	cmp	r3, #0
 8006682:	dc00      	bgt.n	8006686 <_dtoa_r+0x26a>
 8006684:	2301      	movs	r3, #1
 8006686:	2200      	movs	r2, #0
 8006688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800668a:	6042      	str	r2, [r0, #4]
 800668c:	3204      	adds	r2, #4
 800668e:	0015      	movs	r5, r2
 8006690:	3514      	adds	r5, #20
 8006692:	6841      	ldr	r1, [r0, #4]
 8006694:	429d      	cmp	r5, r3
 8006696:	d919      	bls.n	80066cc <_dtoa_r+0x2b0>
 8006698:	0038      	movs	r0, r7
 800669a:	f000 fd0d 	bl	80070b8 <_Balloc>
 800669e:	9006      	str	r0, [sp, #24]
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d117      	bne.n	80066d4 <_dtoa_r+0x2b8>
 80066a4:	21d5      	movs	r1, #213	; 0xd5
 80066a6:	0002      	movs	r2, r0
 80066a8:	4b43      	ldr	r3, [pc, #268]	; (80067b8 <_dtoa_r+0x39c>)
 80066aa:	0049      	lsls	r1, r1, #1
 80066ac:	e6cb      	b.n	8006446 <_dtoa_r+0x2a>
 80066ae:	2301      	movs	r3, #1
 80066b0:	e7de      	b.n	8006670 <_dtoa_r+0x254>
 80066b2:	2300      	movs	r3, #0
 80066b4:	940f      	str	r4, [sp, #60]	; 0x3c
 80066b6:	9322      	str	r3, [sp, #136]	; 0x88
 80066b8:	3b01      	subs	r3, #1
 80066ba:	930c      	str	r3, [sp, #48]	; 0x30
 80066bc:	9307      	str	r3, [sp, #28]
 80066be:	2200      	movs	r2, #0
 80066c0:	3313      	adds	r3, #19
 80066c2:	e7d0      	b.n	8006666 <_dtoa_r+0x24a>
 80066c4:	2301      	movs	r3, #1
 80066c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80066c8:	3b02      	subs	r3, #2
 80066ca:	e7f6      	b.n	80066ba <_dtoa_r+0x29e>
 80066cc:	3101      	adds	r1, #1
 80066ce:	6041      	str	r1, [r0, #4]
 80066d0:	0052      	lsls	r2, r2, #1
 80066d2:	e7dc      	b.n	800668e <_dtoa_r+0x272>
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	9a06      	ldr	r2, [sp, #24]
 80066d8:	601a      	str	r2, [r3, #0]
 80066da:	9b07      	ldr	r3, [sp, #28]
 80066dc:	2b0e      	cmp	r3, #14
 80066de:	d900      	bls.n	80066e2 <_dtoa_r+0x2c6>
 80066e0:	e0eb      	b.n	80068ba <_dtoa_r+0x49e>
 80066e2:	2c00      	cmp	r4, #0
 80066e4:	d100      	bne.n	80066e8 <_dtoa_r+0x2cc>
 80066e6:	e0e8      	b.n	80068ba <_dtoa_r+0x49e>
 80066e8:	9b02      	ldr	r3, [sp, #8]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	dd68      	ble.n	80067c0 <_dtoa_r+0x3a4>
 80066ee:	001a      	movs	r2, r3
 80066f0:	210f      	movs	r1, #15
 80066f2:	4b2d      	ldr	r3, [pc, #180]	; (80067a8 <_dtoa_r+0x38c>)
 80066f4:	400a      	ands	r2, r1
 80066f6:	00d2      	lsls	r2, r2, #3
 80066f8:	189b      	adds	r3, r3, r2
 80066fa:	681d      	ldr	r5, [r3, #0]
 80066fc:	685e      	ldr	r6, [r3, #4]
 80066fe:	9b02      	ldr	r3, [sp, #8]
 8006700:	111c      	asrs	r4, r3, #4
 8006702:	2302      	movs	r3, #2
 8006704:	9310      	str	r3, [sp, #64]	; 0x40
 8006706:	9b02      	ldr	r3, [sp, #8]
 8006708:	05db      	lsls	r3, r3, #23
 800670a:	d50b      	bpl.n	8006724 <_dtoa_r+0x308>
 800670c:	4b2b      	ldr	r3, [pc, #172]	; (80067bc <_dtoa_r+0x3a0>)
 800670e:	400c      	ands	r4, r1
 8006710:	6a1a      	ldr	r2, [r3, #32]
 8006712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006714:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006716:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006718:	f7fa fbaa 	bl	8000e70 <__aeabi_ddiv>
 800671c:	2303      	movs	r3, #3
 800671e:	9008      	str	r0, [sp, #32]
 8006720:	9109      	str	r1, [sp, #36]	; 0x24
 8006722:	9310      	str	r3, [sp, #64]	; 0x40
 8006724:	4b25      	ldr	r3, [pc, #148]	; (80067bc <_dtoa_r+0x3a0>)
 8006726:	9314      	str	r3, [sp, #80]	; 0x50
 8006728:	2c00      	cmp	r4, #0
 800672a:	d108      	bne.n	800673e <_dtoa_r+0x322>
 800672c:	9808      	ldr	r0, [sp, #32]
 800672e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006730:	002a      	movs	r2, r5
 8006732:	0033      	movs	r3, r6
 8006734:	f7fa fb9c 	bl	8000e70 <__aeabi_ddiv>
 8006738:	9008      	str	r0, [sp, #32]
 800673a:	9109      	str	r1, [sp, #36]	; 0x24
 800673c:	e05c      	b.n	80067f8 <_dtoa_r+0x3dc>
 800673e:	2301      	movs	r3, #1
 8006740:	421c      	tst	r4, r3
 8006742:	d00b      	beq.n	800675c <_dtoa_r+0x340>
 8006744:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006746:	0028      	movs	r0, r5
 8006748:	3301      	adds	r3, #1
 800674a:	9310      	str	r3, [sp, #64]	; 0x40
 800674c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800674e:	0031      	movs	r1, r6
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f7fa ff8e 	bl	8001674 <__aeabi_dmul>
 8006758:	0005      	movs	r5, r0
 800675a:	000e      	movs	r6, r1
 800675c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800675e:	1064      	asrs	r4, r4, #1
 8006760:	3308      	adds	r3, #8
 8006762:	e7e0      	b.n	8006726 <_dtoa_r+0x30a>
 8006764:	08008ec6 	.word	0x08008ec6
 8006768:	08008edd 	.word	0x08008edd
 800676c:	7ff00000 	.word	0x7ff00000
 8006770:	0000270f 	.word	0x0000270f
 8006774:	08008ec2 	.word	0x08008ec2
 8006778:	08008ec5 	.word	0x08008ec5
 800677c:	08008d94 	.word	0x08008d94
 8006780:	08008d95 	.word	0x08008d95
 8006784:	3ff00000 	.word	0x3ff00000
 8006788:	fffffc01 	.word	0xfffffc01
 800678c:	3ff80000 	.word	0x3ff80000
 8006790:	636f4361 	.word	0x636f4361
 8006794:	3fd287a7 	.word	0x3fd287a7
 8006798:	8b60c8b3 	.word	0x8b60c8b3
 800679c:	3fc68a28 	.word	0x3fc68a28
 80067a0:	509f79fb 	.word	0x509f79fb
 80067a4:	3fd34413 	.word	0x3fd34413
 80067a8:	08008fd8 	.word	0x08008fd8
 80067ac:	00000432 	.word	0x00000432
 80067b0:	00000412 	.word	0x00000412
 80067b4:	fe100000 	.word	0xfe100000
 80067b8:	08008f38 	.word	0x08008f38
 80067bc:	08008fb0 	.word	0x08008fb0
 80067c0:	2302      	movs	r3, #2
 80067c2:	9310      	str	r3, [sp, #64]	; 0x40
 80067c4:	9b02      	ldr	r3, [sp, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d016      	beq.n	80067f8 <_dtoa_r+0x3dc>
 80067ca:	9812      	ldr	r0, [sp, #72]	; 0x48
 80067cc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80067ce:	425c      	negs	r4, r3
 80067d0:	230f      	movs	r3, #15
 80067d2:	4ab6      	ldr	r2, [pc, #728]	; (8006aac <_dtoa_r+0x690>)
 80067d4:	4023      	ands	r3, r4
 80067d6:	00db      	lsls	r3, r3, #3
 80067d8:	18d3      	adds	r3, r2, r3
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f7fa ff49 	bl	8001674 <__aeabi_dmul>
 80067e2:	2601      	movs	r6, #1
 80067e4:	2300      	movs	r3, #0
 80067e6:	9008      	str	r0, [sp, #32]
 80067e8:	9109      	str	r1, [sp, #36]	; 0x24
 80067ea:	4db1      	ldr	r5, [pc, #708]	; (8006ab0 <_dtoa_r+0x694>)
 80067ec:	1124      	asrs	r4, r4, #4
 80067ee:	2c00      	cmp	r4, #0
 80067f0:	d000      	beq.n	80067f4 <_dtoa_r+0x3d8>
 80067f2:	e094      	b.n	800691e <_dtoa_r+0x502>
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d19f      	bne.n	8006738 <_dtoa_r+0x31c>
 80067f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d100      	bne.n	8006800 <_dtoa_r+0x3e4>
 80067fe:	e09b      	b.n	8006938 <_dtoa_r+0x51c>
 8006800:	9c08      	ldr	r4, [sp, #32]
 8006802:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006804:	2200      	movs	r2, #0
 8006806:	0020      	movs	r0, r4
 8006808:	0029      	movs	r1, r5
 800680a:	4baa      	ldr	r3, [pc, #680]	; (8006ab4 <_dtoa_r+0x698>)
 800680c:	f7f9 fe24 	bl	8000458 <__aeabi_dcmplt>
 8006810:	2800      	cmp	r0, #0
 8006812:	d100      	bne.n	8006816 <_dtoa_r+0x3fa>
 8006814:	e090      	b.n	8006938 <_dtoa_r+0x51c>
 8006816:	9b07      	ldr	r3, [sp, #28]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d100      	bne.n	800681e <_dtoa_r+0x402>
 800681c:	e08c      	b.n	8006938 <_dtoa_r+0x51c>
 800681e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006820:	2b00      	cmp	r3, #0
 8006822:	dd46      	ble.n	80068b2 <_dtoa_r+0x496>
 8006824:	9b02      	ldr	r3, [sp, #8]
 8006826:	2200      	movs	r2, #0
 8006828:	0020      	movs	r0, r4
 800682a:	0029      	movs	r1, r5
 800682c:	1e5e      	subs	r6, r3, #1
 800682e:	4ba2      	ldr	r3, [pc, #648]	; (8006ab8 <_dtoa_r+0x69c>)
 8006830:	f7fa ff20 	bl	8001674 <__aeabi_dmul>
 8006834:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006836:	9008      	str	r0, [sp, #32]
 8006838:	9109      	str	r1, [sp, #36]	; 0x24
 800683a:	3301      	adds	r3, #1
 800683c:	9310      	str	r3, [sp, #64]	; 0x40
 800683e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006840:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006842:	9c08      	ldr	r4, [sp, #32]
 8006844:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006846:	9314      	str	r3, [sp, #80]	; 0x50
 8006848:	f7fb fd66 	bl	8002318 <__aeabi_i2d>
 800684c:	0022      	movs	r2, r4
 800684e:	002b      	movs	r3, r5
 8006850:	f7fa ff10 	bl	8001674 <__aeabi_dmul>
 8006854:	2200      	movs	r2, #0
 8006856:	4b99      	ldr	r3, [pc, #612]	; (8006abc <_dtoa_r+0x6a0>)
 8006858:	f7f9 ffce 	bl	80007f8 <__aeabi_dadd>
 800685c:	9010      	str	r0, [sp, #64]	; 0x40
 800685e:	9111      	str	r1, [sp, #68]	; 0x44
 8006860:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006862:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006864:	9208      	str	r2, [sp, #32]
 8006866:	9309      	str	r3, [sp, #36]	; 0x24
 8006868:	4a95      	ldr	r2, [pc, #596]	; (8006ac0 <_dtoa_r+0x6a4>)
 800686a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800686c:	4694      	mov	ip, r2
 800686e:	4463      	add	r3, ip
 8006870:	9317      	str	r3, [sp, #92]	; 0x5c
 8006872:	9309      	str	r3, [sp, #36]	; 0x24
 8006874:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006876:	2b00      	cmp	r3, #0
 8006878:	d161      	bne.n	800693e <_dtoa_r+0x522>
 800687a:	2200      	movs	r2, #0
 800687c:	0020      	movs	r0, r4
 800687e:	0029      	movs	r1, r5
 8006880:	4b90      	ldr	r3, [pc, #576]	; (8006ac4 <_dtoa_r+0x6a8>)
 8006882:	f7fb f963 	bl	8001b4c <__aeabi_dsub>
 8006886:	9a08      	ldr	r2, [sp, #32]
 8006888:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800688a:	0004      	movs	r4, r0
 800688c:	000d      	movs	r5, r1
 800688e:	f7f9 fdf7 	bl	8000480 <__aeabi_dcmpgt>
 8006892:	2800      	cmp	r0, #0
 8006894:	d000      	beq.n	8006898 <_dtoa_r+0x47c>
 8006896:	e2af      	b.n	8006df8 <_dtoa_r+0x9dc>
 8006898:	488b      	ldr	r0, [pc, #556]	; (8006ac8 <_dtoa_r+0x6ac>)
 800689a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800689c:	4684      	mov	ip, r0
 800689e:	4461      	add	r1, ip
 80068a0:	000b      	movs	r3, r1
 80068a2:	0020      	movs	r0, r4
 80068a4:	0029      	movs	r1, r5
 80068a6:	9a08      	ldr	r2, [sp, #32]
 80068a8:	f7f9 fdd6 	bl	8000458 <__aeabi_dcmplt>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	d000      	beq.n	80068b2 <_dtoa_r+0x496>
 80068b0:	e29f      	b.n	8006df2 <_dtoa_r+0x9d6>
 80068b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068b4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80068b6:	9308      	str	r3, [sp, #32]
 80068b8:	9409      	str	r4, [sp, #36]	; 0x24
 80068ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80068bc:	2b00      	cmp	r3, #0
 80068be:	da00      	bge.n	80068c2 <_dtoa_r+0x4a6>
 80068c0:	e172      	b.n	8006ba8 <_dtoa_r+0x78c>
 80068c2:	9a02      	ldr	r2, [sp, #8]
 80068c4:	2a0e      	cmp	r2, #14
 80068c6:	dd00      	ble.n	80068ca <_dtoa_r+0x4ae>
 80068c8:	e16e      	b.n	8006ba8 <_dtoa_r+0x78c>
 80068ca:	4b78      	ldr	r3, [pc, #480]	; (8006aac <_dtoa_r+0x690>)
 80068cc:	00d2      	lsls	r2, r2, #3
 80068ce:	189b      	adds	r3, r3, r2
 80068d0:	685c      	ldr	r4, [r3, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	930a      	str	r3, [sp, #40]	; 0x28
 80068d6:	940b      	str	r4, [sp, #44]	; 0x2c
 80068d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068da:	2b00      	cmp	r3, #0
 80068dc:	db00      	blt.n	80068e0 <_dtoa_r+0x4c4>
 80068de:	e0f7      	b.n	8006ad0 <_dtoa_r+0x6b4>
 80068e0:	9b07      	ldr	r3, [sp, #28]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	dd00      	ble.n	80068e8 <_dtoa_r+0x4cc>
 80068e6:	e0f3      	b.n	8006ad0 <_dtoa_r+0x6b4>
 80068e8:	d000      	beq.n	80068ec <_dtoa_r+0x4d0>
 80068ea:	e282      	b.n	8006df2 <_dtoa_r+0x9d6>
 80068ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 80068ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80068f0:	2200      	movs	r2, #0
 80068f2:	4b74      	ldr	r3, [pc, #464]	; (8006ac4 <_dtoa_r+0x6a8>)
 80068f4:	f7fa febe 	bl	8001674 <__aeabi_dmul>
 80068f8:	9a08      	ldr	r2, [sp, #32]
 80068fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068fc:	f7f9 fdca 	bl	8000494 <__aeabi_dcmpge>
 8006900:	9e07      	ldr	r6, [sp, #28]
 8006902:	0035      	movs	r5, r6
 8006904:	2800      	cmp	r0, #0
 8006906:	d000      	beq.n	800690a <_dtoa_r+0x4ee>
 8006908:	e259      	b.n	8006dbe <_dtoa_r+0x9a2>
 800690a:	9b06      	ldr	r3, [sp, #24]
 800690c:	9a06      	ldr	r2, [sp, #24]
 800690e:	3301      	adds	r3, #1
 8006910:	9308      	str	r3, [sp, #32]
 8006912:	2331      	movs	r3, #49	; 0x31
 8006914:	7013      	strb	r3, [r2, #0]
 8006916:	9b02      	ldr	r3, [sp, #8]
 8006918:	3301      	adds	r3, #1
 800691a:	9302      	str	r3, [sp, #8]
 800691c:	e254      	b.n	8006dc8 <_dtoa_r+0x9ac>
 800691e:	4234      	tst	r4, r6
 8006920:	d007      	beq.n	8006932 <_dtoa_r+0x516>
 8006922:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006924:	3301      	adds	r3, #1
 8006926:	9310      	str	r3, [sp, #64]	; 0x40
 8006928:	682a      	ldr	r2, [r5, #0]
 800692a:	686b      	ldr	r3, [r5, #4]
 800692c:	f7fa fea2 	bl	8001674 <__aeabi_dmul>
 8006930:	0033      	movs	r3, r6
 8006932:	1064      	asrs	r4, r4, #1
 8006934:	3508      	adds	r5, #8
 8006936:	e75a      	b.n	80067ee <_dtoa_r+0x3d2>
 8006938:	9e02      	ldr	r6, [sp, #8]
 800693a:	9b07      	ldr	r3, [sp, #28]
 800693c:	e780      	b.n	8006840 <_dtoa_r+0x424>
 800693e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006940:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006942:	1e5a      	subs	r2, r3, #1
 8006944:	4b59      	ldr	r3, [pc, #356]	; (8006aac <_dtoa_r+0x690>)
 8006946:	00d2      	lsls	r2, r2, #3
 8006948:	189b      	adds	r3, r3, r2
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	2900      	cmp	r1, #0
 8006950:	d051      	beq.n	80069f6 <_dtoa_r+0x5da>
 8006952:	2000      	movs	r0, #0
 8006954:	495d      	ldr	r1, [pc, #372]	; (8006acc <_dtoa_r+0x6b0>)
 8006956:	f7fa fa8b 	bl	8000e70 <__aeabi_ddiv>
 800695a:	9a08      	ldr	r2, [sp, #32]
 800695c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800695e:	f7fb f8f5 	bl	8001b4c <__aeabi_dsub>
 8006962:	9a06      	ldr	r2, [sp, #24]
 8006964:	9b06      	ldr	r3, [sp, #24]
 8006966:	4694      	mov	ip, r2
 8006968:	9317      	str	r3, [sp, #92]	; 0x5c
 800696a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800696c:	9010      	str	r0, [sp, #64]	; 0x40
 800696e:	9111      	str	r1, [sp, #68]	; 0x44
 8006970:	4463      	add	r3, ip
 8006972:	9319      	str	r3, [sp, #100]	; 0x64
 8006974:	0029      	movs	r1, r5
 8006976:	0020      	movs	r0, r4
 8006978:	f7fb fc98 	bl	80022ac <__aeabi_d2iz>
 800697c:	9014      	str	r0, [sp, #80]	; 0x50
 800697e:	f7fb fccb 	bl	8002318 <__aeabi_i2d>
 8006982:	0002      	movs	r2, r0
 8006984:	000b      	movs	r3, r1
 8006986:	0020      	movs	r0, r4
 8006988:	0029      	movs	r1, r5
 800698a:	f7fb f8df 	bl	8001b4c <__aeabi_dsub>
 800698e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006990:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006992:	3301      	adds	r3, #1
 8006994:	9308      	str	r3, [sp, #32]
 8006996:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006998:	0004      	movs	r4, r0
 800699a:	3330      	adds	r3, #48	; 0x30
 800699c:	7013      	strb	r3, [r2, #0]
 800699e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80069a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069a2:	000d      	movs	r5, r1
 80069a4:	f7f9 fd58 	bl	8000458 <__aeabi_dcmplt>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d175      	bne.n	8006a98 <_dtoa_r+0x67c>
 80069ac:	0022      	movs	r2, r4
 80069ae:	002b      	movs	r3, r5
 80069b0:	2000      	movs	r0, #0
 80069b2:	4940      	ldr	r1, [pc, #256]	; (8006ab4 <_dtoa_r+0x698>)
 80069b4:	f7fb f8ca 	bl	8001b4c <__aeabi_dsub>
 80069b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80069ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069bc:	f7f9 fd4c 	bl	8000458 <__aeabi_dcmplt>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	d000      	beq.n	80069c6 <_dtoa_r+0x5aa>
 80069c4:	e0d2      	b.n	8006b6c <_dtoa_r+0x750>
 80069c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80069c8:	9a08      	ldr	r2, [sp, #32]
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d100      	bne.n	80069d0 <_dtoa_r+0x5b4>
 80069ce:	e770      	b.n	80068b2 <_dtoa_r+0x496>
 80069d0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80069d2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80069d4:	2200      	movs	r2, #0
 80069d6:	4b38      	ldr	r3, [pc, #224]	; (8006ab8 <_dtoa_r+0x69c>)
 80069d8:	f7fa fe4c 	bl	8001674 <__aeabi_dmul>
 80069dc:	4b36      	ldr	r3, [pc, #216]	; (8006ab8 <_dtoa_r+0x69c>)
 80069de:	9010      	str	r0, [sp, #64]	; 0x40
 80069e0:	9111      	str	r1, [sp, #68]	; 0x44
 80069e2:	2200      	movs	r2, #0
 80069e4:	0020      	movs	r0, r4
 80069e6:	0029      	movs	r1, r5
 80069e8:	f7fa fe44 	bl	8001674 <__aeabi_dmul>
 80069ec:	9b08      	ldr	r3, [sp, #32]
 80069ee:	0004      	movs	r4, r0
 80069f0:	000d      	movs	r5, r1
 80069f2:	9317      	str	r3, [sp, #92]	; 0x5c
 80069f4:	e7be      	b.n	8006974 <_dtoa_r+0x558>
 80069f6:	9808      	ldr	r0, [sp, #32]
 80069f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069fa:	f7fa fe3b 	bl	8001674 <__aeabi_dmul>
 80069fe:	9a06      	ldr	r2, [sp, #24]
 8006a00:	9b06      	ldr	r3, [sp, #24]
 8006a02:	4694      	mov	ip, r2
 8006a04:	9308      	str	r3, [sp, #32]
 8006a06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a08:	9010      	str	r0, [sp, #64]	; 0x40
 8006a0a:	9111      	str	r1, [sp, #68]	; 0x44
 8006a0c:	4463      	add	r3, ip
 8006a0e:	9319      	str	r3, [sp, #100]	; 0x64
 8006a10:	0029      	movs	r1, r5
 8006a12:	0020      	movs	r0, r4
 8006a14:	f7fb fc4a 	bl	80022ac <__aeabi_d2iz>
 8006a18:	9017      	str	r0, [sp, #92]	; 0x5c
 8006a1a:	f7fb fc7d 	bl	8002318 <__aeabi_i2d>
 8006a1e:	0002      	movs	r2, r0
 8006a20:	000b      	movs	r3, r1
 8006a22:	0020      	movs	r0, r4
 8006a24:	0029      	movs	r1, r5
 8006a26:	f7fb f891 	bl	8001b4c <__aeabi_dsub>
 8006a2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a2c:	9a08      	ldr	r2, [sp, #32]
 8006a2e:	3330      	adds	r3, #48	; 0x30
 8006a30:	7013      	strb	r3, [r2, #0]
 8006a32:	0013      	movs	r3, r2
 8006a34:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006a36:	3301      	adds	r3, #1
 8006a38:	0004      	movs	r4, r0
 8006a3a:	000d      	movs	r5, r1
 8006a3c:	9308      	str	r3, [sp, #32]
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d12c      	bne.n	8006a9c <_dtoa_r+0x680>
 8006a42:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006a44:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006a46:	9a06      	ldr	r2, [sp, #24]
 8006a48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a4a:	4694      	mov	ip, r2
 8006a4c:	4463      	add	r3, ip
 8006a4e:	2200      	movs	r2, #0
 8006a50:	9308      	str	r3, [sp, #32]
 8006a52:	4b1e      	ldr	r3, [pc, #120]	; (8006acc <_dtoa_r+0x6b0>)
 8006a54:	f7f9 fed0 	bl	80007f8 <__aeabi_dadd>
 8006a58:	0002      	movs	r2, r0
 8006a5a:	000b      	movs	r3, r1
 8006a5c:	0020      	movs	r0, r4
 8006a5e:	0029      	movs	r1, r5
 8006a60:	f7f9 fd0e 	bl	8000480 <__aeabi_dcmpgt>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	d000      	beq.n	8006a6a <_dtoa_r+0x64e>
 8006a68:	e080      	b.n	8006b6c <_dtoa_r+0x750>
 8006a6a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a6e:	2000      	movs	r0, #0
 8006a70:	4916      	ldr	r1, [pc, #88]	; (8006acc <_dtoa_r+0x6b0>)
 8006a72:	f7fb f86b 	bl	8001b4c <__aeabi_dsub>
 8006a76:	0002      	movs	r2, r0
 8006a78:	000b      	movs	r3, r1
 8006a7a:	0020      	movs	r0, r4
 8006a7c:	0029      	movs	r1, r5
 8006a7e:	f7f9 fceb 	bl	8000458 <__aeabi_dcmplt>
 8006a82:	2800      	cmp	r0, #0
 8006a84:	d100      	bne.n	8006a88 <_dtoa_r+0x66c>
 8006a86:	e714      	b.n	80068b2 <_dtoa_r+0x496>
 8006a88:	9b08      	ldr	r3, [sp, #32]
 8006a8a:	001a      	movs	r2, r3
 8006a8c:	3a01      	subs	r2, #1
 8006a8e:	9208      	str	r2, [sp, #32]
 8006a90:	7812      	ldrb	r2, [r2, #0]
 8006a92:	2a30      	cmp	r2, #48	; 0x30
 8006a94:	d0f8      	beq.n	8006a88 <_dtoa_r+0x66c>
 8006a96:	9308      	str	r3, [sp, #32]
 8006a98:	9602      	str	r6, [sp, #8]
 8006a9a:	e055      	b.n	8006b48 <_dtoa_r+0x72c>
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	4b06      	ldr	r3, [pc, #24]	; (8006ab8 <_dtoa_r+0x69c>)
 8006aa0:	f7fa fde8 	bl	8001674 <__aeabi_dmul>
 8006aa4:	0004      	movs	r4, r0
 8006aa6:	000d      	movs	r5, r1
 8006aa8:	e7b2      	b.n	8006a10 <_dtoa_r+0x5f4>
 8006aaa:	46c0      	nop			; (mov r8, r8)
 8006aac:	08008fd8 	.word	0x08008fd8
 8006ab0:	08008fb0 	.word	0x08008fb0
 8006ab4:	3ff00000 	.word	0x3ff00000
 8006ab8:	40240000 	.word	0x40240000
 8006abc:	401c0000 	.word	0x401c0000
 8006ac0:	fcc00000 	.word	0xfcc00000
 8006ac4:	40140000 	.word	0x40140000
 8006ac8:	7cc00000 	.word	0x7cc00000
 8006acc:	3fe00000 	.word	0x3fe00000
 8006ad0:	9b07      	ldr	r3, [sp, #28]
 8006ad2:	9e06      	ldr	r6, [sp, #24]
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	199b      	adds	r3, r3, r6
 8006ad8:	930c      	str	r3, [sp, #48]	; 0x30
 8006ada:	9c08      	ldr	r4, [sp, #32]
 8006adc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006ade:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ae0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ae2:	0020      	movs	r0, r4
 8006ae4:	0029      	movs	r1, r5
 8006ae6:	f7fa f9c3 	bl	8000e70 <__aeabi_ddiv>
 8006aea:	f7fb fbdf 	bl	80022ac <__aeabi_d2iz>
 8006aee:	9007      	str	r0, [sp, #28]
 8006af0:	f7fb fc12 	bl	8002318 <__aeabi_i2d>
 8006af4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006af6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006af8:	f7fa fdbc 	bl	8001674 <__aeabi_dmul>
 8006afc:	0002      	movs	r2, r0
 8006afe:	000b      	movs	r3, r1
 8006b00:	0020      	movs	r0, r4
 8006b02:	0029      	movs	r1, r5
 8006b04:	f7fb f822 	bl	8001b4c <__aeabi_dsub>
 8006b08:	0033      	movs	r3, r6
 8006b0a:	9a07      	ldr	r2, [sp, #28]
 8006b0c:	3601      	adds	r6, #1
 8006b0e:	3230      	adds	r2, #48	; 0x30
 8006b10:	701a      	strb	r2, [r3, #0]
 8006b12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b14:	9608      	str	r6, [sp, #32]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d139      	bne.n	8006b8e <_dtoa_r+0x772>
 8006b1a:	0002      	movs	r2, r0
 8006b1c:	000b      	movs	r3, r1
 8006b1e:	f7f9 fe6b 	bl	80007f8 <__aeabi_dadd>
 8006b22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b26:	0004      	movs	r4, r0
 8006b28:	000d      	movs	r5, r1
 8006b2a:	f7f9 fca9 	bl	8000480 <__aeabi_dcmpgt>
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	d11b      	bne.n	8006b6a <_dtoa_r+0x74e>
 8006b32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b36:	0020      	movs	r0, r4
 8006b38:	0029      	movs	r1, r5
 8006b3a:	f7f9 fc87 	bl	800044c <__aeabi_dcmpeq>
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	d002      	beq.n	8006b48 <_dtoa_r+0x72c>
 8006b42:	9b07      	ldr	r3, [sp, #28]
 8006b44:	07db      	lsls	r3, r3, #31
 8006b46:	d410      	bmi.n	8006b6a <_dtoa_r+0x74e>
 8006b48:	0038      	movs	r0, r7
 8006b4a:	9905      	ldr	r1, [sp, #20]
 8006b4c:	f000 faf8 	bl	8007140 <_Bfree>
 8006b50:	2300      	movs	r3, #0
 8006b52:	9a08      	ldr	r2, [sp, #32]
 8006b54:	9802      	ldr	r0, [sp, #8]
 8006b56:	7013      	strb	r3, [r2, #0]
 8006b58:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006b5a:	3001      	adds	r0, #1
 8006b5c:	6018      	str	r0, [r3, #0]
 8006b5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d100      	bne.n	8006b66 <_dtoa_r+0x74a>
 8006b64:	e4a6      	b.n	80064b4 <_dtoa_r+0x98>
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	e4a4      	b.n	80064b4 <_dtoa_r+0x98>
 8006b6a:	9e02      	ldr	r6, [sp, #8]
 8006b6c:	9b08      	ldr	r3, [sp, #32]
 8006b6e:	9308      	str	r3, [sp, #32]
 8006b70:	3b01      	subs	r3, #1
 8006b72:	781a      	ldrb	r2, [r3, #0]
 8006b74:	2a39      	cmp	r2, #57	; 0x39
 8006b76:	d106      	bne.n	8006b86 <_dtoa_r+0x76a>
 8006b78:	9a06      	ldr	r2, [sp, #24]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d1f7      	bne.n	8006b6e <_dtoa_r+0x752>
 8006b7e:	2230      	movs	r2, #48	; 0x30
 8006b80:	9906      	ldr	r1, [sp, #24]
 8006b82:	3601      	adds	r6, #1
 8006b84:	700a      	strb	r2, [r1, #0]
 8006b86:	781a      	ldrb	r2, [r3, #0]
 8006b88:	3201      	adds	r2, #1
 8006b8a:	701a      	strb	r2, [r3, #0]
 8006b8c:	e784      	b.n	8006a98 <_dtoa_r+0x67c>
 8006b8e:	2200      	movs	r2, #0
 8006b90:	4baa      	ldr	r3, [pc, #680]	; (8006e3c <_dtoa_r+0xa20>)
 8006b92:	f7fa fd6f 	bl	8001674 <__aeabi_dmul>
 8006b96:	2200      	movs	r2, #0
 8006b98:	2300      	movs	r3, #0
 8006b9a:	0004      	movs	r4, r0
 8006b9c:	000d      	movs	r5, r1
 8006b9e:	f7f9 fc55 	bl	800044c <__aeabi_dcmpeq>
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d09b      	beq.n	8006ade <_dtoa_r+0x6c2>
 8006ba6:	e7cf      	b.n	8006b48 <_dtoa_r+0x72c>
 8006ba8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006baa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006bac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006bae:	2d00      	cmp	r5, #0
 8006bb0:	d012      	beq.n	8006bd8 <_dtoa_r+0x7bc>
 8006bb2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006bb4:	2a01      	cmp	r2, #1
 8006bb6:	dc66      	bgt.n	8006c86 <_dtoa_r+0x86a>
 8006bb8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006bba:	2a00      	cmp	r2, #0
 8006bbc:	d05d      	beq.n	8006c7a <_dtoa_r+0x85e>
 8006bbe:	4aa0      	ldr	r2, [pc, #640]	; (8006e40 <_dtoa_r+0xa24>)
 8006bc0:	189b      	adds	r3, r3, r2
 8006bc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bc4:	2101      	movs	r1, #1
 8006bc6:	18d2      	adds	r2, r2, r3
 8006bc8:	920a      	str	r2, [sp, #40]	; 0x28
 8006bca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006bcc:	0038      	movs	r0, r7
 8006bce:	18d3      	adds	r3, r2, r3
 8006bd0:	930d      	str	r3, [sp, #52]	; 0x34
 8006bd2:	f000 fb65 	bl	80072a0 <__i2b>
 8006bd6:	0005      	movs	r5, r0
 8006bd8:	2c00      	cmp	r4, #0
 8006bda:	dd0e      	ble.n	8006bfa <_dtoa_r+0x7de>
 8006bdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	dd0b      	ble.n	8006bfa <_dtoa_r+0x7de>
 8006be2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006be4:	0023      	movs	r3, r4
 8006be6:	4294      	cmp	r4, r2
 8006be8:	dd00      	ble.n	8006bec <_dtoa_r+0x7d0>
 8006bea:	0013      	movs	r3, r2
 8006bec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bee:	1ae4      	subs	r4, r4, r3
 8006bf0:	1ad2      	subs	r2, r2, r3
 8006bf2:	920a      	str	r2, [sp, #40]	; 0x28
 8006bf4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	930d      	str	r3, [sp, #52]	; 0x34
 8006bfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d01f      	beq.n	8006c40 <_dtoa_r+0x824>
 8006c00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d054      	beq.n	8006cb0 <_dtoa_r+0x894>
 8006c06:	2e00      	cmp	r6, #0
 8006c08:	dd11      	ble.n	8006c2e <_dtoa_r+0x812>
 8006c0a:	0029      	movs	r1, r5
 8006c0c:	0032      	movs	r2, r6
 8006c0e:	0038      	movs	r0, r7
 8006c10:	f000 fc0c 	bl	800742c <__pow5mult>
 8006c14:	9a05      	ldr	r2, [sp, #20]
 8006c16:	0001      	movs	r1, r0
 8006c18:	0005      	movs	r5, r0
 8006c1a:	0038      	movs	r0, r7
 8006c1c:	f000 fb56 	bl	80072cc <__multiply>
 8006c20:	9905      	ldr	r1, [sp, #20]
 8006c22:	9014      	str	r0, [sp, #80]	; 0x50
 8006c24:	0038      	movs	r0, r7
 8006c26:	f000 fa8b 	bl	8007140 <_Bfree>
 8006c2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c2c:	9305      	str	r3, [sp, #20]
 8006c2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c30:	1b9a      	subs	r2, r3, r6
 8006c32:	42b3      	cmp	r3, r6
 8006c34:	d004      	beq.n	8006c40 <_dtoa_r+0x824>
 8006c36:	0038      	movs	r0, r7
 8006c38:	9905      	ldr	r1, [sp, #20]
 8006c3a:	f000 fbf7 	bl	800742c <__pow5mult>
 8006c3e:	9005      	str	r0, [sp, #20]
 8006c40:	2101      	movs	r1, #1
 8006c42:	0038      	movs	r0, r7
 8006c44:	f000 fb2c 	bl	80072a0 <__i2b>
 8006c48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c4a:	0006      	movs	r6, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	dd31      	ble.n	8006cb4 <_dtoa_r+0x898>
 8006c50:	001a      	movs	r2, r3
 8006c52:	0001      	movs	r1, r0
 8006c54:	0038      	movs	r0, r7
 8006c56:	f000 fbe9 	bl	800742c <__pow5mult>
 8006c5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c5c:	0006      	movs	r6, r0
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	dd2d      	ble.n	8006cbe <_dtoa_r+0x8a2>
 8006c62:	2300      	movs	r3, #0
 8006c64:	930e      	str	r3, [sp, #56]	; 0x38
 8006c66:	6933      	ldr	r3, [r6, #16]
 8006c68:	3303      	adds	r3, #3
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	18f3      	adds	r3, r6, r3
 8006c6e:	6858      	ldr	r0, [r3, #4]
 8006c70:	f000 face 	bl	8007210 <__hi0bits>
 8006c74:	2320      	movs	r3, #32
 8006c76:	1a18      	subs	r0, r3, r0
 8006c78:	e039      	b.n	8006cee <_dtoa_r+0x8d2>
 8006c7a:	2336      	movs	r3, #54	; 0x36
 8006c7c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006c7e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006c80:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006c82:	1a9b      	subs	r3, r3, r2
 8006c84:	e79d      	b.n	8006bc2 <_dtoa_r+0x7a6>
 8006c86:	9b07      	ldr	r3, [sp, #28]
 8006c88:	1e5e      	subs	r6, r3, #1
 8006c8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c8c:	42b3      	cmp	r3, r6
 8006c8e:	db07      	blt.n	8006ca0 <_dtoa_r+0x884>
 8006c90:	1b9e      	subs	r6, r3, r6
 8006c92:	9b07      	ldr	r3, [sp, #28]
 8006c94:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	da93      	bge.n	8006bc2 <_dtoa_r+0x7a6>
 8006c9a:	1ae4      	subs	r4, r4, r3
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	e790      	b.n	8006bc2 <_dtoa_r+0x7a6>
 8006ca0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ca2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006ca4:	1af3      	subs	r3, r6, r3
 8006ca6:	18d3      	adds	r3, r2, r3
 8006ca8:	960e      	str	r6, [sp, #56]	; 0x38
 8006caa:	9315      	str	r3, [sp, #84]	; 0x54
 8006cac:	2600      	movs	r6, #0
 8006cae:	e7f0      	b.n	8006c92 <_dtoa_r+0x876>
 8006cb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cb2:	e7c0      	b.n	8006c36 <_dtoa_r+0x81a>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	930e      	str	r3, [sp, #56]	; 0x38
 8006cb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	dc13      	bgt.n	8006ce6 <_dtoa_r+0x8ca>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	930e      	str	r3, [sp, #56]	; 0x38
 8006cc2:	9b08      	ldr	r3, [sp, #32]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d10e      	bne.n	8006ce6 <_dtoa_r+0x8ca>
 8006cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cca:	031b      	lsls	r3, r3, #12
 8006ccc:	d10b      	bne.n	8006ce6 <_dtoa_r+0x8ca>
 8006cce:	4b5d      	ldr	r3, [pc, #372]	; (8006e44 <_dtoa_r+0xa28>)
 8006cd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cd2:	4213      	tst	r3, r2
 8006cd4:	d007      	beq.n	8006ce6 <_dtoa_r+0x8ca>
 8006cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cd8:	3301      	adds	r3, #1
 8006cda:	930a      	str	r3, [sp, #40]	; 0x28
 8006cdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cde:	3301      	adds	r3, #1
 8006ce0:	930d      	str	r3, [sp, #52]	; 0x34
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	930e      	str	r3, [sp, #56]	; 0x38
 8006ce6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ce8:	2001      	movs	r0, #1
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1bb      	bne.n	8006c66 <_dtoa_r+0x84a>
 8006cee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cf0:	221f      	movs	r2, #31
 8006cf2:	1818      	adds	r0, r3, r0
 8006cf4:	0003      	movs	r3, r0
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	4210      	tst	r0, r2
 8006cfa:	d046      	beq.n	8006d8a <_dtoa_r+0x96e>
 8006cfc:	3201      	adds	r2, #1
 8006cfe:	1ad2      	subs	r2, r2, r3
 8006d00:	2a04      	cmp	r2, #4
 8006d02:	dd3f      	ble.n	8006d84 <_dtoa_r+0x968>
 8006d04:	221c      	movs	r2, #28
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d0a:	18e4      	adds	r4, r4, r3
 8006d0c:	18d2      	adds	r2, r2, r3
 8006d0e:	920a      	str	r2, [sp, #40]	; 0x28
 8006d10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d12:	18d3      	adds	r3, r2, r3
 8006d14:	930d      	str	r3, [sp, #52]	; 0x34
 8006d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	dd05      	ble.n	8006d28 <_dtoa_r+0x90c>
 8006d1c:	001a      	movs	r2, r3
 8006d1e:	0038      	movs	r0, r7
 8006d20:	9905      	ldr	r1, [sp, #20]
 8006d22:	f000 fbdf 	bl	80074e4 <__lshift>
 8006d26:	9005      	str	r0, [sp, #20]
 8006d28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	dd05      	ble.n	8006d3a <_dtoa_r+0x91e>
 8006d2e:	0031      	movs	r1, r6
 8006d30:	001a      	movs	r2, r3
 8006d32:	0038      	movs	r0, r7
 8006d34:	f000 fbd6 	bl	80074e4 <__lshift>
 8006d38:	0006      	movs	r6, r0
 8006d3a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d026      	beq.n	8006d8e <_dtoa_r+0x972>
 8006d40:	0031      	movs	r1, r6
 8006d42:	9805      	ldr	r0, [sp, #20]
 8006d44:	f000 fc3c 	bl	80075c0 <__mcmp>
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	da20      	bge.n	8006d8e <_dtoa_r+0x972>
 8006d4c:	9b02      	ldr	r3, [sp, #8]
 8006d4e:	220a      	movs	r2, #10
 8006d50:	3b01      	subs	r3, #1
 8006d52:	9302      	str	r3, [sp, #8]
 8006d54:	0038      	movs	r0, r7
 8006d56:	2300      	movs	r3, #0
 8006d58:	9905      	ldr	r1, [sp, #20]
 8006d5a:	f000 fa15 	bl	8007188 <__multadd>
 8006d5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d60:	9005      	str	r0, [sp, #20]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d100      	bne.n	8006d68 <_dtoa_r+0x94c>
 8006d66:	e166      	b.n	8007036 <_dtoa_r+0xc1a>
 8006d68:	2300      	movs	r3, #0
 8006d6a:	0029      	movs	r1, r5
 8006d6c:	220a      	movs	r2, #10
 8006d6e:	0038      	movs	r0, r7
 8006d70:	f000 fa0a 	bl	8007188 <__multadd>
 8006d74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d76:	0005      	movs	r5, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	dc47      	bgt.n	8006e0c <_dtoa_r+0x9f0>
 8006d7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	dc0d      	bgt.n	8006d9e <_dtoa_r+0x982>
 8006d82:	e043      	b.n	8006e0c <_dtoa_r+0x9f0>
 8006d84:	2a04      	cmp	r2, #4
 8006d86:	d0c6      	beq.n	8006d16 <_dtoa_r+0x8fa>
 8006d88:	0013      	movs	r3, r2
 8006d8a:	331c      	adds	r3, #28
 8006d8c:	e7bc      	b.n	8006d08 <_dtoa_r+0x8ec>
 8006d8e:	9b07      	ldr	r3, [sp, #28]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	dc35      	bgt.n	8006e00 <_dtoa_r+0x9e4>
 8006d94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	dd32      	ble.n	8006e00 <_dtoa_r+0x9e4>
 8006d9a:	9b07      	ldr	r3, [sp, #28]
 8006d9c:	930c      	str	r3, [sp, #48]	; 0x30
 8006d9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10c      	bne.n	8006dbe <_dtoa_r+0x9a2>
 8006da4:	0031      	movs	r1, r6
 8006da6:	2205      	movs	r2, #5
 8006da8:	0038      	movs	r0, r7
 8006daa:	f000 f9ed 	bl	8007188 <__multadd>
 8006dae:	0006      	movs	r6, r0
 8006db0:	0001      	movs	r1, r0
 8006db2:	9805      	ldr	r0, [sp, #20]
 8006db4:	f000 fc04 	bl	80075c0 <__mcmp>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	dd00      	ble.n	8006dbe <_dtoa_r+0x9a2>
 8006dbc:	e5a5      	b.n	800690a <_dtoa_r+0x4ee>
 8006dbe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006dc0:	43db      	mvns	r3, r3
 8006dc2:	9302      	str	r3, [sp, #8]
 8006dc4:	9b06      	ldr	r3, [sp, #24]
 8006dc6:	9308      	str	r3, [sp, #32]
 8006dc8:	2400      	movs	r4, #0
 8006dca:	0031      	movs	r1, r6
 8006dcc:	0038      	movs	r0, r7
 8006dce:	f000 f9b7 	bl	8007140 <_Bfree>
 8006dd2:	2d00      	cmp	r5, #0
 8006dd4:	d100      	bne.n	8006dd8 <_dtoa_r+0x9bc>
 8006dd6:	e6b7      	b.n	8006b48 <_dtoa_r+0x72c>
 8006dd8:	2c00      	cmp	r4, #0
 8006dda:	d005      	beq.n	8006de8 <_dtoa_r+0x9cc>
 8006ddc:	42ac      	cmp	r4, r5
 8006dde:	d003      	beq.n	8006de8 <_dtoa_r+0x9cc>
 8006de0:	0021      	movs	r1, r4
 8006de2:	0038      	movs	r0, r7
 8006de4:	f000 f9ac 	bl	8007140 <_Bfree>
 8006de8:	0029      	movs	r1, r5
 8006dea:	0038      	movs	r0, r7
 8006dec:	f000 f9a8 	bl	8007140 <_Bfree>
 8006df0:	e6aa      	b.n	8006b48 <_dtoa_r+0x72c>
 8006df2:	2600      	movs	r6, #0
 8006df4:	0035      	movs	r5, r6
 8006df6:	e7e2      	b.n	8006dbe <_dtoa_r+0x9a2>
 8006df8:	9602      	str	r6, [sp, #8]
 8006dfa:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8006dfc:	0035      	movs	r5, r6
 8006dfe:	e584      	b.n	800690a <_dtoa_r+0x4ee>
 8006e00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d100      	bne.n	8006e08 <_dtoa_r+0x9ec>
 8006e06:	e0ce      	b.n	8006fa6 <_dtoa_r+0xb8a>
 8006e08:	9b07      	ldr	r3, [sp, #28]
 8006e0a:	930c      	str	r3, [sp, #48]	; 0x30
 8006e0c:	2c00      	cmp	r4, #0
 8006e0e:	dd05      	ble.n	8006e1c <_dtoa_r+0xa00>
 8006e10:	0029      	movs	r1, r5
 8006e12:	0022      	movs	r2, r4
 8006e14:	0038      	movs	r0, r7
 8006e16:	f000 fb65 	bl	80074e4 <__lshift>
 8006e1a:	0005      	movs	r5, r0
 8006e1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e1e:	0028      	movs	r0, r5
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d022      	beq.n	8006e6a <_dtoa_r+0xa4e>
 8006e24:	0038      	movs	r0, r7
 8006e26:	6869      	ldr	r1, [r5, #4]
 8006e28:	f000 f946 	bl	80070b8 <_Balloc>
 8006e2c:	1e04      	subs	r4, r0, #0
 8006e2e:	d10f      	bne.n	8006e50 <_dtoa_r+0xa34>
 8006e30:	0002      	movs	r2, r0
 8006e32:	4b05      	ldr	r3, [pc, #20]	; (8006e48 <_dtoa_r+0xa2c>)
 8006e34:	4905      	ldr	r1, [pc, #20]	; (8006e4c <_dtoa_r+0xa30>)
 8006e36:	f7ff fb06 	bl	8006446 <_dtoa_r+0x2a>
 8006e3a:	46c0      	nop			; (mov r8, r8)
 8006e3c:	40240000 	.word	0x40240000
 8006e40:	00000433 	.word	0x00000433
 8006e44:	7ff00000 	.word	0x7ff00000
 8006e48:	08008f38 	.word	0x08008f38
 8006e4c:	000002ea 	.word	0x000002ea
 8006e50:	0029      	movs	r1, r5
 8006e52:	692b      	ldr	r3, [r5, #16]
 8006e54:	310c      	adds	r1, #12
 8006e56:	1c9a      	adds	r2, r3, #2
 8006e58:	0092      	lsls	r2, r2, #2
 8006e5a:	300c      	adds	r0, #12
 8006e5c:	f000 f923 	bl	80070a6 <memcpy>
 8006e60:	2201      	movs	r2, #1
 8006e62:	0021      	movs	r1, r4
 8006e64:	0038      	movs	r0, r7
 8006e66:	f000 fb3d 	bl	80074e4 <__lshift>
 8006e6a:	9b06      	ldr	r3, [sp, #24]
 8006e6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e6e:	930a      	str	r3, [sp, #40]	; 0x28
 8006e70:	3b01      	subs	r3, #1
 8006e72:	189b      	adds	r3, r3, r2
 8006e74:	2201      	movs	r2, #1
 8006e76:	002c      	movs	r4, r5
 8006e78:	0005      	movs	r5, r0
 8006e7a:	9314      	str	r3, [sp, #80]	; 0x50
 8006e7c:	9b08      	ldr	r3, [sp, #32]
 8006e7e:	4013      	ands	r3, r2
 8006e80:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e82:	0031      	movs	r1, r6
 8006e84:	9805      	ldr	r0, [sp, #20]
 8006e86:	f7ff fa3d 	bl	8006304 <quorem>
 8006e8a:	0003      	movs	r3, r0
 8006e8c:	0021      	movs	r1, r4
 8006e8e:	3330      	adds	r3, #48	; 0x30
 8006e90:	900d      	str	r0, [sp, #52]	; 0x34
 8006e92:	9805      	ldr	r0, [sp, #20]
 8006e94:	9307      	str	r3, [sp, #28]
 8006e96:	f000 fb93 	bl	80075c0 <__mcmp>
 8006e9a:	002a      	movs	r2, r5
 8006e9c:	900e      	str	r0, [sp, #56]	; 0x38
 8006e9e:	0031      	movs	r1, r6
 8006ea0:	0038      	movs	r0, r7
 8006ea2:	f000 fba9 	bl	80075f8 <__mdiff>
 8006ea6:	68c3      	ldr	r3, [r0, #12]
 8006ea8:	9008      	str	r0, [sp, #32]
 8006eaa:	9310      	str	r3, [sp, #64]	; 0x40
 8006eac:	2301      	movs	r3, #1
 8006eae:	930c      	str	r3, [sp, #48]	; 0x30
 8006eb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d104      	bne.n	8006ec0 <_dtoa_r+0xaa4>
 8006eb6:	0001      	movs	r1, r0
 8006eb8:	9805      	ldr	r0, [sp, #20]
 8006eba:	f000 fb81 	bl	80075c0 <__mcmp>
 8006ebe:	900c      	str	r0, [sp, #48]	; 0x30
 8006ec0:	0038      	movs	r0, r7
 8006ec2:	9908      	ldr	r1, [sp, #32]
 8006ec4:	f000 f93c 	bl	8007140 <_Bfree>
 8006ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ecc:	3301      	adds	r3, #1
 8006ece:	9308      	str	r3, [sp, #32]
 8006ed0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	d10c      	bne.n	8006ef4 <_dtoa_r+0xad8>
 8006eda:	9b07      	ldr	r3, [sp, #28]
 8006edc:	2b39      	cmp	r3, #57	; 0x39
 8006ede:	d026      	beq.n	8006f2e <_dtoa_r+0xb12>
 8006ee0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	dd02      	ble.n	8006eec <_dtoa_r+0xad0>
 8006ee6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ee8:	3331      	adds	r3, #49	; 0x31
 8006eea:	9307      	str	r3, [sp, #28]
 8006eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eee:	9a07      	ldr	r2, [sp, #28]
 8006ef0:	701a      	strb	r2, [r3, #0]
 8006ef2:	e76a      	b.n	8006dca <_dtoa_r+0x9ae>
 8006ef4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	db04      	blt.n	8006f04 <_dtoa_r+0xae8>
 8006efa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006efc:	4313      	orrs	r3, r2
 8006efe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f00:	4313      	orrs	r3, r2
 8006f02:	d11f      	bne.n	8006f44 <_dtoa_r+0xb28>
 8006f04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	ddf0      	ble.n	8006eec <_dtoa_r+0xad0>
 8006f0a:	9905      	ldr	r1, [sp, #20]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	0038      	movs	r0, r7
 8006f10:	f000 fae8 	bl	80074e4 <__lshift>
 8006f14:	0031      	movs	r1, r6
 8006f16:	9005      	str	r0, [sp, #20]
 8006f18:	f000 fb52 	bl	80075c0 <__mcmp>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	dc03      	bgt.n	8006f28 <_dtoa_r+0xb0c>
 8006f20:	d1e4      	bne.n	8006eec <_dtoa_r+0xad0>
 8006f22:	9b07      	ldr	r3, [sp, #28]
 8006f24:	07db      	lsls	r3, r3, #31
 8006f26:	d5e1      	bpl.n	8006eec <_dtoa_r+0xad0>
 8006f28:	9b07      	ldr	r3, [sp, #28]
 8006f2a:	2b39      	cmp	r3, #57	; 0x39
 8006f2c:	d1db      	bne.n	8006ee6 <_dtoa_r+0xaca>
 8006f2e:	2339      	movs	r3, #57	; 0x39
 8006f30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f32:	7013      	strb	r3, [r2, #0]
 8006f34:	9b08      	ldr	r3, [sp, #32]
 8006f36:	9308      	str	r3, [sp, #32]
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	781a      	ldrb	r2, [r3, #0]
 8006f3c:	2a39      	cmp	r2, #57	; 0x39
 8006f3e:	d068      	beq.n	8007012 <_dtoa_r+0xbf6>
 8006f40:	3201      	adds	r2, #1
 8006f42:	e7d5      	b.n	8006ef0 <_dtoa_r+0xad4>
 8006f44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	dd07      	ble.n	8006f5a <_dtoa_r+0xb3e>
 8006f4a:	9b07      	ldr	r3, [sp, #28]
 8006f4c:	2b39      	cmp	r3, #57	; 0x39
 8006f4e:	d0ee      	beq.n	8006f2e <_dtoa_r+0xb12>
 8006f50:	9b07      	ldr	r3, [sp, #28]
 8006f52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f54:	3301      	adds	r3, #1
 8006f56:	7013      	strb	r3, [r2, #0]
 8006f58:	e737      	b.n	8006dca <_dtoa_r+0x9ae>
 8006f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f5c:	9a07      	ldr	r2, [sp, #28]
 8006f5e:	701a      	strb	r2, [r3, #0]
 8006f60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d03e      	beq.n	8006fe6 <_dtoa_r+0xbca>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	220a      	movs	r2, #10
 8006f6c:	9905      	ldr	r1, [sp, #20]
 8006f6e:	0038      	movs	r0, r7
 8006f70:	f000 f90a 	bl	8007188 <__multadd>
 8006f74:	2300      	movs	r3, #0
 8006f76:	9005      	str	r0, [sp, #20]
 8006f78:	220a      	movs	r2, #10
 8006f7a:	0021      	movs	r1, r4
 8006f7c:	0038      	movs	r0, r7
 8006f7e:	42ac      	cmp	r4, r5
 8006f80:	d106      	bne.n	8006f90 <_dtoa_r+0xb74>
 8006f82:	f000 f901 	bl	8007188 <__multadd>
 8006f86:	0004      	movs	r4, r0
 8006f88:	0005      	movs	r5, r0
 8006f8a:	9b08      	ldr	r3, [sp, #32]
 8006f8c:	930a      	str	r3, [sp, #40]	; 0x28
 8006f8e:	e778      	b.n	8006e82 <_dtoa_r+0xa66>
 8006f90:	f000 f8fa 	bl	8007188 <__multadd>
 8006f94:	0029      	movs	r1, r5
 8006f96:	0004      	movs	r4, r0
 8006f98:	2300      	movs	r3, #0
 8006f9a:	220a      	movs	r2, #10
 8006f9c:	0038      	movs	r0, r7
 8006f9e:	f000 f8f3 	bl	8007188 <__multadd>
 8006fa2:	0005      	movs	r5, r0
 8006fa4:	e7f1      	b.n	8006f8a <_dtoa_r+0xb6e>
 8006fa6:	9b07      	ldr	r3, [sp, #28]
 8006fa8:	930c      	str	r3, [sp, #48]	; 0x30
 8006faa:	2400      	movs	r4, #0
 8006fac:	0031      	movs	r1, r6
 8006fae:	9805      	ldr	r0, [sp, #20]
 8006fb0:	f7ff f9a8 	bl	8006304 <quorem>
 8006fb4:	9b06      	ldr	r3, [sp, #24]
 8006fb6:	3030      	adds	r0, #48	; 0x30
 8006fb8:	5518      	strb	r0, [r3, r4]
 8006fba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fbc:	3401      	adds	r4, #1
 8006fbe:	9007      	str	r0, [sp, #28]
 8006fc0:	42a3      	cmp	r3, r4
 8006fc2:	dd07      	ble.n	8006fd4 <_dtoa_r+0xbb8>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	220a      	movs	r2, #10
 8006fc8:	0038      	movs	r0, r7
 8006fca:	9905      	ldr	r1, [sp, #20]
 8006fcc:	f000 f8dc 	bl	8007188 <__multadd>
 8006fd0:	9005      	str	r0, [sp, #20]
 8006fd2:	e7eb      	b.n	8006fac <_dtoa_r+0xb90>
 8006fd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fd6:	2001      	movs	r0, #1
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	dd00      	ble.n	8006fde <_dtoa_r+0xbc2>
 8006fdc:	0018      	movs	r0, r3
 8006fde:	2400      	movs	r4, #0
 8006fe0:	9b06      	ldr	r3, [sp, #24]
 8006fe2:	181b      	adds	r3, r3, r0
 8006fe4:	9308      	str	r3, [sp, #32]
 8006fe6:	9905      	ldr	r1, [sp, #20]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	0038      	movs	r0, r7
 8006fec:	f000 fa7a 	bl	80074e4 <__lshift>
 8006ff0:	0031      	movs	r1, r6
 8006ff2:	9005      	str	r0, [sp, #20]
 8006ff4:	f000 fae4 	bl	80075c0 <__mcmp>
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	dc9b      	bgt.n	8006f34 <_dtoa_r+0xb18>
 8006ffc:	d102      	bne.n	8007004 <_dtoa_r+0xbe8>
 8006ffe:	9b07      	ldr	r3, [sp, #28]
 8007000:	07db      	lsls	r3, r3, #31
 8007002:	d497      	bmi.n	8006f34 <_dtoa_r+0xb18>
 8007004:	9b08      	ldr	r3, [sp, #32]
 8007006:	9308      	str	r3, [sp, #32]
 8007008:	3b01      	subs	r3, #1
 800700a:	781a      	ldrb	r2, [r3, #0]
 800700c:	2a30      	cmp	r2, #48	; 0x30
 800700e:	d0fa      	beq.n	8007006 <_dtoa_r+0xbea>
 8007010:	e6db      	b.n	8006dca <_dtoa_r+0x9ae>
 8007012:	9a06      	ldr	r2, [sp, #24]
 8007014:	429a      	cmp	r2, r3
 8007016:	d18e      	bne.n	8006f36 <_dtoa_r+0xb1a>
 8007018:	9b02      	ldr	r3, [sp, #8]
 800701a:	3301      	adds	r3, #1
 800701c:	9302      	str	r3, [sp, #8]
 800701e:	2331      	movs	r3, #49	; 0x31
 8007020:	e799      	b.n	8006f56 <_dtoa_r+0xb3a>
 8007022:	4b09      	ldr	r3, [pc, #36]	; (8007048 <_dtoa_r+0xc2c>)
 8007024:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007026:	9306      	str	r3, [sp, #24]
 8007028:	4b08      	ldr	r3, [pc, #32]	; (800704c <_dtoa_r+0xc30>)
 800702a:	2a00      	cmp	r2, #0
 800702c:	d001      	beq.n	8007032 <_dtoa_r+0xc16>
 800702e:	f7ff fa3f 	bl	80064b0 <_dtoa_r+0x94>
 8007032:	f7ff fa3f 	bl	80064b4 <_dtoa_r+0x98>
 8007036:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007038:	2b00      	cmp	r3, #0
 800703a:	dcb6      	bgt.n	8006faa <_dtoa_r+0xb8e>
 800703c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800703e:	2b02      	cmp	r3, #2
 8007040:	dd00      	ble.n	8007044 <_dtoa_r+0xc28>
 8007042:	e6ac      	b.n	8006d9e <_dtoa_r+0x982>
 8007044:	e7b1      	b.n	8006faa <_dtoa_r+0xb8e>
 8007046:	46c0      	nop			; (mov r8, r8)
 8007048:	08008eb9 	.word	0x08008eb9
 800704c:	08008ec1 	.word	0x08008ec1

08007050 <_localeconv_r>:
 8007050:	4800      	ldr	r0, [pc, #0]	; (8007054 <_localeconv_r+0x4>)
 8007052:	4770      	bx	lr
 8007054:	200001a0 	.word	0x200001a0

08007058 <malloc>:
 8007058:	b510      	push	{r4, lr}
 800705a:	4b03      	ldr	r3, [pc, #12]	; (8007068 <malloc+0x10>)
 800705c:	0001      	movs	r1, r0
 800705e:	6818      	ldr	r0, [r3, #0]
 8007060:	f000 fc5e 	bl	8007920 <_malloc_r>
 8007064:	bd10      	pop	{r4, pc}
 8007066:	46c0      	nop			; (mov r8, r8)
 8007068:	2000004c 	.word	0x2000004c

0800706c <__ascii_mbtowc>:
 800706c:	b082      	sub	sp, #8
 800706e:	2900      	cmp	r1, #0
 8007070:	d100      	bne.n	8007074 <__ascii_mbtowc+0x8>
 8007072:	a901      	add	r1, sp, #4
 8007074:	1e10      	subs	r0, r2, #0
 8007076:	d006      	beq.n	8007086 <__ascii_mbtowc+0x1a>
 8007078:	2b00      	cmp	r3, #0
 800707a:	d006      	beq.n	800708a <__ascii_mbtowc+0x1e>
 800707c:	7813      	ldrb	r3, [r2, #0]
 800707e:	600b      	str	r3, [r1, #0]
 8007080:	7810      	ldrb	r0, [r2, #0]
 8007082:	1e43      	subs	r3, r0, #1
 8007084:	4198      	sbcs	r0, r3
 8007086:	b002      	add	sp, #8
 8007088:	4770      	bx	lr
 800708a:	2002      	movs	r0, #2
 800708c:	4240      	negs	r0, r0
 800708e:	e7fa      	b.n	8007086 <__ascii_mbtowc+0x1a>

08007090 <memchr>:
 8007090:	b2c9      	uxtb	r1, r1
 8007092:	1882      	adds	r2, r0, r2
 8007094:	4290      	cmp	r0, r2
 8007096:	d101      	bne.n	800709c <memchr+0xc>
 8007098:	2000      	movs	r0, #0
 800709a:	4770      	bx	lr
 800709c:	7803      	ldrb	r3, [r0, #0]
 800709e:	428b      	cmp	r3, r1
 80070a0:	d0fb      	beq.n	800709a <memchr+0xa>
 80070a2:	3001      	adds	r0, #1
 80070a4:	e7f6      	b.n	8007094 <memchr+0x4>

080070a6 <memcpy>:
 80070a6:	2300      	movs	r3, #0
 80070a8:	b510      	push	{r4, lr}
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d100      	bne.n	80070b0 <memcpy+0xa>
 80070ae:	bd10      	pop	{r4, pc}
 80070b0:	5ccc      	ldrb	r4, [r1, r3]
 80070b2:	54c4      	strb	r4, [r0, r3]
 80070b4:	3301      	adds	r3, #1
 80070b6:	e7f8      	b.n	80070aa <memcpy+0x4>

080070b8 <_Balloc>:
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80070bc:	0006      	movs	r6, r0
 80070be:	000c      	movs	r4, r1
 80070c0:	2d00      	cmp	r5, #0
 80070c2:	d10e      	bne.n	80070e2 <_Balloc+0x2a>
 80070c4:	2010      	movs	r0, #16
 80070c6:	f7ff ffc7 	bl	8007058 <malloc>
 80070ca:	1e02      	subs	r2, r0, #0
 80070cc:	6270      	str	r0, [r6, #36]	; 0x24
 80070ce:	d104      	bne.n	80070da <_Balloc+0x22>
 80070d0:	2166      	movs	r1, #102	; 0x66
 80070d2:	4b19      	ldr	r3, [pc, #100]	; (8007138 <_Balloc+0x80>)
 80070d4:	4819      	ldr	r0, [pc, #100]	; (800713c <_Balloc+0x84>)
 80070d6:	f000 fe1b 	bl	8007d10 <__assert_func>
 80070da:	6045      	str	r5, [r0, #4]
 80070dc:	6085      	str	r5, [r0, #8]
 80070de:	6005      	str	r5, [r0, #0]
 80070e0:	60c5      	str	r5, [r0, #12]
 80070e2:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80070e4:	68eb      	ldr	r3, [r5, #12]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d013      	beq.n	8007112 <_Balloc+0x5a>
 80070ea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80070ec:	00a2      	lsls	r2, r4, #2
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	189b      	adds	r3, r3, r2
 80070f2:	6818      	ldr	r0, [r3, #0]
 80070f4:	2800      	cmp	r0, #0
 80070f6:	d118      	bne.n	800712a <_Balloc+0x72>
 80070f8:	2101      	movs	r1, #1
 80070fa:	000d      	movs	r5, r1
 80070fc:	40a5      	lsls	r5, r4
 80070fe:	1d6a      	adds	r2, r5, #5
 8007100:	0030      	movs	r0, r6
 8007102:	0092      	lsls	r2, r2, #2
 8007104:	f000 fb74 	bl	80077f0 <_calloc_r>
 8007108:	2800      	cmp	r0, #0
 800710a:	d00c      	beq.n	8007126 <_Balloc+0x6e>
 800710c:	6044      	str	r4, [r0, #4]
 800710e:	6085      	str	r5, [r0, #8]
 8007110:	e00d      	b.n	800712e <_Balloc+0x76>
 8007112:	2221      	movs	r2, #33	; 0x21
 8007114:	2104      	movs	r1, #4
 8007116:	0030      	movs	r0, r6
 8007118:	f000 fb6a 	bl	80077f0 <_calloc_r>
 800711c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800711e:	60e8      	str	r0, [r5, #12]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1e1      	bne.n	80070ea <_Balloc+0x32>
 8007126:	2000      	movs	r0, #0
 8007128:	bd70      	pop	{r4, r5, r6, pc}
 800712a:	6802      	ldr	r2, [r0, #0]
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	2300      	movs	r3, #0
 8007130:	6103      	str	r3, [r0, #16]
 8007132:	60c3      	str	r3, [r0, #12]
 8007134:	e7f8      	b.n	8007128 <_Balloc+0x70>
 8007136:	46c0      	nop			; (mov r8, r8)
 8007138:	08008ec6 	.word	0x08008ec6
 800713c:	08008f53 	.word	0x08008f53

08007140 <_Bfree>:
 8007140:	b570      	push	{r4, r5, r6, lr}
 8007142:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007144:	0005      	movs	r5, r0
 8007146:	000c      	movs	r4, r1
 8007148:	2e00      	cmp	r6, #0
 800714a:	d10e      	bne.n	800716a <_Bfree+0x2a>
 800714c:	2010      	movs	r0, #16
 800714e:	f7ff ff83 	bl	8007058 <malloc>
 8007152:	1e02      	subs	r2, r0, #0
 8007154:	6268      	str	r0, [r5, #36]	; 0x24
 8007156:	d104      	bne.n	8007162 <_Bfree+0x22>
 8007158:	218a      	movs	r1, #138	; 0x8a
 800715a:	4b09      	ldr	r3, [pc, #36]	; (8007180 <_Bfree+0x40>)
 800715c:	4809      	ldr	r0, [pc, #36]	; (8007184 <_Bfree+0x44>)
 800715e:	f000 fdd7 	bl	8007d10 <__assert_func>
 8007162:	6046      	str	r6, [r0, #4]
 8007164:	6086      	str	r6, [r0, #8]
 8007166:	6006      	str	r6, [r0, #0]
 8007168:	60c6      	str	r6, [r0, #12]
 800716a:	2c00      	cmp	r4, #0
 800716c:	d007      	beq.n	800717e <_Bfree+0x3e>
 800716e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007170:	6862      	ldr	r2, [r4, #4]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	0092      	lsls	r2, r2, #2
 8007176:	189b      	adds	r3, r3, r2
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	6022      	str	r2, [r4, #0]
 800717c:	601c      	str	r4, [r3, #0]
 800717e:	bd70      	pop	{r4, r5, r6, pc}
 8007180:	08008ec6 	.word	0x08008ec6
 8007184:	08008f53 	.word	0x08008f53

08007188 <__multadd>:
 8007188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800718a:	000e      	movs	r6, r1
 800718c:	9001      	str	r0, [sp, #4]
 800718e:	000c      	movs	r4, r1
 8007190:	001d      	movs	r5, r3
 8007192:	2000      	movs	r0, #0
 8007194:	690f      	ldr	r7, [r1, #16]
 8007196:	3614      	adds	r6, #20
 8007198:	6833      	ldr	r3, [r6, #0]
 800719a:	3001      	adds	r0, #1
 800719c:	b299      	uxth	r1, r3
 800719e:	4351      	muls	r1, r2
 80071a0:	0c1b      	lsrs	r3, r3, #16
 80071a2:	4353      	muls	r3, r2
 80071a4:	1949      	adds	r1, r1, r5
 80071a6:	0c0d      	lsrs	r5, r1, #16
 80071a8:	195b      	adds	r3, r3, r5
 80071aa:	0c1d      	lsrs	r5, r3, #16
 80071ac:	b289      	uxth	r1, r1
 80071ae:	041b      	lsls	r3, r3, #16
 80071b0:	185b      	adds	r3, r3, r1
 80071b2:	c608      	stmia	r6!, {r3}
 80071b4:	4287      	cmp	r7, r0
 80071b6:	dcef      	bgt.n	8007198 <__multadd+0x10>
 80071b8:	2d00      	cmp	r5, #0
 80071ba:	d022      	beq.n	8007202 <__multadd+0x7a>
 80071bc:	68a3      	ldr	r3, [r4, #8]
 80071be:	42bb      	cmp	r3, r7
 80071c0:	dc19      	bgt.n	80071f6 <__multadd+0x6e>
 80071c2:	6863      	ldr	r3, [r4, #4]
 80071c4:	9801      	ldr	r0, [sp, #4]
 80071c6:	1c59      	adds	r1, r3, #1
 80071c8:	f7ff ff76 	bl	80070b8 <_Balloc>
 80071cc:	1e06      	subs	r6, r0, #0
 80071ce:	d105      	bne.n	80071dc <__multadd+0x54>
 80071d0:	0002      	movs	r2, r0
 80071d2:	21b5      	movs	r1, #181	; 0xb5
 80071d4:	4b0c      	ldr	r3, [pc, #48]	; (8007208 <__multadd+0x80>)
 80071d6:	480d      	ldr	r0, [pc, #52]	; (800720c <__multadd+0x84>)
 80071d8:	f000 fd9a 	bl	8007d10 <__assert_func>
 80071dc:	0021      	movs	r1, r4
 80071de:	6923      	ldr	r3, [r4, #16]
 80071e0:	310c      	adds	r1, #12
 80071e2:	1c9a      	adds	r2, r3, #2
 80071e4:	0092      	lsls	r2, r2, #2
 80071e6:	300c      	adds	r0, #12
 80071e8:	f7ff ff5d 	bl	80070a6 <memcpy>
 80071ec:	0021      	movs	r1, r4
 80071ee:	9801      	ldr	r0, [sp, #4]
 80071f0:	f7ff ffa6 	bl	8007140 <_Bfree>
 80071f4:	0034      	movs	r4, r6
 80071f6:	1d3b      	adds	r3, r7, #4
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	18e3      	adds	r3, r4, r3
 80071fc:	605d      	str	r5, [r3, #4]
 80071fe:	1c7b      	adds	r3, r7, #1
 8007200:	6123      	str	r3, [r4, #16]
 8007202:	0020      	movs	r0, r4
 8007204:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007206:	46c0      	nop			; (mov r8, r8)
 8007208:	08008f38 	.word	0x08008f38
 800720c:	08008f53 	.word	0x08008f53

08007210 <__hi0bits>:
 8007210:	0003      	movs	r3, r0
 8007212:	0c02      	lsrs	r2, r0, #16
 8007214:	2000      	movs	r0, #0
 8007216:	4282      	cmp	r2, r0
 8007218:	d101      	bne.n	800721e <__hi0bits+0xe>
 800721a:	041b      	lsls	r3, r3, #16
 800721c:	3010      	adds	r0, #16
 800721e:	0e1a      	lsrs	r2, r3, #24
 8007220:	d101      	bne.n	8007226 <__hi0bits+0x16>
 8007222:	3008      	adds	r0, #8
 8007224:	021b      	lsls	r3, r3, #8
 8007226:	0f1a      	lsrs	r2, r3, #28
 8007228:	d101      	bne.n	800722e <__hi0bits+0x1e>
 800722a:	3004      	adds	r0, #4
 800722c:	011b      	lsls	r3, r3, #4
 800722e:	0f9a      	lsrs	r2, r3, #30
 8007230:	d101      	bne.n	8007236 <__hi0bits+0x26>
 8007232:	3002      	adds	r0, #2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	2b00      	cmp	r3, #0
 8007238:	db03      	blt.n	8007242 <__hi0bits+0x32>
 800723a:	3001      	adds	r0, #1
 800723c:	005b      	lsls	r3, r3, #1
 800723e:	d400      	bmi.n	8007242 <__hi0bits+0x32>
 8007240:	2020      	movs	r0, #32
 8007242:	4770      	bx	lr

08007244 <__lo0bits>:
 8007244:	6803      	ldr	r3, [r0, #0]
 8007246:	0002      	movs	r2, r0
 8007248:	2107      	movs	r1, #7
 800724a:	0018      	movs	r0, r3
 800724c:	4008      	ands	r0, r1
 800724e:	420b      	tst	r3, r1
 8007250:	d00d      	beq.n	800726e <__lo0bits+0x2a>
 8007252:	3906      	subs	r1, #6
 8007254:	2000      	movs	r0, #0
 8007256:	420b      	tst	r3, r1
 8007258:	d105      	bne.n	8007266 <__lo0bits+0x22>
 800725a:	3002      	adds	r0, #2
 800725c:	4203      	tst	r3, r0
 800725e:	d003      	beq.n	8007268 <__lo0bits+0x24>
 8007260:	40cb      	lsrs	r3, r1
 8007262:	0008      	movs	r0, r1
 8007264:	6013      	str	r3, [r2, #0]
 8007266:	4770      	bx	lr
 8007268:	089b      	lsrs	r3, r3, #2
 800726a:	6013      	str	r3, [r2, #0]
 800726c:	e7fb      	b.n	8007266 <__lo0bits+0x22>
 800726e:	b299      	uxth	r1, r3
 8007270:	2900      	cmp	r1, #0
 8007272:	d101      	bne.n	8007278 <__lo0bits+0x34>
 8007274:	2010      	movs	r0, #16
 8007276:	0c1b      	lsrs	r3, r3, #16
 8007278:	b2d9      	uxtb	r1, r3
 800727a:	2900      	cmp	r1, #0
 800727c:	d101      	bne.n	8007282 <__lo0bits+0x3e>
 800727e:	3008      	adds	r0, #8
 8007280:	0a1b      	lsrs	r3, r3, #8
 8007282:	0719      	lsls	r1, r3, #28
 8007284:	d101      	bne.n	800728a <__lo0bits+0x46>
 8007286:	3004      	adds	r0, #4
 8007288:	091b      	lsrs	r3, r3, #4
 800728a:	0799      	lsls	r1, r3, #30
 800728c:	d101      	bne.n	8007292 <__lo0bits+0x4e>
 800728e:	3002      	adds	r0, #2
 8007290:	089b      	lsrs	r3, r3, #2
 8007292:	07d9      	lsls	r1, r3, #31
 8007294:	d4e9      	bmi.n	800726a <__lo0bits+0x26>
 8007296:	3001      	adds	r0, #1
 8007298:	085b      	lsrs	r3, r3, #1
 800729a:	d1e6      	bne.n	800726a <__lo0bits+0x26>
 800729c:	2020      	movs	r0, #32
 800729e:	e7e2      	b.n	8007266 <__lo0bits+0x22>

080072a0 <__i2b>:
 80072a0:	b510      	push	{r4, lr}
 80072a2:	000c      	movs	r4, r1
 80072a4:	2101      	movs	r1, #1
 80072a6:	f7ff ff07 	bl	80070b8 <_Balloc>
 80072aa:	2800      	cmp	r0, #0
 80072ac:	d106      	bne.n	80072bc <__i2b+0x1c>
 80072ae:	21a0      	movs	r1, #160	; 0xa0
 80072b0:	0002      	movs	r2, r0
 80072b2:	4b04      	ldr	r3, [pc, #16]	; (80072c4 <__i2b+0x24>)
 80072b4:	4804      	ldr	r0, [pc, #16]	; (80072c8 <__i2b+0x28>)
 80072b6:	0049      	lsls	r1, r1, #1
 80072b8:	f000 fd2a 	bl	8007d10 <__assert_func>
 80072bc:	2301      	movs	r3, #1
 80072be:	6144      	str	r4, [r0, #20]
 80072c0:	6103      	str	r3, [r0, #16]
 80072c2:	bd10      	pop	{r4, pc}
 80072c4:	08008f38 	.word	0x08008f38
 80072c8:	08008f53 	.word	0x08008f53

080072cc <__multiply>:
 80072cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ce:	690b      	ldr	r3, [r1, #16]
 80072d0:	0014      	movs	r4, r2
 80072d2:	6912      	ldr	r2, [r2, #16]
 80072d4:	000d      	movs	r5, r1
 80072d6:	b089      	sub	sp, #36	; 0x24
 80072d8:	4293      	cmp	r3, r2
 80072da:	da01      	bge.n	80072e0 <__multiply+0x14>
 80072dc:	0025      	movs	r5, r4
 80072de:	000c      	movs	r4, r1
 80072e0:	692f      	ldr	r7, [r5, #16]
 80072e2:	6926      	ldr	r6, [r4, #16]
 80072e4:	6869      	ldr	r1, [r5, #4]
 80072e6:	19bb      	adds	r3, r7, r6
 80072e8:	9302      	str	r3, [sp, #8]
 80072ea:	68ab      	ldr	r3, [r5, #8]
 80072ec:	19ba      	adds	r2, r7, r6
 80072ee:	4293      	cmp	r3, r2
 80072f0:	da00      	bge.n	80072f4 <__multiply+0x28>
 80072f2:	3101      	adds	r1, #1
 80072f4:	f7ff fee0 	bl	80070b8 <_Balloc>
 80072f8:	9001      	str	r0, [sp, #4]
 80072fa:	2800      	cmp	r0, #0
 80072fc:	d106      	bne.n	800730c <__multiply+0x40>
 80072fe:	215e      	movs	r1, #94	; 0x5e
 8007300:	0002      	movs	r2, r0
 8007302:	4b48      	ldr	r3, [pc, #288]	; (8007424 <__multiply+0x158>)
 8007304:	4848      	ldr	r0, [pc, #288]	; (8007428 <__multiply+0x15c>)
 8007306:	31ff      	adds	r1, #255	; 0xff
 8007308:	f000 fd02 	bl	8007d10 <__assert_func>
 800730c:	9b01      	ldr	r3, [sp, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	3314      	adds	r3, #20
 8007312:	469c      	mov	ip, r3
 8007314:	19bb      	adds	r3, r7, r6
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4463      	add	r3, ip
 800731a:	9303      	str	r3, [sp, #12]
 800731c:	4663      	mov	r3, ip
 800731e:	9903      	ldr	r1, [sp, #12]
 8007320:	428b      	cmp	r3, r1
 8007322:	d32c      	bcc.n	800737e <__multiply+0xb2>
 8007324:	002b      	movs	r3, r5
 8007326:	0022      	movs	r2, r4
 8007328:	3314      	adds	r3, #20
 800732a:	00bf      	lsls	r7, r7, #2
 800732c:	3214      	adds	r2, #20
 800732e:	9306      	str	r3, [sp, #24]
 8007330:	00b6      	lsls	r6, r6, #2
 8007332:	19db      	adds	r3, r3, r7
 8007334:	9304      	str	r3, [sp, #16]
 8007336:	1993      	adds	r3, r2, r6
 8007338:	9307      	str	r3, [sp, #28]
 800733a:	2304      	movs	r3, #4
 800733c:	9305      	str	r3, [sp, #20]
 800733e:	002b      	movs	r3, r5
 8007340:	9904      	ldr	r1, [sp, #16]
 8007342:	3315      	adds	r3, #21
 8007344:	9200      	str	r2, [sp, #0]
 8007346:	4299      	cmp	r1, r3
 8007348:	d305      	bcc.n	8007356 <__multiply+0x8a>
 800734a:	1b4b      	subs	r3, r1, r5
 800734c:	3b15      	subs	r3, #21
 800734e:	089b      	lsrs	r3, r3, #2
 8007350:	3301      	adds	r3, #1
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	9305      	str	r3, [sp, #20]
 8007356:	9b07      	ldr	r3, [sp, #28]
 8007358:	9a00      	ldr	r2, [sp, #0]
 800735a:	429a      	cmp	r2, r3
 800735c:	d311      	bcc.n	8007382 <__multiply+0xb6>
 800735e:	9b02      	ldr	r3, [sp, #8]
 8007360:	2b00      	cmp	r3, #0
 8007362:	dd06      	ble.n	8007372 <__multiply+0xa6>
 8007364:	9b03      	ldr	r3, [sp, #12]
 8007366:	3b04      	subs	r3, #4
 8007368:	9303      	str	r3, [sp, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d053      	beq.n	800741a <__multiply+0x14e>
 8007372:	9b01      	ldr	r3, [sp, #4]
 8007374:	9a02      	ldr	r2, [sp, #8]
 8007376:	0018      	movs	r0, r3
 8007378:	611a      	str	r2, [r3, #16]
 800737a:	b009      	add	sp, #36	; 0x24
 800737c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800737e:	c304      	stmia	r3!, {r2}
 8007380:	e7cd      	b.n	800731e <__multiply+0x52>
 8007382:	9b00      	ldr	r3, [sp, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	b298      	uxth	r0, r3
 8007388:	2800      	cmp	r0, #0
 800738a:	d01b      	beq.n	80073c4 <__multiply+0xf8>
 800738c:	4667      	mov	r7, ip
 800738e:	2400      	movs	r4, #0
 8007390:	9e06      	ldr	r6, [sp, #24]
 8007392:	ce02      	ldmia	r6!, {r1}
 8007394:	683a      	ldr	r2, [r7, #0]
 8007396:	b28b      	uxth	r3, r1
 8007398:	4343      	muls	r3, r0
 800739a:	b292      	uxth	r2, r2
 800739c:	189b      	adds	r3, r3, r2
 800739e:	191b      	adds	r3, r3, r4
 80073a0:	0c0c      	lsrs	r4, r1, #16
 80073a2:	4344      	muls	r4, r0
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	0c11      	lsrs	r1, r2, #16
 80073a8:	1861      	adds	r1, r4, r1
 80073aa:	0c1c      	lsrs	r4, r3, #16
 80073ac:	1909      	adds	r1, r1, r4
 80073ae:	0c0c      	lsrs	r4, r1, #16
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	0409      	lsls	r1, r1, #16
 80073b4:	430b      	orrs	r3, r1
 80073b6:	c708      	stmia	r7!, {r3}
 80073b8:	9b04      	ldr	r3, [sp, #16]
 80073ba:	42b3      	cmp	r3, r6
 80073bc:	d8e9      	bhi.n	8007392 <__multiply+0xc6>
 80073be:	4663      	mov	r3, ip
 80073c0:	9a05      	ldr	r2, [sp, #20]
 80073c2:	509c      	str	r4, [r3, r2]
 80073c4:	9b00      	ldr	r3, [sp, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	0c1e      	lsrs	r6, r3, #16
 80073ca:	d020      	beq.n	800740e <__multiply+0x142>
 80073cc:	4663      	mov	r3, ip
 80073ce:	002c      	movs	r4, r5
 80073d0:	4660      	mov	r0, ip
 80073d2:	2700      	movs	r7, #0
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	3414      	adds	r4, #20
 80073d8:	6822      	ldr	r2, [r4, #0]
 80073da:	b29b      	uxth	r3, r3
 80073dc:	b291      	uxth	r1, r2
 80073de:	4371      	muls	r1, r6
 80073e0:	6802      	ldr	r2, [r0, #0]
 80073e2:	0c12      	lsrs	r2, r2, #16
 80073e4:	1889      	adds	r1, r1, r2
 80073e6:	19cf      	adds	r7, r1, r7
 80073e8:	0439      	lsls	r1, r7, #16
 80073ea:	430b      	orrs	r3, r1
 80073ec:	6003      	str	r3, [r0, #0]
 80073ee:	cc02      	ldmia	r4!, {r1}
 80073f0:	6843      	ldr	r3, [r0, #4]
 80073f2:	0c09      	lsrs	r1, r1, #16
 80073f4:	4371      	muls	r1, r6
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	0c3f      	lsrs	r7, r7, #16
 80073fa:	18cb      	adds	r3, r1, r3
 80073fc:	9a04      	ldr	r2, [sp, #16]
 80073fe:	19db      	adds	r3, r3, r7
 8007400:	0c1f      	lsrs	r7, r3, #16
 8007402:	3004      	adds	r0, #4
 8007404:	42a2      	cmp	r2, r4
 8007406:	d8e7      	bhi.n	80073d8 <__multiply+0x10c>
 8007408:	4662      	mov	r2, ip
 800740a:	9905      	ldr	r1, [sp, #20]
 800740c:	5053      	str	r3, [r2, r1]
 800740e:	9b00      	ldr	r3, [sp, #0]
 8007410:	3304      	adds	r3, #4
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	2304      	movs	r3, #4
 8007416:	449c      	add	ip, r3
 8007418:	e79d      	b.n	8007356 <__multiply+0x8a>
 800741a:	9b02      	ldr	r3, [sp, #8]
 800741c:	3b01      	subs	r3, #1
 800741e:	9302      	str	r3, [sp, #8]
 8007420:	e79d      	b.n	800735e <__multiply+0x92>
 8007422:	46c0      	nop			; (mov r8, r8)
 8007424:	08008f38 	.word	0x08008f38
 8007428:	08008f53 	.word	0x08008f53

0800742c <__pow5mult>:
 800742c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800742e:	2303      	movs	r3, #3
 8007430:	0015      	movs	r5, r2
 8007432:	0007      	movs	r7, r0
 8007434:	000e      	movs	r6, r1
 8007436:	401a      	ands	r2, r3
 8007438:	421d      	tst	r5, r3
 800743a:	d008      	beq.n	800744e <__pow5mult+0x22>
 800743c:	4925      	ldr	r1, [pc, #148]	; (80074d4 <__pow5mult+0xa8>)
 800743e:	3a01      	subs	r2, #1
 8007440:	0092      	lsls	r2, r2, #2
 8007442:	5852      	ldr	r2, [r2, r1]
 8007444:	2300      	movs	r3, #0
 8007446:	0031      	movs	r1, r6
 8007448:	f7ff fe9e 	bl	8007188 <__multadd>
 800744c:	0006      	movs	r6, r0
 800744e:	10ad      	asrs	r5, r5, #2
 8007450:	d03d      	beq.n	80074ce <__pow5mult+0xa2>
 8007452:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8007454:	2c00      	cmp	r4, #0
 8007456:	d10f      	bne.n	8007478 <__pow5mult+0x4c>
 8007458:	2010      	movs	r0, #16
 800745a:	f7ff fdfd 	bl	8007058 <malloc>
 800745e:	1e02      	subs	r2, r0, #0
 8007460:	6278      	str	r0, [r7, #36]	; 0x24
 8007462:	d105      	bne.n	8007470 <__pow5mult+0x44>
 8007464:	21d7      	movs	r1, #215	; 0xd7
 8007466:	4b1c      	ldr	r3, [pc, #112]	; (80074d8 <__pow5mult+0xac>)
 8007468:	481c      	ldr	r0, [pc, #112]	; (80074dc <__pow5mult+0xb0>)
 800746a:	0049      	lsls	r1, r1, #1
 800746c:	f000 fc50 	bl	8007d10 <__assert_func>
 8007470:	6044      	str	r4, [r0, #4]
 8007472:	6084      	str	r4, [r0, #8]
 8007474:	6004      	str	r4, [r0, #0]
 8007476:	60c4      	str	r4, [r0, #12]
 8007478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747a:	689c      	ldr	r4, [r3, #8]
 800747c:	9301      	str	r3, [sp, #4]
 800747e:	2c00      	cmp	r4, #0
 8007480:	d108      	bne.n	8007494 <__pow5mult+0x68>
 8007482:	0038      	movs	r0, r7
 8007484:	4916      	ldr	r1, [pc, #88]	; (80074e0 <__pow5mult+0xb4>)
 8007486:	f7ff ff0b 	bl	80072a0 <__i2b>
 800748a:	9b01      	ldr	r3, [sp, #4]
 800748c:	0004      	movs	r4, r0
 800748e:	6098      	str	r0, [r3, #8]
 8007490:	2300      	movs	r3, #0
 8007492:	6003      	str	r3, [r0, #0]
 8007494:	2301      	movs	r3, #1
 8007496:	421d      	tst	r5, r3
 8007498:	d00a      	beq.n	80074b0 <__pow5mult+0x84>
 800749a:	0031      	movs	r1, r6
 800749c:	0022      	movs	r2, r4
 800749e:	0038      	movs	r0, r7
 80074a0:	f7ff ff14 	bl	80072cc <__multiply>
 80074a4:	0031      	movs	r1, r6
 80074a6:	9001      	str	r0, [sp, #4]
 80074a8:	0038      	movs	r0, r7
 80074aa:	f7ff fe49 	bl	8007140 <_Bfree>
 80074ae:	9e01      	ldr	r6, [sp, #4]
 80074b0:	106d      	asrs	r5, r5, #1
 80074b2:	d00c      	beq.n	80074ce <__pow5mult+0xa2>
 80074b4:	6820      	ldr	r0, [r4, #0]
 80074b6:	2800      	cmp	r0, #0
 80074b8:	d107      	bne.n	80074ca <__pow5mult+0x9e>
 80074ba:	0022      	movs	r2, r4
 80074bc:	0021      	movs	r1, r4
 80074be:	0038      	movs	r0, r7
 80074c0:	f7ff ff04 	bl	80072cc <__multiply>
 80074c4:	2300      	movs	r3, #0
 80074c6:	6020      	str	r0, [r4, #0]
 80074c8:	6003      	str	r3, [r0, #0]
 80074ca:	0004      	movs	r4, r0
 80074cc:	e7e2      	b.n	8007494 <__pow5mult+0x68>
 80074ce:	0030      	movs	r0, r6
 80074d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80074d2:	46c0      	nop			; (mov r8, r8)
 80074d4:	080090a0 	.word	0x080090a0
 80074d8:	08008ec6 	.word	0x08008ec6
 80074dc:	08008f53 	.word	0x08008f53
 80074e0:	00000271 	.word	0x00000271

080074e4 <__lshift>:
 80074e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074e6:	000c      	movs	r4, r1
 80074e8:	0017      	movs	r7, r2
 80074ea:	6923      	ldr	r3, [r4, #16]
 80074ec:	1155      	asrs	r5, r2, #5
 80074ee:	b087      	sub	sp, #28
 80074f0:	18eb      	adds	r3, r5, r3
 80074f2:	9302      	str	r3, [sp, #8]
 80074f4:	3301      	adds	r3, #1
 80074f6:	9301      	str	r3, [sp, #4]
 80074f8:	6849      	ldr	r1, [r1, #4]
 80074fa:	68a3      	ldr	r3, [r4, #8]
 80074fc:	9004      	str	r0, [sp, #16]
 80074fe:	9a01      	ldr	r2, [sp, #4]
 8007500:	4293      	cmp	r3, r2
 8007502:	db10      	blt.n	8007526 <__lshift+0x42>
 8007504:	9804      	ldr	r0, [sp, #16]
 8007506:	f7ff fdd7 	bl	80070b8 <_Balloc>
 800750a:	2300      	movs	r3, #0
 800750c:	0002      	movs	r2, r0
 800750e:	0006      	movs	r6, r0
 8007510:	0019      	movs	r1, r3
 8007512:	3214      	adds	r2, #20
 8007514:	4298      	cmp	r0, r3
 8007516:	d10c      	bne.n	8007532 <__lshift+0x4e>
 8007518:	21da      	movs	r1, #218	; 0xda
 800751a:	0002      	movs	r2, r0
 800751c:	4b26      	ldr	r3, [pc, #152]	; (80075b8 <__lshift+0xd4>)
 800751e:	4827      	ldr	r0, [pc, #156]	; (80075bc <__lshift+0xd8>)
 8007520:	31ff      	adds	r1, #255	; 0xff
 8007522:	f000 fbf5 	bl	8007d10 <__assert_func>
 8007526:	3101      	adds	r1, #1
 8007528:	005b      	lsls	r3, r3, #1
 800752a:	e7e8      	b.n	80074fe <__lshift+0x1a>
 800752c:	0098      	lsls	r0, r3, #2
 800752e:	5011      	str	r1, [r2, r0]
 8007530:	3301      	adds	r3, #1
 8007532:	42ab      	cmp	r3, r5
 8007534:	dbfa      	blt.n	800752c <__lshift+0x48>
 8007536:	43eb      	mvns	r3, r5
 8007538:	17db      	asrs	r3, r3, #31
 800753a:	401d      	ands	r5, r3
 800753c:	211f      	movs	r1, #31
 800753e:	0023      	movs	r3, r4
 8007540:	0038      	movs	r0, r7
 8007542:	00ad      	lsls	r5, r5, #2
 8007544:	1955      	adds	r5, r2, r5
 8007546:	6922      	ldr	r2, [r4, #16]
 8007548:	3314      	adds	r3, #20
 800754a:	0092      	lsls	r2, r2, #2
 800754c:	4008      	ands	r0, r1
 800754e:	4684      	mov	ip, r0
 8007550:	189a      	adds	r2, r3, r2
 8007552:	420f      	tst	r7, r1
 8007554:	d02a      	beq.n	80075ac <__lshift+0xc8>
 8007556:	3101      	adds	r1, #1
 8007558:	1a09      	subs	r1, r1, r0
 800755a:	9105      	str	r1, [sp, #20]
 800755c:	2100      	movs	r1, #0
 800755e:	9503      	str	r5, [sp, #12]
 8007560:	4667      	mov	r7, ip
 8007562:	6818      	ldr	r0, [r3, #0]
 8007564:	40b8      	lsls	r0, r7
 8007566:	4301      	orrs	r1, r0
 8007568:	9803      	ldr	r0, [sp, #12]
 800756a:	c002      	stmia	r0!, {r1}
 800756c:	cb02      	ldmia	r3!, {r1}
 800756e:	9003      	str	r0, [sp, #12]
 8007570:	9805      	ldr	r0, [sp, #20]
 8007572:	40c1      	lsrs	r1, r0
 8007574:	429a      	cmp	r2, r3
 8007576:	d8f3      	bhi.n	8007560 <__lshift+0x7c>
 8007578:	0020      	movs	r0, r4
 800757a:	3015      	adds	r0, #21
 800757c:	2304      	movs	r3, #4
 800757e:	4282      	cmp	r2, r0
 8007580:	d304      	bcc.n	800758c <__lshift+0xa8>
 8007582:	1b13      	subs	r3, r2, r4
 8007584:	3b15      	subs	r3, #21
 8007586:	089b      	lsrs	r3, r3, #2
 8007588:	3301      	adds	r3, #1
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	50e9      	str	r1, [r5, r3]
 800758e:	2900      	cmp	r1, #0
 8007590:	d002      	beq.n	8007598 <__lshift+0xb4>
 8007592:	9b02      	ldr	r3, [sp, #8]
 8007594:	3302      	adds	r3, #2
 8007596:	9301      	str	r3, [sp, #4]
 8007598:	9b01      	ldr	r3, [sp, #4]
 800759a:	9804      	ldr	r0, [sp, #16]
 800759c:	3b01      	subs	r3, #1
 800759e:	0021      	movs	r1, r4
 80075a0:	6133      	str	r3, [r6, #16]
 80075a2:	f7ff fdcd 	bl	8007140 <_Bfree>
 80075a6:	0030      	movs	r0, r6
 80075a8:	b007      	add	sp, #28
 80075aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075ac:	cb02      	ldmia	r3!, {r1}
 80075ae:	c502      	stmia	r5!, {r1}
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d8fb      	bhi.n	80075ac <__lshift+0xc8>
 80075b4:	e7f0      	b.n	8007598 <__lshift+0xb4>
 80075b6:	46c0      	nop			; (mov r8, r8)
 80075b8:	08008f38 	.word	0x08008f38
 80075bc:	08008f53 	.word	0x08008f53

080075c0 <__mcmp>:
 80075c0:	6902      	ldr	r2, [r0, #16]
 80075c2:	690b      	ldr	r3, [r1, #16]
 80075c4:	b530      	push	{r4, r5, lr}
 80075c6:	0004      	movs	r4, r0
 80075c8:	1ad0      	subs	r0, r2, r3
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d10d      	bne.n	80075ea <__mcmp+0x2a>
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	3414      	adds	r4, #20
 80075d2:	3114      	adds	r1, #20
 80075d4:	18e2      	adds	r2, r4, r3
 80075d6:	18c9      	adds	r1, r1, r3
 80075d8:	3a04      	subs	r2, #4
 80075da:	3904      	subs	r1, #4
 80075dc:	6815      	ldr	r5, [r2, #0]
 80075de:	680b      	ldr	r3, [r1, #0]
 80075e0:	429d      	cmp	r5, r3
 80075e2:	d003      	beq.n	80075ec <__mcmp+0x2c>
 80075e4:	2001      	movs	r0, #1
 80075e6:	429d      	cmp	r5, r3
 80075e8:	d303      	bcc.n	80075f2 <__mcmp+0x32>
 80075ea:	bd30      	pop	{r4, r5, pc}
 80075ec:	4294      	cmp	r4, r2
 80075ee:	d3f3      	bcc.n	80075d8 <__mcmp+0x18>
 80075f0:	e7fb      	b.n	80075ea <__mcmp+0x2a>
 80075f2:	4240      	negs	r0, r0
 80075f4:	e7f9      	b.n	80075ea <__mcmp+0x2a>
	...

080075f8 <__mdiff>:
 80075f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075fa:	000e      	movs	r6, r1
 80075fc:	0007      	movs	r7, r0
 80075fe:	0011      	movs	r1, r2
 8007600:	0030      	movs	r0, r6
 8007602:	b087      	sub	sp, #28
 8007604:	0014      	movs	r4, r2
 8007606:	f7ff ffdb 	bl	80075c0 <__mcmp>
 800760a:	1e05      	subs	r5, r0, #0
 800760c:	d110      	bne.n	8007630 <__mdiff+0x38>
 800760e:	0001      	movs	r1, r0
 8007610:	0038      	movs	r0, r7
 8007612:	f7ff fd51 	bl	80070b8 <_Balloc>
 8007616:	1e02      	subs	r2, r0, #0
 8007618:	d104      	bne.n	8007624 <__mdiff+0x2c>
 800761a:	4b40      	ldr	r3, [pc, #256]	; (800771c <__mdiff+0x124>)
 800761c:	4940      	ldr	r1, [pc, #256]	; (8007720 <__mdiff+0x128>)
 800761e:	4841      	ldr	r0, [pc, #260]	; (8007724 <__mdiff+0x12c>)
 8007620:	f000 fb76 	bl	8007d10 <__assert_func>
 8007624:	2301      	movs	r3, #1
 8007626:	6145      	str	r5, [r0, #20]
 8007628:	6103      	str	r3, [r0, #16]
 800762a:	0010      	movs	r0, r2
 800762c:	b007      	add	sp, #28
 800762e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007630:	2301      	movs	r3, #1
 8007632:	9301      	str	r3, [sp, #4]
 8007634:	2800      	cmp	r0, #0
 8007636:	db04      	blt.n	8007642 <__mdiff+0x4a>
 8007638:	0023      	movs	r3, r4
 800763a:	0034      	movs	r4, r6
 800763c:	001e      	movs	r6, r3
 800763e:	2300      	movs	r3, #0
 8007640:	9301      	str	r3, [sp, #4]
 8007642:	0038      	movs	r0, r7
 8007644:	6861      	ldr	r1, [r4, #4]
 8007646:	f7ff fd37 	bl	80070b8 <_Balloc>
 800764a:	1e02      	subs	r2, r0, #0
 800764c:	d103      	bne.n	8007656 <__mdiff+0x5e>
 800764e:	2190      	movs	r1, #144	; 0x90
 8007650:	4b32      	ldr	r3, [pc, #200]	; (800771c <__mdiff+0x124>)
 8007652:	0089      	lsls	r1, r1, #2
 8007654:	e7e3      	b.n	800761e <__mdiff+0x26>
 8007656:	9b01      	ldr	r3, [sp, #4]
 8007658:	2700      	movs	r7, #0
 800765a:	60c3      	str	r3, [r0, #12]
 800765c:	6920      	ldr	r0, [r4, #16]
 800765e:	3414      	adds	r4, #20
 8007660:	9401      	str	r4, [sp, #4]
 8007662:	9b01      	ldr	r3, [sp, #4]
 8007664:	0084      	lsls	r4, r0, #2
 8007666:	191b      	adds	r3, r3, r4
 8007668:	0034      	movs	r4, r6
 800766a:	9302      	str	r3, [sp, #8]
 800766c:	6933      	ldr	r3, [r6, #16]
 800766e:	3414      	adds	r4, #20
 8007670:	0099      	lsls	r1, r3, #2
 8007672:	1863      	adds	r3, r4, r1
 8007674:	9303      	str	r3, [sp, #12]
 8007676:	0013      	movs	r3, r2
 8007678:	3314      	adds	r3, #20
 800767a:	469c      	mov	ip, r3
 800767c:	9305      	str	r3, [sp, #20]
 800767e:	9b01      	ldr	r3, [sp, #4]
 8007680:	9304      	str	r3, [sp, #16]
 8007682:	9b04      	ldr	r3, [sp, #16]
 8007684:	cc02      	ldmia	r4!, {r1}
 8007686:	cb20      	ldmia	r3!, {r5}
 8007688:	9304      	str	r3, [sp, #16]
 800768a:	b2ab      	uxth	r3, r5
 800768c:	19df      	adds	r7, r3, r7
 800768e:	b28b      	uxth	r3, r1
 8007690:	1afb      	subs	r3, r7, r3
 8007692:	0c09      	lsrs	r1, r1, #16
 8007694:	0c2d      	lsrs	r5, r5, #16
 8007696:	1a6d      	subs	r5, r5, r1
 8007698:	1419      	asrs	r1, r3, #16
 800769a:	186d      	adds	r5, r5, r1
 800769c:	4661      	mov	r1, ip
 800769e:	142f      	asrs	r7, r5, #16
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	042d      	lsls	r5, r5, #16
 80076a4:	432b      	orrs	r3, r5
 80076a6:	c108      	stmia	r1!, {r3}
 80076a8:	9b03      	ldr	r3, [sp, #12]
 80076aa:	468c      	mov	ip, r1
 80076ac:	42a3      	cmp	r3, r4
 80076ae:	d8e8      	bhi.n	8007682 <__mdiff+0x8a>
 80076b0:	0031      	movs	r1, r6
 80076b2:	9c03      	ldr	r4, [sp, #12]
 80076b4:	3115      	adds	r1, #21
 80076b6:	2304      	movs	r3, #4
 80076b8:	428c      	cmp	r4, r1
 80076ba:	d304      	bcc.n	80076c6 <__mdiff+0xce>
 80076bc:	1ba3      	subs	r3, r4, r6
 80076be:	3b15      	subs	r3, #21
 80076c0:	089b      	lsrs	r3, r3, #2
 80076c2:	3301      	adds	r3, #1
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	9901      	ldr	r1, [sp, #4]
 80076c8:	18cc      	adds	r4, r1, r3
 80076ca:	9905      	ldr	r1, [sp, #20]
 80076cc:	0026      	movs	r6, r4
 80076ce:	18cb      	adds	r3, r1, r3
 80076d0:	469c      	mov	ip, r3
 80076d2:	9902      	ldr	r1, [sp, #8]
 80076d4:	428e      	cmp	r6, r1
 80076d6:	d310      	bcc.n	80076fa <__mdiff+0x102>
 80076d8:	9e02      	ldr	r6, [sp, #8]
 80076da:	1ee1      	subs	r1, r4, #3
 80076dc:	2500      	movs	r5, #0
 80076de:	428e      	cmp	r6, r1
 80076e0:	d304      	bcc.n	80076ec <__mdiff+0xf4>
 80076e2:	0031      	movs	r1, r6
 80076e4:	3103      	adds	r1, #3
 80076e6:	1b0c      	subs	r4, r1, r4
 80076e8:	08a4      	lsrs	r4, r4, #2
 80076ea:	00a5      	lsls	r5, r4, #2
 80076ec:	195b      	adds	r3, r3, r5
 80076ee:	3b04      	subs	r3, #4
 80076f0:	6819      	ldr	r1, [r3, #0]
 80076f2:	2900      	cmp	r1, #0
 80076f4:	d00f      	beq.n	8007716 <__mdiff+0x11e>
 80076f6:	6110      	str	r0, [r2, #16]
 80076f8:	e797      	b.n	800762a <__mdiff+0x32>
 80076fa:	ce02      	ldmia	r6!, {r1}
 80076fc:	b28d      	uxth	r5, r1
 80076fe:	19ed      	adds	r5, r5, r7
 8007700:	0c0f      	lsrs	r7, r1, #16
 8007702:	1429      	asrs	r1, r5, #16
 8007704:	1879      	adds	r1, r7, r1
 8007706:	140f      	asrs	r7, r1, #16
 8007708:	b2ad      	uxth	r5, r5
 800770a:	0409      	lsls	r1, r1, #16
 800770c:	430d      	orrs	r5, r1
 800770e:	4661      	mov	r1, ip
 8007710:	c120      	stmia	r1!, {r5}
 8007712:	468c      	mov	ip, r1
 8007714:	e7dd      	b.n	80076d2 <__mdiff+0xda>
 8007716:	3801      	subs	r0, #1
 8007718:	e7e9      	b.n	80076ee <__mdiff+0xf6>
 800771a:	46c0      	nop			; (mov r8, r8)
 800771c:	08008f38 	.word	0x08008f38
 8007720:	00000232 	.word	0x00000232
 8007724:	08008f53 	.word	0x08008f53

08007728 <__d2b>:
 8007728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800772a:	2101      	movs	r1, #1
 800772c:	0014      	movs	r4, r2
 800772e:	001e      	movs	r6, r3
 8007730:	9f08      	ldr	r7, [sp, #32]
 8007732:	f7ff fcc1 	bl	80070b8 <_Balloc>
 8007736:	1e05      	subs	r5, r0, #0
 8007738:	d105      	bne.n	8007746 <__d2b+0x1e>
 800773a:	0002      	movs	r2, r0
 800773c:	4b26      	ldr	r3, [pc, #152]	; (80077d8 <__d2b+0xb0>)
 800773e:	4927      	ldr	r1, [pc, #156]	; (80077dc <__d2b+0xb4>)
 8007740:	4827      	ldr	r0, [pc, #156]	; (80077e0 <__d2b+0xb8>)
 8007742:	f000 fae5 	bl	8007d10 <__assert_func>
 8007746:	0333      	lsls	r3, r6, #12
 8007748:	0076      	lsls	r6, r6, #1
 800774a:	0b1b      	lsrs	r3, r3, #12
 800774c:	0d76      	lsrs	r6, r6, #21
 800774e:	d124      	bne.n	800779a <__d2b+0x72>
 8007750:	9301      	str	r3, [sp, #4]
 8007752:	2c00      	cmp	r4, #0
 8007754:	d027      	beq.n	80077a6 <__d2b+0x7e>
 8007756:	4668      	mov	r0, sp
 8007758:	9400      	str	r4, [sp, #0]
 800775a:	f7ff fd73 	bl	8007244 <__lo0bits>
 800775e:	9c00      	ldr	r4, [sp, #0]
 8007760:	2800      	cmp	r0, #0
 8007762:	d01e      	beq.n	80077a2 <__d2b+0x7a>
 8007764:	9b01      	ldr	r3, [sp, #4]
 8007766:	2120      	movs	r1, #32
 8007768:	001a      	movs	r2, r3
 800776a:	1a09      	subs	r1, r1, r0
 800776c:	408a      	lsls	r2, r1
 800776e:	40c3      	lsrs	r3, r0
 8007770:	4322      	orrs	r2, r4
 8007772:	616a      	str	r2, [r5, #20]
 8007774:	9301      	str	r3, [sp, #4]
 8007776:	9c01      	ldr	r4, [sp, #4]
 8007778:	61ac      	str	r4, [r5, #24]
 800777a:	1e63      	subs	r3, r4, #1
 800777c:	419c      	sbcs	r4, r3
 800777e:	3401      	adds	r4, #1
 8007780:	612c      	str	r4, [r5, #16]
 8007782:	2e00      	cmp	r6, #0
 8007784:	d018      	beq.n	80077b8 <__d2b+0x90>
 8007786:	4b17      	ldr	r3, [pc, #92]	; (80077e4 <__d2b+0xbc>)
 8007788:	18f6      	adds	r6, r6, r3
 800778a:	2335      	movs	r3, #53	; 0x35
 800778c:	1836      	adds	r6, r6, r0
 800778e:	1a18      	subs	r0, r3, r0
 8007790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007792:	603e      	str	r6, [r7, #0]
 8007794:	6018      	str	r0, [r3, #0]
 8007796:	0028      	movs	r0, r5
 8007798:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800779a:	2280      	movs	r2, #128	; 0x80
 800779c:	0352      	lsls	r2, r2, #13
 800779e:	4313      	orrs	r3, r2
 80077a0:	e7d6      	b.n	8007750 <__d2b+0x28>
 80077a2:	616c      	str	r4, [r5, #20]
 80077a4:	e7e7      	b.n	8007776 <__d2b+0x4e>
 80077a6:	a801      	add	r0, sp, #4
 80077a8:	f7ff fd4c 	bl	8007244 <__lo0bits>
 80077ac:	2401      	movs	r4, #1
 80077ae:	9b01      	ldr	r3, [sp, #4]
 80077b0:	612c      	str	r4, [r5, #16]
 80077b2:	616b      	str	r3, [r5, #20]
 80077b4:	3020      	adds	r0, #32
 80077b6:	e7e4      	b.n	8007782 <__d2b+0x5a>
 80077b8:	4b0b      	ldr	r3, [pc, #44]	; (80077e8 <__d2b+0xc0>)
 80077ba:	18c0      	adds	r0, r0, r3
 80077bc:	4b0b      	ldr	r3, [pc, #44]	; (80077ec <__d2b+0xc4>)
 80077be:	6038      	str	r0, [r7, #0]
 80077c0:	18e3      	adds	r3, r4, r3
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	18eb      	adds	r3, r5, r3
 80077c6:	6958      	ldr	r0, [r3, #20]
 80077c8:	f7ff fd22 	bl	8007210 <__hi0bits>
 80077cc:	0164      	lsls	r4, r4, #5
 80077ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077d0:	1a24      	subs	r4, r4, r0
 80077d2:	601c      	str	r4, [r3, #0]
 80077d4:	e7df      	b.n	8007796 <__d2b+0x6e>
 80077d6:	46c0      	nop			; (mov r8, r8)
 80077d8:	08008f38 	.word	0x08008f38
 80077dc:	0000030a 	.word	0x0000030a
 80077e0:	08008f53 	.word	0x08008f53
 80077e4:	fffffbcd 	.word	0xfffffbcd
 80077e8:	fffffbce 	.word	0xfffffbce
 80077ec:	3fffffff 	.word	0x3fffffff

080077f0 <_calloc_r>:
 80077f0:	b570      	push	{r4, r5, r6, lr}
 80077f2:	0c13      	lsrs	r3, r2, #16
 80077f4:	0c0d      	lsrs	r5, r1, #16
 80077f6:	d11e      	bne.n	8007836 <_calloc_r+0x46>
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10c      	bne.n	8007816 <_calloc_r+0x26>
 80077fc:	b289      	uxth	r1, r1
 80077fe:	b294      	uxth	r4, r2
 8007800:	434c      	muls	r4, r1
 8007802:	0021      	movs	r1, r4
 8007804:	f000 f88c 	bl	8007920 <_malloc_r>
 8007808:	1e05      	subs	r5, r0, #0
 800780a:	d01b      	beq.n	8007844 <_calloc_r+0x54>
 800780c:	0022      	movs	r2, r4
 800780e:	2100      	movs	r1, #0
 8007810:	f7fe f8c2 	bl	8005998 <memset>
 8007814:	e016      	b.n	8007844 <_calloc_r+0x54>
 8007816:	1c1d      	adds	r5, r3, #0
 8007818:	1c0b      	adds	r3, r1, #0
 800781a:	b292      	uxth	r2, r2
 800781c:	b289      	uxth	r1, r1
 800781e:	b29c      	uxth	r4, r3
 8007820:	4351      	muls	r1, r2
 8007822:	b2ab      	uxth	r3, r5
 8007824:	4363      	muls	r3, r4
 8007826:	0c0c      	lsrs	r4, r1, #16
 8007828:	191c      	adds	r4, r3, r4
 800782a:	0c22      	lsrs	r2, r4, #16
 800782c:	d107      	bne.n	800783e <_calloc_r+0x4e>
 800782e:	0424      	lsls	r4, r4, #16
 8007830:	b289      	uxth	r1, r1
 8007832:	430c      	orrs	r4, r1
 8007834:	e7e5      	b.n	8007802 <_calloc_r+0x12>
 8007836:	2b00      	cmp	r3, #0
 8007838:	d101      	bne.n	800783e <_calloc_r+0x4e>
 800783a:	1c13      	adds	r3, r2, #0
 800783c:	e7ed      	b.n	800781a <_calloc_r+0x2a>
 800783e:	230c      	movs	r3, #12
 8007840:	2500      	movs	r5, #0
 8007842:	6003      	str	r3, [r0, #0]
 8007844:	0028      	movs	r0, r5
 8007846:	bd70      	pop	{r4, r5, r6, pc}

08007848 <_free_r>:
 8007848:	b570      	push	{r4, r5, r6, lr}
 800784a:	0005      	movs	r5, r0
 800784c:	2900      	cmp	r1, #0
 800784e:	d010      	beq.n	8007872 <_free_r+0x2a>
 8007850:	1f0c      	subs	r4, r1, #4
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	da00      	bge.n	800785a <_free_r+0x12>
 8007858:	18e4      	adds	r4, r4, r3
 800785a:	0028      	movs	r0, r5
 800785c:	f000 fa9a 	bl	8007d94 <__malloc_lock>
 8007860:	4a1d      	ldr	r2, [pc, #116]	; (80078d8 <_free_r+0x90>)
 8007862:	6813      	ldr	r3, [r2, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d105      	bne.n	8007874 <_free_r+0x2c>
 8007868:	6063      	str	r3, [r4, #4]
 800786a:	6014      	str	r4, [r2, #0]
 800786c:	0028      	movs	r0, r5
 800786e:	f000 fa99 	bl	8007da4 <__malloc_unlock>
 8007872:	bd70      	pop	{r4, r5, r6, pc}
 8007874:	42a3      	cmp	r3, r4
 8007876:	d908      	bls.n	800788a <_free_r+0x42>
 8007878:	6821      	ldr	r1, [r4, #0]
 800787a:	1860      	adds	r0, r4, r1
 800787c:	4283      	cmp	r3, r0
 800787e:	d1f3      	bne.n	8007868 <_free_r+0x20>
 8007880:	6818      	ldr	r0, [r3, #0]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	1841      	adds	r1, r0, r1
 8007886:	6021      	str	r1, [r4, #0]
 8007888:	e7ee      	b.n	8007868 <_free_r+0x20>
 800788a:	001a      	movs	r2, r3
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d001      	beq.n	8007896 <_free_r+0x4e>
 8007892:	42a3      	cmp	r3, r4
 8007894:	d9f9      	bls.n	800788a <_free_r+0x42>
 8007896:	6811      	ldr	r1, [r2, #0]
 8007898:	1850      	adds	r0, r2, r1
 800789a:	42a0      	cmp	r0, r4
 800789c:	d10b      	bne.n	80078b6 <_free_r+0x6e>
 800789e:	6820      	ldr	r0, [r4, #0]
 80078a0:	1809      	adds	r1, r1, r0
 80078a2:	1850      	adds	r0, r2, r1
 80078a4:	6011      	str	r1, [r2, #0]
 80078a6:	4283      	cmp	r3, r0
 80078a8:	d1e0      	bne.n	800786c <_free_r+0x24>
 80078aa:	6818      	ldr	r0, [r3, #0]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	1841      	adds	r1, r0, r1
 80078b0:	6011      	str	r1, [r2, #0]
 80078b2:	6053      	str	r3, [r2, #4]
 80078b4:	e7da      	b.n	800786c <_free_r+0x24>
 80078b6:	42a0      	cmp	r0, r4
 80078b8:	d902      	bls.n	80078c0 <_free_r+0x78>
 80078ba:	230c      	movs	r3, #12
 80078bc:	602b      	str	r3, [r5, #0]
 80078be:	e7d5      	b.n	800786c <_free_r+0x24>
 80078c0:	6821      	ldr	r1, [r4, #0]
 80078c2:	1860      	adds	r0, r4, r1
 80078c4:	4283      	cmp	r3, r0
 80078c6:	d103      	bne.n	80078d0 <_free_r+0x88>
 80078c8:	6818      	ldr	r0, [r3, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	1841      	adds	r1, r0, r1
 80078ce:	6021      	str	r1, [r4, #0]
 80078d0:	6063      	str	r3, [r4, #4]
 80078d2:	6054      	str	r4, [r2, #4]
 80078d4:	e7ca      	b.n	800786c <_free_r+0x24>
 80078d6:	46c0      	nop			; (mov r8, r8)
 80078d8:	20000458 	.word	0x20000458

080078dc <sbrk_aligned>:
 80078dc:	b570      	push	{r4, r5, r6, lr}
 80078de:	4e0f      	ldr	r6, [pc, #60]	; (800791c <sbrk_aligned+0x40>)
 80078e0:	000d      	movs	r5, r1
 80078e2:	6831      	ldr	r1, [r6, #0]
 80078e4:	0004      	movs	r4, r0
 80078e6:	2900      	cmp	r1, #0
 80078e8:	d102      	bne.n	80078f0 <sbrk_aligned+0x14>
 80078ea:	f000 f9f1 	bl	8007cd0 <_sbrk_r>
 80078ee:	6030      	str	r0, [r6, #0]
 80078f0:	0029      	movs	r1, r5
 80078f2:	0020      	movs	r0, r4
 80078f4:	f000 f9ec 	bl	8007cd0 <_sbrk_r>
 80078f8:	1c43      	adds	r3, r0, #1
 80078fa:	d00a      	beq.n	8007912 <sbrk_aligned+0x36>
 80078fc:	2303      	movs	r3, #3
 80078fe:	1cc5      	adds	r5, r0, #3
 8007900:	439d      	bics	r5, r3
 8007902:	42a8      	cmp	r0, r5
 8007904:	d007      	beq.n	8007916 <sbrk_aligned+0x3a>
 8007906:	1a29      	subs	r1, r5, r0
 8007908:	0020      	movs	r0, r4
 800790a:	f000 f9e1 	bl	8007cd0 <_sbrk_r>
 800790e:	1c43      	adds	r3, r0, #1
 8007910:	d101      	bne.n	8007916 <sbrk_aligned+0x3a>
 8007912:	2501      	movs	r5, #1
 8007914:	426d      	negs	r5, r5
 8007916:	0028      	movs	r0, r5
 8007918:	bd70      	pop	{r4, r5, r6, pc}
 800791a:	46c0      	nop			; (mov r8, r8)
 800791c:	2000045c 	.word	0x2000045c

08007920 <_malloc_r>:
 8007920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007922:	2203      	movs	r2, #3
 8007924:	1ccb      	adds	r3, r1, #3
 8007926:	4393      	bics	r3, r2
 8007928:	3308      	adds	r3, #8
 800792a:	0006      	movs	r6, r0
 800792c:	001f      	movs	r7, r3
 800792e:	2b0c      	cmp	r3, #12
 8007930:	d232      	bcs.n	8007998 <_malloc_r+0x78>
 8007932:	270c      	movs	r7, #12
 8007934:	42b9      	cmp	r1, r7
 8007936:	d831      	bhi.n	800799c <_malloc_r+0x7c>
 8007938:	0030      	movs	r0, r6
 800793a:	f000 fa2b 	bl	8007d94 <__malloc_lock>
 800793e:	4d32      	ldr	r5, [pc, #200]	; (8007a08 <_malloc_r+0xe8>)
 8007940:	682b      	ldr	r3, [r5, #0]
 8007942:	001c      	movs	r4, r3
 8007944:	2c00      	cmp	r4, #0
 8007946:	d12e      	bne.n	80079a6 <_malloc_r+0x86>
 8007948:	0039      	movs	r1, r7
 800794a:	0030      	movs	r0, r6
 800794c:	f7ff ffc6 	bl	80078dc <sbrk_aligned>
 8007950:	0004      	movs	r4, r0
 8007952:	1c43      	adds	r3, r0, #1
 8007954:	d11e      	bne.n	8007994 <_malloc_r+0x74>
 8007956:	682c      	ldr	r4, [r5, #0]
 8007958:	0025      	movs	r5, r4
 800795a:	2d00      	cmp	r5, #0
 800795c:	d14a      	bne.n	80079f4 <_malloc_r+0xd4>
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	0029      	movs	r1, r5
 8007962:	18e3      	adds	r3, r4, r3
 8007964:	0030      	movs	r0, r6
 8007966:	9301      	str	r3, [sp, #4]
 8007968:	f000 f9b2 	bl	8007cd0 <_sbrk_r>
 800796c:	9b01      	ldr	r3, [sp, #4]
 800796e:	4283      	cmp	r3, r0
 8007970:	d143      	bne.n	80079fa <_malloc_r+0xda>
 8007972:	6823      	ldr	r3, [r4, #0]
 8007974:	3703      	adds	r7, #3
 8007976:	1aff      	subs	r7, r7, r3
 8007978:	2303      	movs	r3, #3
 800797a:	439f      	bics	r7, r3
 800797c:	3708      	adds	r7, #8
 800797e:	2f0c      	cmp	r7, #12
 8007980:	d200      	bcs.n	8007984 <_malloc_r+0x64>
 8007982:	270c      	movs	r7, #12
 8007984:	0039      	movs	r1, r7
 8007986:	0030      	movs	r0, r6
 8007988:	f7ff ffa8 	bl	80078dc <sbrk_aligned>
 800798c:	1c43      	adds	r3, r0, #1
 800798e:	d034      	beq.n	80079fa <_malloc_r+0xda>
 8007990:	6823      	ldr	r3, [r4, #0]
 8007992:	19df      	adds	r7, r3, r7
 8007994:	6027      	str	r7, [r4, #0]
 8007996:	e013      	b.n	80079c0 <_malloc_r+0xa0>
 8007998:	2b00      	cmp	r3, #0
 800799a:	dacb      	bge.n	8007934 <_malloc_r+0x14>
 800799c:	230c      	movs	r3, #12
 800799e:	2500      	movs	r5, #0
 80079a0:	6033      	str	r3, [r6, #0]
 80079a2:	0028      	movs	r0, r5
 80079a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80079a6:	6822      	ldr	r2, [r4, #0]
 80079a8:	1bd1      	subs	r1, r2, r7
 80079aa:	d420      	bmi.n	80079ee <_malloc_r+0xce>
 80079ac:	290b      	cmp	r1, #11
 80079ae:	d917      	bls.n	80079e0 <_malloc_r+0xc0>
 80079b0:	19e2      	adds	r2, r4, r7
 80079b2:	6027      	str	r7, [r4, #0]
 80079b4:	42a3      	cmp	r3, r4
 80079b6:	d111      	bne.n	80079dc <_malloc_r+0xbc>
 80079b8:	602a      	str	r2, [r5, #0]
 80079ba:	6863      	ldr	r3, [r4, #4]
 80079bc:	6011      	str	r1, [r2, #0]
 80079be:	6053      	str	r3, [r2, #4]
 80079c0:	0030      	movs	r0, r6
 80079c2:	0025      	movs	r5, r4
 80079c4:	f000 f9ee 	bl	8007da4 <__malloc_unlock>
 80079c8:	2207      	movs	r2, #7
 80079ca:	350b      	adds	r5, #11
 80079cc:	1d23      	adds	r3, r4, #4
 80079ce:	4395      	bics	r5, r2
 80079d0:	1aea      	subs	r2, r5, r3
 80079d2:	429d      	cmp	r5, r3
 80079d4:	d0e5      	beq.n	80079a2 <_malloc_r+0x82>
 80079d6:	1b5b      	subs	r3, r3, r5
 80079d8:	50a3      	str	r3, [r4, r2]
 80079da:	e7e2      	b.n	80079a2 <_malloc_r+0x82>
 80079dc:	605a      	str	r2, [r3, #4]
 80079de:	e7ec      	b.n	80079ba <_malloc_r+0x9a>
 80079e0:	6862      	ldr	r2, [r4, #4]
 80079e2:	42a3      	cmp	r3, r4
 80079e4:	d101      	bne.n	80079ea <_malloc_r+0xca>
 80079e6:	602a      	str	r2, [r5, #0]
 80079e8:	e7ea      	b.n	80079c0 <_malloc_r+0xa0>
 80079ea:	605a      	str	r2, [r3, #4]
 80079ec:	e7e8      	b.n	80079c0 <_malloc_r+0xa0>
 80079ee:	0023      	movs	r3, r4
 80079f0:	6864      	ldr	r4, [r4, #4]
 80079f2:	e7a7      	b.n	8007944 <_malloc_r+0x24>
 80079f4:	002c      	movs	r4, r5
 80079f6:	686d      	ldr	r5, [r5, #4]
 80079f8:	e7af      	b.n	800795a <_malloc_r+0x3a>
 80079fa:	230c      	movs	r3, #12
 80079fc:	0030      	movs	r0, r6
 80079fe:	6033      	str	r3, [r6, #0]
 8007a00:	f000 f9d0 	bl	8007da4 <__malloc_unlock>
 8007a04:	e7cd      	b.n	80079a2 <_malloc_r+0x82>
 8007a06:	46c0      	nop			; (mov r8, r8)
 8007a08:	20000458 	.word	0x20000458

08007a0c <__ssputs_r>:
 8007a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a0e:	688e      	ldr	r6, [r1, #8]
 8007a10:	b085      	sub	sp, #20
 8007a12:	0007      	movs	r7, r0
 8007a14:	000c      	movs	r4, r1
 8007a16:	9203      	str	r2, [sp, #12]
 8007a18:	9301      	str	r3, [sp, #4]
 8007a1a:	429e      	cmp	r6, r3
 8007a1c:	d83c      	bhi.n	8007a98 <__ssputs_r+0x8c>
 8007a1e:	2390      	movs	r3, #144	; 0x90
 8007a20:	898a      	ldrh	r2, [r1, #12]
 8007a22:	00db      	lsls	r3, r3, #3
 8007a24:	421a      	tst	r2, r3
 8007a26:	d034      	beq.n	8007a92 <__ssputs_r+0x86>
 8007a28:	6909      	ldr	r1, [r1, #16]
 8007a2a:	6823      	ldr	r3, [r4, #0]
 8007a2c:	6960      	ldr	r0, [r4, #20]
 8007a2e:	1a5b      	subs	r3, r3, r1
 8007a30:	9302      	str	r3, [sp, #8]
 8007a32:	2303      	movs	r3, #3
 8007a34:	4343      	muls	r3, r0
 8007a36:	0fdd      	lsrs	r5, r3, #31
 8007a38:	18ed      	adds	r5, r5, r3
 8007a3a:	9b01      	ldr	r3, [sp, #4]
 8007a3c:	9802      	ldr	r0, [sp, #8]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	181b      	adds	r3, r3, r0
 8007a42:	106d      	asrs	r5, r5, #1
 8007a44:	42ab      	cmp	r3, r5
 8007a46:	d900      	bls.n	8007a4a <__ssputs_r+0x3e>
 8007a48:	001d      	movs	r5, r3
 8007a4a:	0553      	lsls	r3, r2, #21
 8007a4c:	d532      	bpl.n	8007ab4 <__ssputs_r+0xa8>
 8007a4e:	0029      	movs	r1, r5
 8007a50:	0038      	movs	r0, r7
 8007a52:	f7ff ff65 	bl	8007920 <_malloc_r>
 8007a56:	1e06      	subs	r6, r0, #0
 8007a58:	d109      	bne.n	8007a6e <__ssputs_r+0x62>
 8007a5a:	230c      	movs	r3, #12
 8007a5c:	603b      	str	r3, [r7, #0]
 8007a5e:	2340      	movs	r3, #64	; 0x40
 8007a60:	2001      	movs	r0, #1
 8007a62:	89a2      	ldrh	r2, [r4, #12]
 8007a64:	4240      	negs	r0, r0
 8007a66:	4313      	orrs	r3, r2
 8007a68:	81a3      	strh	r3, [r4, #12]
 8007a6a:	b005      	add	sp, #20
 8007a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a6e:	9a02      	ldr	r2, [sp, #8]
 8007a70:	6921      	ldr	r1, [r4, #16]
 8007a72:	f7ff fb18 	bl	80070a6 <memcpy>
 8007a76:	89a3      	ldrh	r3, [r4, #12]
 8007a78:	4a14      	ldr	r2, [pc, #80]	; (8007acc <__ssputs_r+0xc0>)
 8007a7a:	401a      	ands	r2, r3
 8007a7c:	2380      	movs	r3, #128	; 0x80
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	81a3      	strh	r3, [r4, #12]
 8007a82:	9b02      	ldr	r3, [sp, #8]
 8007a84:	6126      	str	r6, [r4, #16]
 8007a86:	18f6      	adds	r6, r6, r3
 8007a88:	6026      	str	r6, [r4, #0]
 8007a8a:	6165      	str	r5, [r4, #20]
 8007a8c:	9e01      	ldr	r6, [sp, #4]
 8007a8e:	1aed      	subs	r5, r5, r3
 8007a90:	60a5      	str	r5, [r4, #8]
 8007a92:	9b01      	ldr	r3, [sp, #4]
 8007a94:	429e      	cmp	r6, r3
 8007a96:	d900      	bls.n	8007a9a <__ssputs_r+0x8e>
 8007a98:	9e01      	ldr	r6, [sp, #4]
 8007a9a:	0032      	movs	r2, r6
 8007a9c:	9903      	ldr	r1, [sp, #12]
 8007a9e:	6820      	ldr	r0, [r4, #0]
 8007aa0:	f000 f964 	bl	8007d6c <memmove>
 8007aa4:	68a3      	ldr	r3, [r4, #8]
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	1b9b      	subs	r3, r3, r6
 8007aaa:	60a3      	str	r3, [r4, #8]
 8007aac:	6823      	ldr	r3, [r4, #0]
 8007aae:	199e      	adds	r6, r3, r6
 8007ab0:	6026      	str	r6, [r4, #0]
 8007ab2:	e7da      	b.n	8007a6a <__ssputs_r+0x5e>
 8007ab4:	002a      	movs	r2, r5
 8007ab6:	0038      	movs	r0, r7
 8007ab8:	f000 f97c 	bl	8007db4 <_realloc_r>
 8007abc:	1e06      	subs	r6, r0, #0
 8007abe:	d1e0      	bne.n	8007a82 <__ssputs_r+0x76>
 8007ac0:	0038      	movs	r0, r7
 8007ac2:	6921      	ldr	r1, [r4, #16]
 8007ac4:	f7ff fec0 	bl	8007848 <_free_r>
 8007ac8:	e7c7      	b.n	8007a5a <__ssputs_r+0x4e>
 8007aca:	46c0      	nop			; (mov r8, r8)
 8007acc:	fffffb7f 	.word	0xfffffb7f

08007ad0 <_svfiprintf_r>:
 8007ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ad2:	b0a1      	sub	sp, #132	; 0x84
 8007ad4:	9003      	str	r0, [sp, #12]
 8007ad6:	001d      	movs	r5, r3
 8007ad8:	898b      	ldrh	r3, [r1, #12]
 8007ada:	000f      	movs	r7, r1
 8007adc:	0016      	movs	r6, r2
 8007ade:	061b      	lsls	r3, r3, #24
 8007ae0:	d511      	bpl.n	8007b06 <_svfiprintf_r+0x36>
 8007ae2:	690b      	ldr	r3, [r1, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10e      	bne.n	8007b06 <_svfiprintf_r+0x36>
 8007ae8:	2140      	movs	r1, #64	; 0x40
 8007aea:	f7ff ff19 	bl	8007920 <_malloc_r>
 8007aee:	6038      	str	r0, [r7, #0]
 8007af0:	6138      	str	r0, [r7, #16]
 8007af2:	2800      	cmp	r0, #0
 8007af4:	d105      	bne.n	8007b02 <_svfiprintf_r+0x32>
 8007af6:	230c      	movs	r3, #12
 8007af8:	9a03      	ldr	r2, [sp, #12]
 8007afa:	3801      	subs	r0, #1
 8007afc:	6013      	str	r3, [r2, #0]
 8007afe:	b021      	add	sp, #132	; 0x84
 8007b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b02:	2340      	movs	r3, #64	; 0x40
 8007b04:	617b      	str	r3, [r7, #20]
 8007b06:	2300      	movs	r3, #0
 8007b08:	ac08      	add	r4, sp, #32
 8007b0a:	6163      	str	r3, [r4, #20]
 8007b0c:	3320      	adds	r3, #32
 8007b0e:	7663      	strb	r3, [r4, #25]
 8007b10:	3310      	adds	r3, #16
 8007b12:	76a3      	strb	r3, [r4, #26]
 8007b14:	9507      	str	r5, [sp, #28]
 8007b16:	0035      	movs	r5, r6
 8007b18:	782b      	ldrb	r3, [r5, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d001      	beq.n	8007b22 <_svfiprintf_r+0x52>
 8007b1e:	2b25      	cmp	r3, #37	; 0x25
 8007b20:	d147      	bne.n	8007bb2 <_svfiprintf_r+0xe2>
 8007b22:	1bab      	subs	r3, r5, r6
 8007b24:	9305      	str	r3, [sp, #20]
 8007b26:	42b5      	cmp	r5, r6
 8007b28:	d00c      	beq.n	8007b44 <_svfiprintf_r+0x74>
 8007b2a:	0032      	movs	r2, r6
 8007b2c:	0039      	movs	r1, r7
 8007b2e:	9803      	ldr	r0, [sp, #12]
 8007b30:	f7ff ff6c 	bl	8007a0c <__ssputs_r>
 8007b34:	1c43      	adds	r3, r0, #1
 8007b36:	d100      	bne.n	8007b3a <_svfiprintf_r+0x6a>
 8007b38:	e0ae      	b.n	8007c98 <_svfiprintf_r+0x1c8>
 8007b3a:	6962      	ldr	r2, [r4, #20]
 8007b3c:	9b05      	ldr	r3, [sp, #20]
 8007b3e:	4694      	mov	ip, r2
 8007b40:	4463      	add	r3, ip
 8007b42:	6163      	str	r3, [r4, #20]
 8007b44:	782b      	ldrb	r3, [r5, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d100      	bne.n	8007b4c <_svfiprintf_r+0x7c>
 8007b4a:	e0a5      	b.n	8007c98 <_svfiprintf_r+0x1c8>
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	2300      	movs	r3, #0
 8007b50:	4252      	negs	r2, r2
 8007b52:	6062      	str	r2, [r4, #4]
 8007b54:	a904      	add	r1, sp, #16
 8007b56:	3254      	adds	r2, #84	; 0x54
 8007b58:	1852      	adds	r2, r2, r1
 8007b5a:	1c6e      	adds	r6, r5, #1
 8007b5c:	6023      	str	r3, [r4, #0]
 8007b5e:	60e3      	str	r3, [r4, #12]
 8007b60:	60a3      	str	r3, [r4, #8]
 8007b62:	7013      	strb	r3, [r2, #0]
 8007b64:	65a3      	str	r3, [r4, #88]	; 0x58
 8007b66:	2205      	movs	r2, #5
 8007b68:	7831      	ldrb	r1, [r6, #0]
 8007b6a:	4854      	ldr	r0, [pc, #336]	; (8007cbc <_svfiprintf_r+0x1ec>)
 8007b6c:	f7ff fa90 	bl	8007090 <memchr>
 8007b70:	1c75      	adds	r5, r6, #1
 8007b72:	2800      	cmp	r0, #0
 8007b74:	d11f      	bne.n	8007bb6 <_svfiprintf_r+0xe6>
 8007b76:	6822      	ldr	r2, [r4, #0]
 8007b78:	06d3      	lsls	r3, r2, #27
 8007b7a:	d504      	bpl.n	8007b86 <_svfiprintf_r+0xb6>
 8007b7c:	2353      	movs	r3, #83	; 0x53
 8007b7e:	a904      	add	r1, sp, #16
 8007b80:	185b      	adds	r3, r3, r1
 8007b82:	2120      	movs	r1, #32
 8007b84:	7019      	strb	r1, [r3, #0]
 8007b86:	0713      	lsls	r3, r2, #28
 8007b88:	d504      	bpl.n	8007b94 <_svfiprintf_r+0xc4>
 8007b8a:	2353      	movs	r3, #83	; 0x53
 8007b8c:	a904      	add	r1, sp, #16
 8007b8e:	185b      	adds	r3, r3, r1
 8007b90:	212b      	movs	r1, #43	; 0x2b
 8007b92:	7019      	strb	r1, [r3, #0]
 8007b94:	7833      	ldrb	r3, [r6, #0]
 8007b96:	2b2a      	cmp	r3, #42	; 0x2a
 8007b98:	d016      	beq.n	8007bc8 <_svfiprintf_r+0xf8>
 8007b9a:	0035      	movs	r5, r6
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	200a      	movs	r0, #10
 8007ba0:	68e3      	ldr	r3, [r4, #12]
 8007ba2:	782a      	ldrb	r2, [r5, #0]
 8007ba4:	1c6e      	adds	r6, r5, #1
 8007ba6:	3a30      	subs	r2, #48	; 0x30
 8007ba8:	2a09      	cmp	r2, #9
 8007baa:	d94e      	bls.n	8007c4a <_svfiprintf_r+0x17a>
 8007bac:	2900      	cmp	r1, #0
 8007bae:	d111      	bne.n	8007bd4 <_svfiprintf_r+0x104>
 8007bb0:	e017      	b.n	8007be2 <_svfiprintf_r+0x112>
 8007bb2:	3501      	adds	r5, #1
 8007bb4:	e7b0      	b.n	8007b18 <_svfiprintf_r+0x48>
 8007bb6:	4b41      	ldr	r3, [pc, #260]	; (8007cbc <_svfiprintf_r+0x1ec>)
 8007bb8:	6822      	ldr	r2, [r4, #0]
 8007bba:	1ac0      	subs	r0, r0, r3
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	4083      	lsls	r3, r0
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	002e      	movs	r6, r5
 8007bc4:	6023      	str	r3, [r4, #0]
 8007bc6:	e7ce      	b.n	8007b66 <_svfiprintf_r+0x96>
 8007bc8:	9b07      	ldr	r3, [sp, #28]
 8007bca:	1d19      	adds	r1, r3, #4
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	9107      	str	r1, [sp, #28]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	db01      	blt.n	8007bd8 <_svfiprintf_r+0x108>
 8007bd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bd6:	e004      	b.n	8007be2 <_svfiprintf_r+0x112>
 8007bd8:	425b      	negs	r3, r3
 8007bda:	60e3      	str	r3, [r4, #12]
 8007bdc:	2302      	movs	r3, #2
 8007bde:	4313      	orrs	r3, r2
 8007be0:	6023      	str	r3, [r4, #0]
 8007be2:	782b      	ldrb	r3, [r5, #0]
 8007be4:	2b2e      	cmp	r3, #46	; 0x2e
 8007be6:	d10a      	bne.n	8007bfe <_svfiprintf_r+0x12e>
 8007be8:	786b      	ldrb	r3, [r5, #1]
 8007bea:	2b2a      	cmp	r3, #42	; 0x2a
 8007bec:	d135      	bne.n	8007c5a <_svfiprintf_r+0x18a>
 8007bee:	9b07      	ldr	r3, [sp, #28]
 8007bf0:	3502      	adds	r5, #2
 8007bf2:	1d1a      	adds	r2, r3, #4
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	9207      	str	r2, [sp, #28]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	db2b      	blt.n	8007c54 <_svfiprintf_r+0x184>
 8007bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8007bfe:	4e30      	ldr	r6, [pc, #192]	; (8007cc0 <_svfiprintf_r+0x1f0>)
 8007c00:	2203      	movs	r2, #3
 8007c02:	0030      	movs	r0, r6
 8007c04:	7829      	ldrb	r1, [r5, #0]
 8007c06:	f7ff fa43 	bl	8007090 <memchr>
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	d006      	beq.n	8007c1c <_svfiprintf_r+0x14c>
 8007c0e:	2340      	movs	r3, #64	; 0x40
 8007c10:	1b80      	subs	r0, r0, r6
 8007c12:	4083      	lsls	r3, r0
 8007c14:	6822      	ldr	r2, [r4, #0]
 8007c16:	3501      	adds	r5, #1
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	6023      	str	r3, [r4, #0]
 8007c1c:	7829      	ldrb	r1, [r5, #0]
 8007c1e:	2206      	movs	r2, #6
 8007c20:	4828      	ldr	r0, [pc, #160]	; (8007cc4 <_svfiprintf_r+0x1f4>)
 8007c22:	1c6e      	adds	r6, r5, #1
 8007c24:	7621      	strb	r1, [r4, #24]
 8007c26:	f7ff fa33 	bl	8007090 <memchr>
 8007c2a:	2800      	cmp	r0, #0
 8007c2c:	d03c      	beq.n	8007ca8 <_svfiprintf_r+0x1d8>
 8007c2e:	4b26      	ldr	r3, [pc, #152]	; (8007cc8 <_svfiprintf_r+0x1f8>)
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d125      	bne.n	8007c80 <_svfiprintf_r+0x1b0>
 8007c34:	2207      	movs	r2, #7
 8007c36:	9b07      	ldr	r3, [sp, #28]
 8007c38:	3307      	adds	r3, #7
 8007c3a:	4393      	bics	r3, r2
 8007c3c:	3308      	adds	r3, #8
 8007c3e:	9307      	str	r3, [sp, #28]
 8007c40:	6963      	ldr	r3, [r4, #20]
 8007c42:	9a04      	ldr	r2, [sp, #16]
 8007c44:	189b      	adds	r3, r3, r2
 8007c46:	6163      	str	r3, [r4, #20]
 8007c48:	e765      	b.n	8007b16 <_svfiprintf_r+0x46>
 8007c4a:	4343      	muls	r3, r0
 8007c4c:	0035      	movs	r5, r6
 8007c4e:	2101      	movs	r1, #1
 8007c50:	189b      	adds	r3, r3, r2
 8007c52:	e7a6      	b.n	8007ba2 <_svfiprintf_r+0xd2>
 8007c54:	2301      	movs	r3, #1
 8007c56:	425b      	negs	r3, r3
 8007c58:	e7d0      	b.n	8007bfc <_svfiprintf_r+0x12c>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	200a      	movs	r0, #10
 8007c5e:	001a      	movs	r2, r3
 8007c60:	3501      	adds	r5, #1
 8007c62:	6063      	str	r3, [r4, #4]
 8007c64:	7829      	ldrb	r1, [r5, #0]
 8007c66:	1c6e      	adds	r6, r5, #1
 8007c68:	3930      	subs	r1, #48	; 0x30
 8007c6a:	2909      	cmp	r1, #9
 8007c6c:	d903      	bls.n	8007c76 <_svfiprintf_r+0x1a6>
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d0c5      	beq.n	8007bfe <_svfiprintf_r+0x12e>
 8007c72:	9209      	str	r2, [sp, #36]	; 0x24
 8007c74:	e7c3      	b.n	8007bfe <_svfiprintf_r+0x12e>
 8007c76:	4342      	muls	r2, r0
 8007c78:	0035      	movs	r5, r6
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	1852      	adds	r2, r2, r1
 8007c7e:	e7f1      	b.n	8007c64 <_svfiprintf_r+0x194>
 8007c80:	ab07      	add	r3, sp, #28
 8007c82:	9300      	str	r3, [sp, #0]
 8007c84:	003a      	movs	r2, r7
 8007c86:	0021      	movs	r1, r4
 8007c88:	4b10      	ldr	r3, [pc, #64]	; (8007ccc <_svfiprintf_r+0x1fc>)
 8007c8a:	9803      	ldr	r0, [sp, #12]
 8007c8c:	f7fd ff36 	bl	8005afc <_printf_float>
 8007c90:	9004      	str	r0, [sp, #16]
 8007c92:	9b04      	ldr	r3, [sp, #16]
 8007c94:	3301      	adds	r3, #1
 8007c96:	d1d3      	bne.n	8007c40 <_svfiprintf_r+0x170>
 8007c98:	89bb      	ldrh	r3, [r7, #12]
 8007c9a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007c9c:	065b      	lsls	r3, r3, #25
 8007c9e:	d400      	bmi.n	8007ca2 <_svfiprintf_r+0x1d2>
 8007ca0:	e72d      	b.n	8007afe <_svfiprintf_r+0x2e>
 8007ca2:	2001      	movs	r0, #1
 8007ca4:	4240      	negs	r0, r0
 8007ca6:	e72a      	b.n	8007afe <_svfiprintf_r+0x2e>
 8007ca8:	ab07      	add	r3, sp, #28
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	003a      	movs	r2, r7
 8007cae:	0021      	movs	r1, r4
 8007cb0:	4b06      	ldr	r3, [pc, #24]	; (8007ccc <_svfiprintf_r+0x1fc>)
 8007cb2:	9803      	ldr	r0, [sp, #12]
 8007cb4:	f7fe f9d4 	bl	8006060 <_printf_i>
 8007cb8:	e7ea      	b.n	8007c90 <_svfiprintf_r+0x1c0>
 8007cba:	46c0      	nop			; (mov r8, r8)
 8007cbc:	080090ac 	.word	0x080090ac
 8007cc0:	080090b2 	.word	0x080090b2
 8007cc4:	080090b6 	.word	0x080090b6
 8007cc8:	08005afd 	.word	0x08005afd
 8007ccc:	08007a0d 	.word	0x08007a0d

08007cd0 <_sbrk_r>:
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	b570      	push	{r4, r5, r6, lr}
 8007cd4:	4d06      	ldr	r5, [pc, #24]	; (8007cf0 <_sbrk_r+0x20>)
 8007cd6:	0004      	movs	r4, r0
 8007cd8:	0008      	movs	r0, r1
 8007cda:	602b      	str	r3, [r5, #0]
 8007cdc:	f7fa fe34 	bl	8002948 <_sbrk>
 8007ce0:	1c43      	adds	r3, r0, #1
 8007ce2:	d103      	bne.n	8007cec <_sbrk_r+0x1c>
 8007ce4:	682b      	ldr	r3, [r5, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d000      	beq.n	8007cec <_sbrk_r+0x1c>
 8007cea:	6023      	str	r3, [r4, #0]
 8007cec:	bd70      	pop	{r4, r5, r6, pc}
 8007cee:	46c0      	nop			; (mov r8, r8)
 8007cf0:	20000460 	.word	0x20000460

08007cf4 <__ascii_wctomb>:
 8007cf4:	0003      	movs	r3, r0
 8007cf6:	1e08      	subs	r0, r1, #0
 8007cf8:	d005      	beq.n	8007d06 <__ascii_wctomb+0x12>
 8007cfa:	2aff      	cmp	r2, #255	; 0xff
 8007cfc:	d904      	bls.n	8007d08 <__ascii_wctomb+0x14>
 8007cfe:	228a      	movs	r2, #138	; 0x8a
 8007d00:	2001      	movs	r0, #1
 8007d02:	601a      	str	r2, [r3, #0]
 8007d04:	4240      	negs	r0, r0
 8007d06:	4770      	bx	lr
 8007d08:	2001      	movs	r0, #1
 8007d0a:	700a      	strb	r2, [r1, #0]
 8007d0c:	e7fb      	b.n	8007d06 <__ascii_wctomb+0x12>
	...

08007d10 <__assert_func>:
 8007d10:	b530      	push	{r4, r5, lr}
 8007d12:	0014      	movs	r4, r2
 8007d14:	001a      	movs	r2, r3
 8007d16:	4b09      	ldr	r3, [pc, #36]	; (8007d3c <__assert_func+0x2c>)
 8007d18:	0005      	movs	r5, r0
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	b085      	sub	sp, #20
 8007d1e:	68d8      	ldr	r0, [r3, #12]
 8007d20:	4b07      	ldr	r3, [pc, #28]	; (8007d40 <__assert_func+0x30>)
 8007d22:	2c00      	cmp	r4, #0
 8007d24:	d101      	bne.n	8007d2a <__assert_func+0x1a>
 8007d26:	4b07      	ldr	r3, [pc, #28]	; (8007d44 <__assert_func+0x34>)
 8007d28:	001c      	movs	r4, r3
 8007d2a:	9301      	str	r3, [sp, #4]
 8007d2c:	9100      	str	r1, [sp, #0]
 8007d2e:	002b      	movs	r3, r5
 8007d30:	4905      	ldr	r1, [pc, #20]	; (8007d48 <__assert_func+0x38>)
 8007d32:	9402      	str	r4, [sp, #8]
 8007d34:	f000 f80a 	bl	8007d4c <fiprintf>
 8007d38:	f000 fa9a 	bl	8008270 <abort>
 8007d3c:	2000004c 	.word	0x2000004c
 8007d40:	080090bd 	.word	0x080090bd
 8007d44:	080090f8 	.word	0x080090f8
 8007d48:	080090ca 	.word	0x080090ca

08007d4c <fiprintf>:
 8007d4c:	b40e      	push	{r1, r2, r3}
 8007d4e:	b503      	push	{r0, r1, lr}
 8007d50:	0001      	movs	r1, r0
 8007d52:	ab03      	add	r3, sp, #12
 8007d54:	4804      	ldr	r0, [pc, #16]	; (8007d68 <fiprintf+0x1c>)
 8007d56:	cb04      	ldmia	r3!, {r2}
 8007d58:	6800      	ldr	r0, [r0, #0]
 8007d5a:	9301      	str	r3, [sp, #4]
 8007d5c:	f000 f880 	bl	8007e60 <_vfiprintf_r>
 8007d60:	b002      	add	sp, #8
 8007d62:	bc08      	pop	{r3}
 8007d64:	b003      	add	sp, #12
 8007d66:	4718      	bx	r3
 8007d68:	2000004c 	.word	0x2000004c

08007d6c <memmove>:
 8007d6c:	b510      	push	{r4, lr}
 8007d6e:	4288      	cmp	r0, r1
 8007d70:	d902      	bls.n	8007d78 <memmove+0xc>
 8007d72:	188b      	adds	r3, r1, r2
 8007d74:	4298      	cmp	r0, r3
 8007d76:	d303      	bcc.n	8007d80 <memmove+0x14>
 8007d78:	2300      	movs	r3, #0
 8007d7a:	e007      	b.n	8007d8c <memmove+0x20>
 8007d7c:	5c8b      	ldrb	r3, [r1, r2]
 8007d7e:	5483      	strb	r3, [r0, r2]
 8007d80:	3a01      	subs	r2, #1
 8007d82:	d2fb      	bcs.n	8007d7c <memmove+0x10>
 8007d84:	bd10      	pop	{r4, pc}
 8007d86:	5ccc      	ldrb	r4, [r1, r3]
 8007d88:	54c4      	strb	r4, [r0, r3]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d1fa      	bne.n	8007d86 <memmove+0x1a>
 8007d90:	e7f8      	b.n	8007d84 <memmove+0x18>
	...

08007d94 <__malloc_lock>:
 8007d94:	b510      	push	{r4, lr}
 8007d96:	4802      	ldr	r0, [pc, #8]	; (8007da0 <__malloc_lock+0xc>)
 8007d98:	f000 fc41 	bl	800861e <__retarget_lock_acquire_recursive>
 8007d9c:	bd10      	pop	{r4, pc}
 8007d9e:	46c0      	nop			; (mov r8, r8)
 8007da0:	20000464 	.word	0x20000464

08007da4 <__malloc_unlock>:
 8007da4:	b510      	push	{r4, lr}
 8007da6:	4802      	ldr	r0, [pc, #8]	; (8007db0 <__malloc_unlock+0xc>)
 8007da8:	f000 fc3a 	bl	8008620 <__retarget_lock_release_recursive>
 8007dac:	bd10      	pop	{r4, pc}
 8007dae:	46c0      	nop			; (mov r8, r8)
 8007db0:	20000464 	.word	0x20000464

08007db4 <_realloc_r>:
 8007db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007db6:	0007      	movs	r7, r0
 8007db8:	000e      	movs	r6, r1
 8007dba:	0014      	movs	r4, r2
 8007dbc:	2900      	cmp	r1, #0
 8007dbe:	d105      	bne.n	8007dcc <_realloc_r+0x18>
 8007dc0:	0011      	movs	r1, r2
 8007dc2:	f7ff fdad 	bl	8007920 <_malloc_r>
 8007dc6:	0005      	movs	r5, r0
 8007dc8:	0028      	movs	r0, r5
 8007dca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007dcc:	2a00      	cmp	r2, #0
 8007dce:	d103      	bne.n	8007dd8 <_realloc_r+0x24>
 8007dd0:	f7ff fd3a 	bl	8007848 <_free_r>
 8007dd4:	0025      	movs	r5, r4
 8007dd6:	e7f7      	b.n	8007dc8 <_realloc_r+0x14>
 8007dd8:	f000 fc90 	bl	80086fc <_malloc_usable_size_r>
 8007ddc:	9001      	str	r0, [sp, #4]
 8007dde:	4284      	cmp	r4, r0
 8007de0:	d803      	bhi.n	8007dea <_realloc_r+0x36>
 8007de2:	0035      	movs	r5, r6
 8007de4:	0843      	lsrs	r3, r0, #1
 8007de6:	42a3      	cmp	r3, r4
 8007de8:	d3ee      	bcc.n	8007dc8 <_realloc_r+0x14>
 8007dea:	0021      	movs	r1, r4
 8007dec:	0038      	movs	r0, r7
 8007dee:	f7ff fd97 	bl	8007920 <_malloc_r>
 8007df2:	1e05      	subs	r5, r0, #0
 8007df4:	d0e8      	beq.n	8007dc8 <_realloc_r+0x14>
 8007df6:	9b01      	ldr	r3, [sp, #4]
 8007df8:	0022      	movs	r2, r4
 8007dfa:	429c      	cmp	r4, r3
 8007dfc:	d900      	bls.n	8007e00 <_realloc_r+0x4c>
 8007dfe:	001a      	movs	r2, r3
 8007e00:	0031      	movs	r1, r6
 8007e02:	0028      	movs	r0, r5
 8007e04:	f7ff f94f 	bl	80070a6 <memcpy>
 8007e08:	0031      	movs	r1, r6
 8007e0a:	0038      	movs	r0, r7
 8007e0c:	f7ff fd1c 	bl	8007848 <_free_r>
 8007e10:	e7da      	b.n	8007dc8 <_realloc_r+0x14>

08007e12 <__sfputc_r>:
 8007e12:	6893      	ldr	r3, [r2, #8]
 8007e14:	b510      	push	{r4, lr}
 8007e16:	3b01      	subs	r3, #1
 8007e18:	6093      	str	r3, [r2, #8]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	da04      	bge.n	8007e28 <__sfputc_r+0x16>
 8007e1e:	6994      	ldr	r4, [r2, #24]
 8007e20:	42a3      	cmp	r3, r4
 8007e22:	db07      	blt.n	8007e34 <__sfputc_r+0x22>
 8007e24:	290a      	cmp	r1, #10
 8007e26:	d005      	beq.n	8007e34 <__sfputc_r+0x22>
 8007e28:	6813      	ldr	r3, [r2, #0]
 8007e2a:	1c58      	adds	r0, r3, #1
 8007e2c:	6010      	str	r0, [r2, #0]
 8007e2e:	7019      	strb	r1, [r3, #0]
 8007e30:	0008      	movs	r0, r1
 8007e32:	bd10      	pop	{r4, pc}
 8007e34:	f000 f94e 	bl	80080d4 <__swbuf_r>
 8007e38:	0001      	movs	r1, r0
 8007e3a:	e7f9      	b.n	8007e30 <__sfputc_r+0x1e>

08007e3c <__sfputs_r>:
 8007e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3e:	0006      	movs	r6, r0
 8007e40:	000f      	movs	r7, r1
 8007e42:	0014      	movs	r4, r2
 8007e44:	18d5      	adds	r5, r2, r3
 8007e46:	42ac      	cmp	r4, r5
 8007e48:	d101      	bne.n	8007e4e <__sfputs_r+0x12>
 8007e4a:	2000      	movs	r0, #0
 8007e4c:	e007      	b.n	8007e5e <__sfputs_r+0x22>
 8007e4e:	7821      	ldrb	r1, [r4, #0]
 8007e50:	003a      	movs	r2, r7
 8007e52:	0030      	movs	r0, r6
 8007e54:	f7ff ffdd 	bl	8007e12 <__sfputc_r>
 8007e58:	3401      	adds	r4, #1
 8007e5a:	1c43      	adds	r3, r0, #1
 8007e5c:	d1f3      	bne.n	8007e46 <__sfputs_r+0xa>
 8007e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007e60 <_vfiprintf_r>:
 8007e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e62:	b0a1      	sub	sp, #132	; 0x84
 8007e64:	0006      	movs	r6, r0
 8007e66:	000c      	movs	r4, r1
 8007e68:	001f      	movs	r7, r3
 8007e6a:	9203      	str	r2, [sp, #12]
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	d004      	beq.n	8007e7a <_vfiprintf_r+0x1a>
 8007e70:	6983      	ldr	r3, [r0, #24]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d101      	bne.n	8007e7a <_vfiprintf_r+0x1a>
 8007e76:	f000 fb31 	bl	80084dc <__sinit>
 8007e7a:	4b8e      	ldr	r3, [pc, #568]	; (80080b4 <_vfiprintf_r+0x254>)
 8007e7c:	429c      	cmp	r4, r3
 8007e7e:	d11c      	bne.n	8007eba <_vfiprintf_r+0x5a>
 8007e80:	6874      	ldr	r4, [r6, #4]
 8007e82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e84:	07db      	lsls	r3, r3, #31
 8007e86:	d405      	bmi.n	8007e94 <_vfiprintf_r+0x34>
 8007e88:	89a3      	ldrh	r3, [r4, #12]
 8007e8a:	059b      	lsls	r3, r3, #22
 8007e8c:	d402      	bmi.n	8007e94 <_vfiprintf_r+0x34>
 8007e8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e90:	f000 fbc5 	bl	800861e <__retarget_lock_acquire_recursive>
 8007e94:	89a3      	ldrh	r3, [r4, #12]
 8007e96:	071b      	lsls	r3, r3, #28
 8007e98:	d502      	bpl.n	8007ea0 <_vfiprintf_r+0x40>
 8007e9a:	6923      	ldr	r3, [r4, #16]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d11d      	bne.n	8007edc <_vfiprintf_r+0x7c>
 8007ea0:	0021      	movs	r1, r4
 8007ea2:	0030      	movs	r0, r6
 8007ea4:	f000 f96c 	bl	8008180 <__swsetup_r>
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	d017      	beq.n	8007edc <_vfiprintf_r+0x7c>
 8007eac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007eae:	07db      	lsls	r3, r3, #31
 8007eb0:	d50d      	bpl.n	8007ece <_vfiprintf_r+0x6e>
 8007eb2:	2001      	movs	r0, #1
 8007eb4:	4240      	negs	r0, r0
 8007eb6:	b021      	add	sp, #132	; 0x84
 8007eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eba:	4b7f      	ldr	r3, [pc, #508]	; (80080b8 <_vfiprintf_r+0x258>)
 8007ebc:	429c      	cmp	r4, r3
 8007ebe:	d101      	bne.n	8007ec4 <_vfiprintf_r+0x64>
 8007ec0:	68b4      	ldr	r4, [r6, #8]
 8007ec2:	e7de      	b.n	8007e82 <_vfiprintf_r+0x22>
 8007ec4:	4b7d      	ldr	r3, [pc, #500]	; (80080bc <_vfiprintf_r+0x25c>)
 8007ec6:	429c      	cmp	r4, r3
 8007ec8:	d1db      	bne.n	8007e82 <_vfiprintf_r+0x22>
 8007eca:	68f4      	ldr	r4, [r6, #12]
 8007ecc:	e7d9      	b.n	8007e82 <_vfiprintf_r+0x22>
 8007ece:	89a3      	ldrh	r3, [r4, #12]
 8007ed0:	059b      	lsls	r3, r3, #22
 8007ed2:	d4ee      	bmi.n	8007eb2 <_vfiprintf_r+0x52>
 8007ed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ed6:	f000 fba3 	bl	8008620 <__retarget_lock_release_recursive>
 8007eda:	e7ea      	b.n	8007eb2 <_vfiprintf_r+0x52>
 8007edc:	2300      	movs	r3, #0
 8007ede:	ad08      	add	r5, sp, #32
 8007ee0:	616b      	str	r3, [r5, #20]
 8007ee2:	3320      	adds	r3, #32
 8007ee4:	766b      	strb	r3, [r5, #25]
 8007ee6:	3310      	adds	r3, #16
 8007ee8:	76ab      	strb	r3, [r5, #26]
 8007eea:	9707      	str	r7, [sp, #28]
 8007eec:	9f03      	ldr	r7, [sp, #12]
 8007eee:	783b      	ldrb	r3, [r7, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d001      	beq.n	8007ef8 <_vfiprintf_r+0x98>
 8007ef4:	2b25      	cmp	r3, #37	; 0x25
 8007ef6:	d14e      	bne.n	8007f96 <_vfiprintf_r+0x136>
 8007ef8:	9b03      	ldr	r3, [sp, #12]
 8007efa:	1afb      	subs	r3, r7, r3
 8007efc:	9305      	str	r3, [sp, #20]
 8007efe:	9b03      	ldr	r3, [sp, #12]
 8007f00:	429f      	cmp	r7, r3
 8007f02:	d00d      	beq.n	8007f20 <_vfiprintf_r+0xc0>
 8007f04:	9b05      	ldr	r3, [sp, #20]
 8007f06:	0021      	movs	r1, r4
 8007f08:	0030      	movs	r0, r6
 8007f0a:	9a03      	ldr	r2, [sp, #12]
 8007f0c:	f7ff ff96 	bl	8007e3c <__sfputs_r>
 8007f10:	1c43      	adds	r3, r0, #1
 8007f12:	d100      	bne.n	8007f16 <_vfiprintf_r+0xb6>
 8007f14:	e0b5      	b.n	8008082 <_vfiprintf_r+0x222>
 8007f16:	696a      	ldr	r2, [r5, #20]
 8007f18:	9b05      	ldr	r3, [sp, #20]
 8007f1a:	4694      	mov	ip, r2
 8007f1c:	4463      	add	r3, ip
 8007f1e:	616b      	str	r3, [r5, #20]
 8007f20:	783b      	ldrb	r3, [r7, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d100      	bne.n	8007f28 <_vfiprintf_r+0xc8>
 8007f26:	e0ac      	b.n	8008082 <_vfiprintf_r+0x222>
 8007f28:	2201      	movs	r2, #1
 8007f2a:	1c7b      	adds	r3, r7, #1
 8007f2c:	9303      	str	r3, [sp, #12]
 8007f2e:	2300      	movs	r3, #0
 8007f30:	4252      	negs	r2, r2
 8007f32:	606a      	str	r2, [r5, #4]
 8007f34:	a904      	add	r1, sp, #16
 8007f36:	3254      	adds	r2, #84	; 0x54
 8007f38:	1852      	adds	r2, r2, r1
 8007f3a:	602b      	str	r3, [r5, #0]
 8007f3c:	60eb      	str	r3, [r5, #12]
 8007f3e:	60ab      	str	r3, [r5, #8]
 8007f40:	7013      	strb	r3, [r2, #0]
 8007f42:	65ab      	str	r3, [r5, #88]	; 0x58
 8007f44:	9b03      	ldr	r3, [sp, #12]
 8007f46:	2205      	movs	r2, #5
 8007f48:	7819      	ldrb	r1, [r3, #0]
 8007f4a:	485d      	ldr	r0, [pc, #372]	; (80080c0 <_vfiprintf_r+0x260>)
 8007f4c:	f7ff f8a0 	bl	8007090 <memchr>
 8007f50:	9b03      	ldr	r3, [sp, #12]
 8007f52:	1c5f      	adds	r7, r3, #1
 8007f54:	2800      	cmp	r0, #0
 8007f56:	d120      	bne.n	8007f9a <_vfiprintf_r+0x13a>
 8007f58:	682a      	ldr	r2, [r5, #0]
 8007f5a:	06d3      	lsls	r3, r2, #27
 8007f5c:	d504      	bpl.n	8007f68 <_vfiprintf_r+0x108>
 8007f5e:	2353      	movs	r3, #83	; 0x53
 8007f60:	a904      	add	r1, sp, #16
 8007f62:	185b      	adds	r3, r3, r1
 8007f64:	2120      	movs	r1, #32
 8007f66:	7019      	strb	r1, [r3, #0]
 8007f68:	0713      	lsls	r3, r2, #28
 8007f6a:	d504      	bpl.n	8007f76 <_vfiprintf_r+0x116>
 8007f6c:	2353      	movs	r3, #83	; 0x53
 8007f6e:	a904      	add	r1, sp, #16
 8007f70:	185b      	adds	r3, r3, r1
 8007f72:	212b      	movs	r1, #43	; 0x2b
 8007f74:	7019      	strb	r1, [r3, #0]
 8007f76:	9b03      	ldr	r3, [sp, #12]
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f7c:	d016      	beq.n	8007fac <_vfiprintf_r+0x14c>
 8007f7e:	2100      	movs	r1, #0
 8007f80:	68eb      	ldr	r3, [r5, #12]
 8007f82:	9f03      	ldr	r7, [sp, #12]
 8007f84:	783a      	ldrb	r2, [r7, #0]
 8007f86:	1c78      	adds	r0, r7, #1
 8007f88:	3a30      	subs	r2, #48	; 0x30
 8007f8a:	4684      	mov	ip, r0
 8007f8c:	2a09      	cmp	r2, #9
 8007f8e:	d94f      	bls.n	8008030 <_vfiprintf_r+0x1d0>
 8007f90:	2900      	cmp	r1, #0
 8007f92:	d111      	bne.n	8007fb8 <_vfiprintf_r+0x158>
 8007f94:	e017      	b.n	8007fc6 <_vfiprintf_r+0x166>
 8007f96:	3701      	adds	r7, #1
 8007f98:	e7a9      	b.n	8007eee <_vfiprintf_r+0x8e>
 8007f9a:	4b49      	ldr	r3, [pc, #292]	; (80080c0 <_vfiprintf_r+0x260>)
 8007f9c:	682a      	ldr	r2, [r5, #0]
 8007f9e:	1ac0      	subs	r0, r0, r3
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	4083      	lsls	r3, r0
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	602b      	str	r3, [r5, #0]
 8007fa8:	9703      	str	r7, [sp, #12]
 8007faa:	e7cb      	b.n	8007f44 <_vfiprintf_r+0xe4>
 8007fac:	9b07      	ldr	r3, [sp, #28]
 8007fae:	1d19      	adds	r1, r3, #4
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	9107      	str	r1, [sp, #28]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	db01      	blt.n	8007fbc <_vfiprintf_r+0x15c>
 8007fb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fba:	e004      	b.n	8007fc6 <_vfiprintf_r+0x166>
 8007fbc:	425b      	negs	r3, r3
 8007fbe:	60eb      	str	r3, [r5, #12]
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	602b      	str	r3, [r5, #0]
 8007fc6:	783b      	ldrb	r3, [r7, #0]
 8007fc8:	2b2e      	cmp	r3, #46	; 0x2e
 8007fca:	d10a      	bne.n	8007fe2 <_vfiprintf_r+0x182>
 8007fcc:	787b      	ldrb	r3, [r7, #1]
 8007fce:	2b2a      	cmp	r3, #42	; 0x2a
 8007fd0:	d137      	bne.n	8008042 <_vfiprintf_r+0x1e2>
 8007fd2:	9b07      	ldr	r3, [sp, #28]
 8007fd4:	3702      	adds	r7, #2
 8007fd6:	1d1a      	adds	r2, r3, #4
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	9207      	str	r2, [sp, #28]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	db2d      	blt.n	800803c <_vfiprintf_r+0x1dc>
 8007fe0:	9309      	str	r3, [sp, #36]	; 0x24
 8007fe2:	2203      	movs	r2, #3
 8007fe4:	7839      	ldrb	r1, [r7, #0]
 8007fe6:	4837      	ldr	r0, [pc, #220]	; (80080c4 <_vfiprintf_r+0x264>)
 8007fe8:	f7ff f852 	bl	8007090 <memchr>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	d007      	beq.n	8008000 <_vfiprintf_r+0x1a0>
 8007ff0:	4b34      	ldr	r3, [pc, #208]	; (80080c4 <_vfiprintf_r+0x264>)
 8007ff2:	682a      	ldr	r2, [r5, #0]
 8007ff4:	1ac0      	subs	r0, r0, r3
 8007ff6:	2340      	movs	r3, #64	; 0x40
 8007ff8:	4083      	lsls	r3, r0
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	3701      	adds	r7, #1
 8007ffe:	602b      	str	r3, [r5, #0]
 8008000:	7839      	ldrb	r1, [r7, #0]
 8008002:	1c7b      	adds	r3, r7, #1
 8008004:	2206      	movs	r2, #6
 8008006:	4830      	ldr	r0, [pc, #192]	; (80080c8 <_vfiprintf_r+0x268>)
 8008008:	9303      	str	r3, [sp, #12]
 800800a:	7629      	strb	r1, [r5, #24]
 800800c:	f7ff f840 	bl	8007090 <memchr>
 8008010:	2800      	cmp	r0, #0
 8008012:	d045      	beq.n	80080a0 <_vfiprintf_r+0x240>
 8008014:	4b2d      	ldr	r3, [pc, #180]	; (80080cc <_vfiprintf_r+0x26c>)
 8008016:	2b00      	cmp	r3, #0
 8008018:	d127      	bne.n	800806a <_vfiprintf_r+0x20a>
 800801a:	2207      	movs	r2, #7
 800801c:	9b07      	ldr	r3, [sp, #28]
 800801e:	3307      	adds	r3, #7
 8008020:	4393      	bics	r3, r2
 8008022:	3308      	adds	r3, #8
 8008024:	9307      	str	r3, [sp, #28]
 8008026:	696b      	ldr	r3, [r5, #20]
 8008028:	9a04      	ldr	r2, [sp, #16]
 800802a:	189b      	adds	r3, r3, r2
 800802c:	616b      	str	r3, [r5, #20]
 800802e:	e75d      	b.n	8007eec <_vfiprintf_r+0x8c>
 8008030:	210a      	movs	r1, #10
 8008032:	434b      	muls	r3, r1
 8008034:	4667      	mov	r7, ip
 8008036:	189b      	adds	r3, r3, r2
 8008038:	3909      	subs	r1, #9
 800803a:	e7a3      	b.n	8007f84 <_vfiprintf_r+0x124>
 800803c:	2301      	movs	r3, #1
 800803e:	425b      	negs	r3, r3
 8008040:	e7ce      	b.n	8007fe0 <_vfiprintf_r+0x180>
 8008042:	2300      	movs	r3, #0
 8008044:	001a      	movs	r2, r3
 8008046:	3701      	adds	r7, #1
 8008048:	606b      	str	r3, [r5, #4]
 800804a:	7839      	ldrb	r1, [r7, #0]
 800804c:	1c78      	adds	r0, r7, #1
 800804e:	3930      	subs	r1, #48	; 0x30
 8008050:	4684      	mov	ip, r0
 8008052:	2909      	cmp	r1, #9
 8008054:	d903      	bls.n	800805e <_vfiprintf_r+0x1fe>
 8008056:	2b00      	cmp	r3, #0
 8008058:	d0c3      	beq.n	8007fe2 <_vfiprintf_r+0x182>
 800805a:	9209      	str	r2, [sp, #36]	; 0x24
 800805c:	e7c1      	b.n	8007fe2 <_vfiprintf_r+0x182>
 800805e:	230a      	movs	r3, #10
 8008060:	435a      	muls	r2, r3
 8008062:	4667      	mov	r7, ip
 8008064:	1852      	adds	r2, r2, r1
 8008066:	3b09      	subs	r3, #9
 8008068:	e7ef      	b.n	800804a <_vfiprintf_r+0x1ea>
 800806a:	ab07      	add	r3, sp, #28
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	0022      	movs	r2, r4
 8008070:	0029      	movs	r1, r5
 8008072:	0030      	movs	r0, r6
 8008074:	4b16      	ldr	r3, [pc, #88]	; (80080d0 <_vfiprintf_r+0x270>)
 8008076:	f7fd fd41 	bl	8005afc <_printf_float>
 800807a:	9004      	str	r0, [sp, #16]
 800807c:	9b04      	ldr	r3, [sp, #16]
 800807e:	3301      	adds	r3, #1
 8008080:	d1d1      	bne.n	8008026 <_vfiprintf_r+0x1c6>
 8008082:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008084:	07db      	lsls	r3, r3, #31
 8008086:	d405      	bmi.n	8008094 <_vfiprintf_r+0x234>
 8008088:	89a3      	ldrh	r3, [r4, #12]
 800808a:	059b      	lsls	r3, r3, #22
 800808c:	d402      	bmi.n	8008094 <_vfiprintf_r+0x234>
 800808e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008090:	f000 fac6 	bl	8008620 <__retarget_lock_release_recursive>
 8008094:	89a3      	ldrh	r3, [r4, #12]
 8008096:	065b      	lsls	r3, r3, #25
 8008098:	d500      	bpl.n	800809c <_vfiprintf_r+0x23c>
 800809a:	e70a      	b.n	8007eb2 <_vfiprintf_r+0x52>
 800809c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800809e:	e70a      	b.n	8007eb6 <_vfiprintf_r+0x56>
 80080a0:	ab07      	add	r3, sp, #28
 80080a2:	9300      	str	r3, [sp, #0]
 80080a4:	0022      	movs	r2, r4
 80080a6:	0029      	movs	r1, r5
 80080a8:	0030      	movs	r0, r6
 80080aa:	4b09      	ldr	r3, [pc, #36]	; (80080d0 <_vfiprintf_r+0x270>)
 80080ac:	f7fd ffd8 	bl	8006060 <_printf_i>
 80080b0:	e7e3      	b.n	800807a <_vfiprintf_r+0x21a>
 80080b2:	46c0      	nop			; (mov r8, r8)
 80080b4:	0800911c 	.word	0x0800911c
 80080b8:	0800913c 	.word	0x0800913c
 80080bc:	080090fc 	.word	0x080090fc
 80080c0:	080090ac 	.word	0x080090ac
 80080c4:	080090b2 	.word	0x080090b2
 80080c8:	080090b6 	.word	0x080090b6
 80080cc:	08005afd 	.word	0x08005afd
 80080d0:	08007e3d 	.word	0x08007e3d

080080d4 <__swbuf_r>:
 80080d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d6:	0005      	movs	r5, r0
 80080d8:	000e      	movs	r6, r1
 80080da:	0014      	movs	r4, r2
 80080dc:	2800      	cmp	r0, #0
 80080de:	d004      	beq.n	80080ea <__swbuf_r+0x16>
 80080e0:	6983      	ldr	r3, [r0, #24]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d101      	bne.n	80080ea <__swbuf_r+0x16>
 80080e6:	f000 f9f9 	bl	80084dc <__sinit>
 80080ea:	4b22      	ldr	r3, [pc, #136]	; (8008174 <__swbuf_r+0xa0>)
 80080ec:	429c      	cmp	r4, r3
 80080ee:	d12e      	bne.n	800814e <__swbuf_r+0x7a>
 80080f0:	686c      	ldr	r4, [r5, #4]
 80080f2:	69a3      	ldr	r3, [r4, #24]
 80080f4:	60a3      	str	r3, [r4, #8]
 80080f6:	89a3      	ldrh	r3, [r4, #12]
 80080f8:	071b      	lsls	r3, r3, #28
 80080fa:	d532      	bpl.n	8008162 <__swbuf_r+0x8e>
 80080fc:	6923      	ldr	r3, [r4, #16]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d02f      	beq.n	8008162 <__swbuf_r+0x8e>
 8008102:	6823      	ldr	r3, [r4, #0]
 8008104:	6922      	ldr	r2, [r4, #16]
 8008106:	b2f7      	uxtb	r7, r6
 8008108:	1a98      	subs	r0, r3, r2
 800810a:	6963      	ldr	r3, [r4, #20]
 800810c:	b2f6      	uxtb	r6, r6
 800810e:	4283      	cmp	r3, r0
 8008110:	dc05      	bgt.n	800811e <__swbuf_r+0x4a>
 8008112:	0021      	movs	r1, r4
 8008114:	0028      	movs	r0, r5
 8008116:	f000 f93f 	bl	8008398 <_fflush_r>
 800811a:	2800      	cmp	r0, #0
 800811c:	d127      	bne.n	800816e <__swbuf_r+0x9a>
 800811e:	68a3      	ldr	r3, [r4, #8]
 8008120:	3001      	adds	r0, #1
 8008122:	3b01      	subs	r3, #1
 8008124:	60a3      	str	r3, [r4, #8]
 8008126:	6823      	ldr	r3, [r4, #0]
 8008128:	1c5a      	adds	r2, r3, #1
 800812a:	6022      	str	r2, [r4, #0]
 800812c:	701f      	strb	r7, [r3, #0]
 800812e:	6963      	ldr	r3, [r4, #20]
 8008130:	4283      	cmp	r3, r0
 8008132:	d004      	beq.n	800813e <__swbuf_r+0x6a>
 8008134:	89a3      	ldrh	r3, [r4, #12]
 8008136:	07db      	lsls	r3, r3, #31
 8008138:	d507      	bpl.n	800814a <__swbuf_r+0x76>
 800813a:	2e0a      	cmp	r6, #10
 800813c:	d105      	bne.n	800814a <__swbuf_r+0x76>
 800813e:	0021      	movs	r1, r4
 8008140:	0028      	movs	r0, r5
 8008142:	f000 f929 	bl	8008398 <_fflush_r>
 8008146:	2800      	cmp	r0, #0
 8008148:	d111      	bne.n	800816e <__swbuf_r+0x9a>
 800814a:	0030      	movs	r0, r6
 800814c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800814e:	4b0a      	ldr	r3, [pc, #40]	; (8008178 <__swbuf_r+0xa4>)
 8008150:	429c      	cmp	r4, r3
 8008152:	d101      	bne.n	8008158 <__swbuf_r+0x84>
 8008154:	68ac      	ldr	r4, [r5, #8]
 8008156:	e7cc      	b.n	80080f2 <__swbuf_r+0x1e>
 8008158:	4b08      	ldr	r3, [pc, #32]	; (800817c <__swbuf_r+0xa8>)
 800815a:	429c      	cmp	r4, r3
 800815c:	d1c9      	bne.n	80080f2 <__swbuf_r+0x1e>
 800815e:	68ec      	ldr	r4, [r5, #12]
 8008160:	e7c7      	b.n	80080f2 <__swbuf_r+0x1e>
 8008162:	0021      	movs	r1, r4
 8008164:	0028      	movs	r0, r5
 8008166:	f000 f80b 	bl	8008180 <__swsetup_r>
 800816a:	2800      	cmp	r0, #0
 800816c:	d0c9      	beq.n	8008102 <__swbuf_r+0x2e>
 800816e:	2601      	movs	r6, #1
 8008170:	4276      	negs	r6, r6
 8008172:	e7ea      	b.n	800814a <__swbuf_r+0x76>
 8008174:	0800911c 	.word	0x0800911c
 8008178:	0800913c 	.word	0x0800913c
 800817c:	080090fc 	.word	0x080090fc

08008180 <__swsetup_r>:
 8008180:	4b37      	ldr	r3, [pc, #220]	; (8008260 <__swsetup_r+0xe0>)
 8008182:	b570      	push	{r4, r5, r6, lr}
 8008184:	681d      	ldr	r5, [r3, #0]
 8008186:	0006      	movs	r6, r0
 8008188:	000c      	movs	r4, r1
 800818a:	2d00      	cmp	r5, #0
 800818c:	d005      	beq.n	800819a <__swsetup_r+0x1a>
 800818e:	69ab      	ldr	r3, [r5, #24]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d102      	bne.n	800819a <__swsetup_r+0x1a>
 8008194:	0028      	movs	r0, r5
 8008196:	f000 f9a1 	bl	80084dc <__sinit>
 800819a:	4b32      	ldr	r3, [pc, #200]	; (8008264 <__swsetup_r+0xe4>)
 800819c:	429c      	cmp	r4, r3
 800819e:	d10f      	bne.n	80081c0 <__swsetup_r+0x40>
 80081a0:	686c      	ldr	r4, [r5, #4]
 80081a2:	230c      	movs	r3, #12
 80081a4:	5ee2      	ldrsh	r2, [r4, r3]
 80081a6:	b293      	uxth	r3, r2
 80081a8:	0711      	lsls	r1, r2, #28
 80081aa:	d42d      	bmi.n	8008208 <__swsetup_r+0x88>
 80081ac:	06d9      	lsls	r1, r3, #27
 80081ae:	d411      	bmi.n	80081d4 <__swsetup_r+0x54>
 80081b0:	2309      	movs	r3, #9
 80081b2:	2001      	movs	r0, #1
 80081b4:	6033      	str	r3, [r6, #0]
 80081b6:	3337      	adds	r3, #55	; 0x37
 80081b8:	4313      	orrs	r3, r2
 80081ba:	81a3      	strh	r3, [r4, #12]
 80081bc:	4240      	negs	r0, r0
 80081be:	bd70      	pop	{r4, r5, r6, pc}
 80081c0:	4b29      	ldr	r3, [pc, #164]	; (8008268 <__swsetup_r+0xe8>)
 80081c2:	429c      	cmp	r4, r3
 80081c4:	d101      	bne.n	80081ca <__swsetup_r+0x4a>
 80081c6:	68ac      	ldr	r4, [r5, #8]
 80081c8:	e7eb      	b.n	80081a2 <__swsetup_r+0x22>
 80081ca:	4b28      	ldr	r3, [pc, #160]	; (800826c <__swsetup_r+0xec>)
 80081cc:	429c      	cmp	r4, r3
 80081ce:	d1e8      	bne.n	80081a2 <__swsetup_r+0x22>
 80081d0:	68ec      	ldr	r4, [r5, #12]
 80081d2:	e7e6      	b.n	80081a2 <__swsetup_r+0x22>
 80081d4:	075b      	lsls	r3, r3, #29
 80081d6:	d513      	bpl.n	8008200 <__swsetup_r+0x80>
 80081d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081da:	2900      	cmp	r1, #0
 80081dc:	d008      	beq.n	80081f0 <__swsetup_r+0x70>
 80081de:	0023      	movs	r3, r4
 80081e0:	3344      	adds	r3, #68	; 0x44
 80081e2:	4299      	cmp	r1, r3
 80081e4:	d002      	beq.n	80081ec <__swsetup_r+0x6c>
 80081e6:	0030      	movs	r0, r6
 80081e8:	f7ff fb2e 	bl	8007848 <_free_r>
 80081ec:	2300      	movs	r3, #0
 80081ee:	6363      	str	r3, [r4, #52]	; 0x34
 80081f0:	2224      	movs	r2, #36	; 0x24
 80081f2:	89a3      	ldrh	r3, [r4, #12]
 80081f4:	4393      	bics	r3, r2
 80081f6:	81a3      	strh	r3, [r4, #12]
 80081f8:	2300      	movs	r3, #0
 80081fa:	6063      	str	r3, [r4, #4]
 80081fc:	6923      	ldr	r3, [r4, #16]
 80081fe:	6023      	str	r3, [r4, #0]
 8008200:	2308      	movs	r3, #8
 8008202:	89a2      	ldrh	r2, [r4, #12]
 8008204:	4313      	orrs	r3, r2
 8008206:	81a3      	strh	r3, [r4, #12]
 8008208:	6923      	ldr	r3, [r4, #16]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d10b      	bne.n	8008226 <__swsetup_r+0xa6>
 800820e:	21a0      	movs	r1, #160	; 0xa0
 8008210:	2280      	movs	r2, #128	; 0x80
 8008212:	89a3      	ldrh	r3, [r4, #12]
 8008214:	0089      	lsls	r1, r1, #2
 8008216:	0092      	lsls	r2, r2, #2
 8008218:	400b      	ands	r3, r1
 800821a:	4293      	cmp	r3, r2
 800821c:	d003      	beq.n	8008226 <__swsetup_r+0xa6>
 800821e:	0021      	movs	r1, r4
 8008220:	0030      	movs	r0, r6
 8008222:	f000 fa27 	bl	8008674 <__smakebuf_r>
 8008226:	220c      	movs	r2, #12
 8008228:	5ea3      	ldrsh	r3, [r4, r2]
 800822a:	2001      	movs	r0, #1
 800822c:	001a      	movs	r2, r3
 800822e:	b299      	uxth	r1, r3
 8008230:	4002      	ands	r2, r0
 8008232:	4203      	tst	r3, r0
 8008234:	d00f      	beq.n	8008256 <__swsetup_r+0xd6>
 8008236:	2200      	movs	r2, #0
 8008238:	60a2      	str	r2, [r4, #8]
 800823a:	6962      	ldr	r2, [r4, #20]
 800823c:	4252      	negs	r2, r2
 800823e:	61a2      	str	r2, [r4, #24]
 8008240:	2000      	movs	r0, #0
 8008242:	6922      	ldr	r2, [r4, #16]
 8008244:	4282      	cmp	r2, r0
 8008246:	d1ba      	bne.n	80081be <__swsetup_r+0x3e>
 8008248:	060a      	lsls	r2, r1, #24
 800824a:	d5b8      	bpl.n	80081be <__swsetup_r+0x3e>
 800824c:	2240      	movs	r2, #64	; 0x40
 800824e:	4313      	orrs	r3, r2
 8008250:	81a3      	strh	r3, [r4, #12]
 8008252:	3801      	subs	r0, #1
 8008254:	e7b3      	b.n	80081be <__swsetup_r+0x3e>
 8008256:	0788      	lsls	r0, r1, #30
 8008258:	d400      	bmi.n	800825c <__swsetup_r+0xdc>
 800825a:	6962      	ldr	r2, [r4, #20]
 800825c:	60a2      	str	r2, [r4, #8]
 800825e:	e7ef      	b.n	8008240 <__swsetup_r+0xc0>
 8008260:	2000004c 	.word	0x2000004c
 8008264:	0800911c 	.word	0x0800911c
 8008268:	0800913c 	.word	0x0800913c
 800826c:	080090fc 	.word	0x080090fc

08008270 <abort>:
 8008270:	2006      	movs	r0, #6
 8008272:	b510      	push	{r4, lr}
 8008274:	f000 fa74 	bl	8008760 <raise>
 8008278:	2001      	movs	r0, #1
 800827a:	f7fa faf4 	bl	8002866 <_exit>
	...

08008280 <__sflush_r>:
 8008280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008282:	898b      	ldrh	r3, [r1, #12]
 8008284:	0005      	movs	r5, r0
 8008286:	000c      	movs	r4, r1
 8008288:	071a      	lsls	r2, r3, #28
 800828a:	d45f      	bmi.n	800834c <__sflush_r+0xcc>
 800828c:	684a      	ldr	r2, [r1, #4]
 800828e:	2a00      	cmp	r2, #0
 8008290:	dc04      	bgt.n	800829c <__sflush_r+0x1c>
 8008292:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008294:	2a00      	cmp	r2, #0
 8008296:	dc01      	bgt.n	800829c <__sflush_r+0x1c>
 8008298:	2000      	movs	r0, #0
 800829a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800829c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800829e:	2f00      	cmp	r7, #0
 80082a0:	d0fa      	beq.n	8008298 <__sflush_r+0x18>
 80082a2:	2200      	movs	r2, #0
 80082a4:	2180      	movs	r1, #128	; 0x80
 80082a6:	682e      	ldr	r6, [r5, #0]
 80082a8:	602a      	str	r2, [r5, #0]
 80082aa:	001a      	movs	r2, r3
 80082ac:	0149      	lsls	r1, r1, #5
 80082ae:	400a      	ands	r2, r1
 80082b0:	420b      	tst	r3, r1
 80082b2:	d034      	beq.n	800831e <__sflush_r+0x9e>
 80082b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80082b6:	89a3      	ldrh	r3, [r4, #12]
 80082b8:	075b      	lsls	r3, r3, #29
 80082ba:	d506      	bpl.n	80082ca <__sflush_r+0x4a>
 80082bc:	6863      	ldr	r3, [r4, #4]
 80082be:	1ac0      	subs	r0, r0, r3
 80082c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d001      	beq.n	80082ca <__sflush_r+0x4a>
 80082c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082c8:	1ac0      	subs	r0, r0, r3
 80082ca:	0002      	movs	r2, r0
 80082cc:	6a21      	ldr	r1, [r4, #32]
 80082ce:	2300      	movs	r3, #0
 80082d0:	0028      	movs	r0, r5
 80082d2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80082d4:	47b8      	blx	r7
 80082d6:	89a1      	ldrh	r1, [r4, #12]
 80082d8:	1c43      	adds	r3, r0, #1
 80082da:	d106      	bne.n	80082ea <__sflush_r+0x6a>
 80082dc:	682b      	ldr	r3, [r5, #0]
 80082de:	2b1d      	cmp	r3, #29
 80082e0:	d831      	bhi.n	8008346 <__sflush_r+0xc6>
 80082e2:	4a2c      	ldr	r2, [pc, #176]	; (8008394 <__sflush_r+0x114>)
 80082e4:	40da      	lsrs	r2, r3
 80082e6:	07d3      	lsls	r3, r2, #31
 80082e8:	d52d      	bpl.n	8008346 <__sflush_r+0xc6>
 80082ea:	2300      	movs	r3, #0
 80082ec:	6063      	str	r3, [r4, #4]
 80082ee:	6923      	ldr	r3, [r4, #16]
 80082f0:	6023      	str	r3, [r4, #0]
 80082f2:	04cb      	lsls	r3, r1, #19
 80082f4:	d505      	bpl.n	8008302 <__sflush_r+0x82>
 80082f6:	1c43      	adds	r3, r0, #1
 80082f8:	d102      	bne.n	8008300 <__sflush_r+0x80>
 80082fa:	682b      	ldr	r3, [r5, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d100      	bne.n	8008302 <__sflush_r+0x82>
 8008300:	6560      	str	r0, [r4, #84]	; 0x54
 8008302:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008304:	602e      	str	r6, [r5, #0]
 8008306:	2900      	cmp	r1, #0
 8008308:	d0c6      	beq.n	8008298 <__sflush_r+0x18>
 800830a:	0023      	movs	r3, r4
 800830c:	3344      	adds	r3, #68	; 0x44
 800830e:	4299      	cmp	r1, r3
 8008310:	d002      	beq.n	8008318 <__sflush_r+0x98>
 8008312:	0028      	movs	r0, r5
 8008314:	f7ff fa98 	bl	8007848 <_free_r>
 8008318:	2000      	movs	r0, #0
 800831a:	6360      	str	r0, [r4, #52]	; 0x34
 800831c:	e7bd      	b.n	800829a <__sflush_r+0x1a>
 800831e:	2301      	movs	r3, #1
 8008320:	0028      	movs	r0, r5
 8008322:	6a21      	ldr	r1, [r4, #32]
 8008324:	47b8      	blx	r7
 8008326:	1c43      	adds	r3, r0, #1
 8008328:	d1c5      	bne.n	80082b6 <__sflush_r+0x36>
 800832a:	682b      	ldr	r3, [r5, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d0c2      	beq.n	80082b6 <__sflush_r+0x36>
 8008330:	2b1d      	cmp	r3, #29
 8008332:	d001      	beq.n	8008338 <__sflush_r+0xb8>
 8008334:	2b16      	cmp	r3, #22
 8008336:	d101      	bne.n	800833c <__sflush_r+0xbc>
 8008338:	602e      	str	r6, [r5, #0]
 800833a:	e7ad      	b.n	8008298 <__sflush_r+0x18>
 800833c:	2340      	movs	r3, #64	; 0x40
 800833e:	89a2      	ldrh	r2, [r4, #12]
 8008340:	4313      	orrs	r3, r2
 8008342:	81a3      	strh	r3, [r4, #12]
 8008344:	e7a9      	b.n	800829a <__sflush_r+0x1a>
 8008346:	2340      	movs	r3, #64	; 0x40
 8008348:	430b      	orrs	r3, r1
 800834a:	e7fa      	b.n	8008342 <__sflush_r+0xc2>
 800834c:	690f      	ldr	r7, [r1, #16]
 800834e:	2f00      	cmp	r7, #0
 8008350:	d0a2      	beq.n	8008298 <__sflush_r+0x18>
 8008352:	680a      	ldr	r2, [r1, #0]
 8008354:	600f      	str	r7, [r1, #0]
 8008356:	1bd2      	subs	r2, r2, r7
 8008358:	9201      	str	r2, [sp, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	079b      	lsls	r3, r3, #30
 800835e:	d100      	bne.n	8008362 <__sflush_r+0xe2>
 8008360:	694a      	ldr	r2, [r1, #20]
 8008362:	60a2      	str	r2, [r4, #8]
 8008364:	9b01      	ldr	r3, [sp, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	dc00      	bgt.n	800836c <__sflush_r+0xec>
 800836a:	e795      	b.n	8008298 <__sflush_r+0x18>
 800836c:	003a      	movs	r2, r7
 800836e:	0028      	movs	r0, r5
 8008370:	9b01      	ldr	r3, [sp, #4]
 8008372:	6a21      	ldr	r1, [r4, #32]
 8008374:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008376:	47b0      	blx	r6
 8008378:	2800      	cmp	r0, #0
 800837a:	dc06      	bgt.n	800838a <__sflush_r+0x10a>
 800837c:	2340      	movs	r3, #64	; 0x40
 800837e:	2001      	movs	r0, #1
 8008380:	89a2      	ldrh	r2, [r4, #12]
 8008382:	4240      	negs	r0, r0
 8008384:	4313      	orrs	r3, r2
 8008386:	81a3      	strh	r3, [r4, #12]
 8008388:	e787      	b.n	800829a <__sflush_r+0x1a>
 800838a:	9b01      	ldr	r3, [sp, #4]
 800838c:	183f      	adds	r7, r7, r0
 800838e:	1a1b      	subs	r3, r3, r0
 8008390:	9301      	str	r3, [sp, #4]
 8008392:	e7e7      	b.n	8008364 <__sflush_r+0xe4>
 8008394:	20400001 	.word	0x20400001

08008398 <_fflush_r>:
 8008398:	690b      	ldr	r3, [r1, #16]
 800839a:	b570      	push	{r4, r5, r6, lr}
 800839c:	0005      	movs	r5, r0
 800839e:	000c      	movs	r4, r1
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d102      	bne.n	80083aa <_fflush_r+0x12>
 80083a4:	2500      	movs	r5, #0
 80083a6:	0028      	movs	r0, r5
 80083a8:	bd70      	pop	{r4, r5, r6, pc}
 80083aa:	2800      	cmp	r0, #0
 80083ac:	d004      	beq.n	80083b8 <_fflush_r+0x20>
 80083ae:	6983      	ldr	r3, [r0, #24]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d101      	bne.n	80083b8 <_fflush_r+0x20>
 80083b4:	f000 f892 	bl	80084dc <__sinit>
 80083b8:	4b14      	ldr	r3, [pc, #80]	; (800840c <_fflush_r+0x74>)
 80083ba:	429c      	cmp	r4, r3
 80083bc:	d11b      	bne.n	80083f6 <_fflush_r+0x5e>
 80083be:	686c      	ldr	r4, [r5, #4]
 80083c0:	220c      	movs	r2, #12
 80083c2:	5ea3      	ldrsh	r3, [r4, r2]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d0ed      	beq.n	80083a4 <_fflush_r+0xc>
 80083c8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80083ca:	07d2      	lsls	r2, r2, #31
 80083cc:	d404      	bmi.n	80083d8 <_fflush_r+0x40>
 80083ce:	059b      	lsls	r3, r3, #22
 80083d0:	d402      	bmi.n	80083d8 <_fflush_r+0x40>
 80083d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083d4:	f000 f923 	bl	800861e <__retarget_lock_acquire_recursive>
 80083d8:	0028      	movs	r0, r5
 80083da:	0021      	movs	r1, r4
 80083dc:	f7ff ff50 	bl	8008280 <__sflush_r>
 80083e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083e2:	0005      	movs	r5, r0
 80083e4:	07db      	lsls	r3, r3, #31
 80083e6:	d4de      	bmi.n	80083a6 <_fflush_r+0xe>
 80083e8:	89a3      	ldrh	r3, [r4, #12]
 80083ea:	059b      	lsls	r3, r3, #22
 80083ec:	d4db      	bmi.n	80083a6 <_fflush_r+0xe>
 80083ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083f0:	f000 f916 	bl	8008620 <__retarget_lock_release_recursive>
 80083f4:	e7d7      	b.n	80083a6 <_fflush_r+0xe>
 80083f6:	4b06      	ldr	r3, [pc, #24]	; (8008410 <_fflush_r+0x78>)
 80083f8:	429c      	cmp	r4, r3
 80083fa:	d101      	bne.n	8008400 <_fflush_r+0x68>
 80083fc:	68ac      	ldr	r4, [r5, #8]
 80083fe:	e7df      	b.n	80083c0 <_fflush_r+0x28>
 8008400:	4b04      	ldr	r3, [pc, #16]	; (8008414 <_fflush_r+0x7c>)
 8008402:	429c      	cmp	r4, r3
 8008404:	d1dc      	bne.n	80083c0 <_fflush_r+0x28>
 8008406:	68ec      	ldr	r4, [r5, #12]
 8008408:	e7da      	b.n	80083c0 <_fflush_r+0x28>
 800840a:	46c0      	nop			; (mov r8, r8)
 800840c:	0800911c 	.word	0x0800911c
 8008410:	0800913c 	.word	0x0800913c
 8008414:	080090fc 	.word	0x080090fc

08008418 <std>:
 8008418:	2300      	movs	r3, #0
 800841a:	b510      	push	{r4, lr}
 800841c:	0004      	movs	r4, r0
 800841e:	6003      	str	r3, [r0, #0]
 8008420:	6043      	str	r3, [r0, #4]
 8008422:	6083      	str	r3, [r0, #8]
 8008424:	8181      	strh	r1, [r0, #12]
 8008426:	6643      	str	r3, [r0, #100]	; 0x64
 8008428:	0019      	movs	r1, r3
 800842a:	81c2      	strh	r2, [r0, #14]
 800842c:	6103      	str	r3, [r0, #16]
 800842e:	6143      	str	r3, [r0, #20]
 8008430:	6183      	str	r3, [r0, #24]
 8008432:	2208      	movs	r2, #8
 8008434:	305c      	adds	r0, #92	; 0x5c
 8008436:	f7fd faaf 	bl	8005998 <memset>
 800843a:	4b05      	ldr	r3, [pc, #20]	; (8008450 <std+0x38>)
 800843c:	6224      	str	r4, [r4, #32]
 800843e:	6263      	str	r3, [r4, #36]	; 0x24
 8008440:	4b04      	ldr	r3, [pc, #16]	; (8008454 <std+0x3c>)
 8008442:	62a3      	str	r3, [r4, #40]	; 0x28
 8008444:	4b04      	ldr	r3, [pc, #16]	; (8008458 <std+0x40>)
 8008446:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008448:	4b04      	ldr	r3, [pc, #16]	; (800845c <std+0x44>)
 800844a:	6323      	str	r3, [r4, #48]	; 0x30
 800844c:	bd10      	pop	{r4, pc}
 800844e:	46c0      	nop			; (mov r8, r8)
 8008450:	080087a1 	.word	0x080087a1
 8008454:	080087c9 	.word	0x080087c9
 8008458:	08008801 	.word	0x08008801
 800845c:	0800882d 	.word	0x0800882d

08008460 <_cleanup_r>:
 8008460:	b510      	push	{r4, lr}
 8008462:	4902      	ldr	r1, [pc, #8]	; (800846c <_cleanup_r+0xc>)
 8008464:	f000 f8ba 	bl	80085dc <_fwalk_reent>
 8008468:	bd10      	pop	{r4, pc}
 800846a:	46c0      	nop			; (mov r8, r8)
 800846c:	08008399 	.word	0x08008399

08008470 <__sfmoreglue>:
 8008470:	b570      	push	{r4, r5, r6, lr}
 8008472:	2568      	movs	r5, #104	; 0x68
 8008474:	1e4a      	subs	r2, r1, #1
 8008476:	4355      	muls	r5, r2
 8008478:	000e      	movs	r6, r1
 800847a:	0029      	movs	r1, r5
 800847c:	3174      	adds	r1, #116	; 0x74
 800847e:	f7ff fa4f 	bl	8007920 <_malloc_r>
 8008482:	1e04      	subs	r4, r0, #0
 8008484:	d008      	beq.n	8008498 <__sfmoreglue+0x28>
 8008486:	2100      	movs	r1, #0
 8008488:	002a      	movs	r2, r5
 800848a:	6001      	str	r1, [r0, #0]
 800848c:	6046      	str	r6, [r0, #4]
 800848e:	300c      	adds	r0, #12
 8008490:	60a0      	str	r0, [r4, #8]
 8008492:	3268      	adds	r2, #104	; 0x68
 8008494:	f7fd fa80 	bl	8005998 <memset>
 8008498:	0020      	movs	r0, r4
 800849a:	bd70      	pop	{r4, r5, r6, pc}

0800849c <__sfp_lock_acquire>:
 800849c:	b510      	push	{r4, lr}
 800849e:	4802      	ldr	r0, [pc, #8]	; (80084a8 <__sfp_lock_acquire+0xc>)
 80084a0:	f000 f8bd 	bl	800861e <__retarget_lock_acquire_recursive>
 80084a4:	bd10      	pop	{r4, pc}
 80084a6:	46c0      	nop			; (mov r8, r8)
 80084a8:	20000465 	.word	0x20000465

080084ac <__sfp_lock_release>:
 80084ac:	b510      	push	{r4, lr}
 80084ae:	4802      	ldr	r0, [pc, #8]	; (80084b8 <__sfp_lock_release+0xc>)
 80084b0:	f000 f8b6 	bl	8008620 <__retarget_lock_release_recursive>
 80084b4:	bd10      	pop	{r4, pc}
 80084b6:	46c0      	nop			; (mov r8, r8)
 80084b8:	20000465 	.word	0x20000465

080084bc <__sinit_lock_acquire>:
 80084bc:	b510      	push	{r4, lr}
 80084be:	4802      	ldr	r0, [pc, #8]	; (80084c8 <__sinit_lock_acquire+0xc>)
 80084c0:	f000 f8ad 	bl	800861e <__retarget_lock_acquire_recursive>
 80084c4:	bd10      	pop	{r4, pc}
 80084c6:	46c0      	nop			; (mov r8, r8)
 80084c8:	20000466 	.word	0x20000466

080084cc <__sinit_lock_release>:
 80084cc:	b510      	push	{r4, lr}
 80084ce:	4802      	ldr	r0, [pc, #8]	; (80084d8 <__sinit_lock_release+0xc>)
 80084d0:	f000 f8a6 	bl	8008620 <__retarget_lock_release_recursive>
 80084d4:	bd10      	pop	{r4, pc}
 80084d6:	46c0      	nop			; (mov r8, r8)
 80084d8:	20000466 	.word	0x20000466

080084dc <__sinit>:
 80084dc:	b513      	push	{r0, r1, r4, lr}
 80084de:	0004      	movs	r4, r0
 80084e0:	f7ff ffec 	bl	80084bc <__sinit_lock_acquire>
 80084e4:	69a3      	ldr	r3, [r4, #24]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d002      	beq.n	80084f0 <__sinit+0x14>
 80084ea:	f7ff ffef 	bl	80084cc <__sinit_lock_release>
 80084ee:	bd13      	pop	{r0, r1, r4, pc}
 80084f0:	64a3      	str	r3, [r4, #72]	; 0x48
 80084f2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80084f4:	6523      	str	r3, [r4, #80]	; 0x50
 80084f6:	4b13      	ldr	r3, [pc, #76]	; (8008544 <__sinit+0x68>)
 80084f8:	4a13      	ldr	r2, [pc, #76]	; (8008548 <__sinit+0x6c>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80084fe:	9301      	str	r3, [sp, #4]
 8008500:	42a3      	cmp	r3, r4
 8008502:	d101      	bne.n	8008508 <__sinit+0x2c>
 8008504:	2301      	movs	r3, #1
 8008506:	61a3      	str	r3, [r4, #24]
 8008508:	0020      	movs	r0, r4
 800850a:	f000 f81f 	bl	800854c <__sfp>
 800850e:	6060      	str	r0, [r4, #4]
 8008510:	0020      	movs	r0, r4
 8008512:	f000 f81b 	bl	800854c <__sfp>
 8008516:	60a0      	str	r0, [r4, #8]
 8008518:	0020      	movs	r0, r4
 800851a:	f000 f817 	bl	800854c <__sfp>
 800851e:	2200      	movs	r2, #0
 8008520:	2104      	movs	r1, #4
 8008522:	60e0      	str	r0, [r4, #12]
 8008524:	6860      	ldr	r0, [r4, #4]
 8008526:	f7ff ff77 	bl	8008418 <std>
 800852a:	2201      	movs	r2, #1
 800852c:	2109      	movs	r1, #9
 800852e:	68a0      	ldr	r0, [r4, #8]
 8008530:	f7ff ff72 	bl	8008418 <std>
 8008534:	2202      	movs	r2, #2
 8008536:	2112      	movs	r1, #18
 8008538:	68e0      	ldr	r0, [r4, #12]
 800853a:	f7ff ff6d 	bl	8008418 <std>
 800853e:	2301      	movs	r3, #1
 8008540:	61a3      	str	r3, [r4, #24]
 8008542:	e7d2      	b.n	80084ea <__sinit+0xe>
 8008544:	08008d80 	.word	0x08008d80
 8008548:	08008461 	.word	0x08008461

0800854c <__sfp>:
 800854c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854e:	0007      	movs	r7, r0
 8008550:	f7ff ffa4 	bl	800849c <__sfp_lock_acquire>
 8008554:	4b1f      	ldr	r3, [pc, #124]	; (80085d4 <__sfp+0x88>)
 8008556:	681e      	ldr	r6, [r3, #0]
 8008558:	69b3      	ldr	r3, [r6, #24]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d102      	bne.n	8008564 <__sfp+0x18>
 800855e:	0030      	movs	r0, r6
 8008560:	f7ff ffbc 	bl	80084dc <__sinit>
 8008564:	3648      	adds	r6, #72	; 0x48
 8008566:	68b4      	ldr	r4, [r6, #8]
 8008568:	6873      	ldr	r3, [r6, #4]
 800856a:	3b01      	subs	r3, #1
 800856c:	d504      	bpl.n	8008578 <__sfp+0x2c>
 800856e:	6833      	ldr	r3, [r6, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d022      	beq.n	80085ba <__sfp+0x6e>
 8008574:	6836      	ldr	r6, [r6, #0]
 8008576:	e7f6      	b.n	8008566 <__sfp+0x1a>
 8008578:	220c      	movs	r2, #12
 800857a:	5ea5      	ldrsh	r5, [r4, r2]
 800857c:	2d00      	cmp	r5, #0
 800857e:	d11a      	bne.n	80085b6 <__sfp+0x6a>
 8008580:	0020      	movs	r0, r4
 8008582:	4b15      	ldr	r3, [pc, #84]	; (80085d8 <__sfp+0x8c>)
 8008584:	3058      	adds	r0, #88	; 0x58
 8008586:	60e3      	str	r3, [r4, #12]
 8008588:	6665      	str	r5, [r4, #100]	; 0x64
 800858a:	f000 f847 	bl	800861c <__retarget_lock_init_recursive>
 800858e:	f7ff ff8d 	bl	80084ac <__sfp_lock_release>
 8008592:	0020      	movs	r0, r4
 8008594:	2208      	movs	r2, #8
 8008596:	0029      	movs	r1, r5
 8008598:	6025      	str	r5, [r4, #0]
 800859a:	60a5      	str	r5, [r4, #8]
 800859c:	6065      	str	r5, [r4, #4]
 800859e:	6125      	str	r5, [r4, #16]
 80085a0:	6165      	str	r5, [r4, #20]
 80085a2:	61a5      	str	r5, [r4, #24]
 80085a4:	305c      	adds	r0, #92	; 0x5c
 80085a6:	f7fd f9f7 	bl	8005998 <memset>
 80085aa:	6365      	str	r5, [r4, #52]	; 0x34
 80085ac:	63a5      	str	r5, [r4, #56]	; 0x38
 80085ae:	64a5      	str	r5, [r4, #72]	; 0x48
 80085b0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80085b2:	0020      	movs	r0, r4
 80085b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085b6:	3468      	adds	r4, #104	; 0x68
 80085b8:	e7d7      	b.n	800856a <__sfp+0x1e>
 80085ba:	2104      	movs	r1, #4
 80085bc:	0038      	movs	r0, r7
 80085be:	f7ff ff57 	bl	8008470 <__sfmoreglue>
 80085c2:	1e04      	subs	r4, r0, #0
 80085c4:	6030      	str	r0, [r6, #0]
 80085c6:	d1d5      	bne.n	8008574 <__sfp+0x28>
 80085c8:	f7ff ff70 	bl	80084ac <__sfp_lock_release>
 80085cc:	230c      	movs	r3, #12
 80085ce:	603b      	str	r3, [r7, #0]
 80085d0:	e7ef      	b.n	80085b2 <__sfp+0x66>
 80085d2:	46c0      	nop			; (mov r8, r8)
 80085d4:	08008d80 	.word	0x08008d80
 80085d8:	ffff0001 	.word	0xffff0001

080085dc <_fwalk_reent>:
 80085dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085de:	0004      	movs	r4, r0
 80085e0:	0006      	movs	r6, r0
 80085e2:	2700      	movs	r7, #0
 80085e4:	9101      	str	r1, [sp, #4]
 80085e6:	3448      	adds	r4, #72	; 0x48
 80085e8:	6863      	ldr	r3, [r4, #4]
 80085ea:	68a5      	ldr	r5, [r4, #8]
 80085ec:	9300      	str	r3, [sp, #0]
 80085ee:	9b00      	ldr	r3, [sp, #0]
 80085f0:	3b01      	subs	r3, #1
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	d504      	bpl.n	8008600 <_fwalk_reent+0x24>
 80085f6:	6824      	ldr	r4, [r4, #0]
 80085f8:	2c00      	cmp	r4, #0
 80085fa:	d1f5      	bne.n	80085e8 <_fwalk_reent+0xc>
 80085fc:	0038      	movs	r0, r7
 80085fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008600:	89ab      	ldrh	r3, [r5, #12]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d908      	bls.n	8008618 <_fwalk_reent+0x3c>
 8008606:	220e      	movs	r2, #14
 8008608:	5eab      	ldrsh	r3, [r5, r2]
 800860a:	3301      	adds	r3, #1
 800860c:	d004      	beq.n	8008618 <_fwalk_reent+0x3c>
 800860e:	0029      	movs	r1, r5
 8008610:	0030      	movs	r0, r6
 8008612:	9b01      	ldr	r3, [sp, #4]
 8008614:	4798      	blx	r3
 8008616:	4307      	orrs	r7, r0
 8008618:	3568      	adds	r5, #104	; 0x68
 800861a:	e7e8      	b.n	80085ee <_fwalk_reent+0x12>

0800861c <__retarget_lock_init_recursive>:
 800861c:	4770      	bx	lr

0800861e <__retarget_lock_acquire_recursive>:
 800861e:	4770      	bx	lr

08008620 <__retarget_lock_release_recursive>:
 8008620:	4770      	bx	lr
	...

08008624 <__swhatbuf_r>:
 8008624:	b570      	push	{r4, r5, r6, lr}
 8008626:	000e      	movs	r6, r1
 8008628:	001d      	movs	r5, r3
 800862a:	230e      	movs	r3, #14
 800862c:	5ec9      	ldrsh	r1, [r1, r3]
 800862e:	0014      	movs	r4, r2
 8008630:	b096      	sub	sp, #88	; 0x58
 8008632:	2900      	cmp	r1, #0
 8008634:	da08      	bge.n	8008648 <__swhatbuf_r+0x24>
 8008636:	220c      	movs	r2, #12
 8008638:	5eb3      	ldrsh	r3, [r6, r2]
 800863a:	2200      	movs	r2, #0
 800863c:	602a      	str	r2, [r5, #0]
 800863e:	061b      	lsls	r3, r3, #24
 8008640:	d411      	bmi.n	8008666 <__swhatbuf_r+0x42>
 8008642:	2380      	movs	r3, #128	; 0x80
 8008644:	00db      	lsls	r3, r3, #3
 8008646:	e00f      	b.n	8008668 <__swhatbuf_r+0x44>
 8008648:	466a      	mov	r2, sp
 800864a:	f000 f91b 	bl	8008884 <_fstat_r>
 800864e:	2800      	cmp	r0, #0
 8008650:	dbf1      	blt.n	8008636 <__swhatbuf_r+0x12>
 8008652:	23f0      	movs	r3, #240	; 0xf0
 8008654:	9901      	ldr	r1, [sp, #4]
 8008656:	021b      	lsls	r3, r3, #8
 8008658:	4019      	ands	r1, r3
 800865a:	4b05      	ldr	r3, [pc, #20]	; (8008670 <__swhatbuf_r+0x4c>)
 800865c:	18c9      	adds	r1, r1, r3
 800865e:	424b      	negs	r3, r1
 8008660:	4159      	adcs	r1, r3
 8008662:	6029      	str	r1, [r5, #0]
 8008664:	e7ed      	b.n	8008642 <__swhatbuf_r+0x1e>
 8008666:	2340      	movs	r3, #64	; 0x40
 8008668:	2000      	movs	r0, #0
 800866a:	6023      	str	r3, [r4, #0]
 800866c:	b016      	add	sp, #88	; 0x58
 800866e:	bd70      	pop	{r4, r5, r6, pc}
 8008670:	ffffe000 	.word	0xffffe000

08008674 <__smakebuf_r>:
 8008674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008676:	2602      	movs	r6, #2
 8008678:	898b      	ldrh	r3, [r1, #12]
 800867a:	0005      	movs	r5, r0
 800867c:	000c      	movs	r4, r1
 800867e:	4233      	tst	r3, r6
 8008680:	d006      	beq.n	8008690 <__smakebuf_r+0x1c>
 8008682:	0023      	movs	r3, r4
 8008684:	3347      	adds	r3, #71	; 0x47
 8008686:	6023      	str	r3, [r4, #0]
 8008688:	6123      	str	r3, [r4, #16]
 800868a:	2301      	movs	r3, #1
 800868c:	6163      	str	r3, [r4, #20]
 800868e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008690:	466a      	mov	r2, sp
 8008692:	ab01      	add	r3, sp, #4
 8008694:	f7ff ffc6 	bl	8008624 <__swhatbuf_r>
 8008698:	9900      	ldr	r1, [sp, #0]
 800869a:	0007      	movs	r7, r0
 800869c:	0028      	movs	r0, r5
 800869e:	f7ff f93f 	bl	8007920 <_malloc_r>
 80086a2:	2800      	cmp	r0, #0
 80086a4:	d108      	bne.n	80086b8 <__smakebuf_r+0x44>
 80086a6:	220c      	movs	r2, #12
 80086a8:	5ea3      	ldrsh	r3, [r4, r2]
 80086aa:	059a      	lsls	r2, r3, #22
 80086ac:	d4ef      	bmi.n	800868e <__smakebuf_r+0x1a>
 80086ae:	2203      	movs	r2, #3
 80086b0:	4393      	bics	r3, r2
 80086b2:	431e      	orrs	r6, r3
 80086b4:	81a6      	strh	r6, [r4, #12]
 80086b6:	e7e4      	b.n	8008682 <__smakebuf_r+0xe>
 80086b8:	4b0f      	ldr	r3, [pc, #60]	; (80086f8 <__smakebuf_r+0x84>)
 80086ba:	62ab      	str	r3, [r5, #40]	; 0x28
 80086bc:	2380      	movs	r3, #128	; 0x80
 80086be:	89a2      	ldrh	r2, [r4, #12]
 80086c0:	6020      	str	r0, [r4, #0]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	81a3      	strh	r3, [r4, #12]
 80086c6:	9b00      	ldr	r3, [sp, #0]
 80086c8:	6120      	str	r0, [r4, #16]
 80086ca:	6163      	str	r3, [r4, #20]
 80086cc:	9b01      	ldr	r3, [sp, #4]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00d      	beq.n	80086ee <__smakebuf_r+0x7a>
 80086d2:	0028      	movs	r0, r5
 80086d4:	230e      	movs	r3, #14
 80086d6:	5ee1      	ldrsh	r1, [r4, r3]
 80086d8:	f000 f8e6 	bl	80088a8 <_isatty_r>
 80086dc:	2800      	cmp	r0, #0
 80086de:	d006      	beq.n	80086ee <__smakebuf_r+0x7a>
 80086e0:	2203      	movs	r2, #3
 80086e2:	89a3      	ldrh	r3, [r4, #12]
 80086e4:	4393      	bics	r3, r2
 80086e6:	001a      	movs	r2, r3
 80086e8:	2301      	movs	r3, #1
 80086ea:	4313      	orrs	r3, r2
 80086ec:	81a3      	strh	r3, [r4, #12]
 80086ee:	89a0      	ldrh	r0, [r4, #12]
 80086f0:	4307      	orrs	r7, r0
 80086f2:	81a7      	strh	r7, [r4, #12]
 80086f4:	e7cb      	b.n	800868e <__smakebuf_r+0x1a>
 80086f6:	46c0      	nop			; (mov r8, r8)
 80086f8:	08008461 	.word	0x08008461

080086fc <_malloc_usable_size_r>:
 80086fc:	1f0b      	subs	r3, r1, #4
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	1f18      	subs	r0, r3, #4
 8008702:	2b00      	cmp	r3, #0
 8008704:	da01      	bge.n	800870a <_malloc_usable_size_r+0xe>
 8008706:	580b      	ldr	r3, [r1, r0]
 8008708:	18c0      	adds	r0, r0, r3
 800870a:	4770      	bx	lr

0800870c <_raise_r>:
 800870c:	b570      	push	{r4, r5, r6, lr}
 800870e:	0004      	movs	r4, r0
 8008710:	000d      	movs	r5, r1
 8008712:	291f      	cmp	r1, #31
 8008714:	d904      	bls.n	8008720 <_raise_r+0x14>
 8008716:	2316      	movs	r3, #22
 8008718:	6003      	str	r3, [r0, #0]
 800871a:	2001      	movs	r0, #1
 800871c:	4240      	negs	r0, r0
 800871e:	bd70      	pop	{r4, r5, r6, pc}
 8008720:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008722:	2b00      	cmp	r3, #0
 8008724:	d004      	beq.n	8008730 <_raise_r+0x24>
 8008726:	008a      	lsls	r2, r1, #2
 8008728:	189b      	adds	r3, r3, r2
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	2a00      	cmp	r2, #0
 800872e:	d108      	bne.n	8008742 <_raise_r+0x36>
 8008730:	0020      	movs	r0, r4
 8008732:	f000 f831 	bl	8008798 <_getpid_r>
 8008736:	002a      	movs	r2, r5
 8008738:	0001      	movs	r1, r0
 800873a:	0020      	movs	r0, r4
 800873c:	f000 f81a 	bl	8008774 <_kill_r>
 8008740:	e7ed      	b.n	800871e <_raise_r+0x12>
 8008742:	2000      	movs	r0, #0
 8008744:	2a01      	cmp	r2, #1
 8008746:	d0ea      	beq.n	800871e <_raise_r+0x12>
 8008748:	1c51      	adds	r1, r2, #1
 800874a:	d103      	bne.n	8008754 <_raise_r+0x48>
 800874c:	2316      	movs	r3, #22
 800874e:	3001      	adds	r0, #1
 8008750:	6023      	str	r3, [r4, #0]
 8008752:	e7e4      	b.n	800871e <_raise_r+0x12>
 8008754:	2400      	movs	r4, #0
 8008756:	0028      	movs	r0, r5
 8008758:	601c      	str	r4, [r3, #0]
 800875a:	4790      	blx	r2
 800875c:	0020      	movs	r0, r4
 800875e:	e7de      	b.n	800871e <_raise_r+0x12>

08008760 <raise>:
 8008760:	b510      	push	{r4, lr}
 8008762:	4b03      	ldr	r3, [pc, #12]	; (8008770 <raise+0x10>)
 8008764:	0001      	movs	r1, r0
 8008766:	6818      	ldr	r0, [r3, #0]
 8008768:	f7ff ffd0 	bl	800870c <_raise_r>
 800876c:	bd10      	pop	{r4, pc}
 800876e:	46c0      	nop			; (mov r8, r8)
 8008770:	2000004c 	.word	0x2000004c

08008774 <_kill_r>:
 8008774:	2300      	movs	r3, #0
 8008776:	b570      	push	{r4, r5, r6, lr}
 8008778:	4d06      	ldr	r5, [pc, #24]	; (8008794 <_kill_r+0x20>)
 800877a:	0004      	movs	r4, r0
 800877c:	0008      	movs	r0, r1
 800877e:	0011      	movs	r1, r2
 8008780:	602b      	str	r3, [r5, #0]
 8008782:	f7fa f860 	bl	8002846 <_kill>
 8008786:	1c43      	adds	r3, r0, #1
 8008788:	d103      	bne.n	8008792 <_kill_r+0x1e>
 800878a:	682b      	ldr	r3, [r5, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d000      	beq.n	8008792 <_kill_r+0x1e>
 8008790:	6023      	str	r3, [r4, #0]
 8008792:	bd70      	pop	{r4, r5, r6, pc}
 8008794:	20000460 	.word	0x20000460

08008798 <_getpid_r>:
 8008798:	b510      	push	{r4, lr}
 800879a:	f7fa f84e 	bl	800283a <_getpid>
 800879e:	bd10      	pop	{r4, pc}

080087a0 <__sread>:
 80087a0:	b570      	push	{r4, r5, r6, lr}
 80087a2:	000c      	movs	r4, r1
 80087a4:	250e      	movs	r5, #14
 80087a6:	5f49      	ldrsh	r1, [r1, r5]
 80087a8:	f000 f8a4 	bl	80088f4 <_read_r>
 80087ac:	2800      	cmp	r0, #0
 80087ae:	db03      	blt.n	80087b8 <__sread+0x18>
 80087b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80087b2:	181b      	adds	r3, r3, r0
 80087b4:	6563      	str	r3, [r4, #84]	; 0x54
 80087b6:	bd70      	pop	{r4, r5, r6, pc}
 80087b8:	89a3      	ldrh	r3, [r4, #12]
 80087ba:	4a02      	ldr	r2, [pc, #8]	; (80087c4 <__sread+0x24>)
 80087bc:	4013      	ands	r3, r2
 80087be:	81a3      	strh	r3, [r4, #12]
 80087c0:	e7f9      	b.n	80087b6 <__sread+0x16>
 80087c2:	46c0      	nop			; (mov r8, r8)
 80087c4:	ffffefff 	.word	0xffffefff

080087c8 <__swrite>:
 80087c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ca:	001f      	movs	r7, r3
 80087cc:	898b      	ldrh	r3, [r1, #12]
 80087ce:	0005      	movs	r5, r0
 80087d0:	000c      	movs	r4, r1
 80087d2:	0016      	movs	r6, r2
 80087d4:	05db      	lsls	r3, r3, #23
 80087d6:	d505      	bpl.n	80087e4 <__swrite+0x1c>
 80087d8:	230e      	movs	r3, #14
 80087da:	5ec9      	ldrsh	r1, [r1, r3]
 80087dc:	2200      	movs	r2, #0
 80087de:	2302      	movs	r3, #2
 80087e0:	f000 f874 	bl	80088cc <_lseek_r>
 80087e4:	89a3      	ldrh	r3, [r4, #12]
 80087e6:	4a05      	ldr	r2, [pc, #20]	; (80087fc <__swrite+0x34>)
 80087e8:	0028      	movs	r0, r5
 80087ea:	4013      	ands	r3, r2
 80087ec:	81a3      	strh	r3, [r4, #12]
 80087ee:	0032      	movs	r2, r6
 80087f0:	230e      	movs	r3, #14
 80087f2:	5ee1      	ldrsh	r1, [r4, r3]
 80087f4:	003b      	movs	r3, r7
 80087f6:	f000 f81f 	bl	8008838 <_write_r>
 80087fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087fc:	ffffefff 	.word	0xffffefff

08008800 <__sseek>:
 8008800:	b570      	push	{r4, r5, r6, lr}
 8008802:	000c      	movs	r4, r1
 8008804:	250e      	movs	r5, #14
 8008806:	5f49      	ldrsh	r1, [r1, r5]
 8008808:	f000 f860 	bl	80088cc <_lseek_r>
 800880c:	89a3      	ldrh	r3, [r4, #12]
 800880e:	1c42      	adds	r2, r0, #1
 8008810:	d103      	bne.n	800881a <__sseek+0x1a>
 8008812:	4a05      	ldr	r2, [pc, #20]	; (8008828 <__sseek+0x28>)
 8008814:	4013      	ands	r3, r2
 8008816:	81a3      	strh	r3, [r4, #12]
 8008818:	bd70      	pop	{r4, r5, r6, pc}
 800881a:	2280      	movs	r2, #128	; 0x80
 800881c:	0152      	lsls	r2, r2, #5
 800881e:	4313      	orrs	r3, r2
 8008820:	81a3      	strh	r3, [r4, #12]
 8008822:	6560      	str	r0, [r4, #84]	; 0x54
 8008824:	e7f8      	b.n	8008818 <__sseek+0x18>
 8008826:	46c0      	nop			; (mov r8, r8)
 8008828:	ffffefff 	.word	0xffffefff

0800882c <__sclose>:
 800882c:	b510      	push	{r4, lr}
 800882e:	230e      	movs	r3, #14
 8008830:	5ec9      	ldrsh	r1, [r1, r3]
 8008832:	f000 f815 	bl	8008860 <_close_r>
 8008836:	bd10      	pop	{r4, pc}

08008838 <_write_r>:
 8008838:	b570      	push	{r4, r5, r6, lr}
 800883a:	0004      	movs	r4, r0
 800883c:	0008      	movs	r0, r1
 800883e:	0011      	movs	r1, r2
 8008840:	001a      	movs	r2, r3
 8008842:	2300      	movs	r3, #0
 8008844:	4d05      	ldr	r5, [pc, #20]	; (800885c <_write_r+0x24>)
 8008846:	602b      	str	r3, [r5, #0]
 8008848:	f7fa f836 	bl	80028b8 <_write>
 800884c:	1c43      	adds	r3, r0, #1
 800884e:	d103      	bne.n	8008858 <_write_r+0x20>
 8008850:	682b      	ldr	r3, [r5, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d000      	beq.n	8008858 <_write_r+0x20>
 8008856:	6023      	str	r3, [r4, #0]
 8008858:	bd70      	pop	{r4, r5, r6, pc}
 800885a:	46c0      	nop			; (mov r8, r8)
 800885c:	20000460 	.word	0x20000460

08008860 <_close_r>:
 8008860:	2300      	movs	r3, #0
 8008862:	b570      	push	{r4, r5, r6, lr}
 8008864:	4d06      	ldr	r5, [pc, #24]	; (8008880 <_close_r+0x20>)
 8008866:	0004      	movs	r4, r0
 8008868:	0008      	movs	r0, r1
 800886a:	602b      	str	r3, [r5, #0]
 800886c:	f7fa f840 	bl	80028f0 <_close>
 8008870:	1c43      	adds	r3, r0, #1
 8008872:	d103      	bne.n	800887c <_close_r+0x1c>
 8008874:	682b      	ldr	r3, [r5, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d000      	beq.n	800887c <_close_r+0x1c>
 800887a:	6023      	str	r3, [r4, #0]
 800887c:	bd70      	pop	{r4, r5, r6, pc}
 800887e:	46c0      	nop			; (mov r8, r8)
 8008880:	20000460 	.word	0x20000460

08008884 <_fstat_r>:
 8008884:	2300      	movs	r3, #0
 8008886:	b570      	push	{r4, r5, r6, lr}
 8008888:	4d06      	ldr	r5, [pc, #24]	; (80088a4 <_fstat_r+0x20>)
 800888a:	0004      	movs	r4, r0
 800888c:	0008      	movs	r0, r1
 800888e:	0011      	movs	r1, r2
 8008890:	602b      	str	r3, [r5, #0]
 8008892:	f7fa f837 	bl	8002904 <_fstat>
 8008896:	1c43      	adds	r3, r0, #1
 8008898:	d103      	bne.n	80088a2 <_fstat_r+0x1e>
 800889a:	682b      	ldr	r3, [r5, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d000      	beq.n	80088a2 <_fstat_r+0x1e>
 80088a0:	6023      	str	r3, [r4, #0]
 80088a2:	bd70      	pop	{r4, r5, r6, pc}
 80088a4:	20000460 	.word	0x20000460

080088a8 <_isatty_r>:
 80088a8:	2300      	movs	r3, #0
 80088aa:	b570      	push	{r4, r5, r6, lr}
 80088ac:	4d06      	ldr	r5, [pc, #24]	; (80088c8 <_isatty_r+0x20>)
 80088ae:	0004      	movs	r4, r0
 80088b0:	0008      	movs	r0, r1
 80088b2:	602b      	str	r3, [r5, #0]
 80088b4:	f7fa f834 	bl	8002920 <_isatty>
 80088b8:	1c43      	adds	r3, r0, #1
 80088ba:	d103      	bne.n	80088c4 <_isatty_r+0x1c>
 80088bc:	682b      	ldr	r3, [r5, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d000      	beq.n	80088c4 <_isatty_r+0x1c>
 80088c2:	6023      	str	r3, [r4, #0]
 80088c4:	bd70      	pop	{r4, r5, r6, pc}
 80088c6:	46c0      	nop			; (mov r8, r8)
 80088c8:	20000460 	.word	0x20000460

080088cc <_lseek_r>:
 80088cc:	b570      	push	{r4, r5, r6, lr}
 80088ce:	0004      	movs	r4, r0
 80088d0:	0008      	movs	r0, r1
 80088d2:	0011      	movs	r1, r2
 80088d4:	001a      	movs	r2, r3
 80088d6:	2300      	movs	r3, #0
 80088d8:	4d05      	ldr	r5, [pc, #20]	; (80088f0 <_lseek_r+0x24>)
 80088da:	602b      	str	r3, [r5, #0]
 80088dc:	f7fa f829 	bl	8002932 <_lseek>
 80088e0:	1c43      	adds	r3, r0, #1
 80088e2:	d103      	bne.n	80088ec <_lseek_r+0x20>
 80088e4:	682b      	ldr	r3, [r5, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d000      	beq.n	80088ec <_lseek_r+0x20>
 80088ea:	6023      	str	r3, [r4, #0]
 80088ec:	bd70      	pop	{r4, r5, r6, pc}
 80088ee:	46c0      	nop			; (mov r8, r8)
 80088f0:	20000460 	.word	0x20000460

080088f4 <_read_r>:
 80088f4:	b570      	push	{r4, r5, r6, lr}
 80088f6:	0004      	movs	r4, r0
 80088f8:	0008      	movs	r0, r1
 80088fa:	0011      	movs	r1, r2
 80088fc:	001a      	movs	r2, r3
 80088fe:	2300      	movs	r3, #0
 8008900:	4d05      	ldr	r5, [pc, #20]	; (8008918 <_read_r+0x24>)
 8008902:	602b      	str	r3, [r5, #0]
 8008904:	f7f9 ffbb 	bl	800287e <_read>
 8008908:	1c43      	adds	r3, r0, #1
 800890a:	d103      	bne.n	8008914 <_read_r+0x20>
 800890c:	682b      	ldr	r3, [r5, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d000      	beq.n	8008914 <_read_r+0x20>
 8008912:	6023      	str	r3, [r4, #0]
 8008914:	bd70      	pop	{r4, r5, r6, pc}
 8008916:	46c0      	nop			; (mov r8, r8)
 8008918:	20000460 	.word	0x20000460

0800891c <_init>:
 800891c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800891e:	46c0      	nop			; (mov r8, r8)
 8008920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008922:	bc08      	pop	{r3}
 8008924:	469e      	mov	lr, r3
 8008926:	4770      	bx	lr

08008928 <_fini>:
 8008928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800892a:	46c0      	nop			; (mov r8, r8)
 800892c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800892e:	bc08      	pop	{r3}
 8008930:	469e      	mov	lr, r3
 8008932:	4770      	bx	lr
